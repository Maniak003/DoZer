
STM32L412K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005294  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08005420  08005420  00015420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800546c  0800546c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800546c  0800546c  0001546c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005474  08005474  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005474  08005474  00015474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005478  08005478  00015478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800547c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001178  20000010  0800548c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001188  0800548c  00021188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129ae  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f26  00000000  00000000  000329ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011c0  00000000  00000000  00034918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010c8  00000000  00000000  00035ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c33d  00000000  00000000  00036ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d168  00000000  00000000  00052edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bccea  00000000  00000000  00060045  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011cd2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ca4  00000000  00000000  0011cdac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005408 	.word	0x08005408

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08005408 	.word	0x08005408

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08e      	sub	sp, #56	; 0x38
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fcce 	bl	8000e72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f937 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 fa93 	bl	8000a04 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004de:	f000 f98f 	bl	8000800 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80004e2:	f000 fa5f 	bl	80009a4 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 80004e6:	f000 fa03 	bl	80008f0 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80004ea:	217f      	movs	r1, #127	; 0x7f
 80004ec:	488b      	ldr	r0, [pc, #556]	; (800071c <main+0x250>)
 80004ee:	f002 f94c 	bl	800278a <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int j = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t btCommand[10];
  uint8_t prefix[3] = {'<', 'B', '>'};
 80004f6:	4a8a      	ldr	r2, [pc, #552]	; (8000720 <main+0x254>)
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	6812      	ldr	r2, [r2, #0]
 80004fc:	4611      	mov	r1, r2
 80004fe:	8019      	strh	r1, [r3, #0]
 8000500:	3302      	adds	r3, #2
 8000502:	0c12      	lsrs	r2, r2, #16
 8000504:	701a      	strb	r2, [r3, #0]
  uint8_t lowSpectr, highSpectr;
  #ifdef DISPLAY_ENABLE
  ssd1306_Init();
  #endif
  //uint16_t tmpData;
  uint32_t initDelay, oldTimeAll, oldTime = HAL_GetTick();
 8000506:	f000 fd1d 	bl	8000f44 <HAL_GetTick>
 800050a:	61f8      	str	r0, [r7, #28]
  initDelay = oldTime;
 800050c:	69fb      	ldr	r3, [r7, #28]
 800050e:	61bb      	str	r3, [r7, #24]
  oldTimeAll = oldTime;
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	633b      	str	r3, [r7, #48]	; 0x30
  counterCC = 0;
 8000514:	4b83      	ldr	r3, [pc, #524]	; (8000724 <main+0x258>)
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_SET); // LED on.
 800051a:	2201      	movs	r2, #1
 800051c:	2108      	movs	r1, #8
 800051e:	4882      	ldr	r0, [pc, #520]	; (8000728 <main+0x25c>)
 8000520:	f002 fd02 	bl	8002f28 <HAL_GPIO_WritePin>
  __HAL_TIM_CLEAR_FLAG(&htim15, TIM_SR_UIF); // Clear flags
 8000524:	4b81      	ldr	r3, [pc, #516]	; (800072c <main+0x260>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f06f 0201 	mvn.w	r2, #1
 800052c:	611a      	str	r2, [r3, #16]
  //__HAL_TIM_CLEAR_FLAG(&htim15, TIM_EGR_BG);
  //__HAL_TIM_CLEAR_FLAG(&htim15, TIM_EGR_COMG);
  //__HAL_TIM_CLEAR_FLAG(&htim15, TIM_EGR_CC2G);
  //__HAL_TIM_CLEAR_FLAG(&htim15, TIM_EGR_CC1G);
  //HAL_TIM_Base_Stop_IT(&htim15);
  HAL_TIM_Base_Start_IT(&htim15); // Start timer for turn off LED
 800052e:	487f      	ldr	r0, [pc, #508]	; (800072c <main+0x260>)
 8000530:	f003 fdbe 	bl	80040b0 <HAL_TIM_Base_Start_IT>
	  counterCC = 0;
	  oldTime = HAL_GetTick();
	  ssd1306_SetCursor(0, 0);
	  ssd1306_WriteString(counterPP, Font_6x8, 0x01);
	#endif
	  int ttt, max = 1;
 8000534:	2301      	movs	r3, #1
 8000536:	62fb      	str	r3, [r7, #44]	; 0x2c
	  for ( int i = 2; i < 2050; i++) {
 8000538:	2302      	movs	r3, #2
 800053a:	62bb      	str	r3, [r7, #40]	; 0x28
 800053c:	e018      	b.n	8000570 <main+0xa4>
		  ttt = spectrData[i];
 800053e:	4a7c      	ldr	r2, [pc, #496]	; (8000730 <main+0x264>)
 8000540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000546:	617b      	str	r3, [r7, #20]
		  if ((float) ttt > max)
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	ee07 3a90 	vmov	s15, r3
 800054e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000554:	ee07 3a90 	vmov	s15, r3
 8000558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800055c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000564:	dd01      	ble.n	800056a <main+0x9e>
			  max = ttt;
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	62fb      	str	r3, [r7, #44]	; 0x2c
	  for ( int i = 2; i < 2050; i++) {
 800056a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800056c:	3301      	adds	r3, #1
 800056e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000572:	f640 0201 	movw	r2, #2049	; 0x801
 8000576:	4293      	cmp	r3, r2
 8000578:	dde1      	ble.n	800053e <main+0x72>
	  */
	#ifdef DISPLAY_ENABLE
	  ssd1306_UpdateScreen();
	#endif
	  // Delay after on.
	  if (initFlag && (HAL_GetTick() - initDelay > INIT_TIME)) {
 800057a:	4b6e      	ldr	r3, [pc, #440]	; (8000734 <main+0x268>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d010      	beq.n	80005a4 <main+0xd8>
 8000582:	f000 fcdf 	bl	8000f44 <HAL_GetTick>
 8000586:	4602      	mov	r2, r0
 8000588:	69bb      	ldr	r3, [r7, #24]
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000590:	d908      	bls.n	80005a4 <main+0xd8>
		  initFlag = 0;
 8000592:	4b68      	ldr	r3, [pc, #416]	; (8000734 <main+0x268>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_IT(&hadc1);  // Init ADC.
 8000598:	4860      	ldr	r0, [pc, #384]	; (800071c <main+0x250>)
 800059a:	f001 f87f 	bl	800169c <HAL_ADC_Start_IT>
		  oldTimeAll = HAL_GetTick();
 800059e:	f000 fcd1 	bl	8000f44 <HAL_GetTick>
 80005a2:	6338      	str	r0, [r7, #48]	; 0x30
	  }
	  /* Status JDY-23, BT connected ? */
	#ifdef DISPLAY_ENABLE
	  ssd1306_SetCursor(0, 24);
	#endif
	  if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == 1 ) {
 80005a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ac:	f002 fca4 	bl	8002ef8 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	f040 80ad 	bne.w	8000712 <main+0x246>
	#ifdef DISPLAY_ENABLE
		  ssd1306_WriteString("BT: connect   ", Font_6x8, 0x01);
	#endif
		  // Control from BT
		  if(HAL_UART_Receive(&huart1, btCommand, 1, 10) == HAL_OK) {
 80005b8:	f107 0108 	add.w	r1, r7, #8
 80005bc:	230a      	movs	r3, #10
 80005be:	2201      	movs	r2, #1
 80005c0:	485d      	ldr	r0, [pc, #372]	; (8000738 <main+0x26c>)
 80005c2:	f004 fa90 	bl	8004ae6 <HAL_UART_Receive>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d118      	bne.n	80005fe <main+0x132>
			  if ( btCommand[0] == 'C' ) { // Clear all measurement.
 80005cc:	7a3b      	ldrb	r3, [r7, #8]
 80005ce:	2b43      	cmp	r3, #67	; 0x43
 80005d0:	d115      	bne.n	80005fe <main+0x132>
				  for (int i = 0; i < 2050; i++) {
 80005d2:	2300      	movs	r3, #0
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
 80005d6:	e007      	b.n	80005e8 <main+0x11c>
					  spectrData[i] = 0;
 80005d8:	4a55      	ldr	r2, [pc, #340]	; (8000730 <main+0x264>)
 80005da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005dc:	2100      	movs	r1, #0
 80005de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  for (int i = 0; i < 2050; i++) {
 80005e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e4:	3301      	adds	r3, #1
 80005e6:	627b      	str	r3, [r7, #36]	; 0x24
 80005e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ea:	f640 0201 	movw	r2, #2049	; 0x801
 80005ee:	4293      	cmp	r3, r2
 80005f0:	ddf2      	ble.n	80005d8 <main+0x10c>
				  }
				  oldTimeAll = HAL_GetTick();
 80005f2:	f000 fca7 	bl	8000f44 <HAL_GetTick>
 80005f6:	6338      	str	r0, [r7, #48]	; 0x30
				  counterALL = 0;
 80005f8:	4b50      	ldr	r3, [pc, #320]	; (800073c <main+0x270>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
			  }
		  }

		  j = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	637b      	str	r3, [r7, #52]	; 0x34
		  // Transmit data over BT.
		  HAL_UART_Transmit(&huart1, prefix, 3, 1000); // Start sequence.
 8000602:	1d39      	adds	r1, r7, #4
 8000604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000608:	2203      	movs	r2, #3
 800060a:	484b      	ldr	r0, [pc, #300]	; (8000738 <main+0x26c>)
 800060c:	f004 f9d8 	bl	80049c0 <HAL_UART_Transmit>
		  spectrData[0] = (uint16_t) ((HAL_GetTick() - oldTimeAll) / 1000); // Specter collection time.
 8000610:	f000 fc98 	bl	8000f44 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	4a49      	ldr	r2, [pc, #292]	; (8000740 <main+0x274>)
 800061c:	fba2 2303 	umull	r2, r3, r2, r3
 8000620:	099b      	lsrs	r3, r3, #6
 8000622:	b29a      	uxth	r2, r3
 8000624:	4b42      	ldr	r3, [pc, #264]	; (8000730 <main+0x264>)
 8000626:	801a      	strh	r2, [r3, #0]
		  spectrData[1] = (uint16_t) (((HAL_GetTick() - oldTimeAll) / 1000) >> 16);
 8000628:	f000 fc8c 	bl	8000f44 <HAL_GetTick>
 800062c:	4602      	mov	r2, r0
 800062e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	4a43      	ldr	r2, [pc, #268]	; (8000740 <main+0x274>)
 8000634:	fba2 2303 	umull	r2, r3, r2, r3
 8000638:	099b      	lsrs	r3, r3, #6
 800063a:	0c1b      	lsrs	r3, r3, #16
 800063c:	b29a      	uxth	r2, r3
 800063e:	4b3c      	ldr	r3, [pc, #240]	; (8000730 <main+0x264>)
 8000640:	805a      	strh	r2, [r3, #2]
		  spectrData[2] = (uint16_t) (counterALL & 0xFFFF);
 8000642:	4b3e      	ldr	r3, [pc, #248]	; (800073c <main+0x270>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b39      	ldr	r3, [pc, #228]	; (8000730 <main+0x264>)
 800064a:	809a      	strh	r2, [r3, #4]
		  spectrData[3] = (uint16_t) (counterALL >> 16);
 800064c:	4b3b      	ldr	r3, [pc, #236]	; (800073c <main+0x270>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	0c1b      	lsrs	r3, r3, #16
 8000652:	b29a      	uxth	r2, r3
 8000654:	4b36      	ldr	r3, [pc, #216]	; (8000730 <main+0x264>)
 8000656:	80da      	strh	r2, [r3, #6]
		  spectrCRC = 0;
 8000658:	4b3a      	ldr	r3, [pc, #232]	; (8000744 <main+0x278>)
 800065a:	2200      	movs	r2, #0
 800065c:	801a      	strh	r2, [r3, #0]
		  HAL_Delay(TRANSMIT_DALAY);  // Increase time delay if transmit error.
 800065e:	2014      	movs	r0, #20
 8000660:	f000 fc7c 	bl	8000f5c <HAL_Delay>
		  for ( int i = 0; i < 1040; i++) {
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
 8000668:	e034      	b.n	80006d4 <main+0x208>
			  lowSpectr = spectrData[i] & 0xFF;
 800066a:	4a31      	ldr	r2, [pc, #196]	; (8000730 <main+0x264>)
 800066c:	6a3b      	ldr	r3, [r7, #32]
 800066e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	70fb      	strb	r3, [r7, #3]
			  highSpectr = (spectrData[i] & 0xFF00) >> 8;
 8000676:	4a2e      	ldr	r2, [pc, #184]	; (8000730 <main+0x264>)
 8000678:	6a3b      	ldr	r3, [r7, #32]
 800067a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800067e:	0a1b      	lsrs	r3, r3, #8
 8000680:	b29b      	uxth	r3, r3
 8000682:	b2db      	uxtb	r3, r3
 8000684:	70bb      	strb	r3, [r7, #2]
			  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8000686:	78fb      	ldrb	r3, [r7, #3]
 8000688:	b29a      	uxth	r2, r3
 800068a:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <main+0x278>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	4413      	add	r3, r2
 8000690:	b29a      	uxth	r2, r3
 8000692:	78bb      	ldrb	r3, [r7, #2]
 8000694:	b29b      	uxth	r3, r3
 8000696:	4413      	add	r3, r2
 8000698:	b29a      	uxth	r2, r3
 800069a:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <main+0x278>)
 800069c:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 800069e:	1cb9      	adds	r1, r7, #2
 80006a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a4:	2201      	movs	r2, #1
 80006a6:	4824      	ldr	r0, [pc, #144]	; (8000738 <main+0x26c>)
 80006a8:	f004 f98a 	bl	80049c0 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 80006ac:	1cf9      	adds	r1, r7, #3
 80006ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b2:	2201      	movs	r2, #1
 80006b4:	4820      	ldr	r0, [pc, #128]	; (8000738 <main+0x26c>)
 80006b6:	f004 f983 	bl	80049c0 <HAL_UART_Transmit>
			  if ( j++ >= 9) {
 80006ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	637a      	str	r2, [r7, #52]	; 0x34
 80006c0:	2b08      	cmp	r3, #8
 80006c2:	dd04      	ble.n	80006ce <main+0x202>
				  HAL_Delay(TRANSMIT_DALAY);  // Increase time delay if transmit error.
 80006c4:	2014      	movs	r0, #20
 80006c6:	f000 fc49 	bl	8000f5c <HAL_Delay>
				  j = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	637b      	str	r3, [r7, #52]	; 0x34
		  for ( int i = 0; i < 1040; i++) {
 80006ce:	6a3b      	ldr	r3, [r7, #32]
 80006d0:	3301      	adds	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
 80006d4:	6a3b      	ldr	r3, [r7, #32]
 80006d6:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80006da:	dbc6      	blt.n	800066a <main+0x19e>
			  }
		  }
		  /* Transmit CRC */
		  HAL_Delay(TRANSMIT_DALAY);
 80006dc:	2014      	movs	r0, #20
 80006de:	f000 fc3d 	bl	8000f5c <HAL_Delay>
		  lowSpectr = spectrCRC & 0xFF;
 80006e2:	4b18      	ldr	r3, [pc, #96]	; (8000744 <main+0x278>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	70fb      	strb	r3, [r7, #3]
		  highSpectr = (spectrCRC & 0xFF00) >> 8;
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <main+0x278>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	0a1b      	lsrs	r3, r3, #8
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	70bb      	strb	r3, [r7, #2]
		  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 80006f6:	1cb9      	adds	r1, r7, #2
 80006f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fc:	2201      	movs	r2, #1
 80006fe:	480e      	ldr	r0, [pc, #56]	; (8000738 <main+0x26c>)
 8000700:	f004 f95e 	bl	80049c0 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8000704:	1cf9      	adds	r1, r7, #3
 8000706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070a:	2201      	movs	r2, #1
 800070c:	480a      	ldr	r0, [pc, #40]	; (8000738 <main+0x26c>)
 800070e:	f004 f957 	bl	80049c0 <HAL_UART_Transmit>
	#ifdef DISPLAY_ENABLE
		  HAL_Delay(500);
		  ssd1306_WriteString("BT: disconnect", Font_6x8, 0x01);
	#endif
	  }
	  HAL_Delay(500);
 8000712:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000716:	f000 fc21 	bl	8000f5c <HAL_Delay>
  {
 800071a:	e70b      	b.n	8000534 <main+0x68>
 800071c:	2000109c 	.word	0x2000109c
 8000720:	08005420 	.word	0x08005420
 8000724:	2000002c 	.word	0x2000002c
 8000728:	48000400 	.word	0x48000400
 800072c:	2000103c 	.word	0x2000103c
 8000730:	20000038 	.word	0x20000038
 8000734:	20000000 	.word	0x20000000
 8000738:	20001100 	.word	0x20001100
 800073c:	20000030 	.word	0x20000030
 8000740:	10624dd3 	.word	0x10624dd3
 8000744:	20001180 	.word	0x20001180

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b0a4      	sub	sp, #144	; 0x90
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000752:	2244      	movs	r2, #68	; 0x44
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f004 fe4e 	bl	80053f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2234      	movs	r2, #52	; 0x34
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f004 fe40 	bl	80053f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000778:	f44f 7000 	mov.w	r0, #512	; 0x200
 800077c:	f002 fbfa 	bl	8002f74 <HAL_PWREx_ControlVoltageScaling>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000786:	f000 f999 	bl	8000abc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800078a:	2310      	movs	r3, #16
 800078c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800078e:	2301      	movs	r3, #1
 8000790:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8000796:	2380      	movs	r3, #128	; 0x80
 8000798:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800079a:	2300      	movs	r3, #0
 800079c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fc3c 	bl	8003020 <HAL_RCC_OscConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80007ae:	f000 f985 	bl	8000abc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	230f      	movs	r3, #15
 80007b4:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007b6:	2300      	movs	r3, #0
 80007b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 80007ba:	23b0      	movs	r3, #176	; 0xb0
 80007bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 f88d 	bl	80038ec <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007d8:	f000 f970 	bl	8000abc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 80007dc:	f244 0301 	movw	r3, #16385	; 0x4001
 80007e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80007e2:	2301      	movs	r3, #1
 80007e4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 fa83 	bl	8003cf4 <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80007f4:	f000 f962 	bl	8000abc <Error_Handler>
  }
}
 80007f8:	bf00      	nop
 80007fa:	3790      	adds	r7, #144	; 0x90
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
 8000820:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000822:	4b30      	ldr	r3, [pc, #192]	; (80008e4 <MX_ADC1_Init+0xe4>)
 8000824:	4a30      	ldr	r2, [pc, #192]	; (80008e8 <MX_ADC1_Init+0xe8>)
 8000826:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000828:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <MX_ADC1_Init+0xe4>)
 800082a:	2200      	movs	r2, #0
 800082c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800082e:	4b2d      	ldr	r3, [pc, #180]	; (80008e4 <MX_ADC1_Init+0xe4>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <MX_ADC1_Init+0xe4>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800083a:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <MX_ADC1_Init+0xe4>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000840:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <MX_ADC1_Init+0xe4>)
 8000842:	2204      	movs	r2, #4
 8000844:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000846:	4b27      	ldr	r3, [pc, #156]	; (80008e4 <MX_ADC1_Init+0xe4>)
 8000848:	2201      	movs	r2, #1
 800084a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800084c:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <MX_ADC1_Init+0xe4>)
 800084e:	2200      	movs	r2, #0
 8000850:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000852:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <MX_ADC1_Init+0xe4>)
 8000854:	2201      	movs	r2, #1
 8000856:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000858:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <MX_ADC1_Init+0xe4>)
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8000860:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <MX_ADC1_Init+0xe4>)
 8000862:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000868:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <MX_ADC1_Init+0xe4>)
 800086a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000870:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_ADC1_Init+0xe4>)
 8000872:	2200      	movs	r2, #0
 8000874:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_ADC1_Init+0xe4>)
 800087a:	2200      	movs	r2, #0
 800087c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_ADC1_Init+0xe4>)
 8000880:	2200      	movs	r2, #0
 8000882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000886:	4817      	ldr	r0, [pc, #92]	; (80008e4 <MX_ADC1_Init+0xe4>)
 8000888:	f000 fdba 	bl	8001400 <HAL_ADC_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000892:	f000 f913 	bl	8000abc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4810      	ldr	r0, [pc, #64]	; (80008e4 <MX_ADC1_Init+0xe4>)
 80008a2:	f002 f805 	bl	80028b0 <HAL_ADCEx_MultiModeConfigChannel>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80008ac:	f000 f906 	bl	8000abc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_ADC1_Init+0xec>)
 80008b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008b4:	2306      	movs	r3, #6
 80008b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008bc:	237f      	movs	r3, #127	; 0x7f
 80008be:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008c0:	2304      	movs	r3, #4
 80008c2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_ADC1_Init+0xe4>)
 80008ce:	f001 fa5d 	bl	8001d8c <HAL_ADC_ConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80008d8:	f000 f8f0 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	; 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000109c 	.word	0x2000109c
 80008e8:	50040000 	.word	0x50040000
 80008ec:	43210000 	.word	0x43210000

080008f0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0310 	add.w	r3, r7, #16
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800090e:	4b23      	ldr	r3, [pc, #140]	; (800099c <MX_TIM15_Init+0xac>)
 8000910:	4a23      	ldr	r2, [pc, #140]	; (80009a0 <MX_TIM15_Init+0xb0>)
 8000912:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000914:	4b21      	ldr	r3, [pc, #132]	; (800099c <MX_TIM15_Init+0xac>)
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b20      	ldr	r3, [pc, #128]	; (800099c <MX_TIM15_Init+0xac>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 500;
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <MX_TIM15_Init+0xac>)
 8000922:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000926:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <MX_TIM15_Init+0xac>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800092e:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_TIM15_Init+0xac>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <MX_TIM15_Init+0xac>)
 8000936:	2280      	movs	r2, #128	; 0x80
 8000938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800093a:	4818      	ldr	r0, [pc, #96]	; (800099c <MX_TIM15_Init+0xac>)
 800093c:	f003 fb60 	bl	8004000 <HAL_TIM_Base_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000946:	f000 f8b9 	bl	8000abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4619      	mov	r1, r3
 8000956:	4811      	ldr	r0, [pc, #68]	; (800099c <MX_TIM15_Init+0xac>)
 8000958:	f003 fd77 	bl	800444a <HAL_TIM_ConfigClockSource>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000962:	f000 f8ab 	bl	8000abc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim15, TIM_OPMODE_SINGLE) != HAL_OK)
 8000966:	2108      	movs	r1, #8
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <MX_TIM15_Init+0xac>)
 800096a:	f003 fbf5 	bl	8004158 <HAL_TIM_OnePulse_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM15_Init+0x88>
  {
    Error_Handler();
 8000974:	f000 f8a2 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000978:	2320      	movs	r3, #32
 800097a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_TIM15_Init+0xac>)
 8000986:	f003 ff49 	bl	800481c <HAL_TIMEx_MasterConfigSynchronization>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8000990:	f000 f894 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */
  /* USER CODE END TIM15_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000103c 	.word	0x2000103c
 80009a0:	40014000 	.word	0x40014000

080009a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009aa:	4a15      	ldr	r2, [pc, #84]	; (8000a00 <MX_USART1_UART_Init+0x5c>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009e8:	f003 ff9c 	bl	8004924 <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009f2:	f000 f863 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20001100 	.word	0x20001100
 8000a00:	40013800 	.word	0x40013800

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <MX_GPIO_Init+0xac>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	4a24      	ldr	r2, [pc, #144]	; (8000ab0 <MX_GPIO_Init+0xac>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a26:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <MX_GPIO_Init+0xac>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_GPIO_Init+0xac>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a1e      	ldr	r2, [pc, #120]	; (8000ab0 <MX_GPIO_Init+0xac>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_GPIO_Init+0xac>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2108      	movs	r1, #8
 8000a4e:	4819      	ldr	r0, [pc, #100]	; (8000ab4 <MX_GPIO_Init+0xb0>)
 8000a50:	f002 fa6a 	bl	8002f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_GPIO_Init+0xb4>)
 8000a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4619      	mov	r1, r3
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6c:	f002 f8d2 	bl	8002c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4619      	mov	r1, r3
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a88:	f002 f8c4 	bl	8002c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a8c:	2308      	movs	r3, #8
 8000a8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_GPIO_Init+0xb0>)
 8000aa4:	f002 f8b6 	bl	8002c14 <HAL_GPIO_Init>

}
 8000aa8:	bf00      	nop
 8000aaa:	3720      	adds	r7, #32
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000400 	.word	0x48000400
 8000ab8:	10110000 	.word	0x10110000

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
	...

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_MspInit+0x44>)
 8000ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <HAL_MspInit+0x44>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_MspInit+0x44>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_MspInit+0x44>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_MspInit+0x44>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	6593      	str	r3, [r2, #88]	; 0x58
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_MspInit+0x44>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40021000 	.word	0x40021000

08000b14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_ADC_MspInit+0x84>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d12b      	bne.n	8000b8e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <HAL_ADC_MspInit+0x88>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a18      	ldr	r2, [pc, #96]	; (8000b9c <HAL_ADC_MspInit+0x88>)
 8000b3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <HAL_ADC_MspInit+0x88>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <HAL_ADC_MspInit+0x88>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <HAL_ADC_MspInit+0x88>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <HAL_ADC_MspInit+0x88>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b66:	2302      	movs	r3, #2
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b6a:	230b      	movs	r3, #11
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4809      	ldr	r0, [pc, #36]	; (8000ba0 <HAL_ADC_MspInit+0x8c>)
 8000b7a:	f002 f84b 	bl	8002c14 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	2012      	movs	r0, #18
 8000b84:	f002 f80f 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b88:	2012      	movs	r0, #18
 8000b8a:	f002 f828 	bl	8002bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	50040000 	.word	0x50040000
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	48000400 	.word	0x48000400

08000ba4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <HAL_TIM_Base_MspInit+0x44>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d113      	bne.n	8000bde <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <HAL_TIM_Base_MspInit+0x48>)
 8000bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bba:	4a0c      	ldr	r2, [pc, #48]	; (8000bec <HAL_TIM_Base_MspInit+0x48>)
 8000bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_TIM_Base_MspInit+0x48>)
 8000bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2018      	movs	r0, #24
 8000bd4:	f001 ffe7 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000bd8:	2018      	movs	r0, #24
 8000bda:	f002 f800 	bl	8002bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40014000 	.word	0x40014000
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a18      	ldr	r2, [pc, #96]	; (8000c70 <HAL_UART_MspInit+0x80>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d129      	bne.n	8000c66 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_UART_MspInit+0x84>)
 8000c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c16:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <HAL_UART_MspInit+0x84>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_UART_MspInit+0x84>)
 8000c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_UART_MspInit+0x84>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <HAL_UART_MspInit+0x84>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_UART_MspInit+0x84>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c62:	f001 ffd7 	bl	8002c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40013800 	.word	0x40013800
 8000c74:	40021000 	.word	0x40021000

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <MemManage_Handler+0x4>

08000c92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <UsageFault_Handler+0x4>

08000c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ccc:	f000 f926 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	if( __HAL_ADC_GET_FLAG(&hadc1, EOC_SINGLE_CONV) != RESET) {
 8000cd8:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <ADC1_2_IRQHandler+0xa4>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	d143      	bne.n	8000d6e <ADC1_2_IRQHandler+0x9a>
	  adcResult = HAL_ADC_GetValue(&hadc1);
 8000ce6:	4824      	ldr	r0, [pc, #144]	; (8000d78 <ADC1_2_IRQHandler+0xa4>)
 8000ce8:	f000 fe0a 	bl	8001900 <HAL_ADC_GetValue>
 8000cec:	4603      	mov	r3, r0
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <ADC1_2_IRQHandler+0xa8>)
 8000cf2:	801a      	strh	r2, [r3, #0]
	  if (adcResult > 0) {
 8000cf4:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <ADC1_2_IRQHandler+0xa8>)
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d038      	beq.n	8000d6e <ADC1_2_IRQHandler+0x9a>
		  adcResult = adcResult & 0x0FFF;
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <ADC1_2_IRQHandler+0xa8>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <ADC1_2_IRQHandler+0xa8>)
 8000d08:	801a      	strh	r2, [r3, #0]
		  adcResult = adcResult >> 2;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <ADC1_2_IRQHandler+0xa8>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	089b      	lsrs	r3, r3, #2
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <ADC1_2_IRQHandler+0xa8>)
 8000d14:	801a      	strh	r2, [r3, #0]
		  adcResult = adcResult + 4; // Reserved additional parameter in send buffer ( 4 bytes )
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <ADC1_2_IRQHandler+0xa8>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	3304      	adds	r3, #4
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <ADC1_2_IRQHandler+0xa8>)
 8000d20:	801a      	strh	r2, [r3, #0]
		  if (spectrData[adcResult] < 0xFFFF) // Check overflow in channel.
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <ADC1_2_IRQHandler+0xa8>)
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <ADC1_2_IRQHandler+0xac>)
 8000d2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d009      	beq.n	8000d4a <ADC1_2_IRQHandler+0x76>
			  spectrData[adcResult]++;
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <ADC1_2_IRQHandler+0xa8>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	4a11      	ldr	r2, [pc, #68]	; (8000d80 <ADC1_2_IRQHandler+0xac>)
 8000d3c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d40:	3201      	adds	r2, #1
 8000d42:	b291      	uxth	r1, r2
 8000d44:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <ADC1_2_IRQHandler+0xac>)
 8000d46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  counterCC++;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <ADC1_2_IRQHandler+0xb0>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <ADC1_2_IRQHandler+0xb0>)
 8000d52:	6013      	str	r3, [r2, #0]
		  counterALL++;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <ADC1_2_IRQHandler+0xb4>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <ADC1_2_IRQHandler+0xb4>)
 8000d5c:	6013      	str	r3, [r2, #0]
		#ifdef LED_PULSE_ENABLE
		  HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_SET); // LED on.
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2108      	movs	r1, #8
 8000d62:	480a      	ldr	r0, [pc, #40]	; (8000d8c <ADC1_2_IRQHandler+0xb8>)
 8000d64:	f002 f8e0 	bl	8002f28 <HAL_GPIO_WritePin>
		  //__HAL_TIM_CLEAR_FLAG(&htim15, TIM_SR_UIF); // очищаем флаг
		  //HAL_TIM_Base_Stop_IT(&htim15);
		  HAL_TIM_Base_Start_IT(&htim15); // Start timer for turn off LED.
 8000d68:	4809      	ldr	r0, [pc, #36]	; (8000d90 <ADC1_2_IRQHandler+0xbc>)
 8000d6a:	f003 f9a1 	bl	80040b0 <HAL_TIM_Base_Start_IT>
		#endif
	  }
	}
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d6e:	4802      	ldr	r0, [pc, #8]	; (8000d78 <ADC1_2_IRQHandler+0xa4>)
 8000d70:	f000 fdd4 	bl	800191c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	2000109c 	.word	0x2000109c
 8000d7c:	20000034 	.word	0x20000034
 8000d80:	20000038 	.word	0x20000038
 8000d84:	2000002c 	.word	0x2000002c
 8000d88:	20000030 	.word	0x20000030
 8000d8c:	48000400 	.word	0x48000400
 8000d90:	2000103c 	.word	0x2000103c

08000d94 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	//HAL_GPIO_TogglePin(GPIOB, LED_PIN);
	//if (__HAL_TIM_GET_FLAG(&htim15, TIM_SR_UIF) != RESET) {
		HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_RESET); // LED off.
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2108      	movs	r1, #8
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8000d9e:	f002 f8c3 	bl	8002f28 <HAL_GPIO_WritePin>
	//}

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8000da2:	4803      	ldr	r0, [pc, #12]	; (8000db0 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8000da4:	f003 fa32 	bl	800420c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	48000400 	.word	0x48000400
 8000db0:	2000103c 	.word	0x2000103c

08000db4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db8:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <SystemInit+0x64>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dbe:	4a16      	ldr	r2, [pc, #88]	; (8000e18 <SystemInit+0x64>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <SystemInit+0x68>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <SystemInit+0x68>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <SystemInit+0x68>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <SystemInit+0x68>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a0f      	ldr	r2, [pc, #60]	; (8000e1c <SystemInit+0x68>)
 8000de0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000de4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000de8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <SystemInit+0x68>)
 8000dec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000df0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <SystemInit+0x68>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <SystemInit+0x68>)
 8000df8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dfc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <SystemInit+0x68>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SystemInit+0x64>)
 8000e06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00
 8000e1c:	40021000 	.word	0x40021000

08000e20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e24:	f7ff ffc6 	bl	8000db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e28:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e2a:	e003      	b.n	8000e34 <LoopCopyDataInit>

08000e2c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e2e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e30:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e32:	3104      	adds	r1, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e34:	480a      	ldr	r0, [pc, #40]	; (8000e60 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e38:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e3a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e3c:	d3f6      	bcc.n	8000e2c <CopyDataInit>
	ldr	r2, =_sbss
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e40:	e002      	b.n	8000e48 <LoopFillZerobss>

08000e42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e42:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e44:	f842 3b04 	str.w	r3, [r2], #4

08000e48 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <LoopForever+0x16>)
	cmp	r2, r3
 8000e4a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e4c:	d3f9      	bcc.n	8000e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f004 faaf 	bl	80053b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e52:	f7ff fb3b 	bl	80004cc <main>

08000e56 <LoopForever>:

LoopForever:
    b LoopForever
 8000e56:	e7fe      	b.n	8000e56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e58:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000e5c:	0800547c 	.word	0x0800547c
	ldr	r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e64:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000e68:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000e6c:	20001188 	.word	0x20001188

08000e70 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <COMP_IRQHandler>

08000e72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f001 fe87 	bl	8002b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 f80e 	bl	8000ea4 <HAL_InitTick>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d002      	beq.n	8000e94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	71fb      	strb	r3, [r7, #7]
 8000e92:	e001      	b.n	8000e98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e94:	f7ff fe1a 	bl	8000acc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e98:	79fb      	ldrb	r3, [r7, #7]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <HAL_InitTick+0x6c>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d023      	beq.n	8000f00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000eb8:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <HAL_InitTick+0x70>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <HAL_InitTick+0x6c>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 fe93 	bl	8002bfa <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10f      	bne.n	8000efa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d809      	bhi.n	8000ef4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee8:	f001 fe5d 	bl	8002ba6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <HAL_InitTick+0x74>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	e007      	b.n	8000f04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	e004      	b.n	8000f04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	e001      	b.n	8000f04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000000c 	.word	0x2000000c
 8000f14:	20000004 	.word	0x20000004
 8000f18:	20000008 	.word	0x20000008

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	2000000c 	.word	0x2000000c
 8000f40:	20001184 	.word	0x20001184

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20001184 	.word	0x20001184

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_Delay+0x40>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000000c 	.word	0x2000000c

08000fa0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	609a      	str	r2, [r3, #8]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	3360      	adds	r3, #96	; 0x60
 800101a:	461a      	mov	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <LL_ADC_SetOffset+0x44>)
 800102a:	4013      	ands	r3, r2
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	430a      	orrs	r2, r1
 8001036:	4313      	orrs	r3, r2
 8001038:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001040:	bf00      	nop
 8001042:	371c      	adds	r7, #28
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	03fff000 	.word	0x03fff000

08001050 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3360      	adds	r3, #96	; 0x60
 800105e:	461a      	mov	r2, r3
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	3360      	adds	r3, #96	; 0x60
 800108c:	461a      	mov	r2, r3
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	431a      	orrs	r2, r3
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010a6:	bf00      	nop
 80010a8:	371c      	adds	r7, #28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	615a      	str	r2, [r3, #20]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010ec:	2301      	movs	r3, #1
 80010ee:	e000      	b.n	80010f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010fe:	b480      	push	{r7}
 8001100:	b087      	sub	sp, #28
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3330      	adds	r3, #48	; 0x30
 800110e:	461a      	mov	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	0a1b      	lsrs	r3, r3, #8
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	f003 030c 	and.w	r3, r3, #12
 800111a:	4413      	add	r3, r2
 800111c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	211f      	movs	r1, #31
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	401a      	ands	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	0e9b      	lsrs	r3, r3, #26
 8001136:	f003 011f 	and.w	r1, r3, #31
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	f003 031f 	and.w	r3, r3, #31
 8001140:	fa01 f303 	lsl.w	r3, r1, r3
 8001144:	431a      	orrs	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800114a:	bf00      	nop
 800114c:	371c      	adds	r7, #28
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800117c:	b480      	push	{r7}
 800117e:	b087      	sub	sp, #28
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3314      	adds	r3, #20
 800118c:	461a      	mov	r2, r3
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	0e5b      	lsrs	r3, r3, #25
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	4413      	add	r3, r2
 800119a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	0d1b      	lsrs	r3, r3, #20
 80011a4:	f003 031f 	and.w	r3, r3, #31
 80011a8:	2107      	movs	r1, #7
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	401a      	ands	r2, r3
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	0d1b      	lsrs	r3, r3, #20
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	431a      	orrs	r2, r3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011c6:	bf00      	nop
 80011c8:	371c      	adds	r7, #28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011ec:	43db      	mvns	r3, r3
 80011ee:	401a      	ands	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0318 	and.w	r3, r3, #24
 80011f6:	4908      	ldr	r1, [pc, #32]	; (8001218 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011f8:	40d9      	lsrs	r1, r3
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	400b      	ands	r3, r1
 80011fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001202:	431a      	orrs	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	0007ffff 	.word	0x0007ffff

0800121c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 031f 	and.w	r3, r3, #31
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001264:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	6093      	str	r3, [r2, #8]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800128c:	d101      	bne.n	8001292 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80012b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012dc:	d101      	bne.n	80012e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001300:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001304:	f043 0201 	orr.w	r2, r3, #1
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001328:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800132c:	f043 0202 	orr.w	r2, r3, #2
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b01      	cmp	r3, #1
 8001352:	d101      	bne.n	8001358 <LL_ADC_IsEnabled+0x18>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <LL_ADC_IsEnabled+0x1a>
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b02      	cmp	r3, #2
 8001378:	d101      	bne.n	800137e <LL_ADC_IsDisableOngoing+0x18>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <LL_ADC_IsDisableOngoing+0x1a>
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800139c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013a0:	f043 0204 	orr.w	r2, r3, #4
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d101      	bne.n	80013cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d101      	bne.n	80013f2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e12f      	b.n	800167a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001424:	2b00      	cmp	r3, #0
 8001426:	d109      	bne.n	800143c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff fb73 	bl	8000b14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff19 	bl	8001278 <LL_ADC_IsDeepPowerDownEnabled>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff feff 	bl	8001254 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff34 	bl	80012c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d113      	bne.n	800148e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff18 	bl	80012a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001470:	4b84      	ldr	r3, [pc, #528]	; (8001684 <HAL_ADC_Init+0x284>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	099b      	lsrs	r3, r3, #6
 8001476:	4a84      	ldr	r2, [pc, #528]	; (8001688 <HAL_ADC_Init+0x288>)
 8001478:	fba2 2303 	umull	r2, r3, r2, r3
 800147c:	099b      	lsrs	r3, r3, #6
 800147e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001480:	e002      	b.n	8001488 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	3b01      	subs	r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f9      	bne.n	8001482 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff18 	bl	80012c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10d      	bne.n	80014ba <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a2:	f043 0210 	orr.w	r2, r3, #16
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ae:	f043 0201 	orr.w	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff ff78 	bl	80013b4 <LL_ADC_REG_IsConversionOngoing>
 80014c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f040 80ca 	bne.w	8001668 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f040 80c6 	bne.w	8001668 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014e4:	f043 0202 	orr.w	r2, r3, #2
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff25 	bl	8001340 <LL_ADC_IsEnabled>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d110      	bne.n	800151e <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014fc:	4863      	ldr	r0, [pc, #396]	; (800168c <HAL_ADC_Init+0x28c>)
 80014fe:	f7ff ff1f 	bl	8001340 <LL_ADC_IsEnabled>
 8001502:	4604      	mov	r4, r0
 8001504:	4862      	ldr	r0, [pc, #392]	; (8001690 <HAL_ADC_Init+0x290>)
 8001506:	f7ff ff1b 	bl	8001340 <LL_ADC_IsEnabled>
 800150a:	4603      	mov	r3, r0
 800150c:	4323      	orrs	r3, r4
 800150e:	2b00      	cmp	r3, #0
 8001510:	d105      	bne.n	800151e <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4619      	mov	r1, r3
 8001518:	485e      	ldr	r0, [pc, #376]	; (8001694 <HAL_ADC_Init+0x294>)
 800151a:	f7ff fd41 	bl	8000fa0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7e5b      	ldrb	r3, [r3, #25]
 8001522:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001528:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800152e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001534:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800153c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d106      	bne.n	800155a <HAL_ADC_Init+0x15a>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	3b01      	subs	r3, #1
 8001552:	045b      	lsls	r3, r3, #17
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155e:	2b00      	cmp	r3, #0
 8001560:	d009      	beq.n	8001576 <HAL_ADC_Init+0x176>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	4b46      	ldr	r3, [pc, #280]	; (8001698 <HAL_ADC_Init+0x298>)
 800157e:	4013      	ands	r3, r2
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	69b9      	ldr	r1, [r7, #24]
 8001586:	430b      	orrs	r3, r1
 8001588:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff10 	bl	80013b4 <LL_ADC_REG_IsConversionOngoing>
 8001594:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff1d 	bl	80013da <LL_ADC_INJ_IsConversionOngoing>
 80015a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d13d      	bne.n	8001624 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d13a      	bne.n	8001624 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015b2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015ba:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015ca:	f023 0302 	bic.w	r3, r3, #2
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	69b9      	ldr	r1, [r7, #24]
 80015d4:	430b      	orrs	r3, r1
 80015d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d118      	bne.n	8001614 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015ec:	f023 0304 	bic.w	r3, r3, #4
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015f8:	4311      	orrs	r1, r2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80015fe:	4311      	orrs	r1, r2
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001604:	430a      	orrs	r2, r1
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f042 0201 	orr.w	r2, r2, #1
 8001610:	611a      	str	r2, [r3, #16]
 8001612:	e007      	b.n	8001624 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	691a      	ldr	r2, [r3, #16]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0201 	bic.w	r2, r2, #1
 8001622:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d10c      	bne.n	8001646 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f023 010f 	bic.w	r1, r3, #15
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	1e5a      	subs	r2, r3, #1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	631a      	str	r2, [r3, #48]	; 0x30
 8001644:	e007      	b.n	8001656 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 020f 	bic.w	r2, r2, #15
 8001654:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165a:	f023 0303 	bic.w	r3, r3, #3
 800165e:	f043 0201 	orr.w	r2, r3, #1
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	655a      	str	r2, [r3, #84]	; 0x54
 8001666:	e007      	b.n	8001678 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166c:	f043 0210 	orr.w	r2, r3, #16
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001678:	7ffb      	ldrb	r3, [r7, #31]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd90      	pop	{r4, r7, pc}
 8001682:	bf00      	nop
 8001684:	20000004 	.word	0x20000004
 8001688:	053e2d63 	.word	0x053e2d63
 800168c:	50040000 	.word	0x50040000
 8001690:	50040100 	.word	0x50040100
 8001694:	50040300 	.word	0x50040300
 8001698:	fff0c007 	.word	0xfff0c007

0800169c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016a4:	4893      	ldr	r0, [pc, #588]	; (80018f4 <HAL_ADC_Start_IT+0x258>)
 80016a6:	f7ff fdb9 	bl	800121c <LL_ADC_GetMultimode>
 80016aa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fe7f 	bl	80013b4 <LL_ADC_REG_IsConversionOngoing>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f040 8112 	bne.w	80018e2 <HAL_ADC_Start_IT+0x246>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d101      	bne.n	80016cc <HAL_ADC_Start_IT+0x30>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e10f      	b.n	80018ec <HAL_ADC_Start_IT+0x250>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 ff53 	bl	8002580 <ADC_Enable>
 80016da:	4603      	mov	r3, r0
 80016dc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016de:	7dfb      	ldrb	r3, [r7, #23]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f040 80f9 	bne.w	80018d8 <HAL_ADC_Start_IT+0x23c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a7e      	ldr	r2, [pc, #504]	; (80018f8 <HAL_ADC_Start_IT+0x25c>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d002      	beq.n	800170a <HAL_ADC_Start_IT+0x6e>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	e000      	b.n	800170c <HAL_ADC_Start_IT+0x70>
 800170a:	4b7c      	ldr	r3, [pc, #496]	; (80018fc <HAL_ADC_Start_IT+0x260>)
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	4293      	cmp	r3, r2
 8001712:	d002      	beq.n	800171a <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d105      	bne.n	8001726 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d006      	beq.n	8001740 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	f023 0206 	bic.w	r2, r3, #6
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	659a      	str	r2, [r3, #88]	; 0x58
 800173e:	e002      	b.n	8001746 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	221c      	movs	r2, #28
 800174c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 021c 	bic.w	r2, r2, #28
 8001764:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	2b08      	cmp	r3, #8
 800176c:	d108      	bne.n	8001780 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f042 0208 	orr.w	r2, r2, #8
 800177c:	605a      	str	r2, [r3, #4]
          break;
 800177e:	e008      	b.n	8001792 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0204 	orr.w	r2, r2, #4
 800178e:	605a      	str	r2, [r3, #4]
          break;
 8001790:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001796:	2b00      	cmp	r3, #0
 8001798:	d107      	bne.n	80017aa <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f042 0210 	orr.w	r2, r2, #16
 80017a8:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a52      	ldr	r2, [pc, #328]	; (80018f8 <HAL_ADC_Start_IT+0x25c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d002      	beq.n	80017ba <HAL_ADC_Start_IT+0x11e>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	e000      	b.n	80017bc <HAL_ADC_Start_IT+0x120>
 80017ba:	4b50      	ldr	r3, [pc, #320]	; (80018fc <HAL_ADC_Start_IT+0x260>)
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d008      	beq.n	80017d6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d002      	beq.n	80017d6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	2b09      	cmp	r3, #9
 80017d4:	d13b      	bne.n	800184e <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d02d      	beq.n	8001840 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d110      	bne.n	800181e <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0220 	bic.w	r2, r2, #32
 800180a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800181a:	605a      	str	r2, [r3, #4]
              break;
 800181c:	e011      	b.n	8001842 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800182c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0220 	orr.w	r2, r2, #32
 800183c:	605a      	str	r2, [r3, #4]
              break;
 800183e:	e000      	b.n	8001842 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8001840:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fda0 	bl	800138c <LL_ADC_REG_StartConversion>
 800184c:	e04d      	b.n	80018ea <HAL_ADC_Start_IT+0x24e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001852:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a26      	ldr	r2, [pc, #152]	; (80018f8 <HAL_ADC_Start_IT+0x25c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d002      	beq.n	800186a <HAL_ADC_Start_IT+0x1ce>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	e000      	b.n	800186c <HAL_ADC_Start_IT+0x1d0>
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <HAL_ADC_Start_IT+0x260>)
 800186c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d036      	beq.n	80018e8 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001882:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	2b08      	cmp	r3, #8
 8001890:	d110      	bne.n	80018b4 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 0220 	bic.w	r2, r2, #32
 80018a0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018b0:	605a      	str	r2, [r3, #4]
              break;
 80018b2:	e01a      	b.n	80018ea <HAL_ADC_Start_IT+0x24e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018c2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0220 	orr.w	r2, r2, #32
 80018d2:	605a      	str	r2, [r3, #4]
              break;
 80018d4:	bf00      	nop
 80018d6:	e008      	b.n	80018ea <HAL_ADC_Start_IT+0x24e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80018e0:	e003      	b.n	80018ea <HAL_ADC_Start_IT+0x24e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018e2:	2302      	movs	r3, #2
 80018e4:	75fb      	strb	r3, [r7, #23]
 80018e6:	e000      	b.n	80018ea <HAL_ADC_Start_IT+0x24e>
        }
 80018e8:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80018ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	50040300 	.word	0x50040300
 80018f8:	50040100 	.word	0x50040100
 80018fc:	50040000 	.word	0x50040000

08001900 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001938:	4882      	ldr	r0, [pc, #520]	; (8001b44 <HAL_ADC_IRQHandler+0x228>)
 800193a:	f7ff fc6f 	bl	800121c <LL_ADC_GetMultimode>
 800193e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d017      	beq.n	800197a <HAL_ADC_IRQHandler+0x5e>
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d012      	beq.n	800197a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001958:	f003 0310 	and.w	r3, r3, #16
 800195c:	2b00      	cmp	r3, #0
 800195e:	d105      	bne.n	800196c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001964:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 ff94 	bl	800289a <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2202      	movs	r2, #2
 8001978:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d004      	beq.n	800198e <HAL_ADC_IRQHandler+0x72>
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10a      	bne.n	80019a4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 8083 	beq.w	8001aa0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d07d      	beq.n	8001aa0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d105      	bne.n	80019bc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fb89 	bl	80010d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d062      	beq.n	8001a92 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a5d      	ldr	r2, [pc, #372]	; (8001b48 <HAL_ADC_IRQHandler+0x22c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d002      	beq.n	80019dc <HAL_ADC_IRQHandler+0xc0>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	e000      	b.n	80019de <HAL_ADC_IRQHandler+0xc2>
 80019dc:	4b5b      	ldr	r3, [pc, #364]	; (8001b4c <HAL_ADC_IRQHandler+0x230>)
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d008      	beq.n	80019f8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	2b05      	cmp	r3, #5
 80019f0:	d002      	beq.n	80019f8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2b09      	cmp	r3, #9
 80019f6:	d104      	bne.n	8001a02 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	623b      	str	r3, [r7, #32]
 8001a00:	e00c      	b.n	8001a1c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a50      	ldr	r2, [pc, #320]	; (8001b48 <HAL_ADC_IRQHandler+0x22c>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d002      	beq.n	8001a12 <HAL_ADC_IRQHandler+0xf6>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	e000      	b.n	8001a14 <HAL_ADC_IRQHandler+0xf8>
 8001a12:	4b4e      	ldr	r3, [pc, #312]	; (8001b4c <HAL_ADC_IRQHandler+0x230>)
 8001a14:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d135      	bne.n	8001a92 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d12e      	bne.n	8001a92 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fcbb 	bl	80013b4 <LL_ADC_REG_IsConversionOngoing>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d11a      	bne.n	8001a7a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 020c 	bic.w	r2, r2, #12
 8001a52:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d112      	bne.n	8001a92 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a70:	f043 0201 	orr.w	r2, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	655a      	str	r2, [r3, #84]	; 0x54
 8001a78:	e00b      	b.n	8001a92 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7e:	f043 0210 	orr.w	r2, r3, #16
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8a:	f043 0201 	orr.w	r2, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f95c 	bl	8001d50 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	220c      	movs	r2, #12
 8001a9e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f003 0320 	and.w	r3, r3, #32
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d004      	beq.n	8001ab4 <HAL_ADC_IRQHandler+0x198>
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	f003 0320 	and.w	r3, r3, #32
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10b      	bne.n	8001acc <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 809f 	beq.w	8001bfe <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 8099 	beq.w	8001bfe <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad0:	f003 0310 	and.w	r3, r3, #16
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d105      	bne.n	8001ae4 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001adc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fb34 	bl	8001156 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001aee:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff faef 	bl	80010d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001afa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <HAL_ADC_IRQHandler+0x22c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d002      	beq.n	8001b0c <HAL_ADC_IRQHandler+0x1f0>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	e000      	b.n	8001b0e <HAL_ADC_IRQHandler+0x1f2>
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_ADC_IRQHandler+0x230>)
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d008      	beq.n	8001b28 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d002      	beq.n	8001b28 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	2b07      	cmp	r3, #7
 8001b26:	d104      	bne.n	8001b32 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	623b      	str	r3, [r7, #32]
 8001b30:	e013      	b.n	8001b5a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <HAL_ADC_IRQHandler+0x22c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d009      	beq.n	8001b50 <HAL_ADC_IRQHandler+0x234>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	e007      	b.n	8001b52 <HAL_ADC_IRQHandler+0x236>
 8001b42:	bf00      	nop
 8001b44:	50040300 	.word	0x50040300
 8001b48:	50040100 	.word	0x50040100
 8001b4c:	50040000 	.word	0x50040000
 8001b50:	4b7d      	ldr	r3, [pc, #500]	; (8001d48 <HAL_ADC_IRQHandler+0x42c>)
 8001b52:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10c      	bne.n	8001b7a <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d142      	bne.n	8001bf0 <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d03f      	beq.n	8001bf0 <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d13a      	bne.n	8001bf0 <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b84:	2b40      	cmp	r3, #64	; 0x40
 8001b86:	d133      	bne.n	8001bf0 <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d12e      	bne.n	8001bf0 <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fc1f 	bl	80013da <LL_ADC_INJ_IsConversionOngoing>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d11a      	bne.n	8001bd8 <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bb0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d112      	bne.n	8001bf0 <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bce:	f043 0201 	orr.w	r2, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	655a      	str	r2, [r3, #84]	; 0x54
 8001bd6:	e00b      	b.n	8001bf0 <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bdc:	f043 0210 	orr.w	r2, r3, #16
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be8:	f043 0201 	orr.w	r2, r3, #1
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 fe2a 	bl	800284a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2260      	movs	r2, #96	; 0x60
 8001bfc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d011      	beq.n	8001c2c <HAL_ADC_IRQHandler+0x310>
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00c      	beq.n	8001c2c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f8a0 	bl	8001d64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d012      	beq.n	8001c5c <HAL_ADC_IRQHandler+0x340>
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00d      	beq.n	8001c5c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c44:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 fe10 	bl	8002872 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c5a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d012      	beq.n	8001c8c <HAL_ADC_IRQHandler+0x370>
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00d      	beq.n	8001c8c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 fe02 	bl	8002886 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d036      	beq.n	8001d04 <HAL_ADC_IRQHandler+0x3e8>
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	f003 0310 	and.w	r3, r3, #16
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d031      	beq.n	8001d04 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
 8001cac:	e014      	b.n	8001cd8 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001cb4:	4825      	ldr	r0, [pc, #148]	; (8001d4c <HAL_ADC_IRQHandler+0x430>)
 8001cb6:	f7ff fabf 	bl	8001238 <LL_ADC_GetMultiDMATransfer>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00b      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc4:	e008      	b.n	8001cd8 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d10e      	bne.n	8001cfc <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	f043 0202 	orr.w	r2, r3, #2
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f83e 	bl	8001d78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2210      	movs	r2, #16
 8001d02:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d018      	beq.n	8001d40 <HAL_ADC_IRQHandler+0x424>
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d28:	f043 0208 	orr.w	r2, r3, #8
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d38:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 fd8f 	bl	800285e <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001d40:	bf00      	nop
 8001d42:	3728      	adds	r7, #40	; 0x28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	50040000 	.word	0x50040000
 8001d4c:	50040300 	.word	0x50040300

08001d50 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b0b6      	sub	sp, #216	; 0xd8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x22>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e3d4      	b.n	8002558 <HAL_ADC_ConfigChannel+0x7cc>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fafa 	bl	80013b4 <LL_ADC_REG_IsConversionOngoing>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 83b9 	bne.w	800253a <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d824      	bhi.n	8001e1a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	3b02      	subs	r3, #2
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d81b      	bhi.n	8001e12 <HAL_ADC_ConfigChannel+0x86>
 8001dda:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <HAL_ADC_ConfigChannel+0x54>)
 8001ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de0:	08001df1 	.word	0x08001df1
 8001de4:	08001df9 	.word	0x08001df9
 8001de8:	08001e01 	.word	0x08001e01
 8001dec:	08001e09 	.word	0x08001e09
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	220c      	movs	r2, #12
 8001df4:	605a      	str	r2, [r3, #4]
          break;
 8001df6:	e011      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	2212      	movs	r2, #18
 8001dfc:	605a      	str	r2, [r3, #4]
          break;
 8001dfe:	e00d      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	2218      	movs	r2, #24
 8001e04:	605a      	str	r2, [r3, #4]
          break;
 8001e06:	e009      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e0e:	605a      	str	r2, [r3, #4]
          break;
 8001e10:	e004      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2206      	movs	r2, #6
 8001e16:	605a      	str	r2, [r3, #4]
          break;
 8001e18:	e000      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001e1a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6859      	ldr	r1, [r3, #4]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f7ff f968 	bl	80010fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fabe 	bl	80013b4 <LL_ADC_REG_IsConversionOngoing>
 8001e38:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff faca 	bl	80013da <LL_ADC_INJ_IsConversionOngoing>
 8001e46:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f040 81c1 	bne.w	80021d6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f040 81bc 	bne.w	80021d6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e66:	d10f      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2200      	movs	r2, #0
 8001e72:	4619      	mov	r1, r3
 8001e74:	f7ff f982 	bl	800117c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff f916 	bl	80010b2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001e86:	e00e      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	6819      	ldr	r1, [r3, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	461a      	mov	r2, r3
 8001e96:	f7ff f971 	bl	800117c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff f906 	bl	80010b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	08db      	lsrs	r3, r3, #3
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d00a      	beq.n	8001ede <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6919      	ldr	r1, [r3, #16]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ed8:	f7ff f896 	bl	8001008 <LL_ADC_SetOffset>
 8001edc:	e17b      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff f8b3 	bl	8001050 <LL_ADC_GetOffsetChannel>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10a      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x17e>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff f8a8 	bl	8001050 <LL_ADC_GetOffsetChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	0e9b      	lsrs	r3, r3, #26
 8001f04:	f003 021f 	and.w	r2, r3, #31
 8001f08:	e01e      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x1bc>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff f89d 	bl	8001050 <LL_ADC_GetOffsetChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001f38:	2320      	movs	r3, #32
 8001f3a:	e004      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001f3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d105      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1d4>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	e018      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x206>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001f84:	2320      	movs	r3, #32
 8001f86:	e004      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001f88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f8c:	fab3 f383 	clz	r3, r3
 8001f90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d106      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff f86c 	bl	800107c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2101      	movs	r1, #1
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f850 	bl	8001050 <LL_ADC_GetOffsetChannel>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10a      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x244>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff f845 	bl	8001050 <LL_ADC_GetOffsetChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	0e9b      	lsrs	r3, r3, #26
 8001fca:	f003 021f 	and.w	r2, r3, #31
 8001fce:	e01e      	b.n	800200e <HAL_ADC_ConfigChannel+0x282>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff f83a 	bl	8001050 <LL_ADC_GetOffsetChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001fee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ff2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ff6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001ffe:	2320      	movs	r3, #32
 8002000:	e004      	b.n	800200c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002002:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002016:	2b00      	cmp	r3, #0
 8002018:	d105      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x29a>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	0e9b      	lsrs	r3, r3, #26
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	e018      	b.n	8002058 <HAL_ADC_ConfigChannel+0x2cc>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800203a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800203e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002042:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800204a:	2320      	movs	r3, #32
 800204c:	e004      	b.n	8002058 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800204e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002058:	429a      	cmp	r2, r3
 800205a:	d106      	bne.n	800206a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2200      	movs	r2, #0
 8002062:	2101      	movs	r1, #1
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff f809 	bl	800107c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2102      	movs	r1, #2
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe ffed 	bl	8001050 <LL_ADC_GetOffsetChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10a      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x30a>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2102      	movs	r1, #2
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe ffe2 	bl	8001050 <LL_ADC_GetOffsetChannel>
 800208c:	4603      	mov	r3, r0
 800208e:	0e9b      	lsrs	r3, r3, #26
 8002090:	f003 021f 	and.w	r2, r3, #31
 8002094:	e01e      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x348>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2102      	movs	r1, #2
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe ffd7 	bl	8001050 <LL_ADC_GetOffsetChannel>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80020b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80020bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80020c4:	2320      	movs	r3, #32
 80020c6:	e004      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80020c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020cc:	fab3 f383 	clz	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x360>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	0e9b      	lsrs	r3, r3, #26
 80020e6:	f003 031f 	and.w	r3, r3, #31
 80020ea:	e016      	b.n	800211a <HAL_ADC_ConfigChannel+0x38e>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80020fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002104:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800210c:	2320      	movs	r3, #32
 800210e:	e004      	b.n	800211a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002110:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002114:	fab3 f383 	clz	r3, r3
 8002118:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800211a:	429a      	cmp	r2, r3
 800211c:	d106      	bne.n	800212c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2200      	movs	r2, #0
 8002124:	2102      	movs	r1, #2
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe ffa8 	bl	800107c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2103      	movs	r1, #3
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe ff8c 	bl	8001050 <LL_ADC_GetOffsetChannel>
 8002138:	4603      	mov	r3, r0
 800213a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10a      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x3cc>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2103      	movs	r1, #3
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe ff81 	bl	8001050 <LL_ADC_GetOffsetChannel>
 800214e:	4603      	mov	r3, r0
 8002150:	0e9b      	lsrs	r3, r3, #26
 8002152:	f003 021f 	and.w	r2, r3, #31
 8002156:	e017      	b.n	8002188 <HAL_ADC_ConfigChannel+0x3fc>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2103      	movs	r1, #3
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe ff76 	bl	8001050 <LL_ADC_GetOffsetChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002170:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002172:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800217a:	2320      	movs	r3, #32
 800217c:	e003      	b.n	8002186 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800217e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002190:	2b00      	cmp	r3, #0
 8002192:	d105      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x414>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	0e9b      	lsrs	r3, r3, #26
 800219a:	f003 031f 	and.w	r3, r3, #31
 800219e:	e011      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x438>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021a8:	fa93 f3a3 	rbit	r3, r3
 80021ac:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80021ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80021b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80021b8:	2320      	movs	r3, #32
 80021ba:	e003      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80021bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d106      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2200      	movs	r2, #0
 80021ce:	2103      	movs	r1, #3
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe ff53 	bl	800107c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff f8b0 	bl	8001340 <LL_ADC_IsEnabled>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 8140 	bne.w	8002468 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6819      	ldr	r1, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	461a      	mov	r2, r3
 80021f6:	f7fe ffed 	bl	80011d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	4a8f      	ldr	r2, [pc, #572]	; (800243c <HAL_ADC_ConfigChannel+0x6b0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	f040 8131 	bne.w	8002468 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10b      	bne.n	800222e <HAL_ADC_ConfigChannel+0x4a2>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	3301      	adds	r3, #1
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	2b09      	cmp	r3, #9
 8002224:	bf94      	ite	ls
 8002226:	2301      	movls	r3, #1
 8002228:	2300      	movhi	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	e019      	b.n	8002262 <HAL_ADC_ConfigChannel+0x4d6>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002236:	fa93 f3a3 	rbit	r3, r3
 800223a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800223c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800223e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002240:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002246:	2320      	movs	r3, #32
 8002248:	e003      	b.n	8002252 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800224a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	3301      	adds	r3, #1
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	2b09      	cmp	r3, #9
 800225a:	bf94      	ite	ls
 800225c:	2301      	movls	r3, #1
 800225e:	2300      	movhi	r3, #0
 8002260:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002262:	2b00      	cmp	r3, #0
 8002264:	d079      	beq.n	800235a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226e:	2b00      	cmp	r3, #0
 8002270:	d107      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x4f6>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	0e9b      	lsrs	r3, r3, #26
 8002278:	3301      	adds	r3, #1
 800227a:	069b      	lsls	r3, r3, #26
 800227c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002280:	e015      	b.n	80022ae <HAL_ADC_ConfigChannel+0x522>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002292:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800229a:	2320      	movs	r3, #32
 800229c:	e003      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800229e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	069b      	lsls	r3, r3, #26
 80022aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x542>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	0e9b      	lsrs	r3, r3, #26
 80022c0:	3301      	adds	r3, #1
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	2101      	movs	r1, #1
 80022c8:	fa01 f303 	lsl.w	r3, r1, r3
 80022cc:	e017      	b.n	80022fe <HAL_ADC_ConfigChannel+0x572>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80022dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80022e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80022e6:	2320      	movs	r3, #32
 80022e8:	e003      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80022ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	3301      	adds	r3, #1
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	2101      	movs	r1, #1
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	ea42 0103 	orr.w	r1, r2, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10a      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x598>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	0e9b      	lsrs	r3, r3, #26
 8002314:	3301      	adds	r3, #1
 8002316:	f003 021f 	and.w	r2, r3, #31
 800231a:	4613      	mov	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	4413      	add	r3, r2
 8002320:	051b      	lsls	r3, r3, #20
 8002322:	e018      	b.n	8002356 <HAL_ADC_ConfigChannel+0x5ca>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002334:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800233c:	2320      	movs	r3, #32
 800233e:	e003      	b.n	8002348 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	f003 021f 	and.w	r2, r3, #31
 800234e:	4613      	mov	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4413      	add	r3, r2
 8002354:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002356:	430b      	orrs	r3, r1
 8002358:	e081      	b.n	800245e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002362:	2b00      	cmp	r3, #0
 8002364:	d107      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x5ea>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	0e9b      	lsrs	r3, r3, #26
 800236c:	3301      	adds	r3, #1
 800236e:	069b      	lsls	r3, r3, #26
 8002370:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002374:	e015      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x616>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800238e:	2320      	movs	r3, #32
 8002390:	e003      	b.n	800239a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	3301      	adds	r3, #1
 800239c:	069b      	lsls	r3, r3, #26
 800239e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x636>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	3301      	adds	r3, #1
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	2101      	movs	r1, #1
 80023bc:	fa01 f303 	lsl.w	r3, r1, r3
 80023c0:	e017      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x666>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	61fb      	str	r3, [r7, #28]
  return result;
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80023da:	2320      	movs	r3, #32
 80023dc:	e003      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	fab3 f383 	clz	r3, r3
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	3301      	adds	r3, #1
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	2101      	movs	r1, #1
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	ea42 0103 	orr.w	r1, r2, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10d      	bne.n	800241e <HAL_ADC_ConfigChannel+0x692>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	0e9b      	lsrs	r3, r3, #26
 8002408:	3301      	adds	r3, #1
 800240a:	f003 021f 	and.w	r2, r3, #31
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	3b1e      	subs	r3, #30
 8002416:	051b      	lsls	r3, r3, #20
 8002418:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800241c:	e01e      	b.n	800245c <HAL_ADC_ConfigChannel+0x6d0>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	613b      	str	r3, [r7, #16]
  return result;
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d104      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002436:	2320      	movs	r3, #32
 8002438:	e006      	b.n	8002448 <HAL_ADC_ConfigChannel+0x6bc>
 800243a:	bf00      	nop
 800243c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	3301      	adds	r3, #1
 800244a:	f003 021f 	and.w	r2, r3, #31
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	3b1e      	subs	r3, #30
 8002456:	051b      	lsls	r3, r3, #20
 8002458:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800245c:	430b      	orrs	r3, r1
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	6892      	ldr	r2, [r2, #8]
 8002462:	4619      	mov	r1, r3
 8002464:	f7fe fe8a 	bl	800117c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b3c      	ldr	r3, [pc, #240]	; (8002560 <HAL_ADC_ConfigChannel+0x7d4>)
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d06b      	beq.n	800254c <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002474:	483b      	ldr	r0, [pc, #236]	; (8002564 <HAL_ADC_ConfigChannel+0x7d8>)
 8002476:	f7fe fdb9 	bl	8000fec <LL_ADC_GetCommonPathInternalCh>
 800247a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a39      	ldr	r2, [pc, #228]	; (8002568 <HAL_ADC_ConfigChannel+0x7dc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d126      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800248c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d120      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a34      	ldr	r2, [pc, #208]	; (800256c <HAL_ADC_ConfigChannel+0x7e0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d156      	bne.n	800254c <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800249e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024a6:	4619      	mov	r1, r3
 80024a8:	482e      	ldr	r0, [pc, #184]	; (8002564 <HAL_ADC_ConfigChannel+0x7d8>)
 80024aa:	f7fe fd8c 	bl	8000fc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80024ae:	4b30      	ldr	r3, [pc, #192]	; (8002570 <HAL_ADC_ConfigChannel+0x7e4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	099b      	lsrs	r3, r3, #6
 80024b4:	4a2f      	ldr	r2, [pc, #188]	; (8002574 <HAL_ADC_ConfigChannel+0x7e8>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	099a      	lsrs	r2, r3, #6
 80024bc:	4613      	mov	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024c6:	e002      	b.n	80024ce <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f9      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024d4:	e03a      	b.n	800254c <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a27      	ldr	r2, [pc, #156]	; (8002578 <HAL_ADC_ConfigChannel+0x7ec>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d113      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x77c>
 80024e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10d      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a1e      	ldr	r2, [pc, #120]	; (800256c <HAL_ADC_ConfigChannel+0x7e0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d12a      	bne.n	800254c <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024fe:	4619      	mov	r1, r3
 8002500:	4818      	ldr	r0, [pc, #96]	; (8002564 <HAL_ADC_ConfigChannel+0x7d8>)
 8002502:	f7fe fd60 	bl	8000fc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002506:	e021      	b.n	800254c <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1b      	ldr	r2, [pc, #108]	; (800257c <HAL_ADC_ConfigChannel+0x7f0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d11c      	bne.n	800254c <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002512:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d116      	bne.n	800254c <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a12      	ldr	r2, [pc, #72]	; (800256c <HAL_ADC_ConfigChannel+0x7e0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d111      	bne.n	800254c <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002528:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800252c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002530:	4619      	mov	r1, r3
 8002532:	480c      	ldr	r0, [pc, #48]	; (8002564 <HAL_ADC_ConfigChannel+0x7d8>)
 8002534:	f7fe fd47 	bl	8000fc6 <LL_ADC_SetCommonPathInternalCh>
 8002538:	e008      	b.n	800254c <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	f043 0220 	orr.w	r2, r3, #32
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002554:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002558:	4618      	mov	r0, r3
 800255a:	37d8      	adds	r7, #216	; 0xd8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	80080000 	.word	0x80080000
 8002564:	50040300 	.word	0x50040300
 8002568:	c7520000 	.word	0xc7520000
 800256c:	50040000 	.word	0x50040000
 8002570:	20000004 	.word	0x20000004
 8002574:	053e2d63 	.word	0x053e2d63
 8002578:	cb840000 	.word	0xcb840000
 800257c:	80000001 	.word	0x80000001

08002580 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fed7 	bl	8001340 <LL_ADC_IsEnabled>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d146      	bne.n	8002626 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	4b24      	ldr	r3, [pc, #144]	; (8002630 <ADC_Enable+0xb0>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00d      	beq.n	80025c2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	f043 0210 	orr.w	r2, r3, #16
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	f043 0201 	orr.w	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e032      	b.n	8002628 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fe92 	bl	80012f0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80025cc:	f7fe fcba 	bl	8000f44 <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025d2:	e021      	b.n	8002618 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe feb1 	bl	8001340 <LL_ADC_IsEnabled>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d104      	bne.n	80025ee <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fe81 	bl	80012f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025ee:	f7fe fca9 	bl	8000f44 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d90d      	bls.n	8002618 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	f043 0210 	orr.w	r2, r3, #16
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260c:	f043 0201 	orr.w	r2, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e007      	b.n	8002628 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b01      	cmp	r3, #1
 8002624:	d1d6      	bne.n	80025d4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	8000003f 	.word	0x8000003f

08002634 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fe90 	bl	8001366 <LL_ADC_IsDisableOngoing>
 8002646:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fe77 	bl	8001340 <LL_ADC_IsEnabled>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d040      	beq.n	80026da <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d13d      	bne.n	80026da <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 030d 	and.w	r3, r3, #13
 8002668:	2b01      	cmp	r3, #1
 800266a:	d10c      	bne.n	8002686 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7fe fe51 	bl	8001318 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2203      	movs	r2, #3
 800267c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800267e:	f7fe fc61 	bl	8000f44 <HAL_GetTick>
 8002682:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002684:	e022      	b.n	80026cc <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268a:	f043 0210 	orr.w	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	f043 0201 	orr.w	r2, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e01c      	b.n	80026dc <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026a2:	f7fe fc4f 	bl	8000f44 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d90d      	bls.n	80026cc <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	f043 0210 	orr.w	r2, r3, #16
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e007      	b.n	80026dc <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1e3      	bne.n	80026a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <LL_ADC_IsEnabled>:
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <LL_ADC_IsEnabled+0x18>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <LL_ADC_IsEnabled+0x1a>
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <LL_ADC_StartCalibration>:
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800271c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002726:	4313      	orrs	r3, r2
 8002728:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	609a      	str	r2, [r3, #8]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_ADC_IsCalibrationOnGoing>:
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800274c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002750:	d101      	bne.n	8002756 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <LL_ADC_REG_IsConversionOngoing>:
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b04      	cmp	r3, #4
 8002776:	d101      	bne.n	800277c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_ADCEx_Calibration_Start+0x1c>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e04d      	b.n	8002842 <HAL_ADCEx_Calibration_Start+0xb8>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ff40 	bl	8002634 <ADC_Disable>
 80027b4:	4603      	mov	r3, r0
 80027b6:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d136      	bne.n	800282c <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027c6:	f023 0302 	bic.w	r3, r3, #2
 80027ca:	f043 0202 	orr.w	r2, r3, #2
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6839      	ldr	r1, [r7, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff96 	bl	800270a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80027de:	e014      	b.n	800280a <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	3301      	adds	r3, #1
 80027e4:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80027ec:	d30d      	bcc.n	800280a <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	f023 0312 	bic.w	r3, r3, #18
 80027f6:	f043 0210 	orr.w	r2, r3, #16
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e01b      	b.n	8002842 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ff94 	bl	800273c <LL_ADC_IsCalibrationOnGoing>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1e2      	bne.n	80027e0 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281e:	f023 0303 	bic.w	r3, r3, #3
 8002822:	f043 0201 	orr.w	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
 800282a:	e005      	b.n	8002838 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	f043 0210 	orr.w	r2, r3, #16
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002840:	7bfb      	ldrb	r3, [r7, #15]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80028b0:	b590      	push	{r4, r7, lr}
 80028b2:	b09f      	sub	sp, #124	; 0x7c
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e085      	b.n	80029da <HAL_ADCEx_MultiModeConfigChannel+0x12a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a42      	ldr	r2, [pc, #264]	; (80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d102      	bne.n	80028e6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80028e0:	4b41      	ldr	r3, [pc, #260]	; (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	e001      	b.n	80028ea <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10b      	bne.n	8002908 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f4:	f043 0220 	orr.w	r2, r3, #32
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e068      	b.n	80029da <HAL_ADCEx_MultiModeConfigChannel+0x12a>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff ff2a 	bl	8002764 <LL_ADC_REG_IsConversionOngoing>
 8002910:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ff24 	bl	8002764 <LL_ADC_REG_IsConversionOngoing>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d14a      	bne.n	80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002922:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002924:	2b00      	cmp	r3, #0
 8002926:	d147      	bne.n	80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002928:	4b30      	ldr	r3, [pc, #192]	; (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800292a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d027      	beq.n	8002984 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002946:	035b      	lsls	r3, r3, #13
 8002948:	430b      	orrs	r3, r1
 800294a:	431a      	orrs	r2, r3
 800294c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800294e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002950:	4824      	ldr	r0, [pc, #144]	; (80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002952:	f7ff fec7 	bl	80026e4 <LL_ADC_IsEnabled>
 8002956:	4604      	mov	r4, r0
 8002958:	4823      	ldr	r0, [pc, #140]	; (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800295a:	f7ff fec3 	bl	80026e4 <LL_ADC_IsEnabled>
 800295e:	4603      	mov	r3, r0
 8002960:	4323      	orrs	r3, r4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d132      	bne.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800296e:	f023 030f 	bic.w	r3, r3, #15
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	6811      	ldr	r1, [r2, #0]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	6892      	ldr	r2, [r2, #8]
 800297a:	430a      	orrs	r2, r1
 800297c:	431a      	orrs	r2, r3
 800297e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002980:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002982:	e023      	b.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800298c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800298e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002990:	4814      	ldr	r0, [pc, #80]	; (80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002992:	f7ff fea7 	bl	80026e4 <LL_ADC_IsEnabled>
 8002996:	4604      	mov	r4, r0
 8002998:	4813      	ldr	r0, [pc, #76]	; (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800299a:	f7ff fea3 	bl	80026e4 <LL_ADC_IsEnabled>
 800299e:	4603      	mov	r3, r0
 80029a0:	4323      	orrs	r3, r4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d112      	bne.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029ae:	f023 030f 	bic.w	r3, r3, #15
 80029b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029b4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029b6:	e009      	b.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80029ca:	e000      	b.n	80029ce <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80029da:	4618      	mov	r0, r3
 80029dc:	377c      	adds	r7, #124	; 0x7c
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd90      	pop	{r4, r7, pc}
 80029e2:	bf00      	nop
 80029e4:	50040000 	.word	0x50040000
 80029e8:	50040100 	.word	0x50040100
 80029ec:	50040300 	.word	0x50040300

080029f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a22:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	60d3      	str	r3, [r2, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <__NVIC_GetPriorityGrouping+0x18>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	0a1b      	lsrs	r3, r3, #8
 8002a42:	f003 0307 	and.w	r3, r3, #7
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	db0b      	blt.n	8002a7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	f003 021f 	and.w	r2, r3, #31
 8002a6c:	4907      	ldr	r1, [pc, #28]	; (8002a8c <__NVIC_EnableIRQ+0x38>)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	2001      	movs	r0, #1
 8002a76:	fa00 f202 	lsl.w	r2, r0, r2
 8002a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000e100 	.word	0xe000e100

08002a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	6039      	str	r1, [r7, #0]
 8002a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	db0a      	blt.n	8002aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	490c      	ldr	r1, [pc, #48]	; (8002adc <__NVIC_SetPriority+0x4c>)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	0112      	lsls	r2, r2, #4
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab8:	e00a      	b.n	8002ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4908      	ldr	r1, [pc, #32]	; (8002ae0 <__NVIC_SetPriority+0x50>)
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	3b04      	subs	r3, #4
 8002ac8:	0112      	lsls	r2, r2, #4
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	440b      	add	r3, r1
 8002ace:	761a      	strb	r2, [r3, #24]
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000e100 	.word	0xe000e100
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b089      	sub	sp, #36	; 0x24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f1c3 0307 	rsb	r3, r3, #7
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	bf28      	it	cs
 8002b02:	2304      	movcs	r3, #4
 8002b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	2b06      	cmp	r3, #6
 8002b0c:	d902      	bls.n	8002b14 <NVIC_EncodePriority+0x30>
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3b03      	subs	r3, #3
 8002b12:	e000      	b.n	8002b16 <NVIC_EncodePriority+0x32>
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43da      	mvns	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	401a      	ands	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	43d9      	mvns	r1, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b3c:	4313      	orrs	r3, r2
         );
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3724      	adds	r7, #36	; 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b5c:	d301      	bcc.n	8002b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00f      	b.n	8002b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b62:	4a0a      	ldr	r2, [pc, #40]	; (8002b8c <SysTick_Config+0x40>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b6a:	210f      	movs	r1, #15
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b70:	f7ff ff8e 	bl	8002a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <SysTick_Config+0x40>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b7a:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <SysTick_Config+0x40>)
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	e000e010 	.word	0xe000e010

08002b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff ff29 	bl	80029f0 <__NVIC_SetPriorityGrouping>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b086      	sub	sp, #24
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4603      	mov	r3, r0
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb8:	f7ff ff3e 	bl	8002a38 <__NVIC_GetPriorityGrouping>
 8002bbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68b9      	ldr	r1, [r7, #8]
 8002bc2:	6978      	ldr	r0, [r7, #20]
 8002bc4:	f7ff ff8e 	bl	8002ae4 <NVIC_EncodePriority>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ff5d 	bl	8002a90 <__NVIC_SetPriority>
}
 8002bd6:	bf00      	nop
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	4603      	mov	r3, r0
 8002be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff31 	bl	8002a54 <__NVIC_EnableIRQ>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff ffa2 	bl	8002b4c <SysTick_Config>
 8002c08:	4603      	mov	r3, r0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c22:	e14e      	b.n	8002ec2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	2101      	movs	r1, #1
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	4013      	ands	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8140 	beq.w	8002ebc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d00b      	beq.n	8002c5c <HAL_GPIO_Init+0x48>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d007      	beq.n	8002c5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c50:	2b11      	cmp	r3, #17
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b12      	cmp	r3, #18
 8002c5a:	d130      	bne.n	8002cbe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	2203      	movs	r2, #3
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c92:	2201      	movs	r2, #1
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 0201 	and.w	r2, r3, #1
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	2203      	movs	r2, #3
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_Init+0xea>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b12      	cmp	r3, #18
 8002cfc:	d123      	bne.n	8002d46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	08da      	lsrs	r2, r3, #3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3208      	adds	r2, #8
 8002d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	220f      	movs	r2, #15
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	691a      	ldr	r2, [r3, #16]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	08da      	lsrs	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3208      	adds	r2, #8
 8002d40:	6939      	ldr	r1, [r7, #16]
 8002d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	2203      	movs	r2, #3
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0203 	and.w	r2, r3, #3
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 809a 	beq.w	8002ebc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d88:	4b55      	ldr	r3, [pc, #340]	; (8002ee0 <HAL_GPIO_Init+0x2cc>)
 8002d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8c:	4a54      	ldr	r2, [pc, #336]	; (8002ee0 <HAL_GPIO_Init+0x2cc>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6613      	str	r3, [r2, #96]	; 0x60
 8002d94:	4b52      	ldr	r3, [pc, #328]	; (8002ee0 <HAL_GPIO_Init+0x2cc>)
 8002d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002da0:	4a50      	ldr	r2, [pc, #320]	; (8002ee4 <HAL_GPIO_Init+0x2d0>)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	089b      	lsrs	r3, r3, #2
 8002da6:	3302      	adds	r3, #2
 8002da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	220f      	movs	r2, #15
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002dca:	d013      	beq.n	8002df4 <HAL_GPIO_Init+0x1e0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a46      	ldr	r2, [pc, #280]	; (8002ee8 <HAL_GPIO_Init+0x2d4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d00d      	beq.n	8002df0 <HAL_GPIO_Init+0x1dc>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a45      	ldr	r2, [pc, #276]	; (8002eec <HAL_GPIO_Init+0x2d8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d007      	beq.n	8002dec <HAL_GPIO_Init+0x1d8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a44      	ldr	r2, [pc, #272]	; (8002ef0 <HAL_GPIO_Init+0x2dc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d101      	bne.n	8002de8 <HAL_GPIO_Init+0x1d4>
 8002de4:	2303      	movs	r3, #3
 8002de6:	e006      	b.n	8002df6 <HAL_GPIO_Init+0x1e2>
 8002de8:	2307      	movs	r3, #7
 8002dea:	e004      	b.n	8002df6 <HAL_GPIO_Init+0x1e2>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e002      	b.n	8002df6 <HAL_GPIO_Init+0x1e2>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <HAL_GPIO_Init+0x1e2>
 8002df4:	2300      	movs	r3, #0
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	f002 0203 	and.w	r2, r2, #3
 8002dfc:	0092      	lsls	r2, r2, #2
 8002dfe:	4093      	lsls	r3, r2
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e06:	4937      	ldr	r1, [pc, #220]	; (8002ee4 <HAL_GPIO_Init+0x2d0>)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	089b      	lsrs	r3, r3, #2
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e14:	4b37      	ldr	r3, [pc, #220]	; (8002ef4 <HAL_GPIO_Init+0x2e0>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e38:	4a2e      	ldr	r2, [pc, #184]	; (8002ef4 <HAL_GPIO_Init+0x2e0>)
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002e3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <HAL_GPIO_Init+0x2e0>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e62:	4a24      	ldr	r2, [pc, #144]	; (8002ef4 <HAL_GPIO_Init+0x2e0>)
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e68:	4b22      	ldr	r3, [pc, #136]	; (8002ef4 <HAL_GPIO_Init+0x2e0>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e8c:	4a19      	ldr	r2, [pc, #100]	; (8002ef4 <HAL_GPIO_Init+0x2e0>)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e92:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <HAL_GPIO_Init+0x2e0>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002eb6:	4a0f      	ldr	r2, [pc, #60]	; (8002ef4 <HAL_GPIO_Init+0x2e0>)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f47f aea9 	bne.w	8002c24 <HAL_GPIO_Init+0x10>
  }
}
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40010000 	.word	0x40010000
 8002ee8:	48000400 	.word	0x48000400
 8002eec:	48000800 	.word	0x48000800
 8002ef0:	48000c00 	.word	0x48000c00
 8002ef4:	40010400 	.word	0x40010400

08002ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	887b      	ldrh	r3, [r7, #2]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
 8002f14:	e001      	b.n	8002f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	807b      	strh	r3, [r7, #2]
 8002f34:	4613      	mov	r3, r2
 8002f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f38:	787b      	ldrb	r3, [r7, #1]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f3e:	887a      	ldrh	r2, [r7, #2]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f44:	e002      	b.n	8002f4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f46:	887a      	ldrh	r2, [r7, #2]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40007000 	.word	0x40007000

08002f74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f82:	d130      	bne.n	8002fe6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f84:	4b23      	ldr	r3, [pc, #140]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f90:	d038      	beq.n	8003004 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f9a:	4a1e      	ldr	r2, [pc, #120]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fa2:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2232      	movs	r2, #50	; 0x32
 8002fa8:	fb02 f303 	mul.w	r3, r2, r3
 8002fac:	4a1b      	ldr	r2, [pc, #108]	; (800301c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	0c9b      	lsrs	r3, r3, #18
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fb8:	e002      	b.n	8002fc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fc0:	4b14      	ldr	r3, [pc, #80]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fcc:	d102      	bne.n	8002fd4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f2      	bne.n	8002fba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fd4:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe0:	d110      	bne.n	8003004 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e00f      	b.n	8003006 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff2:	d007      	beq.n	8003004 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ff4:	4b07      	ldr	r3, [pc, #28]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ffc:	4a05      	ldr	r2, [pc, #20]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003002:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40007000 	.word	0x40007000
 8003018:	20000004 	.word	0x20000004
 800301c:	431bde83 	.word	0x431bde83

08003020 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d102      	bne.n	8003034 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	f000 bc56 	b.w	80038e0 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003034:	4ba1      	ldr	r3, [pc, #644]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800303e:	4b9f      	ldr	r3, [pc, #636]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80e6 	beq.w	8003222 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <HAL_RCC_OscConfig+0x4c>
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	2b0c      	cmp	r3, #12
 8003060:	f040 808d 	bne.w	800317e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b01      	cmp	r3, #1
 8003068:	f040 8089 	bne.w	800317e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800306c:	4b93      	ldr	r3, [pc, #588]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d006      	beq.n	8003086 <HAL_RCC_OscConfig+0x66>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d102      	bne.n	8003086 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	f000 bc2d 	b.w	80038e0 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800308a:	4b8c      	ldr	r3, [pc, #560]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d004      	beq.n	80030a0 <HAL_RCC_OscConfig+0x80>
 8003096:	4b89      	ldr	r3, [pc, #548]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800309e:	e005      	b.n	80030ac <HAL_RCC_OscConfig+0x8c>
 80030a0:	4b86      	ldr	r3, [pc, #536]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a6:	091b      	lsrs	r3, r3, #4
 80030a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d224      	bcs.n	80030fa <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fdbd 	bl	8003c34 <RCC_SetFlashLatencyFromMSIRange>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f000 bc0d 	b.w	80038e0 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030c6:	4b7d      	ldr	r3, [pc, #500]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a7c      	ldr	r2, [pc, #496]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030cc:	f043 0308 	orr.w	r3, r3, #8
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	4b7a      	ldr	r3, [pc, #488]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	4977      	ldr	r1, [pc, #476]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030e4:	4b75      	ldr	r3, [pc, #468]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	4972      	ldr	r1, [pc, #456]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
 80030f8:	e025      	b.n	8003146 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030fa:	4b70      	ldr	r3, [pc, #448]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a6f      	ldr	r2, [pc, #444]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003100:	f043 0308 	orr.w	r3, r3, #8
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	4b6d      	ldr	r3, [pc, #436]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	496a      	ldr	r1, [pc, #424]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003114:	4313      	orrs	r3, r2
 8003116:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003118:	4b68      	ldr	r3, [pc, #416]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	4965      	ldr	r1, [pc, #404]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fd7c 	bl	8003c34 <RCC_SetFlashLatencyFromMSIRange>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e3cc      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003146:	f000 fcb3 	bl	8003ab0 <HAL_RCC_GetSysClockFreq>
 800314a:	4601      	mov	r1, r0
 800314c:	4b5b      	ldr	r3, [pc, #364]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	4a5a      	ldr	r2, [pc, #360]	; (80032c0 <HAL_RCC_OscConfig+0x2a0>)
 8003158:	5cd3      	ldrb	r3, [r2, r3]
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	fa21 f303 	lsr.w	r3, r1, r3
 8003162:	4a58      	ldr	r2, [pc, #352]	; (80032c4 <HAL_RCC_OscConfig+0x2a4>)
 8003164:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003166:	4b58      	ldr	r3, [pc, #352]	; (80032c8 <HAL_RCC_OscConfig+0x2a8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fd fe9a 	bl	8000ea4 <HAL_InitTick>
 8003170:	4603      	mov	r3, r0
 8003172:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003174:	7dfb      	ldrb	r3, [r7, #23]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d052      	beq.n	8003220 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800317a:	7dfb      	ldrb	r3, [r7, #23]
 800317c:	e3b0      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d032      	beq.n	80031ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003186:	4b4d      	ldr	r3, [pc, #308]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a4c      	ldr	r2, [pc, #304]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003192:	f7fd fed7 	bl	8000f44 <HAL_GetTick>
 8003196:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800319a:	f7fd fed3 	bl	8000f44 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e399      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ac:	4b43      	ldr	r3, [pc, #268]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031b8:	4b40      	ldr	r3, [pc, #256]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a3f      	ldr	r2, [pc, #252]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80031be:	f043 0308 	orr.w	r3, r3, #8
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	4b3d      	ldr	r3, [pc, #244]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	493a      	ldr	r1, [pc, #232]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031d6:	4b39      	ldr	r3, [pc, #228]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	021b      	lsls	r3, r3, #8
 80031e4:	4935      	ldr	r1, [pc, #212]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	604b      	str	r3, [r1, #4]
 80031ea:	e01a      	b.n	8003222 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031ec:	4b33      	ldr	r3, [pc, #204]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a32      	ldr	r2, [pc, #200]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031f8:	f7fd fea4 	bl	8000f44 <HAL_GetTick>
 80031fc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003200:	f7fd fea0 	bl	8000f44 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e366      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003212:	4b2a      	ldr	r3, [pc, #168]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x1e0>
 800321e:	e000      	b.n	8003222 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003220:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d073      	beq.n	8003316 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	2b08      	cmp	r3, #8
 8003232:	d005      	beq.n	8003240 <HAL_RCC_OscConfig+0x220>
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	2b0c      	cmp	r3, #12
 8003238:	d10e      	bne.n	8003258 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d10b      	bne.n	8003258 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003240:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d063      	beq.n	8003314 <HAL_RCC_OscConfig+0x2f4>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d15f      	bne.n	8003314 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e343      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003260:	d106      	bne.n	8003270 <HAL_RCC_OscConfig+0x250>
 8003262:	4b16      	ldr	r3, [pc, #88]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a15      	ldr	r2, [pc, #84]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e01d      	b.n	80032ac <HAL_RCC_OscConfig+0x28c>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003278:	d10c      	bne.n	8003294 <HAL_RCC_OscConfig+0x274>
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a0f      	ldr	r2, [pc, #60]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a0c      	ldr	r2, [pc, #48]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 800328c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e00b      	b.n	80032ac <HAL_RCC_OscConfig+0x28c>
 8003294:	4b09      	ldr	r3, [pc, #36]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a08      	ldr	r2, [pc, #32]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 800329a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a05      	ldr	r2, [pc, #20]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80032a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01b      	beq.n	80032ec <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fd fe46 	bl	8000f44 <HAL_GetTick>
 80032b8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ba:	e010      	b.n	80032de <HAL_RCC_OscConfig+0x2be>
 80032bc:	40021000 	.word	0x40021000
 80032c0:	08005424 	.word	0x08005424
 80032c4:	20000004 	.word	0x20000004
 80032c8:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fd fe3a 	bl	8000f44 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	; 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e300      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032de:	4ba0      	ldr	r3, [pc, #640]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x2ac>
 80032ea:	e014      	b.n	8003316 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fd fe2a 	bl	8000f44 <HAL_GetTick>
 80032f0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f4:	f7fd fe26 	bl	8000f44 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e2ec      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003306:	4b96      	ldr	r3, [pc, #600]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x2d4>
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d060      	beq.n	80033e4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	2b04      	cmp	r3, #4
 8003326:	d005      	beq.n	8003334 <HAL_RCC_OscConfig+0x314>
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	2b0c      	cmp	r3, #12
 800332c:	d119      	bne.n	8003362 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d116      	bne.n	8003362 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003334:	4b8a      	ldr	r3, [pc, #552]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_RCC_OscConfig+0x32c>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e2c9      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334c:	4b84      	ldr	r3, [pc, #528]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	061b      	lsls	r3, r3, #24
 800335a:	4981      	ldr	r1, [pc, #516]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 800335c:	4313      	orrs	r3, r2
 800335e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003360:	e040      	b.n	80033e4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d023      	beq.n	80033b2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800336a:	4b7d      	ldr	r3, [pc, #500]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a7c      	ldr	r2, [pc, #496]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 8003370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003376:	f7fd fde5 	bl	8000f44 <HAL_GetTick>
 800337a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337e:	f7fd fde1 	bl	8000f44 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e2a7      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003390:	4b73      	ldr	r3, [pc, #460]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339c:	4b70      	ldr	r3, [pc, #448]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	061b      	lsls	r3, r3, #24
 80033aa:	496d      	ldr	r1, [pc, #436]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	604b      	str	r3, [r1, #4]
 80033b0:	e018      	b.n	80033e4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b2:	4b6b      	ldr	r3, [pc, #428]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a6a      	ldr	r2, [pc, #424]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 80033b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7fd fdc1 	bl	8000f44 <HAL_GetTick>
 80033c2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c6:	f7fd fdbd 	bl	8000f44 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e283      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d8:	4b61      	ldr	r3, [pc, #388]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f0      	bne.n	80033c6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d07f      	beq.n	80034f0 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d05f      	beq.n	80034b8 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80033f8:	4b59      	ldr	r3, [pc, #356]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 80033fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033fe:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	429a      	cmp	r2, r3
 800340c:	d037      	beq.n	800347e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d006      	beq.n	8003426 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e25c      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d01b      	beq.n	8003468 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8003430:	4b4b      	ldr	r3, [pc, #300]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 8003432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003436:	4a4a      	ldr	r2, [pc, #296]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003440:	f7fd fd80 	bl	8000f44 <HAL_GetTick>
 8003444:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003448:	f7fd fd7c 	bl	8000f44 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b11      	cmp	r3, #17
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e242      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800345a:	4b41      	ldr	r3, [pc, #260]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 800345c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ef      	bne.n	8003448 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003468:	4b3d      	ldr	r3, [pc, #244]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 800346a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800346e:	f023 0210 	bic.w	r2, r3, #16
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	493a      	ldr	r1, [pc, #232]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800347e:	4b38      	ldr	r3, [pc, #224]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 8003480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003484:	4a36      	ldr	r2, [pc, #216]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348e:	f7fd fd59 	bl	8000f44 <HAL_GetTick>
 8003492:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003496:	f7fd fd55 	bl	8000f44 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b11      	cmp	r3, #17
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e21b      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034a8:	4b2d      	ldr	r3, [pc, #180]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 80034aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0ef      	beq.n	8003496 <HAL_RCC_OscConfig+0x476>
 80034b6:	e01b      	b.n	80034f0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b8:	4b29      	ldr	r3, [pc, #164]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 80034ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034be:	4a28      	ldr	r2, [pc, #160]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 80034c0:	f023 0301 	bic.w	r3, r3, #1
 80034c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c8:	f7fd fd3c 	bl	8000f44 <HAL_GetTick>
 80034cc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d0:	f7fd fd38 	bl	8000f44 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b11      	cmp	r3, #17
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e1fe      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034e2:	4b1f      	ldr	r3, [pc, #124]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 80034e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1ef      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80c1 	beq.w	8003680 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fe:	2300      	movs	r3, #0
 8003500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003504:	4b16      	ldr	r3, [pc, #88]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 8003506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10e      	bne.n	800352e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003510:	4b13      	ldr	r3, [pc, #76]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	4a12      	ldr	r2, [pc, #72]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 8003516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351a:	6593      	str	r3, [r2, #88]	; 0x58
 800351c:	4b10      	ldr	r3, [pc, #64]	; (8003560 <HAL_RCC_OscConfig+0x540>)
 800351e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003528:	2301      	movs	r3, #1
 800352a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800352e:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <HAL_RCC_OscConfig+0x544>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d11c      	bne.n	8003574 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800353a:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <HAL_RCC_OscConfig+0x544>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a09      	ldr	r2, [pc, #36]	; (8003564 <HAL_RCC_OscConfig+0x544>)
 8003540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003546:	f7fd fcfd 	bl	8000f44 <HAL_GetTick>
 800354a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800354c:	e00c      	b.n	8003568 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354e:	f7fd fcf9 	bl	8000f44 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d905      	bls.n	8003568 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e1bf      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
 8003560:	40021000 	.word	0x40021000
 8003564:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003568:	4bb1      	ldr	r3, [pc, #708]	; (8003830 <HAL_RCC_OscConfig+0x810>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0ec      	beq.n	800354e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d02c      	beq.n	80035da <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003580:	4bac      	ldr	r3, [pc, #688]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003592:	49a8      	ldr	r1, [pc, #672]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d010      	beq.n	80035c8 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80035a6:	4ba3      	ldr	r3, [pc, #652]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ac:	4aa1      	ldr	r2, [pc, #644]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80035ae:	f043 0304 	orr.w	r3, r3, #4
 80035b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80035b6:	4b9f      	ldr	r3, [pc, #636]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80035b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035bc:	4a9d      	ldr	r2, [pc, #628]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035c6:	e018      	b.n	80035fa <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80035c8:	4b9a      	ldr	r3, [pc, #616]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ce:	4a99      	ldr	r2, [pc, #612]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035d8:	e00f      	b.n	80035fa <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80035da:	4b96      	ldr	r3, [pc, #600]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80035dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e0:	4a94      	ldr	r2, [pc, #592]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80035e2:	f023 0301 	bic.w	r3, r3, #1
 80035e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80035ea:	4b92      	ldr	r3, [pc, #584]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f0:	4a90      	ldr	r2, [pc, #576]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80035f2:	f023 0304 	bic.w	r3, r3, #4
 80035f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d016      	beq.n	8003630 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003602:	f7fd fc9f 	bl	8000f44 <HAL_GetTick>
 8003606:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003608:	e00a      	b.n	8003620 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360a:	f7fd fc9b 	bl	8000f44 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f241 3288 	movw	r2, #5000	; 0x1388
 8003618:	4293      	cmp	r3, r2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e15f      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003620:	4b84      	ldr	r3, [pc, #528]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0ed      	beq.n	800360a <HAL_RCC_OscConfig+0x5ea>
 800362e:	e01d      	b.n	800366c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003630:	f7fd fc88 	bl	8000f44 <HAL_GetTick>
 8003634:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003636:	e00a      	b.n	800364e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003638:	f7fd fc84 	bl	8000f44 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e148      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800364e:	4b79      	ldr	r3, [pc, #484]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 8003650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1ed      	bne.n	8003638 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800365c:	4b75      	ldr	r3, [pc, #468]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	4a74      	ldr	r2, [pc, #464]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 8003664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800366c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003670:	2b01      	cmp	r3, #1
 8003672:	d105      	bne.n	8003680 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003674:	4b6f      	ldr	r3, [pc, #444]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 8003676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003678:	4a6e      	ldr	r2, [pc, #440]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 800367a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800367e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b00      	cmp	r3, #0
 800368a:	d03c      	beq.n	8003706 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01c      	beq.n	80036ce <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003694:	4b67      	ldr	r3, [pc, #412]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 8003696:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800369a:	4a66      	ldr	r2, [pc, #408]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a4:	f7fd fc4e 	bl	8000f44 <HAL_GetTick>
 80036a8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036ac:	f7fd fc4a 	bl	8000f44 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e110      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036be:	4b5d      	ldr	r3, [pc, #372]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80036c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0ef      	beq.n	80036ac <HAL_RCC_OscConfig+0x68c>
 80036cc:	e01b      	b.n	8003706 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036ce:	4b59      	ldr	r3, [pc, #356]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80036d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036d4:	4a57      	ldr	r2, [pc, #348]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80036d6:	f023 0301 	bic.w	r3, r3, #1
 80036da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036de:	f7fd fc31 	bl	8000f44 <HAL_GetTick>
 80036e2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036e6:	f7fd fc2d 	bl	8000f44 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e0f3      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036f8:	4b4e      	ldr	r3, [pc, #312]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80036fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1ef      	bne.n	80036e6 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 80e7 	beq.w	80038de <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	2b02      	cmp	r3, #2
 8003716:	f040 80b7 	bne.w	8003888 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800371a:	4b46      	ldr	r3, [pc, #280]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f003 0203 	and.w	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	429a      	cmp	r2, r3
 800372c:	d124      	bne.n	8003778 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003738:	3b01      	subs	r3, #1
 800373a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800373c:	429a      	cmp	r2, r3
 800373e:	d11b      	bne.n	8003778 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800374c:	429a      	cmp	r2, r3
 800374e:	d113      	bne.n	8003778 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375a:	085b      	lsrs	r3, r3, #1
 800375c:	3b01      	subs	r3, #1
 800375e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d109      	bne.n	8003778 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	3b01      	subs	r3, #1
 8003772:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d061      	beq.n	800383c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	2b0c      	cmp	r3, #12
 800377c:	d056      	beq.n	800382c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800377e:	4b2d      	ldr	r3, [pc, #180]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a2c      	ldr	r2, [pc, #176]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 8003784:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003788:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800378a:	f7fd fbdb 	bl	8000f44 <HAL_GetTick>
 800378e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003792:	f7fd fbd7 	bl	8000f44 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e09d      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037a4:	4b23      	ldr	r3, [pc, #140]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f0      	bne.n	8003792 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037b0:	4b20      	ldr	r3, [pc, #128]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	4b20      	ldr	r3, [pc, #128]	; (8003838 <HAL_RCC_OscConfig+0x818>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037c0:	3a01      	subs	r2, #1
 80037c2:	0112      	lsls	r2, r2, #4
 80037c4:	4311      	orrs	r1, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037ca:	0212      	lsls	r2, r2, #8
 80037cc:	4311      	orrs	r1, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037d2:	0852      	lsrs	r2, r2, #1
 80037d4:	3a01      	subs	r2, #1
 80037d6:	0552      	lsls	r2, r2, #21
 80037d8:	4311      	orrs	r1, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037de:	0852      	lsrs	r2, r2, #1
 80037e0:	3a01      	subs	r2, #1
 80037e2:	0652      	lsls	r2, r2, #25
 80037e4:	430a      	orrs	r2, r1
 80037e6:	4913      	ldr	r1, [pc, #76]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037ec:	4b11      	ldr	r3, [pc, #68]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a10      	ldr	r2, [pc, #64]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80037f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037f8:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	4a0d      	ldr	r2, [pc, #52]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 80037fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003802:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003804:	f7fd fb9e 	bl	8000f44 <HAL_GetTick>
 8003808:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380c:	f7fd fb9a 	bl	8000f44 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e060      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800381e:	4b05      	ldr	r3, [pc, #20]	; (8003834 <HAL_RCC_OscConfig+0x814>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800382a:	e058      	b.n	80038de <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e057      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
 8003830:	40007000 	.word	0x40007000
 8003834:	40021000 	.word	0x40021000
 8003838:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800383c:	4b2a      	ldr	r3, [pc, #168]	; (80038e8 <HAL_RCC_OscConfig+0x8c8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d14a      	bne.n	80038de <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003848:	4b27      	ldr	r3, [pc, #156]	; (80038e8 <HAL_RCC_OscConfig+0x8c8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a26      	ldr	r2, [pc, #152]	; (80038e8 <HAL_RCC_OscConfig+0x8c8>)
 800384e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003852:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003854:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <HAL_RCC_OscConfig+0x8c8>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4a23      	ldr	r2, [pc, #140]	; (80038e8 <HAL_RCC_OscConfig+0x8c8>)
 800385a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800385e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003860:	f7fd fb70 	bl	8000f44 <HAL_GetTick>
 8003864:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003868:	f7fd fb6c 	bl	8000f44 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e032      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800387a:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_RCC_OscConfig+0x8c8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x848>
 8003886:	e02a      	b.n	80038de <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	2b0c      	cmp	r3, #12
 800388c:	d025      	beq.n	80038da <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388e:	4b16      	ldr	r3, [pc, #88]	; (80038e8 <HAL_RCC_OscConfig+0x8c8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a15      	ldr	r2, [pc, #84]	; (80038e8 <HAL_RCC_OscConfig+0x8c8>)
 8003894:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003898:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800389a:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <HAL_RCC_OscConfig+0x8c8>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <HAL_RCC_OscConfig+0x8c8>)
 80038a0:	f023 0303 	bic.w	r3, r3, #3
 80038a4:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80038a6:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <HAL_RCC_OscConfig+0x8c8>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	4a0f      	ldr	r2, [pc, #60]	; (80038e8 <HAL_RCC_OscConfig+0x8c8>)
 80038ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038b0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fd fb47 	bl	8000f44 <HAL_GetTick>
 80038b6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ba:	f7fd fb43 	bl	8000f44 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e009      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <HAL_RCC_OscConfig+0x8c8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f0      	bne.n	80038ba <HAL_RCC_OscConfig+0x89a>
 80038d8:	e001      	b.n	80038de <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3728      	adds	r7, #40	; 0x28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40021000 	.word	0x40021000

080038ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0c8      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003900:	4b66      	ldr	r3, [pc, #408]	; (8003a9c <HAL_RCC_ClockConfig+0x1b0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d910      	bls.n	8003930 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390e:	4b63      	ldr	r3, [pc, #396]	; (8003a9c <HAL_RCC_ClockConfig+0x1b0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f023 0207 	bic.w	r2, r3, #7
 8003916:	4961      	ldr	r1, [pc, #388]	; (8003a9c <HAL_RCC_ClockConfig+0x1b0>)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	4313      	orrs	r3, r2
 800391c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800391e:	4b5f      	ldr	r3, [pc, #380]	; (8003a9c <HAL_RCC_ClockConfig+0x1b0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0b0      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d04c      	beq.n	80039d6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b03      	cmp	r3, #3
 8003942:	d107      	bne.n	8003954 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003944:	4b56      	ldr	r3, [pc, #344]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d121      	bne.n	8003994 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e09e      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d107      	bne.n	800396c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800395c:	4b50      	ldr	r3, [pc, #320]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b4>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d115      	bne.n	8003994 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e092      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d107      	bne.n	8003984 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003974:	4b4a      	ldr	r3, [pc, #296]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d109      	bne.n	8003994 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e086      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003984:	4b46      	ldr	r3, [pc, #280]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e07e      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003994:	4b42      	ldr	r3, [pc, #264]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b4>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f023 0203 	bic.w	r2, r3, #3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	493f      	ldr	r1, [pc, #252]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b4>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a6:	f7fd facd 	bl	8000f44 <HAL_GetTick>
 80039aa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ac:	e00a      	b.n	80039c4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ae:	f7fd fac9 	bl	8000f44 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039bc:	4293      	cmp	r3, r2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e066      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c4:	4b36      	ldr	r3, [pc, #216]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b4>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 020c 	and.w	r2, r3, #12
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d1eb      	bne.n	80039ae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d008      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e2:	4b2f      	ldr	r3, [pc, #188]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b4>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	492c      	ldr	r1, [pc, #176]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b4>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039f4:	4b29      	ldr	r3, [pc, #164]	; (8003a9c <HAL_RCC_ClockConfig+0x1b0>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d210      	bcs.n	8003a24 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <HAL_RCC_ClockConfig+0x1b0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 0207 	bic.w	r2, r3, #7
 8003a0a:	4924      	ldr	r1, [pc, #144]	; (8003a9c <HAL_RCC_ClockConfig+0x1b0>)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <HAL_RCC_ClockConfig+0x1b0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e036      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a30:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	4918      	ldr	r1, [pc, #96]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d009      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a4e:	4b14      	ldr	r3, [pc, #80]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4910      	ldr	r1, [pc, #64]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a62:	f000 f825 	bl	8003ab0 <HAL_RCC_GetSysClockFreq>
 8003a66:	4601      	mov	r1, r0
 8003a68:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	4a0c      	ldr	r2, [pc, #48]	; (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a74:	5cd3      	ldrb	r3, [r2, r3]
 8003a76:	f003 031f 	and.w	r3, r3, #31
 8003a7a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a7e:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a82:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <HAL_RCC_ClockConfig+0x1c0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fd fa0c 	bl	8000ea4 <HAL_InitTick>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a90:	7afb      	ldrb	r3, [r7, #11]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40022000 	.word	0x40022000
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	08005424 	.word	0x08005424
 8003aa8:	20000004 	.word	0x20000004
 8003aac:	20000008 	.word	0x20000008

08003ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b089      	sub	sp, #36	; 0x24
 8003ab4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	2300      	movs	r3, #0
 8003abc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003abe:	4b3d      	ldr	r3, [pc, #244]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ac8:	4b3a      	ldr	r3, [pc, #232]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	2b0c      	cmp	r3, #12
 8003adc:	d121      	bne.n	8003b22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d11e      	bne.n	8003b22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ae4:	4b33      	ldr	r3, [pc, #204]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d107      	bne.n	8003b00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003af0:	4b30      	ldr	r3, [pc, #192]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003af6:	0a1b      	lsrs	r3, r3, #8
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	e005      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b00:	4b2c      	ldr	r3, [pc, #176]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b0c:	4a2a      	ldr	r2, [pc, #168]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10d      	bne.n	8003b38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b20:	e00a      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d102      	bne.n	8003b2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b28:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	e004      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d101      	bne.n	8003b38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b34:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2b0c      	cmp	r3, #12
 8003b3c:	d133      	bne.n	8003ba6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b3e:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d002      	beq.n	8003b54 <HAL_RCC_GetSysClockFreq+0xa4>
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d003      	beq.n	8003b5a <HAL_RCC_GetSysClockFreq+0xaa>
 8003b52:	e005      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b54:	4b19      	ldr	r3, [pc, #100]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b56:	617b      	str	r3, [r7, #20]
      break;
 8003b58:	e005      	b.n	8003b66 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b5a:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b5c:	617b      	str	r3, [r7, #20]
      break;
 8003b5e:	e002      	b.n	8003b66 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	617b      	str	r3, [r7, #20]
      break;
 8003b64:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	091b      	lsrs	r3, r3, #4
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	3301      	adds	r3, #1
 8003b72:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	0a1b      	lsrs	r3, r3, #8
 8003b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	fb02 f203 	mul.w	r2, r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	0e5b      	lsrs	r3, r3, #25
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	3301      	adds	r3, #1
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ba6:	69bb      	ldr	r3, [r7, #24]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3724      	adds	r7, #36	; 0x24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	0800543c 	.word	0x0800543c
 8003bbc:	00f42400 	.word	0x00f42400
 8003bc0:	007a1200 	.word	0x007a1200

08003bc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc8:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bca:	681b      	ldr	r3, [r3, #0]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000004 	.word	0x20000004

08003bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003be0:	f7ff fff0 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003be4:	4601      	mov	r1, r0
 8003be6:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	0a1b      	lsrs	r3, r3, #8
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bf2:	5cd3      	ldrb	r3, [r2, r3]
 8003bf4:	f003 031f 	and.w	r3, r3, #31
 8003bf8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40021000 	.word	0x40021000
 8003c04:	08005434 	.word	0x08005434

08003c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c0c:	f7ff ffda 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003c10:	4601      	mov	r1, r0
 8003c12:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	0adb      	lsrs	r3, r3, #11
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	4a04      	ldr	r2, [pc, #16]	; (8003c30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c1e:	5cd3      	ldrb	r3, [r2, r3]
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	08005434 	.word	0x08005434

08003c34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c40:	4b2a      	ldr	r3, [pc, #168]	; (8003cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c4c:	f7ff f984 	bl	8002f58 <HAL_PWREx_GetVoltageRange>
 8003c50:	6178      	str	r0, [r7, #20]
 8003c52:	e014      	b.n	8003c7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c54:	4b25      	ldr	r3, [pc, #148]	; (8003cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	4a24      	ldr	r2, [pc, #144]	; (8003cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c60:	4b22      	ldr	r3, [pc, #136]	; (8003cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c6c:	f7ff f974 	bl	8002f58 <HAL_PWREx_GetVoltageRange>
 8003c70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c72:	4b1e      	ldr	r3, [pc, #120]	; (8003cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c76:	4a1d      	ldr	r2, [pc, #116]	; (8003cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c84:	d10b      	bne.n	8003c9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b80      	cmp	r3, #128	; 0x80
 8003c8a:	d919      	bls.n	8003cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2ba0      	cmp	r3, #160	; 0xa0
 8003c90:	d902      	bls.n	8003c98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c92:	2302      	movs	r3, #2
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	e013      	b.n	8003cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c98:	2301      	movs	r3, #1
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	e010      	b.n	8003cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b80      	cmp	r3, #128	; 0x80
 8003ca2:	d902      	bls.n	8003caa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	e00a      	b.n	8003cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b80      	cmp	r3, #128	; 0x80
 8003cae:	d102      	bne.n	8003cb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	e004      	b.n	8003cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b70      	cmp	r3, #112	; 0x70
 8003cba:	d101      	bne.n	8003cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f023 0207 	bic.w	r2, r3, #7
 8003cc8:	4909      	ldr	r1, [pc, #36]	; (8003cf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cd0:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d001      	beq.n	8003ce2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40022000 	.word	0x40022000

08003cf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d00:	2300      	movs	r3, #0
 8003d02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 809e 	beq.w	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d12:	2300      	movs	r3, #0
 8003d14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d16:	4b46      	ldr	r3, [pc, #280]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003d26:	2300      	movs	r3, #0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00d      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2c:	4b40      	ldr	r3, [pc, #256]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d30:	4a3f      	ldr	r2, [pc, #252]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d36:	6593      	str	r3, [r2, #88]	; 0x58
 8003d38:	4b3d      	ldr	r3, [pc, #244]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d44:	2301      	movs	r3, #1
 8003d46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d48:	4b3a      	ldr	r3, [pc, #232]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a39      	ldr	r2, [pc, #228]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d54:	f7fd f8f6 	bl	8000f44 <HAL_GetTick>
 8003d58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d5a:	e009      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d5c:	f7fd f8f2 	bl	8000f44 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d902      	bls.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	74fb      	strb	r3, [r7, #19]
        break;
 8003d6e:	e005      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d70:	4b30      	ldr	r3, [pc, #192]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0ef      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003d7c:	7cfb      	ldrb	r3, [r7, #19]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d15a      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d82:	4b2b      	ldr	r3, [pc, #172]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01e      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d019      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d9e:	4b24      	ldr	r3, [pc, #144]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003daa:	4b21      	ldr	r3, [pc, #132]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db0:	4a1f      	ldr	r2, [pc, #124]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dba:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc0:	4a1b      	ldr	r2, [pc, #108]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dca:	4a19      	ldr	r2, [pc, #100]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d016      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fd f8b2 	bl	8000f44 <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003de2:	e00b      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de4:	f7fd f8ae 	bl	8000f44 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d902      	bls.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	74fb      	strb	r3, [r7, #19]
            break;
 8003dfa:	e006      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0ec      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003e0a:	7cfb      	ldrb	r3, [r7, #19]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10b      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e10:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	4904      	ldr	r1, [pc, #16]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e26:	e009      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e28:	7cfb      	ldrb	r3, [r7, #19]
 8003e2a:	74bb      	strb	r3, [r7, #18]
 8003e2c:	e006      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003e2e:	bf00      	nop
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e3c:	7c7b      	ldrb	r3, [r7, #17]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d105      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e42:	4b6e      	ldr	r3, [pc, #440]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e46:	4a6d      	ldr	r2, [pc, #436]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e5a:	4b68      	ldr	r3, [pc, #416]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e60:	f023 0203 	bic.w	r2, r3, #3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	4964      	ldr	r1, [pc, #400]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e7c:	4b5f      	ldr	r3, [pc, #380]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	f023 020c 	bic.w	r2, r3, #12
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	495c      	ldr	r1, [pc, #368]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e9e:	4b57      	ldr	r3, [pc, #348]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4953      	ldr	r1, [pc, #332]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ec0:	4b4e      	ldr	r3, [pc, #312]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	494b      	ldr	r1, [pc, #300]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ee2:	4b46      	ldr	r3, [pc, #280]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	4942      	ldr	r1, [pc, #264]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f04:	4b3d      	ldr	r3, [pc, #244]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	493a      	ldr	r1, [pc, #232]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f26:	4b35      	ldr	r3, [pc, #212]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	4931      	ldr	r1, [pc, #196]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f48:	4b2c      	ldr	r3, [pc, #176]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	4929      	ldr	r1, [pc, #164]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f6a:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	4920      	ldr	r1, [pc, #128]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d015      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f8c:	4b1b      	ldr	r3, [pc, #108]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	4918      	ldr	r1, [pc, #96]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003faa:	d105      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fac:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4a12      	ldr	r2, [pc, #72]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fb6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d015      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fc4:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	490a      	ldr	r1, [pc, #40]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fe2:	d105      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ff0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40021000 	.word	0x40021000

08004000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e049      	b.n	80040a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fc fdbc 	bl	8000ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3304      	adds	r3, #4
 800403c:	4619      	mov	r1, r3
 800403e:	4610      	mov	r0, r2
 8004040:	f000 faee 	bl	8004620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d001      	beq.n	80040c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e03b      	b.n	8004140 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a19      	ldr	r2, [pc, #100]	; (800414c <HAL_TIM_Base_Start_IT+0x9c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d009      	beq.n	80040fe <HAL_TIM_Base_Start_IT+0x4e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f2:	d004      	beq.n	80040fe <HAL_TIM_Base_Start_IT+0x4e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a15      	ldr	r2, [pc, #84]	; (8004150 <HAL_TIM_Base_Start_IT+0xa0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d115      	bne.n	800412a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	4b13      	ldr	r3, [pc, #76]	; (8004154 <HAL_TIM_Base_Start_IT+0xa4>)
 8004106:	4013      	ands	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b06      	cmp	r3, #6
 800410e:	d015      	beq.n	800413c <HAL_TIM_Base_Start_IT+0x8c>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004116:	d011      	beq.n	800413c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004128:	e008      	b.n	800413c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f042 0201 	orr.w	r2, r2, #1
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e000      	b.n	800413e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800413c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	40012c00 	.word	0x40012c00
 8004150:	40014000 	.word	0x40014000
 8004154:	00010007 	.word	0x00010007

08004158 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e041      	b.n	80041f0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d106      	bne.n	8004186 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f839 	bl	80041f8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2202      	movs	r2, #2
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3304      	adds	r3, #4
 8004196:	4619      	mov	r1, r3
 8004198:	4610      	mov	r0, r2
 800419a:	f000 fa41 	bl	8004620 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0208 	bic.w	r2, r2, #8
 80041ac:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6819      	ldr	r1, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b02      	cmp	r3, #2
 8004220:	d122      	bne.n	8004268 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b02      	cmp	r3, #2
 800422e:	d11b      	bne.n	8004268 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0202 	mvn.w	r2, #2
 8004238:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f9c8 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 8004254:	e005      	b.n	8004262 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f9ba 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f9cb 	bl	80045f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b04      	cmp	r3, #4
 8004274:	d122      	bne.n	80042bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b04      	cmp	r3, #4
 8004282:	d11b      	bne.n	80042bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0204 	mvn.w	r2, #4
 800428c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2202      	movs	r2, #2
 8004292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f99e 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 80042a8:	e005      	b.n	80042b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f990 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f9a1 	bl	80045f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d122      	bne.n	8004310 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d11b      	bne.n	8004310 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0208 	mvn.w	r2, #8
 80042e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2204      	movs	r2, #4
 80042e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f974 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 80042fc:	e005      	b.n	800430a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f966 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f977 	bl	80045f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0310 	and.w	r3, r3, #16
 800431a:	2b10      	cmp	r3, #16
 800431c:	d122      	bne.n	8004364 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b10      	cmp	r3, #16
 800432a:	d11b      	bne.n	8004364 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0210 	mvn.w	r2, #16
 8004334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2208      	movs	r2, #8
 800433a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f94a 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 8004350:	e005      	b.n	800435e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f93c 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f94d 	bl	80045f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b01      	cmp	r3, #1
 8004370:	d10e      	bne.n	8004390 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b01      	cmp	r3, #1
 800437e:	d107      	bne.n	8004390 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0201 	mvn.w	r2, #1
 8004388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f916 	bl	80045bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439a:	2b80      	cmp	r3, #128	; 0x80
 800439c:	d10e      	bne.n	80043bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a8:	2b80      	cmp	r3, #128	; 0x80
 80043aa:	d107      	bne.n	80043bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 faa0 	bl	80048fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ca:	d10e      	bne.n	80043ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d6:	2b80      	cmp	r3, #128	; 0x80
 80043d8:	d107      	bne.n	80043ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fa93 	bl	8004910 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f4:	2b40      	cmp	r3, #64	; 0x40
 80043f6:	d10e      	bne.n	8004416 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b40      	cmp	r3, #64	; 0x40
 8004404:	d107      	bne.n	8004416 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800440e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f8fb 	bl	800460c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b20      	cmp	r3, #32
 8004422:	d10e      	bne.n	8004442 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b20      	cmp	r3, #32
 8004430:	d107      	bne.n	8004442 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f06f 0220 	mvn.w	r2, #32
 800443a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fa53 	bl	80048e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004442:	bf00      	nop
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_TIM_ConfigClockSource+0x18>
 800445e:	2302      	movs	r3, #2
 8004460:	e0a8      	b.n	80045b4 <HAL_TIM_ConfigClockSource+0x16a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2202      	movs	r2, #2
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004480:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004484:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800448c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d067      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x124>
 800449e:	2b40      	cmp	r3, #64	; 0x40
 80044a0:	d80b      	bhi.n	80044ba <HAL_TIM_ConfigClockSource+0x70>
 80044a2:	2b10      	cmp	r3, #16
 80044a4:	d073      	beq.n	800458e <HAL_TIM_ConfigClockSource+0x144>
 80044a6:	2b10      	cmp	r3, #16
 80044a8:	d802      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x66>
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d06f      	beq.n	800458e <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80044ae:	e078      	b.n	80045a2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d06c      	beq.n	800458e <HAL_TIM_ConfigClockSource+0x144>
 80044b4:	2b30      	cmp	r3, #48	; 0x30
 80044b6:	d06a      	beq.n	800458e <HAL_TIM_ConfigClockSource+0x144>
      break;
 80044b8:	e073      	b.n	80045a2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80044ba:	2b70      	cmp	r3, #112	; 0x70
 80044bc:	d00d      	beq.n	80044da <HAL_TIM_ConfigClockSource+0x90>
 80044be:	2b70      	cmp	r3, #112	; 0x70
 80044c0:	d804      	bhi.n	80044cc <HAL_TIM_ConfigClockSource+0x82>
 80044c2:	2b50      	cmp	r3, #80	; 0x50
 80044c4:	d033      	beq.n	800452e <HAL_TIM_ConfigClockSource+0xe4>
 80044c6:	2b60      	cmp	r3, #96	; 0x60
 80044c8:	d041      	beq.n	800454e <HAL_TIM_ConfigClockSource+0x104>
      break;
 80044ca:	e06a      	b.n	80045a2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80044cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d0:	d066      	beq.n	80045a0 <HAL_TIM_ConfigClockSource+0x156>
 80044d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d6:	d017      	beq.n	8004508 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80044d8:	e063      	b.n	80045a2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	6899      	ldr	r1, [r3, #8]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f000 f977 	bl	80047dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	609a      	str	r2, [r3, #8]
      break;
 8004506:	e04c      	b.n	80045a2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	6899      	ldr	r1, [r3, #8]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f000 f960 	bl	80047dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800452a:	609a      	str	r2, [r3, #8]
      break;
 800452c:	e039      	b.n	80045a2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6859      	ldr	r1, [r3, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	461a      	mov	r2, r3
 800453c:	f000 f8d4 	bl	80046e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2150      	movs	r1, #80	; 0x50
 8004546:	4618      	mov	r0, r3
 8004548:	f000 f92d 	bl	80047a6 <TIM_ITRx_SetConfig>
      break;
 800454c:	e029      	b.n	80045a2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6859      	ldr	r1, [r3, #4]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	461a      	mov	r2, r3
 800455c:	f000 f8f3 	bl	8004746 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2160      	movs	r1, #96	; 0x60
 8004566:	4618      	mov	r0, r3
 8004568:	f000 f91d 	bl	80047a6 <TIM_ITRx_SetConfig>
      break;
 800456c:	e019      	b.n	80045a2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	6859      	ldr	r1, [r3, #4]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	461a      	mov	r2, r3
 800457c:	f000 f8b4 	bl	80046e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2140      	movs	r1, #64	; 0x40
 8004586:	4618      	mov	r0, r3
 8004588:	f000 f90d 	bl	80047a6 <TIM_ITRx_SetConfig>
      break;
 800458c:	e009      	b.n	80045a2 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4619      	mov	r1, r3
 8004598:	4610      	mov	r0, r2
 800459a:	f000 f904 	bl	80047a6 <TIM_ITRx_SetConfig>
        break;
 800459e:	e000      	b.n	80045a2 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80045a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a2a      	ldr	r2, [pc, #168]	; (80046dc <TIM_Base_SetConfig+0xbc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_Base_SetConfig+0x20>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463e:	d108      	bne.n	8004652 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a21      	ldr	r2, [pc, #132]	; (80046dc <TIM_Base_SetConfig+0xbc>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00b      	beq.n	8004672 <TIM_Base_SetConfig+0x52>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004660:	d007      	beq.n	8004672 <TIM_Base_SetConfig+0x52>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <TIM_Base_SetConfig+0xc0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d003      	beq.n	8004672 <TIM_Base_SetConfig+0x52>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a1d      	ldr	r2, [pc, #116]	; (80046e4 <TIM_Base_SetConfig+0xc4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d108      	bne.n	8004684 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4313      	orrs	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a0c      	ldr	r2, [pc, #48]	; (80046dc <TIM_Base_SetConfig+0xbc>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d007      	beq.n	80046c0 <TIM_Base_SetConfig+0xa0>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a0b      	ldr	r2, [pc, #44]	; (80046e0 <TIM_Base_SetConfig+0xc0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d003      	beq.n	80046c0 <TIM_Base_SetConfig+0xa0>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a0a      	ldr	r2, [pc, #40]	; (80046e4 <TIM_Base_SetConfig+0xc4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d103      	bne.n	80046c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	691a      	ldr	r2, [r3, #16]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	615a      	str	r2, [r3, #20]
}
 80046ce:	bf00      	nop
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	40012c00 	.word	0x40012c00
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40014400 	.word	0x40014400

080046e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	f023 0201 	bic.w	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f023 030a 	bic.w	r3, r3, #10
 8004724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4313      	orrs	r3, r2
 800472c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	621a      	str	r2, [r3, #32]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004746:	b480      	push	{r7}
 8004748:	b087      	sub	sp, #28
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f023 0210 	bic.w	r2, r3, #16
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004770:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	031b      	lsls	r3, r3, #12
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004782:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	621a      	str	r2, [r3, #32]
}
 800479a:	bf00      	nop
 800479c:	371c      	adds	r7, #28
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b085      	sub	sp, #20
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f043 0307 	orr.w	r3, r3, #7
 80047c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	609a      	str	r2, [r3, #8]
}
 80047d0:	bf00      	nop
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	021a      	lsls	r2, r3, #8
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	431a      	orrs	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4313      	orrs	r3, r2
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	609a      	str	r2, [r3, #8]
}
 8004810:	bf00      	nop
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004830:	2302      	movs	r3, #2
 8004832:	e04f      	b.n	80048d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a21      	ldr	r2, [pc, #132]	; (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d108      	bne.n	8004870 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004864:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	4313      	orrs	r3, r2
 800486e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a14      	ldr	r2, [pc, #80]	; (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d009      	beq.n	80048a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489c:	d004      	beq.n	80048a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a10      	ldr	r2, [pc, #64]	; (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d10c      	bne.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	40012c00 	.word	0x40012c00
 80048e4:	40014000 	.word	0x40014000

080048e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e040      	b.n	80049b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fc f952 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2224      	movs	r2, #36	; 0x24
 8004950:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0201 	bic.w	r2, r2, #1
 8004960:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f98c 	bl	8004c80 <UART_SetConfig>
 8004968:	4603      	mov	r3, r0
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e022      	b.n	80049b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fbb6 	bl	80050ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800498e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800499e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fc3d 	bl	8005230 <UART_CheckIdleState>
 80049b6:	4603      	mov	r3, r0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08a      	sub	sp, #40	; 0x28
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	4613      	mov	r3, r2
 80049ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	f040 8081 	bne.w	8004adc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <HAL_UART_Transmit+0x26>
 80049e0:	88fb      	ldrh	r3, [r7, #6]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e079      	b.n	8004ade <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_UART_Transmit+0x38>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e072      	b.n	8004ade <HAL_UART_Transmit+0x11e>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2221      	movs	r2, #33	; 0x21
 8004a0a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004a0c:	f7fc fa9a 	bl	8000f44 <HAL_GetTick>
 8004a10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	88fa      	ldrh	r2, [r7, #6]
 8004a16:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	88fa      	ldrh	r2, [r7, #6]
 8004a1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2a:	d108      	bne.n	8004a3e <HAL_UART_Transmit+0x7e>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d104      	bne.n	8004a3e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	61bb      	str	r3, [r7, #24]
 8004a3c:	e003      	b.n	8004a46 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004a4e:	e02d      	b.n	8004aac <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2200      	movs	r2, #0
 8004a58:	2180      	movs	r1, #128	; 0x80
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 fc2d 	bl	80052ba <UART_WaitOnFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e039      	b.n	8004ade <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10b      	bne.n	8004a88 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	881a      	ldrh	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a7c:	b292      	uxth	r2, r2
 8004a7e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	3302      	adds	r3, #2
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	e008      	b.n	8004a9a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	781a      	ldrb	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	b292      	uxth	r2, r2
 8004a92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	3301      	adds	r3, #1
 8004a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1cb      	bne.n	8004a50 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2140      	movs	r1, #64	; 0x40
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 fbf9 	bl	80052ba <UART_WaitOnFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e005      	b.n	8004ade <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e000      	b.n	8004ade <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004adc:	2302      	movs	r3, #2
  }
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3720      	adds	r7, #32
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b08a      	sub	sp, #40	; 0x28
 8004aea:	af02      	add	r7, sp, #8
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	603b      	str	r3, [r7, #0]
 8004af2:	4613      	mov	r3, r2
 8004af4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	f040 80bb 	bne.w	8004c76 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_UART_Receive+0x26>
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0b3      	b.n	8004c78 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_UART_Receive+0x38>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e0ac      	b.n	8004c78 <HAL_UART_Receive+0x192>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2222      	movs	r2, #34	; 0x22
 8004b30:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004b32:	f7fc fa07 	bl	8000f44 <HAL_GetTick>
 8004b36:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	88fa      	ldrh	r2, [r7, #6]
 8004b3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	88fa      	ldrh	r2, [r7, #6]
 8004b44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b50:	d10e      	bne.n	8004b70 <HAL_UART_Receive+0x8a>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d105      	bne.n	8004b66 <HAL_UART_Receive+0x80>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b64:	e02d      	b.n	8004bc2 <HAL_UART_Receive+0xdc>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	22ff      	movs	r2, #255	; 0xff
 8004b6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b6e:	e028      	b.n	8004bc2 <HAL_UART_Receive+0xdc>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10d      	bne.n	8004b94 <HAL_UART_Receive+0xae>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d104      	bne.n	8004b8a <HAL_UART_Receive+0xa4>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	22ff      	movs	r2, #255	; 0xff
 8004b84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b88:	e01b      	b.n	8004bc2 <HAL_UART_Receive+0xdc>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	227f      	movs	r2, #127	; 0x7f
 8004b8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b92:	e016      	b.n	8004bc2 <HAL_UART_Receive+0xdc>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b9c:	d10d      	bne.n	8004bba <HAL_UART_Receive+0xd4>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d104      	bne.n	8004bb0 <HAL_UART_Receive+0xca>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	227f      	movs	r2, #127	; 0x7f
 8004baa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bae:	e008      	b.n	8004bc2 <HAL_UART_Receive+0xdc>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	223f      	movs	r2, #63	; 0x3f
 8004bb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bb8:	e003      	b.n	8004bc2 <HAL_UART_Receive+0xdc>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004bc8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd2:	d108      	bne.n	8004be6 <HAL_UART_Receive+0x100>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d104      	bne.n	8004be6 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	e003      	b.n	8004bee <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004bf6:	e033      	b.n	8004c60 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	2120      	movs	r1, #32
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fb59 	bl	80052ba <UART_WaitOnFlagUntilTimeout>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e032      	b.n	8004c78 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10c      	bne.n	8004c32 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	8a7b      	ldrh	r3, [r7, #18]
 8004c22:	4013      	ands	r3, r2
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	3302      	adds	r3, #2
 8004c2e:	61bb      	str	r3, [r7, #24]
 8004c30:	e00d      	b.n	8004c4e <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	8a7b      	ldrh	r3, [r7, #18]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	4013      	ands	r3, r2
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1c5      	bne.n	8004bf8 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e000      	b.n	8004c78 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8004c76:	2302      	movs	r3, #2
  }
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3720      	adds	r7, #32
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c80:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004c84:	b088      	sub	sp, #32
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4baa      	ldr	r3, [pc, #680]	; (8004f58 <UART_SetConfig+0x2d8>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	69f9      	ldr	r1, [r7, #28]
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68da      	ldr	r2, [r3, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4aa0      	ldr	r2, [pc, #640]	; (8004f5c <UART_SetConfig+0x2dc>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d004      	beq.n	8004cea <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	69fa      	ldr	r2, [r7, #28]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a97      	ldr	r2, [pc, #604]	; (8004f60 <UART_SetConfig+0x2e0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d121      	bne.n	8004d4c <UART_SetConfig+0xcc>
 8004d08:	4b96      	ldr	r3, [pc, #600]	; (8004f64 <UART_SetConfig+0x2e4>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d816      	bhi.n	8004d44 <UART_SetConfig+0xc4>
 8004d16:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <UART_SetConfig+0x9c>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d2d 	.word	0x08004d2d
 8004d20:	08004d39 	.word	0x08004d39
 8004d24:	08004d33 	.word	0x08004d33
 8004d28:	08004d3f 	.word	0x08004d3f
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	76fb      	strb	r3, [r7, #27]
 8004d30:	e098      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004d32:	2302      	movs	r3, #2
 8004d34:	76fb      	strb	r3, [r7, #27]
 8004d36:	e095      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004d38:	2304      	movs	r3, #4
 8004d3a:	76fb      	strb	r3, [r7, #27]
 8004d3c:	e092      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004d3e:	2308      	movs	r3, #8
 8004d40:	76fb      	strb	r3, [r7, #27]
 8004d42:	e08f      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004d44:	2310      	movs	r3, #16
 8004d46:	76fb      	strb	r3, [r7, #27]
 8004d48:	bf00      	nop
 8004d4a:	e08b      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a85      	ldr	r2, [pc, #532]	; (8004f68 <UART_SetConfig+0x2e8>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d134      	bne.n	8004dc0 <UART_SetConfig+0x140>
 8004d56:	4b83      	ldr	r3, [pc, #524]	; (8004f64 <UART_SetConfig+0x2e4>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5c:	f003 030c 	and.w	r3, r3, #12
 8004d60:	2b0c      	cmp	r3, #12
 8004d62:	d829      	bhi.n	8004db8 <UART_SetConfig+0x138>
 8004d64:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <UART_SetConfig+0xec>)
 8004d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6a:	bf00      	nop
 8004d6c:	08004da1 	.word	0x08004da1
 8004d70:	08004db9 	.word	0x08004db9
 8004d74:	08004db9 	.word	0x08004db9
 8004d78:	08004db9 	.word	0x08004db9
 8004d7c:	08004dad 	.word	0x08004dad
 8004d80:	08004db9 	.word	0x08004db9
 8004d84:	08004db9 	.word	0x08004db9
 8004d88:	08004db9 	.word	0x08004db9
 8004d8c:	08004da7 	.word	0x08004da7
 8004d90:	08004db9 	.word	0x08004db9
 8004d94:	08004db9 	.word	0x08004db9
 8004d98:	08004db9 	.word	0x08004db9
 8004d9c:	08004db3 	.word	0x08004db3
 8004da0:	2300      	movs	r3, #0
 8004da2:	76fb      	strb	r3, [r7, #27]
 8004da4:	e05e      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004da6:	2302      	movs	r3, #2
 8004da8:	76fb      	strb	r3, [r7, #27]
 8004daa:	e05b      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004dac:	2304      	movs	r3, #4
 8004dae:	76fb      	strb	r3, [r7, #27]
 8004db0:	e058      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004db2:	2308      	movs	r3, #8
 8004db4:	76fb      	strb	r3, [r7, #27]
 8004db6:	e055      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004db8:	2310      	movs	r3, #16
 8004dba:	76fb      	strb	r3, [r7, #27]
 8004dbc:	bf00      	nop
 8004dbe:	e051      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a69      	ldr	r2, [pc, #420]	; (8004f6c <UART_SetConfig+0x2ec>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d120      	bne.n	8004e0c <UART_SetConfig+0x18c>
 8004dca:	4b66      	ldr	r3, [pc, #408]	; (8004f64 <UART_SetConfig+0x2e4>)
 8004dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	d00f      	beq.n	8004df8 <UART_SetConfig+0x178>
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d802      	bhi.n	8004de2 <UART_SetConfig+0x162>
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <UART_SetConfig+0x16c>
 8004de0:	e010      	b.n	8004e04 <UART_SetConfig+0x184>
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	d005      	beq.n	8004df2 <UART_SetConfig+0x172>
 8004de6:	2b30      	cmp	r3, #48	; 0x30
 8004de8:	d009      	beq.n	8004dfe <UART_SetConfig+0x17e>
 8004dea:	e00b      	b.n	8004e04 <UART_SetConfig+0x184>
 8004dec:	2300      	movs	r3, #0
 8004dee:	76fb      	strb	r3, [r7, #27]
 8004df0:	e038      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004df2:	2302      	movs	r3, #2
 8004df4:	76fb      	strb	r3, [r7, #27]
 8004df6:	e035      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004df8:	2304      	movs	r3, #4
 8004dfa:	76fb      	strb	r3, [r7, #27]
 8004dfc:	e032      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004dfe:	2308      	movs	r3, #8
 8004e00:	76fb      	strb	r3, [r7, #27]
 8004e02:	e02f      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004e04:	2310      	movs	r3, #16
 8004e06:	76fb      	strb	r3, [r7, #27]
 8004e08:	bf00      	nop
 8004e0a:	e02b      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a52      	ldr	r2, [pc, #328]	; (8004f5c <UART_SetConfig+0x2dc>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d124      	bne.n	8004e60 <UART_SetConfig+0x1e0>
 8004e16:	4b53      	ldr	r3, [pc, #332]	; (8004f64 <UART_SetConfig+0x2e4>)
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e24:	d012      	beq.n	8004e4c <UART_SetConfig+0x1cc>
 8004e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2a:	d802      	bhi.n	8004e32 <UART_SetConfig+0x1b2>
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d007      	beq.n	8004e40 <UART_SetConfig+0x1c0>
 8004e30:	e012      	b.n	8004e58 <UART_SetConfig+0x1d8>
 8004e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e36:	d006      	beq.n	8004e46 <UART_SetConfig+0x1c6>
 8004e38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e3c:	d009      	beq.n	8004e52 <UART_SetConfig+0x1d2>
 8004e3e:	e00b      	b.n	8004e58 <UART_SetConfig+0x1d8>
 8004e40:	2300      	movs	r3, #0
 8004e42:	76fb      	strb	r3, [r7, #27]
 8004e44:	e00e      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004e46:	2302      	movs	r3, #2
 8004e48:	76fb      	strb	r3, [r7, #27]
 8004e4a:	e00b      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	76fb      	strb	r3, [r7, #27]
 8004e50:	e008      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004e52:	2308      	movs	r3, #8
 8004e54:	76fb      	strb	r3, [r7, #27]
 8004e56:	e005      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004e58:	2310      	movs	r3, #16
 8004e5a:	76fb      	strb	r3, [r7, #27]
 8004e5c:	bf00      	nop
 8004e5e:	e001      	b.n	8004e64 <UART_SetConfig+0x1e4>
 8004e60:	2310      	movs	r3, #16
 8004e62:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a3c      	ldr	r2, [pc, #240]	; (8004f5c <UART_SetConfig+0x2dc>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	f040 8082 	bne.w	8004f74 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e70:	7efb      	ldrb	r3, [r7, #27]
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d823      	bhi.n	8004ebe <UART_SetConfig+0x23e>
 8004e76:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <UART_SetConfig+0x1fc>)
 8004e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7c:	08004ea1 	.word	0x08004ea1
 8004e80:	08004ebf 	.word	0x08004ebf
 8004e84:	08004ea9 	.word	0x08004ea9
 8004e88:	08004ebf 	.word	0x08004ebf
 8004e8c:	08004eaf 	.word	0x08004eaf
 8004e90:	08004ebf 	.word	0x08004ebf
 8004e94:	08004ebf 	.word	0x08004ebf
 8004e98:	08004ebf 	.word	0x08004ebf
 8004e9c:	08004eb7 	.word	0x08004eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea0:	f7fe fe9c 	bl	8003bdc <HAL_RCC_GetPCLK1Freq>
 8004ea4:	6178      	str	r0, [r7, #20]
        break;
 8004ea6:	e00f      	b.n	8004ec8 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ea8:	4b31      	ldr	r3, [pc, #196]	; (8004f70 <UART_SetConfig+0x2f0>)
 8004eaa:	617b      	str	r3, [r7, #20]
        break;
 8004eac:	e00c      	b.n	8004ec8 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eae:	f7fe fdff 	bl	8003ab0 <HAL_RCC_GetSysClockFreq>
 8004eb2:	6178      	str	r0, [r7, #20]
        break;
 8004eb4:	e008      	b.n	8004ec8 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eba:	617b      	str	r3, [r7, #20]
        break;
 8004ebc:	e004      	b.n	8004ec8 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	76bb      	strb	r3, [r7, #26]
        break;
 8004ec6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 8100 	beq.w	80050d0 <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	4413      	add	r3, r2
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d305      	bcc.n	8004eec <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d902      	bls.n	8004ef2 <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	76bb      	strb	r3, [r7, #26]
 8004ef0:	e0ee      	b.n	80050d0 <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	f04f 0400 	mov.w	r4, #0
 8004f02:	0214      	lsls	r4, r2, #8
 8004f04:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004f08:	020b      	lsls	r3, r1, #8
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6852      	ldr	r2, [r2, #4]
 8004f0e:	0852      	lsrs	r2, r2, #1
 8004f10:	4611      	mov	r1, r2
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	eb13 0b01 	adds.w	fp, r3, r1
 8004f1a:	eb44 0c02 	adc.w	ip, r4, r2
 8004f1e:	4658      	mov	r0, fp
 8004f20:	4661      	mov	r1, ip
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f04f 0400 	mov.w	r4, #0
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	4623      	mov	r3, r4
 8004f2e:	f7fb f94d 	bl	80001cc <__aeabi_uldivmod>
 8004f32:	4603      	mov	r3, r0
 8004f34:	460c      	mov	r4, r1
 8004f36:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f3e:	d308      	bcc.n	8004f52 <UART_SetConfig+0x2d2>
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f46:	d204      	bcs.n	8004f52 <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	60da      	str	r2, [r3, #12]
 8004f50:	e0be      	b.n	80050d0 <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	76bb      	strb	r3, [r7, #26]
 8004f56:	e0bb      	b.n	80050d0 <UART_SetConfig+0x450>
 8004f58:	efff69f3 	.word	0xefff69f3
 8004f5c:	40008000 	.word	0x40008000
 8004f60:	40013800 	.word	0x40013800
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40004400 	.word	0x40004400
 8004f6c:	40004800 	.word	0x40004800
 8004f70:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7c:	d15c      	bne.n	8005038 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8004f7e:	7efb      	ldrb	r3, [r7, #27]
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d828      	bhi.n	8004fd6 <UART_SetConfig+0x356>
 8004f84:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <UART_SetConfig+0x30c>)
 8004f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8a:	bf00      	nop
 8004f8c:	08004fb1 	.word	0x08004fb1
 8004f90:	08004fb9 	.word	0x08004fb9
 8004f94:	08004fc1 	.word	0x08004fc1
 8004f98:	08004fd7 	.word	0x08004fd7
 8004f9c:	08004fc7 	.word	0x08004fc7
 8004fa0:	08004fd7 	.word	0x08004fd7
 8004fa4:	08004fd7 	.word	0x08004fd7
 8004fa8:	08004fd7 	.word	0x08004fd7
 8004fac:	08004fcf 	.word	0x08004fcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fb0:	f7fe fe14 	bl	8003bdc <HAL_RCC_GetPCLK1Freq>
 8004fb4:	6178      	str	r0, [r7, #20]
        break;
 8004fb6:	e013      	b.n	8004fe0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fb8:	f7fe fe26 	bl	8003c08 <HAL_RCC_GetPCLK2Freq>
 8004fbc:	6178      	str	r0, [r7, #20]
        break;
 8004fbe:	e00f      	b.n	8004fe0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fc0:	4b49      	ldr	r3, [pc, #292]	; (80050e8 <UART_SetConfig+0x468>)
 8004fc2:	617b      	str	r3, [r7, #20]
        break;
 8004fc4:	e00c      	b.n	8004fe0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fc6:	f7fe fd73 	bl	8003ab0 <HAL_RCC_GetSysClockFreq>
 8004fca:	6178      	str	r0, [r7, #20]
        break;
 8004fcc:	e008      	b.n	8004fe0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fd2:	617b      	str	r3, [r7, #20]
        break;
 8004fd4:	e004      	b.n	8004fe0 <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	76bb      	strb	r3, [r7, #26]
        break;
 8004fde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d074      	beq.n	80050d0 <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	005a      	lsls	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	085b      	lsrs	r3, r3, #1
 8004ff0:	441a      	add	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b0f      	cmp	r3, #15
 8005002:	d916      	bls.n	8005032 <UART_SetConfig+0x3b2>
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500a:	d212      	bcs.n	8005032 <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f023 030f 	bic.w	r3, r3, #15
 8005014:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	b29b      	uxth	r3, r3
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	b29a      	uxth	r2, r3
 8005022:	89fb      	ldrh	r3, [r7, #14]
 8005024:	4313      	orrs	r3, r2
 8005026:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	89fa      	ldrh	r2, [r7, #14]
 800502e:	60da      	str	r2, [r3, #12]
 8005030:	e04e      	b.n	80050d0 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	76bb      	strb	r3, [r7, #26]
 8005036:	e04b      	b.n	80050d0 <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005038:	7efb      	ldrb	r3, [r7, #27]
 800503a:	2b08      	cmp	r3, #8
 800503c:	d827      	bhi.n	800508e <UART_SetConfig+0x40e>
 800503e:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <UART_SetConfig+0x3c4>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	08005069 	.word	0x08005069
 8005048:	08005071 	.word	0x08005071
 800504c:	08005079 	.word	0x08005079
 8005050:	0800508f 	.word	0x0800508f
 8005054:	0800507f 	.word	0x0800507f
 8005058:	0800508f 	.word	0x0800508f
 800505c:	0800508f 	.word	0x0800508f
 8005060:	0800508f 	.word	0x0800508f
 8005064:	08005087 	.word	0x08005087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005068:	f7fe fdb8 	bl	8003bdc <HAL_RCC_GetPCLK1Freq>
 800506c:	6178      	str	r0, [r7, #20]
        break;
 800506e:	e013      	b.n	8005098 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005070:	f7fe fdca 	bl	8003c08 <HAL_RCC_GetPCLK2Freq>
 8005074:	6178      	str	r0, [r7, #20]
        break;
 8005076:	e00f      	b.n	8005098 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005078:	4b1b      	ldr	r3, [pc, #108]	; (80050e8 <UART_SetConfig+0x468>)
 800507a:	617b      	str	r3, [r7, #20]
        break;
 800507c:	e00c      	b.n	8005098 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800507e:	f7fe fd17 	bl	8003ab0 <HAL_RCC_GetSysClockFreq>
 8005082:	6178      	str	r0, [r7, #20]
        break;
 8005084:	e008      	b.n	8005098 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800508a:	617b      	str	r3, [r7, #20]
        break;
 800508c:	e004      	b.n	8005098 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	76bb      	strb	r3, [r7, #26]
        break;
 8005096:	bf00      	nop
    }

    if (pclk != 0U)
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d018      	beq.n	80050d0 <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	085a      	lsrs	r2, r3, #1
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	441a      	add	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	2b0f      	cmp	r3, #15
 80050b8:	d908      	bls.n	80050cc <UART_SetConfig+0x44c>
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c0:	d204      	bcs.n	80050cc <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	60da      	str	r2, [r3, #12]
 80050ca:	e001      	b.n	80050d0 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80050dc:	7ebb      	ldrb	r3, [r7, #26]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3720      	adds	r7, #32
 80050e2:	46bd      	mov	sp, r7
 80050e4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80050e8:	00f42400 	.word	0x00f42400

080050ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	f003 0310 	and.w	r3, r3, #16
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01a      	beq.n	8005202 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ea:	d10a      	bne.n	8005202 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	605a      	str	r2, [r3, #4]
  }
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af02      	add	r7, sp, #8
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800523e:	f7fb fe81 	bl	8000f44 <HAL_GetTick>
 8005242:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b08      	cmp	r3, #8
 8005250:	d10e      	bne.n	8005270 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005252:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f82a 	bl	80052ba <UART_WaitOnFlagUntilTimeout>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e020      	b.n	80052b2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	2b04      	cmp	r3, #4
 800527c:	d10e      	bne.n	800529c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800527e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f814 	bl	80052ba <UART_WaitOnFlagUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e00a      	b.n	80052b2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2220      	movs	r2, #32
 80052a6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b084      	sub	sp, #16
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	603b      	str	r3, [r7, #0]
 80052c6:	4613      	mov	r3, r2
 80052c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ca:	e05d      	b.n	8005388 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052d2:	d059      	beq.n	8005388 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052d4:	f7fb fe36 	bl	8000f44 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d302      	bcc.n	80052ea <UART_WaitOnFlagUntilTimeout+0x30>
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d11b      	bne.n	8005322 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052f8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0201 	bic.w	r2, r2, #1
 8005308:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2220      	movs	r2, #32
 800530e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2220      	movs	r2, #32
 8005314:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e042      	b.n	80053a8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d02b      	beq.n	8005388 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800533a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800533e:	d123      	bne.n	8005388 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005348:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005358:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2220      	movs	r2, #32
 800536e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2220      	movs	r2, #32
 8005374:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2220      	movs	r2, #32
 800537a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e00f      	b.n	80053a8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	69da      	ldr	r2, [r3, #28]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	4013      	ands	r3, r2
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	429a      	cmp	r2, r3
 8005396:	bf0c      	ite	eq
 8005398:	2301      	moveq	r3, #1
 800539a:	2300      	movne	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	461a      	mov	r2, r3
 80053a0:	79fb      	ldrb	r3, [r7, #7]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d092      	beq.n	80052cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <__libc_init_array>:
 80053b0:	b570      	push	{r4, r5, r6, lr}
 80053b2:	4e0d      	ldr	r6, [pc, #52]	; (80053e8 <__libc_init_array+0x38>)
 80053b4:	4c0d      	ldr	r4, [pc, #52]	; (80053ec <__libc_init_array+0x3c>)
 80053b6:	1ba4      	subs	r4, r4, r6
 80053b8:	10a4      	asrs	r4, r4, #2
 80053ba:	2500      	movs	r5, #0
 80053bc:	42a5      	cmp	r5, r4
 80053be:	d109      	bne.n	80053d4 <__libc_init_array+0x24>
 80053c0:	4e0b      	ldr	r6, [pc, #44]	; (80053f0 <__libc_init_array+0x40>)
 80053c2:	4c0c      	ldr	r4, [pc, #48]	; (80053f4 <__libc_init_array+0x44>)
 80053c4:	f000 f820 	bl	8005408 <_init>
 80053c8:	1ba4      	subs	r4, r4, r6
 80053ca:	10a4      	asrs	r4, r4, #2
 80053cc:	2500      	movs	r5, #0
 80053ce:	42a5      	cmp	r5, r4
 80053d0:	d105      	bne.n	80053de <__libc_init_array+0x2e>
 80053d2:	bd70      	pop	{r4, r5, r6, pc}
 80053d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053d8:	4798      	blx	r3
 80053da:	3501      	adds	r5, #1
 80053dc:	e7ee      	b.n	80053bc <__libc_init_array+0xc>
 80053de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053e2:	4798      	blx	r3
 80053e4:	3501      	adds	r5, #1
 80053e6:	e7f2      	b.n	80053ce <__libc_init_array+0x1e>
 80053e8:	08005474 	.word	0x08005474
 80053ec:	08005474 	.word	0x08005474
 80053f0:	08005474 	.word	0x08005474
 80053f4:	08005478 	.word	0x08005478

080053f8 <memset>:
 80053f8:	4402      	add	r2, r0
 80053fa:	4603      	mov	r3, r0
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d100      	bne.n	8005402 <memset+0xa>
 8005400:	4770      	bx	lr
 8005402:	f803 1b01 	strb.w	r1, [r3], #1
 8005406:	e7f9      	b.n	80053fc <memset+0x4>

08005408 <_init>:
 8005408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540a:	bf00      	nop
 800540c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540e:	bc08      	pop	{r3}
 8005410:	469e      	mov	lr, r3
 8005412:	4770      	bx	lr

08005414 <_fini>:
 8005414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005416:	bf00      	nop
 8005418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541a:	bc08      	pop	{r3}
 800541c:	469e      	mov	lr, r3
 800541e:	4770      	bx	lr
