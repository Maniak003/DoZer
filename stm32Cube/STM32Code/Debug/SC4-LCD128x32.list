
SC4-LCD128x32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000350c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003618  08003618  00013618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800365c  0800365c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800365c  0800365c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800365c  0800365c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800365c  0800365c  0001365c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003660  08003660  00013660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000114c  20000010  08003674  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000115c  08003674  0002115c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebda  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e18  00000000  00000000  0002ec13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f88  00000000  00000000  00030a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb8  00000000  00000000  000319b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002138  00000000  00000000  00032870  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000be9d  00000000  00000000  000349a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000915f5  00000000  00000000  00040845  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d1e3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000433c  00000000  00000000  000d1eb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003600 	.word	0x08003600

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003600 	.word	0x08003600

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__gesf2>:
 8000368:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800036c:	e006      	b.n	800037c <__cmpsf2+0x4>
 800036e:	bf00      	nop

08000370 <__lesf2>:
 8000370:	f04f 0c01 	mov.w	ip, #1
 8000374:	e002      	b.n	800037c <__cmpsf2+0x4>
 8000376:	bf00      	nop

08000378 <__cmpsf2>:
 8000378:	f04f 0c01 	mov.w	ip, #1
 800037c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000380:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000384:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000388:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800038c:	bf18      	it	ne
 800038e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000392:	d011      	beq.n	80003b8 <__cmpsf2+0x40>
 8000394:	b001      	add	sp, #4
 8000396:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800039a:	bf18      	it	ne
 800039c:	ea90 0f01 	teqne	r0, r1
 80003a0:	bf58      	it	pl
 80003a2:	ebb2 0003 	subspl.w	r0, r2, r3
 80003a6:	bf88      	it	hi
 80003a8:	17c8      	asrhi	r0, r1, #31
 80003aa:	bf38      	it	cc
 80003ac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80003b0:	bf18      	it	ne
 80003b2:	f040 0001 	orrne.w	r0, r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003bc:	d102      	bne.n	80003c4 <__cmpsf2+0x4c>
 80003be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80003c2:	d105      	bne.n	80003d0 <__cmpsf2+0x58>
 80003c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80003c8:	d1e4      	bne.n	8000394 <__cmpsf2+0x1c>
 80003ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80003ce:	d0e1      	beq.n	8000394 <__cmpsf2+0x1c>
 80003d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop

080003d8 <__aeabi_cfrcmple>:
 80003d8:	4684      	mov	ip, r0
 80003da:	4608      	mov	r0, r1
 80003dc:	4661      	mov	r1, ip
 80003de:	e7ff      	b.n	80003e0 <__aeabi_cfcmpeq>

080003e0 <__aeabi_cfcmpeq>:
 80003e0:	b50f      	push	{r0, r1, r2, r3, lr}
 80003e2:	f7ff ffc9 	bl	8000378 <__cmpsf2>
 80003e6:	2800      	cmp	r0, #0
 80003e8:	bf48      	it	mi
 80003ea:	f110 0f00 	cmnmi.w	r0, #0
 80003ee:	bd0f      	pop	{r0, r1, r2, r3, pc}

080003f0 <__aeabi_fcmpeq>:
 80003f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80003f4:	f7ff fff4 	bl	80003e0 <__aeabi_cfcmpeq>
 80003f8:	bf0c      	ite	eq
 80003fa:	2001      	moveq	r0, #1
 80003fc:	2000      	movne	r0, #0
 80003fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000402:	bf00      	nop

08000404 <__aeabi_fcmplt>:
 8000404:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000408:	f7ff ffea 	bl	80003e0 <__aeabi_cfcmpeq>
 800040c:	bf34      	ite	cc
 800040e:	2001      	movcc	r0, #1
 8000410:	2000      	movcs	r0, #0
 8000412:	f85d fb08 	ldr.w	pc, [sp], #8
 8000416:	bf00      	nop

08000418 <__aeabi_fcmple>:
 8000418:	f84d ed08 	str.w	lr, [sp, #-8]!
 800041c:	f7ff ffe0 	bl	80003e0 <__aeabi_cfcmpeq>
 8000420:	bf94      	ite	ls
 8000422:	2001      	movls	r0, #1
 8000424:	2000      	movhi	r0, #0
 8000426:	f85d fb08 	ldr.w	pc, [sp], #8
 800042a:	bf00      	nop

0800042c <__aeabi_fcmpge>:
 800042c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000430:	f7ff ffd2 	bl	80003d8 <__aeabi_cfrcmple>
 8000434:	bf94      	ite	ls
 8000436:	2001      	movls	r0, #1
 8000438:	2000      	movhi	r0, #0
 800043a:	f85d fb08 	ldr.w	pc, [sp], #8
 800043e:	bf00      	nop

08000440 <__aeabi_fcmpgt>:
 8000440:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000444:	f7ff ffc8 	bl	80003d8 <__aeabi_cfrcmple>
 8000448:	bf34      	ite	cc
 800044a:	2001      	movcc	r0, #1
 800044c:	2000      	movcs	r0, #0
 800044e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000452:	bf00      	nop

08000454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b08b      	sub	sp, #44	; 0x2c
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800045a:	f000 fc7b 	bl	8000d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045e:	f000 f8cb 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000462:	f000 fa03 	bl	800086c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000466:	f000 f91d 	bl	80006a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800046a:	f000 f959 	bl	8000720 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800046e:	f000 f9d3 	bl	8000818 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000472:	f000 f983 	bl	800077c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000476:	4856      	ldr	r0, [pc, #344]	; (80005d0 <main+0x17c>)
 8000478:	f001 f8e4 	bl	8001644 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int j = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t prefix[3] = {'<', 'B', '>'};
 8000480:	4a54      	ldr	r2, [pc, #336]	; (80005d4 <main+0x180>)
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	6812      	ldr	r2, [r2, #0]
 8000486:	4611      	mov	r1, r2
 8000488:	8019      	strh	r1, [r3, #0]
 800048a:	3302      	adds	r3, #2
 800048c:	0c12      	lsrs	r2, r2, #16
 800048e:	701a      	strb	r2, [r3, #0]
  uint8_t lowSpectr, highSpectr;
#ifdef DISPLAY_ENABLE
  ssd1306_Init();
#endif
  uint32_t initDelay, oldTimeAll, oldTime = HAL_GetTick();
 8000490:	f000 fcb8 	bl	8000e04 <HAL_GetTick>
 8000494:	6138      	str	r0, [r7, #16]
  initDelay = oldTime;
 8000496:	693b      	ldr	r3, [r7, #16]
 8000498:	60fb      	str	r3, [r7, #12]
  counterCC = 0;
 800049a:	4b4f      	ldr	r3, [pc, #316]	; (80005d8 <main+0x184>)
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); // Включаем светодиод.
 80004a0:	2201      	movs	r2, #1
 80004a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a6:	484d      	ldr	r0, [pc, #308]	; (80005dc <main+0x188>)
 80004a8:	f001 fbf1 	bl	8001c8e <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim3); // запуск таймера для светодиода
 80004ac:	484c      	ldr	r0, [pc, #304]	; (80005e0 <main+0x18c>)
 80004ae:	f002 fb1d 	bl	8002aec <HAL_TIM_Base_Start_IT>
	  counterCC = 0;
	  oldTime = HAL_GetTick();
	  ssd1306_SetCursor(0, 0);
	  ssd1306_WriteString(counterPP, Font_6x8, 0x01);
#endif
	  int ttt, max = 1;
 80004b2:	2301      	movs	r3, #1
 80004b4:	61fb      	str	r3, [r7, #28]
	  for ( int i = 0; i < 2048; i++) {
 80004b6:	2300      	movs	r3, #0
 80004b8:	61bb      	str	r3, [r7, #24]
 80004ba:	e018      	b.n	80004ee <main+0x9a>
		  ttt = spectrData[i];
 80004bc:	4a49      	ldr	r2, [pc, #292]	; (80005e4 <main+0x190>)
 80004be:	69bb      	ldr	r3, [r7, #24]
 80004c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004c4:	60bb      	str	r3, [r7, #8]
		  if ((float) ttt > max)
 80004c6:	68b8      	ldr	r0, [r7, #8]
 80004c8:	f7ff fefa 	bl	80002c0 <__aeabi_i2f>
 80004cc:	4604      	mov	r4, r0
 80004ce:	69f8      	ldr	r0, [r7, #28]
 80004d0:	f7ff fef6 	bl	80002c0 <__aeabi_i2f>
 80004d4:	4603      	mov	r3, r0
 80004d6:	4619      	mov	r1, r3
 80004d8:	4620      	mov	r0, r4
 80004da:	f7ff ffb1 	bl	8000440 <__aeabi_fcmpgt>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <main+0x94>
			  max = ttt;
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	61fb      	str	r3, [r7, #28]
	  for ( int i = 0; i < 2048; i++) {
 80004e8:	69bb      	ldr	r3, [r7, #24]
 80004ea:	3301      	adds	r3, #1
 80004ec:	61bb      	str	r3, [r7, #24]
 80004ee:	69bb      	ldr	r3, [r7, #24]
 80004f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004f4:	dbe2      	blt.n	80004bc <main+0x68>
	  }
	  */
#ifdef DISPLAY_ENABLE
	  ssd1306_UpdateScreen();
#endif
	  if (initFlag && (oldTimeAll - initDelay > INIT_TIME)) {
 80004f6:	4b3c      	ldr	r3, [pc, #240]	; (80005e8 <main+0x194>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d00e      	beq.n	800051c <main+0xc8>
 80004fe:	6a3a      	ldr	r2, [r7, #32]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000508:	d908      	bls.n	800051c <main+0xc8>
		  initFlag = 0;
 800050a:	4b37      	ldr	r3, [pc, #220]	; (80005e8 <main+0x194>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_IT(&hadc1);
 8000510:	482f      	ldr	r0, [pc, #188]	; (80005d0 <main+0x17c>)
 8000512:	f000 fd7b 	bl	800100c <HAL_ADC_Start_IT>
		  oldTimeAll = HAL_GetTick();  // Начало отсчета времени, после запуска АЦП.
 8000516:	f000 fc75 	bl	8000e04 <HAL_GetTick>
 800051a:	6238      	str	r0, [r7, #32]
	  }
	  /* Опрос status JDY-23, BT подключен ? */
#ifdef DISPLAY_ENABLE
	  ssd1306_SetCursor(0, 24);
#endif
	  if ( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 ) {
 800051c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000520:	4832      	ldr	r0, [pc, #200]	; (80005ec <main+0x198>)
 8000522:	f001 fb9d 	bl	8001c60 <HAL_GPIO_ReadPin>
 8000526:	4603      	mov	r3, r0
 8000528:	2b01      	cmp	r3, #1
 800052a:	d1c2      	bne.n	80004b2 <main+0x5e>
#ifdef DISPLAY_ENABLE
		  ssd1306_WriteString("BT: connect   ", Font_6x8, 0x01);
#endif
		  j = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	627b      	str	r3, [r7, #36]	; 0x24
		  // Передача данных в BT модуль.
		  HAL_UART_Transmit(&huart1, prefix, 3, 1000); // Стартовая последовательность.
 8000530:	1d39      	adds	r1, r7, #4
 8000532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000536:	2203      	movs	r2, #3
 8000538:	482d      	ldr	r0, [pc, #180]	; (80005f0 <main+0x19c>)
 800053a:	f002 feca 	bl	80032d2 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint16_t) (HAL_GetTick() - oldTimeAll) / 1000, 2, 1000); // Время сбора спектра.
 800053e:	f000 fc61 	bl	8000e04 <HAL_GetTick>
 8000542:	4603      	mov	r3, r0
 8000544:	b29a      	uxth	r2, r3
 8000546:	6a3b      	ldr	r3, [r7, #32]
 8000548:	b29b      	uxth	r3, r3
 800054a:	1ad3      	subs	r3, r2, r3
 800054c:	b29b      	uxth	r3, r3
 800054e:	4a29      	ldr	r2, [pc, #164]	; (80005f4 <main+0x1a0>)
 8000550:	fba2 2303 	umull	r2, r3, r2, r3
 8000554:	099b      	lsrs	r3, r3, #6
 8000556:	b29b      	uxth	r3, r3
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	2202      	movs	r2, #2
 8000560:	4823      	ldr	r0, [pc, #140]	; (80005f0 <main+0x19c>)
 8000562:	f002 feb6 	bl	80032d2 <HAL_UART_Transmit>
		  HAL_Delay(TRANSMIT_DALAY);  // В случае сбоев в передаче, задержку увеличить.
 8000566:	2014      	movs	r0, #20
 8000568:	f000 fc56 	bl	8000e18 <HAL_Delay>
		  for ( int i = 0; i < 1040; i++) {
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	e028      	b.n	80005c4 <main+0x170>
			  lowSpectr = spectrData[i] & 0xFF;
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <main+0x190>)
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800057a:	b2db      	uxtb	r3, r3
 800057c:	70fb      	strb	r3, [r7, #3]
			  highSpectr = (spectrData[i] & 0xFF00) >> 8;
 800057e:	4a19      	ldr	r2, [pc, #100]	; (80005e4 <main+0x190>)
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000586:	0a1b      	lsrs	r3, r3, #8
 8000588:	b29b      	uxth	r3, r3
 800058a:	b2db      	uxtb	r3, r3
 800058c:	70bb      	strb	r3, [r7, #2]
			  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 800058e:	1cb9      	adds	r1, r7, #2
 8000590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000594:	2201      	movs	r2, #1
 8000596:	4816      	ldr	r0, [pc, #88]	; (80005f0 <main+0x19c>)
 8000598:	f002 fe9b 	bl	80032d2 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 800059c:	1cf9      	adds	r1, r7, #3
 800059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a2:	2201      	movs	r2, #1
 80005a4:	4812      	ldr	r0, [pc, #72]	; (80005f0 <main+0x19c>)
 80005a6:	f002 fe94 	bl	80032d2 <HAL_UART_Transmit>
			  if ( j++ >= 9) {
 80005aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ac:	1c5a      	adds	r2, r3, #1
 80005ae:	627a      	str	r2, [r7, #36]	; 0x24
 80005b0:	2b08      	cmp	r3, #8
 80005b2:	dd04      	ble.n	80005be <main+0x16a>
				  HAL_Delay(TRANSMIT_DALAY);  // В случае сбоев в передаче, задержку увеличить.
 80005b4:	2014      	movs	r0, #20
 80005b6:	f000 fc2f 	bl	8000e18 <HAL_Delay>
				  j = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
		  for ( int i = 0; i < 1040; i++) {
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	3301      	adds	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80005ca:	dbd2      	blt.n	8000572 <main+0x11e>
  {
 80005cc:	e771      	b.n	80004b2 <main+0x5e>
 80005ce:	bf00      	nop
 80005d0:	200010e8 	.word	0x200010e8
 80005d4:	08003618 	.word	0x08003618
 80005d8:	2000002c 	.word	0x2000002c
 80005dc:	40010800 	.word	0x40010800
 80005e0:	200010a0 	.word	0x200010a0
 80005e4:	20000038 	.word	0x20000038
 80005e8:	20000000 	.word	0x20000000
 80005ec:	40010c00 	.word	0x40010c00
 80005f0:	20001118 	.word	0x20001118
 80005f4:	10624dd3 	.word	0x10624dd3

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000602:	2228      	movs	r2, #40	; 0x28
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f002 fff2 	bl	80035f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000630:	2310      	movs	r3, #16
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000638:	2300      	movs	r3, #0
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 800063c:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8000640:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fc72 	bl	8001f30 <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000652:	f000 f969 	bl	8000928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065a:	2302      	movs	r3, #2
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	2101      	movs	r1, #1
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fedd 	bl	8002430 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800067c:	f000 f954 	bl	8000928 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000680:	2302      	movs	r3, #2
 8000682:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f002 f86c 	bl	8002768 <HAL_RCCEx_PeriphCLKConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000696:	f000 f947 	bl	8000928 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	; 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_ADC1_Init+0x74>)
 80006b6:	4a19      	ldr	r2, [pc, #100]	; (800071c <MX_ADC1_Init+0x78>)
 80006b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_ADC1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_ADC1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_ADC1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_EXT_IT11;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_ADC1_Init+0x74>)
 80006ce:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80006d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d4:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_ADC1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_ADC1_Init+0x74>)
 80006dc:	2201      	movs	r2, #1
 80006de:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <MX_ADC1_Init+0x74>)
 80006e2:	f000 fbbb 	bl	8000e5c <HAL_ADC_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80006ec:	f000 f91c 	bl	8000928 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006f0:	2308      	movs	r3, #8
 80006f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_ADC1_Init+0x74>)
 8000702:	f000 fe1b 	bl	800133c <HAL_ADC_ConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800070c:	f000 f90c 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200010e8 	.word	0x200010e8
 800071c:	40012400 	.word	0x40012400

08000720 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_I2C1_Init+0x50>)
 8000726:	4a13      	ldr	r2, [pc, #76]	; (8000774 <MX_I2C1_Init+0x54>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_I2C1_Init+0x50>)
 800072c:	4a12      	ldr	r2, [pc, #72]	; (8000778 <MX_I2C1_Init+0x58>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_I2C1_Init+0x50>)
 800073e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000742:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_I2C1_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_I2C1_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_I2C1_Init+0x50>)
 800075e:	f001 faaf 	bl	8001cc0 <HAL_I2C_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000768:	f000 f8de 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20001038 	.word	0x20001038
 8000774:	40005400 	.word	0x40005400
 8000778:	00061a80 	.word	0x00061a80

0800077c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000790:	463b      	mov	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <MX_TIM3_Init+0x94>)
 800079a:	4a1e      	ldr	r2, [pc, #120]	; (8000814 <MX_TIM3_Init+0x98>)
 800079c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_TIM3_Init+0x94>)
 80007a0:	2208      	movs	r2, #8
 80007a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_TIM3_Init+0x94>)
 80007a6:	2210      	movs	r2, #16
 80007a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_TIM3_Init+0x94>)
 80007ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80007b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_TIM3_Init+0x94>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_TIM3_Init+0x94>)
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007be:	4814      	ldr	r0, [pc, #80]	; (8000810 <MX_TIM3_Init+0x94>)
 80007c0:	f002 f944 	bl	8002a4c <HAL_TIM_Base_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80007ca:	f000 f8ad 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007d4:	f107 0308 	add.w	r3, r7, #8
 80007d8:	4619      	mov	r1, r3
 80007da:	480d      	ldr	r0, [pc, #52]	; (8000810 <MX_TIM3_Init+0x94>)
 80007dc:	f002 fae0 	bl	8002da0 <HAL_TIM_ConfigClockSource>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80007e6:	f000 f89f 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	; (8000810 <MX_TIM3_Init+0x94>)
 80007f8:	f002 fcae 	bl	8003158 <HAL_TIMEx_MasterConfigSynchronization>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000802:	f000 f891 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200010a0 	.word	0x200010a0
 8000814:	40000400 	.word	0x40000400

08000818 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800081e:	4a12      	ldr	r2, [pc, #72]	; (8000868 <MX_USART1_UART_Init+0x50>)
 8000820:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000850:	f002 fcf2 	bl	8003238 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800085a:	f000 f865 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20001118 	.word	0x20001118
 8000868:	40013800 	.word	0x40013800

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000880:	4b25      	ldr	r3, [pc, #148]	; (8000918 <MX_GPIO_Init+0xac>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a24      	ldr	r2, [pc, #144]	; (8000918 <MX_GPIO_Init+0xac>)
 8000886:	f043 0308 	orr.w	r3, r3, #8
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <MX_GPIO_Init+0xac>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0308 	and.w	r3, r3, #8
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_GPIO_Init+0xac>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a1e      	ldr	r2, [pc, #120]	; (8000918 <MX_GPIO_Init+0xac>)
 800089e:	f043 0304 	orr.w	r3, r3, #4
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_GPIO_Init+0xac>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0304 	and.w	r3, r3, #4
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008b6:	4819      	ldr	r0, [pc, #100]	; (800091c <MX_GPIO_Init+0xb0>)
 80008b8:	f001 f9e9 	bl	8001c8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_GPIO_Init+0xb4>)
 80008c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	4619      	mov	r1, r3
 80008d0:	4814      	ldr	r0, [pc, #80]	; (8000924 <MX_GPIO_Init+0xb8>)
 80008d2:	f001 f86b 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	4619      	mov	r1, r3
 80008ea:	480e      	ldr	r0, [pc, #56]	; (8000924 <MX_GPIO_Init+0xb8>)
 80008ec:	f001 f85e 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2302      	movs	r3, #2
 8000900:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	4619      	mov	r1, r3
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_GPIO_Init+0xb0>)
 800090a:	f001 f84f 	bl	80019ac <HAL_GPIO_Init>

}
 800090e:	bf00      	nop
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000
 800091c:	40010800 	.word	0x40010800
 8000920:	10110000 	.word	0x10110000
 8000924:	40010c00 	.word	0x40010c00

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_MspInit+0x5c>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a14      	ldr	r2, [pc, #80]	; (8000990 <HAL_MspInit+0x5c>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_MspInit+0x5c>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <HAL_MspInit+0x5c>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <HAL_MspInit+0x5c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	61d3      	str	r3, [r2, #28]
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <HAL_MspInit+0x5c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_MspInit+0x60>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <HAL_MspInit+0x60>)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	40021000 	.word	0x40021000
 8000994:	40010000 	.word	0x40010000

08000998 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a18      	ldr	r2, [pc, #96]	; (8000a14 <HAL_ADC_MspInit+0x7c>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d129      	bne.n	8000a0c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <HAL_ADC_MspInit+0x80>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a16      	ldr	r2, [pc, #88]	; (8000a18 <HAL_ADC_MspInit+0x80>)
 80009be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <HAL_ADC_MspInit+0x80>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <HAL_ADC_MspInit+0x80>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <HAL_ADC_MspInit+0x80>)
 80009d6:	f043 0308 	orr.w	r3, r3, #8
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_ADC_MspInit+0x80>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f003 0308 	and.w	r3, r3, #8
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009e8:	2301      	movs	r3, #1
 80009ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4619      	mov	r1, r3
 80009f6:	4809      	ldr	r0, [pc, #36]	; (8000a1c <HAL_ADC_MspInit+0x84>)
 80009f8:	f000 ffd8 	bl	80019ac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2100      	movs	r1, #0
 8000a00:	2012      	movs	r0, #18
 8000a02:	f000 ff9c 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a06:	2012      	movs	r0, #18
 8000a08:	f000 ffb5 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a0c:	bf00      	nop
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40012400 	.word	0x40012400
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40010c00 	.word	0x40010c00

08000a20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <HAL_I2C_MspInit+0x70>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d123      	bne.n	8000a88 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <HAL_I2C_MspInit+0x74>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <HAL_I2C_MspInit+0x74>)
 8000a46:	f043 0308 	orr.w	r3, r3, #8
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_I2C_MspInit+0x74>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f003 0308 	and.w	r3, r3, #8
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a58:	23c0      	movs	r3, #192	; 0xc0
 8000a5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a5c:	2312      	movs	r3, #18
 8000a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480b      	ldr	r0, [pc, #44]	; (8000a98 <HAL_I2C_MspInit+0x78>)
 8000a6c:	f000 ff9e 	bl	80019ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_I2C_MspInit+0x74>)
 8000a72:	69db      	ldr	r3, [r3, #28]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <HAL_I2C_MspInit+0x74>)
 8000a76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a7a:	61d3      	str	r3, [r2, #28]
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_I2C_MspInit+0x74>)
 8000a7e:	69db      	ldr	r3, [r3, #28]
 8000a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a88:	bf00      	nop
 8000a8a:	3720      	adds	r7, #32
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40005400 	.word	0x40005400
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40010c00 	.word	0x40010c00

08000a9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <HAL_TIM_Base_MspInit+0x44>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d113      	bne.n	8000ad6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_TIM_Base_MspInit+0x48>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <HAL_TIM_Base_MspInit+0x48>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	61d3      	str	r3, [r2, #28]
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <HAL_TIM_Base_MspInit+0x48>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2101      	movs	r1, #1
 8000aca:	201d      	movs	r0, #29
 8000acc:	f000 ff37 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ad0:	201d      	movs	r0, #29
 8000ad2:	f000 ff50 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40000400 	.word	0x40000400
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a1c      	ldr	r2, [pc, #112]	; (8000b74 <HAL_UART_MspInit+0x8c>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d131      	bne.n	8000b6c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_UART_MspInit+0x90>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a1a      	ldr	r2, [pc, #104]	; (8000b78 <HAL_UART_MspInit+0x90>)
 8000b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <HAL_UART_MspInit+0x90>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_UART_MspInit+0x90>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <HAL_UART_MspInit+0x90>)
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_UART_MspInit+0x90>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0304 	and.w	r3, r3, #4
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480b      	ldr	r0, [pc, #44]	; (8000b7c <HAL_UART_MspInit+0x94>)
 8000b4e:	f000 ff2d 	bl	80019ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	4619      	mov	r1, r3
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <HAL_UART_MspInit+0x94>)
 8000b68:	f000 ff20 	bl	80019ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b6c:	bf00      	nop
 8000b6e:	3720      	adds	r7, #32
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40013800 	.word	0x40013800
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40010800 	.word	0x40010800

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <HardFault_Handler+0x4>

08000b92 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <MemManage_Handler+0x4>

08000b98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <BusFault_Handler+0x4>

08000b9e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <UsageFault_Handler+0x4>

08000ba4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bcc:	f000 f908 	bl	8000de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000bd8:	4821      	ldr	r0, [pc, #132]	; (8000c60 <ADC1_2_IRQHandler+0x8c>)
 8000bda:	f000 fad9 	bl	8001190 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
  adcResult = HAL_ADC_GetValue(&hadc1);
 8000bde:	4820      	ldr	r0, [pc, #128]	; (8000c60 <ADC1_2_IRQHandler+0x8c>)
 8000be0:	f000 faca 	bl	8001178 <HAL_ADC_GetValue>
 8000be4:	4603      	mov	r3, r0
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <ADC1_2_IRQHandler+0x90>)
 8000bea:	801a      	strh	r2, [r3, #0]
  if (adcResult > 0) {
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <ADC1_2_IRQHandler+0x90>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d033      	beq.n	8000c5c <ADC1_2_IRQHandler+0x88>
	  adcResult = adcResult & 0x0FFF;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <ADC1_2_IRQHandler+0x90>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <ADC1_2_IRQHandler+0x90>)
 8000c00:	801a      	strh	r2, [r3, #0]
	  adcResult = adcResult >> 1;
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <ADC1_2_IRQHandler+0x90>)
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	085b      	lsrs	r3, r3, #1
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <ADC1_2_IRQHandler+0x90>)
 8000c0c:	801a      	strh	r2, [r3, #0]
	  if (spectrData[adcResult] < 0xFFFF) // Проверка переполнения канала.
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <ADC1_2_IRQHandler+0x90>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <ADC1_2_IRQHandler+0x94>)
 8000c16:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d009      	beq.n	8000c36 <ADC1_2_IRQHandler+0x62>
		  spectrData[adcResult]++;
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <ADC1_2_IRQHandler+0x90>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	4a10      	ldr	r2, [pc, #64]	; (8000c68 <ADC1_2_IRQHandler+0x94>)
 8000c28:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c2c:	3201      	adds	r2, #1
 8000c2e:	b291      	uxth	r1, r2
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <ADC1_2_IRQHandler+0x94>)
 8000c32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  counterCC++;
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <ADC1_2_IRQHandler+0x98>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <ADC1_2_IRQHandler+0x98>)
 8000c3e:	6013      	str	r3, [r2, #0]
	  counterALL++;
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <ADC1_2_IRQHandler+0x9c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <ADC1_2_IRQHandler+0x9c>)
 8000c48:	6013      	str	r3, [r2, #0]
#ifdef LED_PULSE_ENABLE
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); // Включаем светодиод.
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c50:	4808      	ldr	r0, [pc, #32]	; (8000c74 <ADC1_2_IRQHandler+0xa0>)
 8000c52:	f001 f81c 	bl	8001c8e <HAL_GPIO_WritePin>
	  HAL_TIM_Base_Start_IT(&htim3); // запуск таймера для гашения светодиода.
 8000c56:	4808      	ldr	r0, [pc, #32]	; (8000c78 <ADC1_2_IRQHandler+0xa4>)
 8000c58:	f001 ff48 	bl	8002aec <HAL_TIM_Base_Start_IT>
#endif
  }

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200010e8 	.word	0x200010e8
 8000c64:	20000034 	.word	0x20000034
 8000c68:	20000038 	.word	0x20000038
 8000c6c:	2000002c 	.word	0x2000002c
 8000c70:	20000030 	.word	0x20000030
 8000c74:	40010800 	.word	0x40010800
 8000c78:	200010a0 	.word	0x200010a0

08000c7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); // Выключаем светодиод.
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c86:	4804      	ldr	r0, [pc, #16]	; (8000c98 <TIM3_IRQHandler+0x1c>)
 8000c88:	f001 f801 	bl	8001c8e <HAL_GPIO_WritePin>

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c8c:	4803      	ldr	r0, [pc, #12]	; (8000c9c <TIM3_IRQHandler+0x20>)
 8000c8e:	f001 ff7f 	bl	8002b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40010800 	.word	0x40010800
 8000c9c:	200010a0 	.word	0x200010a0

08000ca0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <SystemInit+0x5c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <SystemInit+0x5c>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <SystemInit+0x5c>)
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	4911      	ldr	r1, [pc, #68]	; (8000cfc <SystemInit+0x5c>)
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <SystemInit+0x60>)
 8000cb8:	4013      	ands	r3, r2
 8000cba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <SystemInit+0x5c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <SystemInit+0x5c>)
 8000cc2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <SystemInit+0x5c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <SystemInit+0x5c>)
 8000cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <SystemInit+0x5c>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <SystemInit+0x5c>)
 8000cde:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000ce2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <SystemInit+0x5c>)
 8000ce6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000cea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <SystemInit+0x64>)
 8000cee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cf2:	609a      	str	r2, [r3, #8]
#endif 
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	f8ff0000 	.word	0xf8ff0000
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <Reset_Handler>:
 8000d08:	2100      	movs	r1, #0
 8000d0a:	e003      	b.n	8000d14 <LoopCopyDataInit>

08000d0c <CopyDataInit>:
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <LoopFillZerobss+0x14>)
 8000d0e:	585b      	ldr	r3, [r3, r1]
 8000d10:	5043      	str	r3, [r0, r1]
 8000d12:	3104      	adds	r1, #4

08000d14 <LoopCopyDataInit>:
 8000d14:	480a      	ldr	r0, [pc, #40]	; (8000d40 <LoopFillZerobss+0x18>)
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <LoopFillZerobss+0x1c>)
 8000d18:	1842      	adds	r2, r0, r1
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d3f6      	bcc.n	8000d0c <CopyDataInit>
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <LoopFillZerobss+0x20>)
 8000d20:	e002      	b.n	8000d28 <LoopFillZerobss>

08000d22 <FillZerobss>:
 8000d22:	2300      	movs	r3, #0
 8000d24:	f842 3b04 	str.w	r3, [r2], #4

08000d28 <LoopFillZerobss>:
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <LoopFillZerobss+0x24>)
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d3f9      	bcc.n	8000d22 <FillZerobss>
 8000d2e:	f7ff ffb7 	bl	8000ca0 <SystemInit>
 8000d32:	f002 fc39 	bl	80035a8 <__libc_init_array>
 8000d36:	f7ff fb8d 	bl	8000454 <main>
 8000d3a:	4770      	bx	lr
 8000d3c:	08003664 	.word	0x08003664
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000010 	.word	0x20000010
 8000d48:	20000010 	.word	0x20000010
 8000d4c:	2000115c 	.word	0x2000115c

08000d50 <CAN1_RX1_IRQHandler>:
 8000d50:	e7fe      	b.n	8000d50 <CAN1_RX1_IRQHandler>
	...

08000d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_Init+0x28>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_Init+0x28>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f000 fddf 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f000 f808 	bl	8000d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d70:	f7ff fde0 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40022000 	.word	0x40022000

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x54>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_InitTick+0x58>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 fdf7 	bl	8001992 <HAL_SYSTICK_Config>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00e      	b.n	8000dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b0f      	cmp	r3, #15
 8000db2:	d80a      	bhi.n	8000dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	2200      	movs	r2, #0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dbc:	f000 fdbf 	bl	800193e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <HAL_InitTick+0x5c>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e000      	b.n	8000dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000004 	.word	0x20000004
 8000dd8:	2000000c 	.word	0x2000000c
 8000ddc:	20000008 	.word	0x20000008

08000de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_IncTick+0x1c>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_IncTick+0x20>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <HAL_IncTick+0x20>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	2000000c 	.word	0x2000000c
 8000e00:	20001158 	.word	0x20001158

08000e04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b02      	ldr	r3, [pc, #8]	; (8000e14 <HAL_GetTick+0x10>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	20001158 	.word	0x20001158

08000e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff fff0 	bl	8000e04 <HAL_GetTick>
 8000e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e30:	d005      	beq.n	8000e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_Delay+0x40>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3e:	bf00      	nop
 8000e40:	f7ff ffe0 	bl	8000e04 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d8f7      	bhi.n	8000e40 <HAL_Delay+0x28>
  {
  }
}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000000c 	.word	0x2000000c

08000e5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e0be      	b.n	8000ffc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d109      	bne.n	8000ea0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff fd7c 	bl	8000998 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 fb95 	bl	80015d0 <ADC_ConversionStop_Disable>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eae:	f003 0310 	and.w	r3, r3, #16
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f040 8099 	bne.w	8000fea <HAL_ADC_Init+0x18e>
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f040 8095 	bne.w	8000fea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ec8:	f023 0302 	bic.w	r3, r3, #2
 8000ecc:	f043 0202 	orr.w	r2, r3, #2
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000edc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7b1b      	ldrb	r3, [r3, #12]
 8000ee2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ee4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ef4:	d003      	beq.n	8000efe <HAL_ADC_Init+0xa2>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d102      	bne.n	8000f04 <HAL_ADC_Init+0xa8>
 8000efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f02:	e000      	b.n	8000f06 <HAL_ADC_Init+0xaa>
 8000f04:	2300      	movs	r3, #0
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7d1b      	ldrb	r3, [r3, #20]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d119      	bne.n	8000f48 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	7b1b      	ldrb	r3, [r3, #12]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d109      	bne.n	8000f30 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	035a      	lsls	r2, r3, #13
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	e00b      	b.n	8000f48 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f34:	f043 0220 	orr.w	r2, r3, #32
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	f043 0201 	orr.w	r2, r3, #1
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	4b28      	ldr	r3, [pc, #160]	; (8001004 <HAL_ADC_Init+0x1a8>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	68b9      	ldr	r1, [r7, #8]
 8000f6c:	430b      	orrs	r3, r1
 8000f6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f78:	d003      	beq.n	8000f82 <HAL_ADC_Init+0x126>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d104      	bne.n	8000f8c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	051b      	lsls	r3, r3, #20
 8000f8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f92:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <HAL_ADC_Init+0x1ac>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d10b      	bne.n	8000fc8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fba:	f023 0303 	bic.w	r3, r3, #3
 8000fbe:	f043 0201 	orr.w	r2, r3, #1
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fc6:	e018      	b.n	8000ffa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fcc:	f023 0312 	bic.w	r3, r3, #18
 8000fd0:	f043 0210 	orr.w	r2, r3, #16
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fdc:	f043 0201 	orr.w	r2, r3, #1
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fe8:	e007      	b.n	8000ffa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	f043 0210 	orr.w	r2, r3, #16
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	ffe1f7fd 	.word	0xffe1f7fd
 8001008:	ff1f0efe 	.word	0xff1f0efe

0800100c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800101e:	2b01      	cmp	r3, #1
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Start_IT+0x1a>
 8001022:	2302      	movs	r3, #2
 8001024:	e0a0      	b.n	8001168 <HAL_ADC_Start_IT+0x15c>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 fa7c 	bl	800152c <ADC_Enable>
 8001034:	4603      	mov	r3, r0
 8001036:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 808f 	bne.w	800115e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001044:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001048:	f023 0301 	bic.w	r3, r3, #1
 800104c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a45      	ldr	r2, [pc, #276]	; (8001170 <HAL_ADC_Start_IT+0x164>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d105      	bne.n	800106a <HAL_ADC_Start_IT+0x5e>
 800105e:	4b45      	ldr	r3, [pc, #276]	; (8001174 <HAL_ADC_Start_IT+0x168>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d115      	bne.n	8001096 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001080:	2b00      	cmp	r3, #0
 8001082:	d026      	beq.n	80010d2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800108c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001094:	e01d      	b.n	80010d2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a33      	ldr	r2, [pc, #204]	; (8001174 <HAL_ADC_Start_IT+0x168>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d004      	beq.n	80010b6 <HAL_ADC_Start_IT+0xaa>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a2f      	ldr	r2, [pc, #188]	; (8001170 <HAL_ADC_Start_IT+0x164>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d10d      	bne.n	80010d2 <HAL_ADC_Start_IT+0xc6>
 80010b6:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <HAL_ADC_Start_IT+0x168>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d006      	beq.n	80010ec <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e2:	f023 0206 	bic.w	r2, r3, #6
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80010ea:	e002      	b.n	80010f2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f06f 0202 	mvn.w	r2, #2
 8001102:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0220 	orr.w	r2, r2, #32
 8001112:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800111e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001122:	d113      	bne.n	800114c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001128:	4a11      	ldr	r2, [pc, #68]	; (8001170 <HAL_ADC_Start_IT+0x164>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d105      	bne.n	800113a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_ADC_Start_IT+0x168>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001136:	2b00      	cmp	r3, #0
 8001138:	d108      	bne.n	800114c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	e00c      	b.n	8001166 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	e003      	b.n	8001166 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001166:	7bfb      	ldrb	r3, [r7, #15]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40012800 	.word	0x40012800
 8001174:	40012400 	.word	0x40012400

08001178 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 0320 	and.w	r3, r3, #32
 80011a2:	2b20      	cmp	r3, #32
 80011a4:	d140      	bne.n	8001228 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d139      	bne.n	8001228 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d105      	bne.n	80011cc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011d6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011da:	d11d      	bne.n	8001218 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d119      	bne.n	8001218 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0220 	bic.w	r2, r2, #32
 80011f2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d105      	bne.n	8001218 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001210:	f043 0201 	orr.w	r2, r3, #1
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f87c 	bl	8001316 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f06f 0212 	mvn.w	r2, #18
 8001226:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001232:	2b80      	cmp	r3, #128	; 0x80
 8001234:	d14f      	bne.n	80012d6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b04      	cmp	r3, #4
 8001242:	d148      	bne.n	80012d6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	2b00      	cmp	r3, #0
 800124e:	d105      	bne.n	800125c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001254:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001266:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800126a:	d012      	beq.n	8001292 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001276:	2b00      	cmp	r3, #0
 8001278:	d125      	bne.n	80012c6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001284:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001288:	d11d      	bne.n	80012c6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800128e:	2b00      	cmp	r3, #0
 8001290:	d119      	bne.n	80012c6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012a0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d105      	bne.n	80012c6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012be:	f043 0201 	orr.w	r2, r3, #1
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 fa58 	bl	800177c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f06f 020c 	mvn.w	r2, #12
 80012d4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e0:	2b40      	cmp	r3, #64	; 0x40
 80012e2:	d114      	bne.n	800130e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d10d      	bne.n	800130e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f812 	bl	8001328 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f06f 0201 	mvn.w	r2, #1
 800130c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
	...

0800133c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001354:	2b01      	cmp	r3, #1
 8001356:	d101      	bne.n	800135c <HAL_ADC_ConfigChannel+0x20>
 8001358:	2302      	movs	r3, #2
 800135a:	e0dc      	b.n	8001516 <HAL_ADC_ConfigChannel+0x1da>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b06      	cmp	r3, #6
 800136a:	d81c      	bhi.n	80013a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	3b05      	subs	r3, #5
 800137e:	221f      	movs	r2, #31
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	4019      	ands	r1, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	3b05      	subs	r3, #5
 8001398:	fa00 f203 	lsl.w	r2, r0, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34
 80013a4:	e03c      	b.n	8001420 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b0c      	cmp	r3, #12
 80013ac:	d81c      	bhi.n	80013e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	3b23      	subs	r3, #35	; 0x23
 80013c0:	221f      	movs	r2, #31
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	4019      	ands	r1, r3
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	6818      	ldr	r0, [r3, #0]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	3b23      	subs	r3, #35	; 0x23
 80013da:	fa00 f203 	lsl.w	r2, r0, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	631a      	str	r2, [r3, #48]	; 0x30
 80013e6:	e01b      	b.n	8001420 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	3b41      	subs	r3, #65	; 0x41
 80013fa:	221f      	movs	r2, #31
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	4019      	ands	r1, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	6818      	ldr	r0, [r3, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	3b41      	subs	r3, #65	; 0x41
 8001414:	fa00 f203 	lsl.w	r2, r0, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b09      	cmp	r3, #9
 8001426:	d91c      	bls.n	8001462 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68d9      	ldr	r1, [r3, #12]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4613      	mov	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	3b1e      	subs	r3, #30
 800143a:	2207      	movs	r2, #7
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	4019      	ands	r1, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	6898      	ldr	r0, [r3, #8]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	3b1e      	subs	r3, #30
 8001454:	fa00 f203 	lsl.w	r2, r0, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	e019      	b.n	8001496 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6919      	ldr	r1, [r3, #16]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	2207      	movs	r2, #7
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	4019      	ands	r1, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	6898      	ldr	r0, [r3, #8]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	fa00 f203 	lsl.w	r2, r0, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b10      	cmp	r3, #16
 800149c:	d003      	beq.n	80014a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014a2:	2b11      	cmp	r3, #17
 80014a4:	d132      	bne.n	800150c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a1d      	ldr	r2, [pc, #116]	; (8001520 <HAL_ADC_ConfigChannel+0x1e4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d125      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d126      	bne.n	800150c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014cc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d11a      	bne.n	800150c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <HAL_ADC_ConfigChannel+0x1e8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a13      	ldr	r2, [pc, #76]	; (8001528 <HAL_ADC_ConfigChannel+0x1ec>)
 80014dc:	fba2 2303 	umull	r2, r3, r2, r3
 80014e0:	0c9a      	lsrs	r2, r3, #18
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014ec:	e002      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f9      	bne.n	80014ee <HAL_ADC_ConfigChannel+0x1b2>
 80014fa:	e007      	b.n	800150c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	f043 0220 	orr.w	r2, r3, #32
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001514:	7bfb      	ldrb	r3, [r7, #15]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	40012400 	.word	0x40012400
 8001524:	20000004 	.word	0x20000004
 8001528:	431bde83 	.word	0x431bde83

0800152c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b01      	cmp	r3, #1
 8001548:	d039      	beq.n	80015be <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0201 	orr.w	r2, r2, #1
 8001558:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800155a:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <ADC_Enable+0x9c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a1b      	ldr	r2, [pc, #108]	; (80015cc <ADC_Enable+0xa0>)
 8001560:	fba2 2303 	umull	r2, r3, r2, r3
 8001564:	0c9b      	lsrs	r3, r3, #18
 8001566:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001568:	e002      	b.n	8001570 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	3b01      	subs	r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f9      	bne.n	800156a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001576:	f7ff fc45 	bl	8000e04 <HAL_GetTick>
 800157a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800157c:	e018      	b.n	80015b0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800157e:	f7ff fc41 	bl	8000e04 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d911      	bls.n	80015b0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	f043 0210 	orr.w	r2, r3, #16
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	f043 0201 	orr.w	r2, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e007      	b.n	80015c0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d1df      	bne.n	800157e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000004 	.word	0x20000004
 80015cc:	431bde83 	.word	0x431bde83

080015d0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d127      	bne.n	800163a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0201 	bic.w	r2, r2, #1
 80015f8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015fa:	f7ff fc03 	bl	8000e04 <HAL_GetTick>
 80015fe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001600:	e014      	b.n	800162c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001602:	f7ff fbff 	bl	8000e04 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d90d      	bls.n	800162c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	f043 0210 	orr.w	r2, r3, #16
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	f043 0201 	orr.w	r2, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e007      	b.n	800163c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b01      	cmp	r3, #1
 8001638:	d0e3      	beq.n	8001602 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800165a:	2b01      	cmp	r3, #1
 800165c:	d101      	bne.n	8001662 <HAL_ADCEx_Calibration_Start+0x1e>
 800165e:	2302      	movs	r3, #2
 8001660:	e086      	b.n	8001770 <HAL_ADCEx_Calibration_Start+0x12c>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ffb0 	bl	80015d0 <ADC_ConversionStop_Disable>
 8001670:	4603      	mov	r3, r0
 8001672:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001674:	7dfb      	ldrb	r3, [r7, #23]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d175      	bne.n	8001766 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001682:	f023 0302 	bic.w	r3, r3, #2
 8001686:	f043 0202 	orr.w	r2, r3, #2
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800168e:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <HAL_ADCEx_Calibration_Start+0x134>)
 8001690:	681c      	ldr	r4, [r3, #0]
 8001692:	2002      	movs	r0, #2
 8001694:	f001 f91e 	bl	80028d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001698:	4603      	mov	r3, r0
 800169a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800169e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80016a0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80016a2:	e002      	b.n	80016aa <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f9      	bne.n	80016a4 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff3b 	bl	800152c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 0208 	orr.w	r2, r2, #8
 80016c4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80016c6:	f7ff fb9d 	bl	8000e04 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80016cc:	e014      	b.n	80016f8 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80016ce:	f7ff fb99 	bl	8000e04 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b0a      	cmp	r3, #10
 80016da:	d90d      	bls.n	80016f8 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	f023 0312 	bic.w	r3, r3, #18
 80016e4:	f043 0210 	orr.w	r2, r3, #16
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e03b      	b.n	8001770 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1e3      	bne.n	80016ce <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0204 	orr.w	r2, r2, #4
 8001714:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001716:	f7ff fb75 	bl	8000e04 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800171c:	e014      	b.n	8001748 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800171e:	f7ff fb71 	bl	8000e04 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b0a      	cmp	r3, #10
 800172a:	d90d      	bls.n	8001748 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001730:	f023 0312 	bic.w	r3, r3, #18
 8001734:	f043 0210 	orr.w	r2, r3, #16
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e013      	b.n	8001770 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1e3      	bne.n	800171e <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	f023 0303 	bic.w	r3, r3, #3
 800175e:	f043 0201 	orr.w	r2, r3, #1
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800176e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001770:	4618      	mov	r0, r3
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd90      	pop	{r4, r7, pc}
 8001778:	20000004 	.word	0x20000004

0800177c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
	...

08001790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <__NVIC_GetPriorityGrouping+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0307 	and.w	r3, r3, #7
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	db0b      	blt.n	800181e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	4906      	ldr	r1, [pc, #24]	; (8001828 <__NVIC_EnableIRQ+0x34>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	2001      	movs	r0, #1
 8001816:	fa00 f202 	lsl.w	r2, r0, r2
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	e000e100 	.word	0xe000e100

0800182c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	; (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
         );
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f4:	d301      	bcc.n	80018fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <SysTick_Config+0x40>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001902:	210f      	movs	r1, #15
 8001904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001908:	f7ff ff90 	bl	800182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <SysTick_Config+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <SysTick_Config+0x40>)
 8001914:	2207      	movs	r2, #7
 8001916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff2d 	bl	8001790 <__NVIC_SetPriorityGrouping>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001950:	f7ff ff42 	bl	80017d8 <__NVIC_GetPriorityGrouping>
 8001954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	6978      	ldr	r0, [r7, #20]
 800195c:	f7ff ff90 	bl	8001880 <NVIC_EncodePriority>
 8001960:	4602      	mov	r2, r0
 8001962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff5f 	bl	800182c <__NVIC_SetPriority>
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff35 	bl	80017f4 <__NVIC_EnableIRQ>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffa2 	bl	80018e4 <SysTick_Config>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b08b      	sub	sp, #44	; 0x2c
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019be:	e127      	b.n	8001c10 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019c0:	2201      	movs	r2, #1
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	429a      	cmp	r2, r3
 80019da:	f040 8116 	bne.w	8001c0a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b12      	cmp	r3, #18
 80019e4:	d034      	beq.n	8001a50 <HAL_GPIO_Init+0xa4>
 80019e6:	2b12      	cmp	r3, #18
 80019e8:	d80d      	bhi.n	8001a06 <HAL_GPIO_Init+0x5a>
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d02b      	beq.n	8001a46 <HAL_GPIO_Init+0x9a>
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d804      	bhi.n	80019fc <HAL_GPIO_Init+0x50>
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d031      	beq.n	8001a5a <HAL_GPIO_Init+0xae>
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d01c      	beq.n	8001a34 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019fa:	e048      	b.n	8001a8e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d043      	beq.n	8001a88 <HAL_GPIO_Init+0xdc>
 8001a00:	2b11      	cmp	r3, #17
 8001a02:	d01b      	beq.n	8001a3c <HAL_GPIO_Init+0x90>
          break;
 8001a04:	e043      	b.n	8001a8e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a06:	4a89      	ldr	r2, [pc, #548]	; (8001c2c <HAL_GPIO_Init+0x280>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d026      	beq.n	8001a5a <HAL_GPIO_Init+0xae>
 8001a0c:	4a87      	ldr	r2, [pc, #540]	; (8001c2c <HAL_GPIO_Init+0x280>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d806      	bhi.n	8001a20 <HAL_GPIO_Init+0x74>
 8001a12:	4a87      	ldr	r2, [pc, #540]	; (8001c30 <HAL_GPIO_Init+0x284>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d020      	beq.n	8001a5a <HAL_GPIO_Init+0xae>
 8001a18:	4a86      	ldr	r2, [pc, #536]	; (8001c34 <HAL_GPIO_Init+0x288>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d01d      	beq.n	8001a5a <HAL_GPIO_Init+0xae>
          break;
 8001a1e:	e036      	b.n	8001a8e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a20:	4a85      	ldr	r2, [pc, #532]	; (8001c38 <HAL_GPIO_Init+0x28c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d019      	beq.n	8001a5a <HAL_GPIO_Init+0xae>
 8001a26:	4a85      	ldr	r2, [pc, #532]	; (8001c3c <HAL_GPIO_Init+0x290>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d016      	beq.n	8001a5a <HAL_GPIO_Init+0xae>
 8001a2c:	4a84      	ldr	r2, [pc, #528]	; (8001c40 <HAL_GPIO_Init+0x294>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d013      	beq.n	8001a5a <HAL_GPIO_Init+0xae>
          break;
 8001a32:	e02c      	b.n	8001a8e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	623b      	str	r3, [r7, #32]
          break;
 8001a3a:	e028      	b.n	8001a8e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	3304      	adds	r3, #4
 8001a42:	623b      	str	r3, [r7, #32]
          break;
 8001a44:	e023      	b.n	8001a8e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	3308      	adds	r3, #8
 8001a4c:	623b      	str	r3, [r7, #32]
          break;
 8001a4e:	e01e      	b.n	8001a8e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	330c      	adds	r3, #12
 8001a56:	623b      	str	r3, [r7, #32]
          break;
 8001a58:	e019      	b.n	8001a8e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d102      	bne.n	8001a68 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a62:	2304      	movs	r3, #4
 8001a64:	623b      	str	r3, [r7, #32]
          break;
 8001a66:	e012      	b.n	8001a8e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d105      	bne.n	8001a7c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a70:	2308      	movs	r3, #8
 8001a72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	611a      	str	r2, [r3, #16]
          break;
 8001a7a:	e008      	b.n	8001a8e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	615a      	str	r2, [r3, #20]
          break;
 8001a86:	e002      	b.n	8001a8e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
          break;
 8001a8c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	2bff      	cmp	r3, #255	; 0xff
 8001a92:	d801      	bhi.n	8001a98 <HAL_GPIO_Init+0xec>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	e001      	b.n	8001a9c <HAL_GPIO_Init+0xf0>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2bff      	cmp	r3, #255	; 0xff
 8001aa2:	d802      	bhi.n	8001aaa <HAL_GPIO_Init+0xfe>
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	e002      	b.n	8001ab0 <HAL_GPIO_Init+0x104>
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	3b08      	subs	r3, #8
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	6a39      	ldr	r1, [r7, #32]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	431a      	orrs	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8096 	beq.w	8001c0a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ade:	4b59      	ldr	r3, [pc, #356]	; (8001c44 <HAL_GPIO_Init+0x298>)
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	4a58      	ldr	r2, [pc, #352]	; (8001c44 <HAL_GPIO_Init+0x298>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6193      	str	r3, [r2, #24]
 8001aea:	4b56      	ldr	r3, [pc, #344]	; (8001c44 <HAL_GPIO_Init+0x298>)
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001af6:	4a54      	ldr	r2, [pc, #336]	; (8001c48 <HAL_GPIO_Init+0x29c>)
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b02:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4013      	ands	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4b      	ldr	r2, [pc, #300]	; (8001c4c <HAL_GPIO_Init+0x2a0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0x19e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4a      	ldr	r2, [pc, #296]	; (8001c50 <HAL_GPIO_Init+0x2a4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00d      	beq.n	8001b46 <HAL_GPIO_Init+0x19a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a49      	ldr	r2, [pc, #292]	; (8001c54 <HAL_GPIO_Init+0x2a8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d007      	beq.n	8001b42 <HAL_GPIO_Init+0x196>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a48      	ldr	r2, [pc, #288]	; (8001c58 <HAL_GPIO_Init+0x2ac>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_GPIO_Init+0x192>
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e006      	b.n	8001b4c <HAL_GPIO_Init+0x1a0>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	e004      	b.n	8001b4c <HAL_GPIO_Init+0x1a0>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e002      	b.n	8001b4c <HAL_GPIO_Init+0x1a0>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <HAL_GPIO_Init+0x1a0>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4e:	f002 0203 	and.w	r2, r2, #3
 8001b52:	0092      	lsls	r2, r2, #2
 8001b54:	4093      	lsls	r3, r2
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b5c:	493a      	ldr	r1, [pc, #232]	; (8001c48 <HAL_GPIO_Init+0x29c>)
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	089b      	lsrs	r3, r3, #2
 8001b62:	3302      	adds	r3, #2
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d006      	beq.n	8001b84 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b76:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4938      	ldr	r1, [pc, #224]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]
 8001b82:	e006      	b.n	8001b92 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b84:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	4933      	ldr	r1, [pc, #204]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d006      	beq.n	8001bac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b9e:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	492e      	ldr	r1, [pc, #184]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	604b      	str	r3, [r1, #4]
 8001baa:	e006      	b.n	8001bba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	4929      	ldr	r1, [pc, #164]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d006      	beq.n	8001bd4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bc6:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	4924      	ldr	r1, [pc, #144]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
 8001bd2:	e006      	b.n	8001be2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bd4:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	491f      	ldr	r1, [pc, #124]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d006      	beq.n	8001bfc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bee:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	491a      	ldr	r1, [pc, #104]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	60cb      	str	r3, [r1, #12]
 8001bfa:	e006      	b.n	8001c0a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	4915      	ldr	r1, [pc, #84]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f47f aed0 	bne.w	80019c0 <HAL_GPIO_Init+0x14>
  }
}
 8001c20:	bf00      	nop
 8001c22:	372c      	adds	r7, #44	; 0x2c
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	10210000 	.word	0x10210000
 8001c30:	10110000 	.word	0x10110000
 8001c34:	10120000 	.word	0x10120000
 8001c38:	10310000 	.word	0x10310000
 8001c3c:	10320000 	.word	0x10320000
 8001c40:	10220000 	.word	0x10220000
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010000 	.word	0x40010000
 8001c4c:	40010800 	.word	0x40010800
 8001c50:	40010c00 	.word	0x40010c00
 8001c54:	40011000 	.word	0x40011000
 8001c58:	40011400 	.word	0x40011400
 8001c5c:	40010400 	.word	0x40010400

08001c60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
 8001c7c:	e001      	b.n	8001c82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	807b      	strh	r3, [r7, #2]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c9e:	787b      	ldrb	r3, [r7, #1]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca4:	887a      	ldrh	r2, [r7, #2]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001caa:	e003      	b.n	8001cb4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cac:	887b      	ldrh	r3, [r7, #2]
 8001cae:	041a      	lsls	r2, r3, #16
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	611a      	str	r2, [r3, #16]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
	...

08001cc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e11f      	b.n	8001f12 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7fe fe9a 	bl	8000a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2224      	movs	r2, #36	; 0x24
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d24:	f000 fcda 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8001d28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4a7b      	ldr	r2, [pc, #492]	; (8001f1c <HAL_I2C_Init+0x25c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d807      	bhi.n	8001d44 <HAL_I2C_Init+0x84>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4a7a      	ldr	r2, [pc, #488]	; (8001f20 <HAL_I2C_Init+0x260>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	bf94      	ite	ls
 8001d3c:	2301      	movls	r3, #1
 8001d3e:	2300      	movhi	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	e006      	b.n	8001d52 <HAL_I2C_Init+0x92>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4a77      	ldr	r2, [pc, #476]	; (8001f24 <HAL_I2C_Init+0x264>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	bf94      	ite	ls
 8001d4c:	2301      	movls	r3, #1
 8001d4e:	2300      	movhi	r3, #0
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e0db      	b.n	8001f12 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4a72      	ldr	r2, [pc, #456]	; (8001f28 <HAL_I2C_Init+0x268>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	0c9b      	lsrs	r3, r3, #18
 8001d64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4a64      	ldr	r2, [pc, #400]	; (8001f1c <HAL_I2C_Init+0x25c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d802      	bhi.n	8001d94 <HAL_I2C_Init+0xd4>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3301      	adds	r3, #1
 8001d92:	e009      	b.n	8001da8 <HAL_I2C_Init+0xe8>
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d9a:	fb02 f303 	mul.w	r3, r2, r3
 8001d9e:	4a63      	ldr	r2, [pc, #396]	; (8001f2c <HAL_I2C_Init+0x26c>)
 8001da0:	fba2 2303 	umull	r2, r3, r2, r3
 8001da4:	099b      	lsrs	r3, r3, #6
 8001da6:	3301      	adds	r3, #1
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	430b      	orrs	r3, r1
 8001dae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4956      	ldr	r1, [pc, #344]	; (8001f1c <HAL_I2C_Init+0x25c>)
 8001dc4:	428b      	cmp	r3, r1
 8001dc6:	d80d      	bhi.n	8001de4 <HAL_I2C_Init+0x124>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1e59      	subs	r1, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	bf38      	it	cc
 8001de0:	2304      	movcc	r3, #4
 8001de2:	e04f      	b.n	8001e84 <HAL_I2C_Init+0x1c4>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d111      	bne.n	8001e10 <HAL_I2C_Init+0x150>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	1e58      	subs	r0, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6859      	ldr	r1, [r3, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	440b      	add	r3, r1
 8001dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	e012      	b.n	8001e36 <HAL_I2C_Init+0x176>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1e58      	subs	r0, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6859      	ldr	r1, [r3, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	0099      	lsls	r1, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e26:	3301      	adds	r3, #1
 8001e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_I2C_Init+0x17e>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e022      	b.n	8001e84 <HAL_I2C_Init+0x1c4>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10e      	bne.n	8001e64 <HAL_I2C_Init+0x1a4>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1e58      	subs	r0, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6859      	ldr	r1, [r3, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	440b      	add	r3, r1
 8001e54:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e62:	e00f      	b.n	8001e84 <HAL_I2C_Init+0x1c4>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1e58      	subs	r0, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6859      	ldr	r1, [r3, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	0099      	lsls	r1, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	6809      	ldr	r1, [r1, #0]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69da      	ldr	r2, [r3, #28]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001eb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6911      	ldr	r1, [r2, #16]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68d2      	ldr	r2, [r2, #12]
 8001ebe:	4311      	orrs	r1, r2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2220      	movs	r2, #32
 8001efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	000186a0 	.word	0x000186a0
 8001f20:	001e847f 	.word	0x001e847f
 8001f24:	003d08ff 	.word	0x003d08ff
 8001f28:	431bde83 	.word	0x431bde83
 8001f2c:	10624dd3 	.word	0x10624dd3

08001f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e26c      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8087 	beq.w	800205e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f50:	4b92      	ldr	r3, [pc, #584]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d00c      	beq.n	8001f76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f5c:	4b8f      	ldr	r3, [pc, #572]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d112      	bne.n	8001f8e <HAL_RCC_OscConfig+0x5e>
 8001f68:	4b8c      	ldr	r3, [pc, #560]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f74:	d10b      	bne.n	8001f8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f76:	4b89      	ldr	r3, [pc, #548]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d06c      	beq.n	800205c <HAL_RCC_OscConfig+0x12c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d168      	bne.n	800205c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e246      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x76>
 8001f98:	4b80      	ldr	r3, [pc, #512]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a7f      	ldr	r2, [pc, #508]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	e02e      	b.n	8002004 <HAL_RCC_OscConfig+0xd4>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x98>
 8001fae:	4b7b      	ldr	r3, [pc, #492]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a7a      	ldr	r2, [pc, #488]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b78      	ldr	r3, [pc, #480]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a77      	ldr	r2, [pc, #476]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e01d      	b.n	8002004 <HAL_RCC_OscConfig+0xd4>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCC_OscConfig+0xbc>
 8001fd2:	4b72      	ldr	r3, [pc, #456]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a71      	ldr	r2, [pc, #452]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b6f      	ldr	r3, [pc, #444]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a6e      	ldr	r2, [pc, #440]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e00b      	b.n	8002004 <HAL_RCC_OscConfig+0xd4>
 8001fec:	4b6b      	ldr	r3, [pc, #428]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a6a      	ldr	r2, [pc, #424]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b68      	ldr	r3, [pc, #416]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a67      	ldr	r2, [pc, #412]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002002:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d013      	beq.n	8002034 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe fefa 	bl	8000e04 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002014:	f7fe fef6 	bl	8000e04 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	; 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e1fa      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b5d      	ldr	r3, [pc, #372]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0xe4>
 8002032:	e014      	b.n	800205e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7fe fee6 	bl	8000e04 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800203c:	f7fe fee2 	bl	8000e04 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e1e6      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204e:	4b53      	ldr	r3, [pc, #332]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x10c>
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d063      	beq.n	8002132 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800206a:	4b4c      	ldr	r3, [pc, #304]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002076:	4b49      	ldr	r3, [pc, #292]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b08      	cmp	r3, #8
 8002080:	d11c      	bne.n	80020bc <HAL_RCC_OscConfig+0x18c>
 8002082:	4b46      	ldr	r3, [pc, #280]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d116      	bne.n	80020bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208e:	4b43      	ldr	r3, [pc, #268]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_RCC_OscConfig+0x176>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d001      	beq.n	80020a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e1ba      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a6:	4b3d      	ldr	r3, [pc, #244]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4939      	ldr	r1, [pc, #228]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ba:	e03a      	b.n	8002132 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c4:	4b36      	ldr	r3, [pc, #216]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7fe fe9b 	bl	8000e04 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d2:	f7fe fe97 	bl	8000e04 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e19b      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e4:	4b2d      	ldr	r3, [pc, #180]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f0:	4b2a      	ldr	r3, [pc, #168]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4927      	ldr	r1, [pc, #156]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]
 8002104:	e015      	b.n	8002132 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002106:	4b26      	ldr	r3, [pc, #152]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7fe fe7a 	bl	8000e04 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002114:	f7fe fe76 	bl	8000e04 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e17a      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002126:	4b1d      	ldr	r3, [pc, #116]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d03a      	beq.n	80021b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d019      	beq.n	800217a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002146:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214c:	f7fe fe5a 	bl	8000e04 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002154:	f7fe fe56 	bl	8000e04 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e15a      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002172:	2001      	movs	r0, #1
 8002174:	f000 fada 	bl	800272c <RCC_Delay>
 8002178:	e01c      	b.n	80021b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002180:	f7fe fe40 	bl	8000e04 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002186:	e00f      	b.n	80021a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002188:	f7fe fe3c 	bl	8000e04 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d908      	bls.n	80021a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e140      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	42420000 	.word	0x42420000
 80021a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a8:	4b9e      	ldr	r3, [pc, #632]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1e9      	bne.n	8002188 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80a6 	beq.w	800230e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c6:	4b97      	ldr	r3, [pc, #604]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10d      	bne.n	80021ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d2:	4b94      	ldr	r3, [pc, #592]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	4a93      	ldr	r2, [pc, #588]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021dc:	61d3      	str	r3, [r2, #28]
 80021de:	4b91      	ldr	r3, [pc, #580]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ea:	2301      	movs	r3, #1
 80021ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ee:	4b8e      	ldr	r3, [pc, #568]	; (8002428 <HAL_RCC_OscConfig+0x4f8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d118      	bne.n	800222c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021fa:	4b8b      	ldr	r3, [pc, #556]	; (8002428 <HAL_RCC_OscConfig+0x4f8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a8a      	ldr	r2, [pc, #552]	; (8002428 <HAL_RCC_OscConfig+0x4f8>)
 8002200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002206:	f7fe fdfd 	bl	8000e04 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220e:	f7fe fdf9 	bl	8000e04 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b64      	cmp	r3, #100	; 0x64
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e0fd      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002220:	4b81      	ldr	r3, [pc, #516]	; (8002428 <HAL_RCC_OscConfig+0x4f8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d106      	bne.n	8002242 <HAL_RCC_OscConfig+0x312>
 8002234:	4b7b      	ldr	r3, [pc, #492]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4a7a      	ldr	r2, [pc, #488]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6213      	str	r3, [r2, #32]
 8002240:	e02d      	b.n	800229e <HAL_RCC_OscConfig+0x36e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x334>
 800224a:	4b76      	ldr	r3, [pc, #472]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4a75      	ldr	r2, [pc, #468]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6213      	str	r3, [r2, #32]
 8002256:	4b73      	ldr	r3, [pc, #460]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4a72      	ldr	r2, [pc, #456]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	6213      	str	r3, [r2, #32]
 8002262:	e01c      	b.n	800229e <HAL_RCC_OscConfig+0x36e>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b05      	cmp	r3, #5
 800226a:	d10c      	bne.n	8002286 <HAL_RCC_OscConfig+0x356>
 800226c:	4b6d      	ldr	r3, [pc, #436]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4a6c      	ldr	r2, [pc, #432]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002272:	f043 0304 	orr.w	r3, r3, #4
 8002276:	6213      	str	r3, [r2, #32]
 8002278:	4b6a      	ldr	r3, [pc, #424]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4a69      	ldr	r2, [pc, #420]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6213      	str	r3, [r2, #32]
 8002284:	e00b      	b.n	800229e <HAL_RCC_OscConfig+0x36e>
 8002286:	4b67      	ldr	r3, [pc, #412]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4a66      	ldr	r2, [pc, #408]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	6213      	str	r3, [r2, #32]
 8002292:	4b64      	ldr	r3, [pc, #400]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a63      	ldr	r2, [pc, #396]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002298:	f023 0304 	bic.w	r3, r3, #4
 800229c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d015      	beq.n	80022d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a6:	f7fe fdad 	bl	8000e04 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ac:	e00a      	b.n	80022c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ae:	f7fe fda9 	bl	8000e04 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e0ab      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c4:	4b57      	ldr	r3, [pc, #348]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0ee      	beq.n	80022ae <HAL_RCC_OscConfig+0x37e>
 80022d0:	e014      	b.n	80022fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d2:	f7fe fd97 	bl	8000e04 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7fe fd93 	bl	8000e04 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e095      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f0:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1ee      	bne.n	80022da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022fc:	7dfb      	ldrb	r3, [r7, #23]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d105      	bne.n	800230e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002302:	4b48      	ldr	r3, [pc, #288]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4a47      	ldr	r2, [pc, #284]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800230c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 8081 	beq.w	800241a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 030c 	and.w	r3, r3, #12
 8002320:	2b08      	cmp	r3, #8
 8002322:	d061      	beq.n	80023e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d146      	bne.n	80023ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232c:	4b3f      	ldr	r3, [pc, #252]	; (800242c <HAL_RCC_OscConfig+0x4fc>)
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002332:	f7fe fd67 	bl	8000e04 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233a:	f7fe fd63 	bl	8000e04 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e067      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234c:	4b35      	ldr	r3, [pc, #212]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f0      	bne.n	800233a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002360:	d108      	bne.n	8002374 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	492d      	ldr	r1, [pc, #180]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002374:	4b2b      	ldr	r3, [pc, #172]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a19      	ldr	r1, [r3, #32]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	430b      	orrs	r3, r1
 8002386:	4927      	ldr	r1, [pc, #156]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800238c:	4b27      	ldr	r3, [pc, #156]	; (800242c <HAL_RCC_OscConfig+0x4fc>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7fe fd37 	bl	8000e04 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239a:	f7fe fd33 	bl	8000e04 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e037      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023ac:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x46a>
 80023b8:	e02f      	b.n	800241a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b1c      	ldr	r3, [pc, #112]	; (800242c <HAL_RCC_OscConfig+0x4fc>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe fd20 	bl	8000e04 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe fd1c 	bl	8000e04 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e020      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x498>
 80023e6:	e018      	b.n	800241a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e013      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	429a      	cmp	r2, r3
 8002406:	d106      	bne.n	8002416 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d001      	beq.n	800241a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	40007000 	.word	0x40007000
 800242c:	42420060 	.word	0x42420060

08002430 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0d0      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002444:	4b6a      	ldr	r3, [pc, #424]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d910      	bls.n	8002474 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002452:	4b67      	ldr	r3, [pc, #412]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 0207 	bic.w	r2, r3, #7
 800245a:	4965      	ldr	r1, [pc, #404]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b63      	ldr	r3, [pc, #396]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0b8      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d020      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800248c:	4b59      	ldr	r3, [pc, #356]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a58      	ldr	r2, [pc, #352]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002496:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a4:	4b53      	ldr	r3, [pc, #332]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4a52      	ldr	r2, [pc, #328]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b0:	4b50      	ldr	r3, [pc, #320]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	494d      	ldr	r1, [pc, #308]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d040      	beq.n	8002550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	4b47      	ldr	r3, [pc, #284]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d115      	bne.n	800250e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e07f      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d107      	bne.n	80024fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ee:	4b41      	ldr	r3, [pc, #260]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e073      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fe:	4b3d      	ldr	r3, [pc, #244]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e06b      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800250e:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f023 0203 	bic.w	r2, r3, #3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	4936      	ldr	r1, [pc, #216]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002520:	f7fe fc70 	bl	8000e04 <HAL_GetTick>
 8002524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002526:	e00a      	b.n	800253e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002528:	f7fe fc6c 	bl	8000e04 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	f241 3288 	movw	r2, #5000	; 0x1388
 8002536:	4293      	cmp	r3, r2
 8002538:	d901      	bls.n	800253e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e053      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253e:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 020c 	and.w	r2, r3, #12
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	429a      	cmp	r2, r3
 800254e:	d1eb      	bne.n	8002528 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002550:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d210      	bcs.n	8002580 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255e:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 0207 	bic.w	r2, r3, #7
 8002566:	4922      	ldr	r1, [pc, #136]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256e:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e032      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800258c:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4916      	ldr	r1, [pc, #88]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d009      	beq.n	80025be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025aa:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	490e      	ldr	r1, [pc, #56]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025be:	f000 f821 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 80025c2:	4601      	mov	r1, r0
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 80025d0:	5cd3      	ldrb	r3, [r2, r3]
 80025d2:	fa21 f303 	lsr.w	r3, r1, r3
 80025d6:	4a09      	ldr	r2, [pc, #36]	; (80025fc <HAL_RCC_ClockConfig+0x1cc>)
 80025d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025da:	4b09      	ldr	r3, [pc, #36]	; (8002600 <HAL_RCC_ClockConfig+0x1d0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fbce 	bl	8000d80 <HAL_InitTick>

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40022000 	.word	0x40022000
 80025f4:	40021000 	.word	0x40021000
 80025f8:	08003644 	.word	0x08003644
 80025fc:	20000004 	.word	0x20000004
 8002600:	20000008 	.word	0x20000008

08002604 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002604:	b490      	push	{r4, r7}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800260a:	4b2a      	ldr	r3, [pc, #168]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800260c:	1d3c      	adds	r4, r7, #4
 800260e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002614:	4b28      	ldr	r3, [pc, #160]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	2300      	movs	r3, #0
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b04      	cmp	r3, #4
 800263c:	d002      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x40>
 800263e:	2b08      	cmp	r3, #8
 8002640:	d003      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0x46>
 8002642:	e02d      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002644:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002646:	623b      	str	r3, [r7, #32]
      break;
 8002648:	e02d      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	0c9b      	lsrs	r3, r3, #18
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002656:	4413      	add	r3, r2
 8002658:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800265c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d013      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002668:	4b14      	ldr	r3, [pc, #80]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	0c5b      	lsrs	r3, r3, #17
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002676:	4413      	add	r3, r2
 8002678:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800267c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	4a0f      	ldr	r2, [pc, #60]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002682:	fb02 f203 	mul.w	r2, r2, r3
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
 800268e:	e004      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	4a0c      	ldr	r2, [pc, #48]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002694:	fb02 f303 	mul.w	r3, r2, r3
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	623b      	str	r3, [r7, #32]
      break;
 800269e:	e002      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026a2:	623b      	str	r3, [r7, #32]
      break;
 80026a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026a6:	6a3b      	ldr	r3, [r7, #32]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3728      	adds	r7, #40	; 0x28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc90      	pop	{r4, r7}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	0800361c 	.word	0x0800361c
 80026b8:	0800362c 	.word	0x0800362c
 80026bc:	40021000 	.word	0x40021000
 80026c0:	007a1200 	.word	0x007a1200
 80026c4:	003d0900 	.word	0x003d0900

080026c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026cc:	4b02      	ldr	r3, [pc, #8]	; (80026d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	20000004 	.word	0x20000004

080026dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026e0:	f7ff fff2 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 80026e4:	4601      	mov	r1, r0
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	0a1b      	lsrs	r3, r3, #8
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	4a03      	ldr	r2, [pc, #12]	; (8002700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f2:	5cd3      	ldrb	r3, [r2, r3]
 80026f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000
 8002700:	08003654 	.word	0x08003654

08002704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002708:	f7ff ffde 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 800270c:	4601      	mov	r1, r0
 800270e:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	0adb      	lsrs	r3, r3, #11
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	4a03      	ldr	r2, [pc, #12]	; (8002728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800271a:	5cd3      	ldrb	r3, [r2, r3]
 800271c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000
 8002728:	08003654 	.word	0x08003654

0800272c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <RCC_Delay+0x34>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <RCC_Delay+0x38>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	0a5b      	lsrs	r3, r3, #9
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	fb02 f303 	mul.w	r3, r2, r3
 8002746:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002748:	bf00      	nop
  }
  while (Delay --);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1e5a      	subs	r2, r3, #1
 800274e:	60fa      	str	r2, [r7, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f9      	bne.n	8002748 <RCC_Delay+0x1c>
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000004 	.word	0x20000004
 8002764:	10624dd3 	.word	0x10624dd3

08002768 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d07d      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002784:	2300      	movs	r3, #0
 8002786:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002788:	4b4f      	ldr	r3, [pc, #316]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10d      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002794:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	4a4b      	ldr	r2, [pc, #300]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279e:	61d3      	str	r3, [r2, #28]
 80027a0:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ac:	2301      	movs	r3, #1
 80027ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b0:	4b46      	ldr	r3, [pc, #280]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d118      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027bc:	4b43      	ldr	r3, [pc, #268]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a42      	ldr	r2, [pc, #264]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c8:	f7fe fb1c 	bl	8000e04 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ce:	e008      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d0:	f7fe fb18 	bl	8000e04 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	; 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e06d      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e2:	4b3a      	ldr	r3, [pc, #232]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027ee:	4b36      	ldr	r3, [pc, #216]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d02e      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	429a      	cmp	r2, r3
 800280a:	d027      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800280c:	4b2e      	ldr	r3, [pc, #184]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002814:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002816:	4b2e      	ldr	r3, [pc, #184]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002818:	2201      	movs	r2, #1
 800281a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800281c:	4b2c      	ldr	r3, [pc, #176]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002822:	4a29      	ldr	r2, [pc, #164]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d014      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002832:	f7fe fae7 	bl	8000e04 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7fe fae3 	bl	8000e04 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	; 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e036      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002850:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ee      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800285c:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4917      	ldr	r1, [pc, #92]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286a:	4313      	orrs	r3, r2
 800286c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800286e:	7dfb      	ldrb	r3, [r7, #23]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d105      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002874:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	4a13      	ldr	r2, [pc, #76]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800287e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800288c:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	490b      	ldr	r1, [pc, #44]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028aa:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4904      	ldr	r1, [pc, #16]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40007000 	.word	0x40007000
 80028d0:	42420440 	.word	0x42420440

080028d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b08d      	sub	sp, #52	; 0x34
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028dc:	4b55      	ldr	r3, [pc, #340]	; (8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80028de:	f107 040c 	add.w	r4, r7, #12
 80028e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028e8:	4b53      	ldr	r3, [pc, #332]	; (8002a38 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
 80028f2:	2300      	movs	r3, #0
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f6:	2300      	movs	r3, #0
 80028f8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	2300      	movs	r3, #0
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d07f      	beq.n	8002a08 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002908:	2b10      	cmp	r3, #16
 800290a:	d002      	beq.n	8002912 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 800290c:	2b01      	cmp	r3, #1
 800290e:	d048      	beq.n	80029a2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002910:	e08b      	b.n	8002a2a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002912:	4b4a      	ldr	r3, [pc, #296]	; (8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002918:	4b48      	ldr	r3, [pc, #288]	; (8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d07f      	beq.n	8002a24 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	0c9b      	lsrs	r3, r3, #18
 8002928:	f003 030f 	and.w	r3, r3, #15
 800292c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002930:	4413      	add	r3, r2
 8002932:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002936:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d018      	beq.n	8002974 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002942:	4b3e      	ldr	r3, [pc, #248]	; (8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	0c5b      	lsrs	r3, r3, #17
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002950:	4413      	add	r3, r2
 8002952:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00d      	beq.n	800297e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002962:	4a37      	ldr	r2, [pc, #220]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	fbb2 f2f3 	udiv	r2, r2, r3
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	fb02 f303 	mul.w	r3, r2, r3
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002972:	e004      	b.n	800297e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	4a33      	ldr	r2, [pc, #204]	; (8002a44 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800297e:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800298a:	d102      	bne.n	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002990:	e048      	b.n	8002a24 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	4a2c      	ldr	r2, [pc, #176]	; (8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002998:	fba2 2303 	umull	r2, r3, r2, r3
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029a0:	e040      	b.n	8002a24 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80029a2:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b2:	d108      	bne.n	80029c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80029be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80029c4:	e01f      	b.n	8002a06 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029d0:	d109      	bne.n	80029e6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80029d2:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80029de:	f649 4340 	movw	r3, #40000	; 0x9c40
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e4:	e00f      	b.n	8002a06 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029f0:	d11a      	bne.n	8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80029f2:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d014      	beq.n	8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80029fe:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a04:	e010      	b.n	8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002a06:	e00f      	b.n	8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002a08:	f7ff fe7c 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	0b9b      	lsrs	r3, r3, #14
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	3301      	adds	r3, #1
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a22:	e002      	b.n	8002a2a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002a24:	bf00      	nop
 8002a26:	e000      	b.n	8002a2a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002a28:	bf00      	nop
    }
  }
  return (frequency);
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3734      	adds	r7, #52	; 0x34
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd90      	pop	{r4, r7, pc}
 8002a34:	08003630 	.word	0x08003630
 8002a38:	08003640 	.word	0x08003640
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	007a1200 	.word	0x007a1200
 8002a44:	003d0900 	.word	0x003d0900
 8002a48:	aaaaaaab 	.word	0xaaaaaaab

08002a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e041      	b.n	8002ae2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d106      	bne.n	8002a78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fe f812 	bl	8000a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3304      	adds	r3, #4
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	f000 fa6c 	bl	8002f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d001      	beq.n	8002b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e03a      	b.n	8002b7a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a18      	ldr	r2, [pc, #96]	; (8002b84 <HAL_TIM_Base_Start_IT+0x98>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00e      	beq.n	8002b44 <HAL_TIM_Base_Start_IT+0x58>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2e:	d009      	beq.n	8002b44 <HAL_TIM_Base_Start_IT+0x58>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d004      	beq.n	8002b44 <HAL_TIM_Base_Start_IT+0x58>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <HAL_TIM_Base_Start_IT+0xa0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d111      	bne.n	8002b68 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d010      	beq.n	8002b78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0201 	orr.w	r2, r2, #1
 8002b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b66:	e007      	b.n	8002b78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	40012c00 	.word	0x40012c00
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	40000800 	.word	0x40000800

08002b90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d122      	bne.n	8002bec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d11b      	bne.n	8002bec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0202 	mvn.w	r2, #2
 8002bbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f9ad 	bl	8002f32 <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f9a0 	bl	8002f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f9af 	bl	8002f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d122      	bne.n	8002c40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d11b      	bne.n	8002c40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0204 	mvn.w	r2, #4
 8002c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2202      	movs	r2, #2
 8002c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f983 	bl	8002f32 <HAL_TIM_IC_CaptureCallback>
 8002c2c:	e005      	b.n	8002c3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f976 	bl	8002f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f985 	bl	8002f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d122      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d11b      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0208 	mvn.w	r2, #8
 8002c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2204      	movs	r2, #4
 8002c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f959 	bl	8002f32 <HAL_TIM_IC_CaptureCallback>
 8002c80:	e005      	b.n	8002c8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f94c 	bl	8002f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f95b 	bl	8002f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b10      	cmp	r3, #16
 8002ca0:	d122      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d11b      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0210 	mvn.w	r2, #16
 8002cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f92f 	bl	8002f32 <HAL_TIM_IC_CaptureCallback>
 8002cd4:	e005      	b.n	8002ce2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f922 	bl	8002f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f931 	bl	8002f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d10e      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d107      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0201 	mvn.w	r2, #1
 8002d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f8fd 	bl	8002f0e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1e:	2b80      	cmp	r3, #128	; 0x80
 8002d20:	d10e      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2c:	2b80      	cmp	r3, #128	; 0x80
 8002d2e:	d107      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa73 	bl	8003226 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4a:	2b40      	cmp	r3, #64	; 0x40
 8002d4c:	d10e      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d58:	2b40      	cmp	r3, #64	; 0x40
 8002d5a:	d107      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f8f5 	bl	8002f56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	d10e      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d107      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0220 	mvn.w	r2, #32
 8002d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fa3e 	bl	8003214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_TIM_ConfigClockSource+0x18>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e0a6      	b.n	8002f06 <HAL_TIM_ConfigClockSource+0x166>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b40      	cmp	r3, #64	; 0x40
 8002dee:	d067      	beq.n	8002ec0 <HAL_TIM_ConfigClockSource+0x120>
 8002df0:	2b40      	cmp	r3, #64	; 0x40
 8002df2:	d80b      	bhi.n	8002e0c <HAL_TIM_ConfigClockSource+0x6c>
 8002df4:	2b10      	cmp	r3, #16
 8002df6:	d073      	beq.n	8002ee0 <HAL_TIM_ConfigClockSource+0x140>
 8002df8:	2b10      	cmp	r3, #16
 8002dfa:	d802      	bhi.n	8002e02 <HAL_TIM_ConfigClockSource+0x62>
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d06f      	beq.n	8002ee0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e00:	e078      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	d06c      	beq.n	8002ee0 <HAL_TIM_ConfigClockSource+0x140>
 8002e06:	2b30      	cmp	r3, #48	; 0x30
 8002e08:	d06a      	beq.n	8002ee0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002e0a:	e073      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e0c:	2b70      	cmp	r3, #112	; 0x70
 8002e0e:	d00d      	beq.n	8002e2c <HAL_TIM_ConfigClockSource+0x8c>
 8002e10:	2b70      	cmp	r3, #112	; 0x70
 8002e12:	d804      	bhi.n	8002e1e <HAL_TIM_ConfigClockSource+0x7e>
 8002e14:	2b50      	cmp	r3, #80	; 0x50
 8002e16:	d033      	beq.n	8002e80 <HAL_TIM_ConfigClockSource+0xe0>
 8002e18:	2b60      	cmp	r3, #96	; 0x60
 8002e1a:	d041      	beq.n	8002ea0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002e1c:	e06a      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e22:	d066      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0x152>
 8002e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e28:	d017      	beq.n	8002e5a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002e2a:	e063      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	6899      	ldr	r1, [r3, #8]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f000 f96d 	bl	800311a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	609a      	str	r2, [r3, #8]
      break;
 8002e58:	e04c      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6899      	ldr	r1, [r3, #8]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f000 f956 	bl	800311a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e7c:	609a      	str	r2, [r3, #8]
      break;
 8002e7e:	e039      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6859      	ldr	r1, [r3, #4]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f000 f8cd 	bl	800302c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2150      	movs	r1, #80	; 0x50
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 f924 	bl	80030e6 <TIM_ITRx_SetConfig>
      break;
 8002e9e:	e029      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	6859      	ldr	r1, [r3, #4]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	461a      	mov	r2, r3
 8002eae:	f000 f8eb 	bl	8003088 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2160      	movs	r1, #96	; 0x60
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 f914 	bl	80030e6 <TIM_ITRx_SetConfig>
      break;
 8002ebe:	e019      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f000 f8ad 	bl	800302c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2140      	movs	r1, #64	; 0x40
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 f904 	bl	80030e6 <TIM_ITRx_SetConfig>
      break;
 8002ede:	e009      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f000 f8fb 	bl	80030e6 <TIM_ITRx_SetConfig>
        break;
 8002ef0:	e000      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002ef2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr

08002f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a29      	ldr	r2, [pc, #164]	; (8003020 <TIM_Base_SetConfig+0xb8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00b      	beq.n	8002f98 <TIM_Base_SetConfig+0x30>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f86:	d007      	beq.n	8002f98 <TIM_Base_SetConfig+0x30>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a26      	ldr	r2, [pc, #152]	; (8003024 <TIM_Base_SetConfig+0xbc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <TIM_Base_SetConfig+0x30>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a25      	ldr	r2, [pc, #148]	; (8003028 <TIM_Base_SetConfig+0xc0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d108      	bne.n	8002faa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a1c      	ldr	r2, [pc, #112]	; (8003020 <TIM_Base_SetConfig+0xb8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00b      	beq.n	8002fca <TIM_Base_SetConfig+0x62>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb8:	d007      	beq.n	8002fca <TIM_Base_SetConfig+0x62>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a19      	ldr	r2, [pc, #100]	; (8003024 <TIM_Base_SetConfig+0xbc>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d003      	beq.n	8002fca <TIM_Base_SetConfig+0x62>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a18      	ldr	r2, [pc, #96]	; (8003028 <TIM_Base_SetConfig+0xc0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d108      	bne.n	8002fdc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a07      	ldr	r2, [pc, #28]	; (8003020 <TIM_Base_SetConfig+0xb8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d103      	bne.n	8003010 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	615a      	str	r2, [r3, #20]
}
 8003016:	bf00      	nop
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr
 8003020:	40012c00 	.word	0x40012c00
 8003024:	40000400 	.word	0x40000400
 8003028:	40000800 	.word	0x40000800

0800302c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f023 0201 	bic.w	r2, r3, #1
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f023 030a 	bic.w	r3, r3, #10
 8003068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4313      	orrs	r3, r2
 8003070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	621a      	str	r2, [r3, #32]
}
 800307e:	bf00      	nop
 8003080:	371c      	adds	r7, #28
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f023 0210 	bic.w	r2, r3, #16
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	031b      	lsls	r3, r3, #12
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	621a      	str	r2, [r3, #32]
}
 80030dc:	bf00      	nop
 80030de:	371c      	adds	r7, #28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b085      	sub	sp, #20
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	f043 0307 	orr.w	r3, r3, #7
 8003108:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	609a      	str	r2, [r3, #8]
}
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr

0800311a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800311a:	b480      	push	{r7}
 800311c:	b087      	sub	sp, #28
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
 8003126:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003134:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	021a      	lsls	r2, r3, #8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	431a      	orrs	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	4313      	orrs	r3, r2
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	609a      	str	r2, [r3, #8]
}
 800314e:	bf00      	nop
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800316c:	2302      	movs	r3, #2
 800316e:	e046      	b.n	80031fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003196:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a16      	ldr	r2, [pc, #88]	; (8003208 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00e      	beq.n	80031d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031bc:	d009      	beq.n	80031d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a12      	ldr	r2, [pc, #72]	; (800320c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d004      	beq.n	80031d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a10      	ldr	r2, [pc, #64]	; (8003210 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d10c      	bne.n	80031ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr
 8003208:	40012c00 	.word	0x40012c00
 800320c:	40000400 	.word	0x40000400
 8003210:	40000800 	.word	0x40000800

08003214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr

08003226 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e03f      	b.n	80032ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fd fc42 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2224      	movs	r2, #36	; 0x24
 8003268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800327a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f905 	bl	800348c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b08a      	sub	sp, #40	; 0x28
 80032d6:	af02      	add	r7, sp, #8
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	603b      	str	r3, [r7, #0]
 80032de:	4613      	mov	r3, r2
 80032e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b20      	cmp	r3, #32
 80032f0:	d17c      	bne.n	80033ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <HAL_UART_Transmit+0x2c>
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e075      	b.n	80033ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_UART_Transmit+0x3e>
 800330c:	2302      	movs	r3, #2
 800330e:	e06e      	b.n	80033ee <HAL_UART_Transmit+0x11c>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2221      	movs	r2, #33	; 0x21
 8003322:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003326:	f7fd fd6d 	bl	8000e04 <HAL_GetTick>
 800332a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	88fa      	ldrh	r2, [r7, #6]
 8003330:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	88fa      	ldrh	r2, [r7, #6]
 8003336:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003340:	d108      	bne.n	8003354 <HAL_UART_Transmit+0x82>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	e003      	b.n	800335c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003358:	2300      	movs	r3, #0
 800335a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003364:	e02a      	b.n	80033bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2200      	movs	r2, #0
 800336e:	2180      	movs	r1, #128	; 0x80
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f840 	bl	80033f6 <UART_WaitOnFlagUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e036      	b.n	80033ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10b      	bne.n	800339e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003394:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	3302      	adds	r3, #2
 800339a:	61bb      	str	r3, [r7, #24]
 800339c:	e007      	b.n	80033ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	781a      	ldrb	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	3301      	adds	r3, #1
 80033ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1cf      	bne.n	8003366 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2200      	movs	r2, #0
 80033ce:	2140      	movs	r1, #64	; 0x40
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f810 	bl	80033f6 <UART_WaitOnFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e006      	b.n	80033ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	e000      	b.n	80033ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033ec:	2302      	movs	r3, #2
  }
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3720      	adds	r7, #32
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	603b      	str	r3, [r7, #0]
 8003402:	4613      	mov	r3, r2
 8003404:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003406:	e02c      	b.n	8003462 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800340e:	d028      	beq.n	8003462 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0x30>
 8003416:	f7fd fcf5 	bl	8000e04 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	429a      	cmp	r2, r3
 8003424:	d21d      	bcs.n	8003462 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003434:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0201 	bic.w	r2, r2, #1
 8003444:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e00f      	b.n	8003482 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4013      	ands	r3, r2
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	429a      	cmp	r2, r3
 8003470:	bf0c      	ite	eq
 8003472:	2301      	moveq	r3, #1
 8003474:	2300      	movne	r3, #0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	429a      	cmp	r2, r3
 800347e:	d0c3      	beq.n	8003408 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034c6:	f023 030c 	bic.w	r3, r3, #12
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	430b      	orrs	r3, r1
 80034d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a2c      	ldr	r2, [pc, #176]	; (80035a0 <UART_SetConfig+0x114>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d103      	bne.n	80034fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034f4:	f7ff f906 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	e002      	b.n	8003502 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034fc:	f7ff f8ee 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8003500:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	009a      	lsls	r2, r3, #2
 800350c:	441a      	add	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	fbb2 f3f3 	udiv	r3, r2, r3
 8003518:	4a22      	ldr	r2, [pc, #136]	; (80035a4 <UART_SetConfig+0x118>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	0119      	lsls	r1, r3, #4
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	009a      	lsls	r2, r3, #2
 800352c:	441a      	add	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	fbb2 f2f3 	udiv	r2, r2, r3
 8003538:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <UART_SetConfig+0x118>)
 800353a:	fba3 0302 	umull	r0, r3, r3, r2
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2064      	movs	r0, #100	; 0x64
 8003542:	fb00 f303 	mul.w	r3, r0, r3
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	3332      	adds	r3, #50	; 0x32
 800354c:	4a15      	ldr	r2, [pc, #84]	; (80035a4 <UART_SetConfig+0x118>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003558:	4419      	add	r1, r3
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	009a      	lsls	r2, r3, #2
 8003564:	441a      	add	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <UART_SetConfig+0x118>)
 8003572:	fba3 0302 	umull	r0, r3, r3, r2
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	2064      	movs	r0, #100	; 0x64
 800357a:	fb00 f303 	mul.w	r3, r0, r3
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	3332      	adds	r3, #50	; 0x32
 8003584:	4a07      	ldr	r2, [pc, #28]	; (80035a4 <UART_SetConfig+0x118>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	f003 020f 	and.w	r2, r3, #15
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	440a      	add	r2, r1
 8003596:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003598:	bf00      	nop
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40013800 	.word	0x40013800
 80035a4:	51eb851f 	.word	0x51eb851f

080035a8 <__libc_init_array>:
 80035a8:	b570      	push	{r4, r5, r6, lr}
 80035aa:	2500      	movs	r5, #0
 80035ac:	4e0c      	ldr	r6, [pc, #48]	; (80035e0 <__libc_init_array+0x38>)
 80035ae:	4c0d      	ldr	r4, [pc, #52]	; (80035e4 <__libc_init_array+0x3c>)
 80035b0:	1ba4      	subs	r4, r4, r6
 80035b2:	10a4      	asrs	r4, r4, #2
 80035b4:	42a5      	cmp	r5, r4
 80035b6:	d109      	bne.n	80035cc <__libc_init_array+0x24>
 80035b8:	f000 f822 	bl	8003600 <_init>
 80035bc:	2500      	movs	r5, #0
 80035be:	4e0a      	ldr	r6, [pc, #40]	; (80035e8 <__libc_init_array+0x40>)
 80035c0:	4c0a      	ldr	r4, [pc, #40]	; (80035ec <__libc_init_array+0x44>)
 80035c2:	1ba4      	subs	r4, r4, r6
 80035c4:	10a4      	asrs	r4, r4, #2
 80035c6:	42a5      	cmp	r5, r4
 80035c8:	d105      	bne.n	80035d6 <__libc_init_array+0x2e>
 80035ca:	bd70      	pop	{r4, r5, r6, pc}
 80035cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035d0:	4798      	blx	r3
 80035d2:	3501      	adds	r5, #1
 80035d4:	e7ee      	b.n	80035b4 <__libc_init_array+0xc>
 80035d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035da:	4798      	blx	r3
 80035dc:	3501      	adds	r5, #1
 80035de:	e7f2      	b.n	80035c6 <__libc_init_array+0x1e>
 80035e0:	0800365c 	.word	0x0800365c
 80035e4:	0800365c 	.word	0x0800365c
 80035e8:	0800365c 	.word	0x0800365c
 80035ec:	08003660 	.word	0x08003660

080035f0 <memset>:
 80035f0:	4603      	mov	r3, r0
 80035f2:	4402      	add	r2, r0
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d100      	bne.n	80035fa <memset+0xa>
 80035f8:	4770      	bx	lr
 80035fa:	f803 1b01 	strb.w	r1, [r3], #1
 80035fe:	e7f9      	b.n	80035f4 <memset+0x4>

08003600 <_init>:
 8003600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003602:	bf00      	nop
 8003604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003606:	bc08      	pop	{r3}
 8003608:	469e      	mov	lr, r3
 800360a:	4770      	bx	lr

0800360c <_fini>:
 800360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360e:	bf00      	nop
 8003610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003612:	bc08      	pop	{r3}
 8003614:	469e      	mov	lr, r3
 8003616:	4770      	bx	lr
