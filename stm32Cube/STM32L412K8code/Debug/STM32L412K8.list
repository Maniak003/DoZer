
STM32L412K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009048  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080091d4  080091d4  000191d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009238  08009238  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08009238  08009238  00019238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009240  08009240  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009240  08009240  00019240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009244  08009244  00019244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08009248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e3c  20000034  0800927c  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e70  0800927c  00024e70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018372  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c43  00000000  00000000  000383d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  0003b020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  0003c588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d07e  00000000  00000000  0003da00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f15  00000000  00000000  0005aa7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c022e  00000000  00000000  00070993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00130bc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c10  00000000  00000000  00130c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000034 	.word	0x20000034
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080091bc 	.word	0x080091bc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000038 	.word	0x20000038
 80001c8:	080091bc 	.word	0x080091bc

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <bebe>:
static union {
	uint32_t uint;
	float flt;
}cfgKoef;

void bebe(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_3); // Start timer for turn off Buzzer
 80004c8:	2108      	movs	r1, #8
 80004ca:	4815      	ldr	r0, [pc, #84]	; (8000520 <bebe+0x5c>)
 80004cc:	f006 ff5a 	bl	8007384 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4); // Start timer for turn off Buzzer
 80004d0:	210c      	movs	r1, #12
 80004d2:	4813      	ldr	r0, [pc, #76]	; (8000520 <bebe+0x5c>)
 80004d4:	f006 ff56 	bl	8007384 <HAL_TIM_OC_Start>
	HAL_Delay(200);
 80004d8:	20c8      	movs	r0, #200	; 0xc8
 80004da:	f002 f8e1 	bl	80026a0 <HAL_Delay>
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_3);
 80004de:	2108      	movs	r1, #8
 80004e0:	480f      	ldr	r0, [pc, #60]	; (8000520 <bebe+0x5c>)
 80004e2:	f007 f82d 	bl	8007540 <HAL_TIM_OC_Stop>
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);
 80004e6:	210c      	movs	r1, #12
 80004e8:	480d      	ldr	r0, [pc, #52]	; (8000520 <bebe+0x5c>)
 80004ea:	f007 f829 	bl	8007540 <HAL_TIM_OC_Stop>
	HAL_Delay(200);
 80004ee:	20c8      	movs	r0, #200	; 0xc8
 80004f0:	f002 f8d6 	bl	80026a0 <HAL_Delay>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_3); // Start timer for turn off Buzzer
 80004f4:	2108      	movs	r1, #8
 80004f6:	480a      	ldr	r0, [pc, #40]	; (8000520 <bebe+0x5c>)
 80004f8:	f006 ff44 	bl	8007384 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4); // Start timer for turn off Buzzer
 80004fc:	210c      	movs	r1, #12
 80004fe:	4808      	ldr	r0, [pc, #32]	; (8000520 <bebe+0x5c>)
 8000500:	f006 ff40 	bl	8007384 <HAL_TIM_OC_Start>
	HAL_Delay(200);
 8000504:	20c8      	movs	r0, #200	; 0xc8
 8000506:	f002 f8cb 	bl	80026a0 <HAL_Delay>
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_3);
 800050a:	2108      	movs	r1, #8
 800050c:	4804      	ldr	r0, [pc, #16]	; (8000520 <bebe+0x5c>)
 800050e:	f007 f817 	bl	8007540 <HAL_TIM_OC_Stop>
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);
 8000512:	210c      	movs	r1, #12
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <bebe+0x5c>)
 8000516:	f007 f813 	bl	8007540 <HAL_TIM_OC_Stop>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20004dac 	.word	0x20004dac

08000524 <rwFlash>:
            13
            14
            15
            16
 */
void rwFlash(uint8_t rwFlag) {
 8000524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000528:	b091      	sub	sp, #68	; 0x44
 800052a:	af00      	add	r7, sp, #0
 800052c:	4603      	mov	r3, r0
 800052e:	73fb      	strb	r3, [r7, #15]
	uint32_t pageAdr = 0x800F800; // Begin of 31 page, last page flash for STM32L412K8.
 8000530:	4b97      	ldr	r3, [pc, #604]	; (8000790 <rwFlash+0x26c>)
 8000532:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t magicKey;
	uint64_t dataForSave;
	magicKey = *(__IO uint32_t*) pageAdr;
 8000534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	63bb      	str	r3, [r7, #56]	; 0x38
	if ((magicKey != 0x1234) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 800053a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800053c:	f241 2234 	movw	r2, #4660	; 0x1234
 8000540:	4293      	cmp	r3, r2
 8000542:	d103      	bne.n	800054c <rwFlash+0x28>
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	2b01      	cmp	r3, #1
 8000548:	f040 80b2 	bne.w	80006b0 <rwFlash+0x18c>
		magicKey = 0x1234;
 800054c:	f241 2334 	movw	r3, #4660	; 0x1234
 8000550:	63bb      	str	r3, [r7, #56]	; 0x38
		if (rwFlag == 0) { // For first initial
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d10b      	bne.n	8000570 <rwFlash+0x4c>
			cfgData = 0;
 8000558:	4b8e      	ldr	r3, [pc, #568]	; (8000794 <rwFlash+0x270>)
 800055a:	2200      	movs	r2, #0
 800055c:	801a      	strh	r2, [r3, #0]
			cfgLevel1 = 0;
 800055e:	4b8e      	ldr	r3, [pc, #568]	; (8000798 <rwFlash+0x274>)
 8000560:	2200      	movs	r2, #0
 8000562:	801a      	strh	r2, [r3, #0]
			cfgLevel2 = 0;
 8000564:	4b8d      	ldr	r3, [pc, #564]	; (800079c <rwFlash+0x278>)
 8000566:	2200      	movs	r2, #0
 8000568:	801a      	strh	r2, [r3, #0]
			cfgLevel3 = 0;
 800056a:	4b8d      	ldr	r3, [pc, #564]	; (80007a0 <rwFlash+0x27c>)
 800056c:	2200      	movs	r2, #0
 800056e:	801a      	strh	r2, [r3, #0]
		}
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t PAGEError = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
		EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000574:	2300      	movs	r3, #0
 8000576:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.Page = 31; // Page size for STM32L412K8 is 2KB
 8000578:	231f      	movs	r3, #31
 800057a:	623b      	str	r3, [r7, #32]
		EraseInitStruct.NbPages     = 1;
 800057c:	2301      	movs	r3, #1
 800057e:	627b      	str	r3, [r7, #36]	; 0x24

		flash_ok = HAL_ERROR;
 8000580:	4b88      	ldr	r3, [pc, #544]	; (80007a4 <rwFlash+0x280>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
		// Unlock flash
		while(flash_ok != HAL_OK) {
 8000586:	e005      	b.n	8000594 <rwFlash+0x70>
		  flash_ok = HAL_FLASH_Unlock();
 8000588:	f004 fcc8 	bl	8004f1c <HAL_FLASH_Unlock>
 800058c:	4603      	mov	r3, r0
 800058e:	461a      	mov	r2, r3
 8000590:	4b84      	ldr	r3, [pc, #528]	; (80007a4 <rwFlash+0x280>)
 8000592:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK) {
 8000594:	4b83      	ldr	r3, [pc, #524]	; (80007a4 <rwFlash+0x280>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1f5      	bne.n	8000588 <rwFlash+0x64>
		}
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) == HAL_OK) {
 800059c:	f107 0214 	add.w	r2, r7, #20
 80005a0:	f107 0318 	add.w	r3, r7, #24
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 fd9e 	bl	80050e8 <HAL_FLASHEx_Erase>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d16c      	bne.n	800068c <rwFlash+0x168>
			dataForSave = (uint64_t) (magicKey | (((uint64_t) cfgData << 32) & 0xFFFFFFFF00000000) | (((uint64_t) cfgLevel1 << 48) & 0xFFFF000000000000));
 80005b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005b4:	4619      	mov	r1, r3
 80005b6:	f04f 0200 	mov.w	r2, #0
 80005ba:	e9c7 1200 	strd	r1, r2, [r7]
 80005be:	4b75      	ldr	r3, [pc, #468]	; (8000794 <rwFlash+0x270>)
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	4619      	mov	r1, r3
 80005c4:	b289      	uxth	r1, r1
 80005c6:	f04f 0200 	mov.w	r2, #0
 80005ca:	4608      	mov	r0, r1
 80005cc:	4611      	mov	r1, r2
 80005ce:	f04f 0200 	mov.w	r2, #0
 80005d2:	f04f 0300 	mov.w	r3, #0
 80005d6:	4606      	mov	r6, r0
 80005d8:	0033      	movs	r3, r6
 80005da:	2200      	movs	r2, #0
 80005dc:	6839      	ldr	r1, [r7, #0]
 80005de:	ea41 0402 	orr.w	r4, r1, r2
 80005e2:	6879      	ldr	r1, [r7, #4]
 80005e4:	4319      	orrs	r1, r3
 80005e6:	460d      	mov	r5, r1
 80005e8:	4b6b      	ldr	r3, [pc, #428]	; (8000798 <rwFlash+0x274>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	b298      	uxth	r0, r3
 80005ee:	f04f 0100 	mov.w	r1, #0
 80005f2:	f04f 0200 	mov.w	r2, #0
 80005f6:	f04f 0300 	mov.w	r3, #0
 80005fa:	0403      	lsls	r3, r0, #16
 80005fc:	2200      	movs	r2, #0
 80005fe:	ea44 0a02 	orr.w	sl, r4, r2
 8000602:	ea45 0b03 	orr.w	fp, r5, r3
 8000606:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
			flash_ok = HAL_ERROR;
 800060a:	4b66      	ldr	r3, [pc, #408]	; (80007a4 <rwFlash+0x280>)
 800060c:	2201      	movs	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8000610:	e009      	b.n	8000626 <rwFlash+0x102>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr, dataForSave); // Write  magic key into Flash
 8000612:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000616:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000618:	2000      	movs	r0, #0
 800061a:	f004 fc13 	bl	8004e44 <HAL_FLASH_Program>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	4b60      	ldr	r3, [pc, #384]	; (80007a4 <rwFlash+0x280>)
 8000624:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8000626:	4b5f      	ldr	r3, [pc, #380]	; (80007a4 <rwFlash+0x280>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d1f1      	bne.n	8000612 <rwFlash+0xee>
			}
			//uint32_t tmpInt = *((uint32_t *) &cfgKoefRh);
			//dataForSave = (uint64_t) (cfgLevel2 | (cfgLevel3 << 16) | (uint64_t) tmpInt << 32);
			dataForSave = (uint64_t) (cfgLevel2 | (cfgLevel3 << 16) | (uint64_t) cfgKoef.uint << 32);
 800062e:	4b5b      	ldr	r3, [pc, #364]	; (800079c <rwFlash+0x278>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	4b5a      	ldr	r3, [pc, #360]	; (80007a0 <rwFlash+0x27c>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	041b      	lsls	r3, r3, #16
 800063a:	4313      	orrs	r3, r2
 800063c:	4618      	mov	r0, r3
 800063e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000642:	4b59      	ldr	r3, [pc, #356]	; (80007a8 <rwFlash+0x284>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	461c      	mov	r4, r3
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0200 	mov.w	r2, #0
 8000650:	f04f 0300 	mov.w	r3, #0
 8000654:	0023      	movs	r3, r4
 8000656:	2200      	movs	r2, #0
 8000658:	ea40 0802 	orr.w	r8, r0, r2
 800065c:	ea41 0903 	orr.w	r9, r1, r3
 8000660:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
			flash_ok = HAL_ERROR;
 8000664:	4b4f      	ldr	r3, [pc, #316]	; (80007a4 <rwFlash+0x280>)
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 800066a:	e00b      	b.n	8000684 <rwFlash+0x160>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr + 8, dataForSave); // Write Level2, Level3
 800066c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800066e:	f103 0108 	add.w	r1, r3, #8
 8000672:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000676:	2000      	movs	r0, #0
 8000678:	f004 fbe4 	bl	8004e44 <HAL_FLASH_Program>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	4b48      	ldr	r3, [pc, #288]	; (80007a4 <rwFlash+0x280>)
 8000682:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8000684:	4b47      	ldr	r3, [pc, #284]	; (80007a4 <rwFlash+0x280>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1ef      	bne.n	800066c <rwFlash+0x148>
			}
		}
		// Lock flash
		flash_ok = HAL_ERROR;
 800068c:	4b45      	ldr	r3, [pc, #276]	; (80007a4 <rwFlash+0x280>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 8000692:	e005      	b.n	80006a0 <rwFlash+0x17c>
			flash_ok = HAL_FLASH_Lock();
 8000694:	f004 fc64 	bl	8004f60 <HAL_FLASH_Lock>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	4b41      	ldr	r3, [pc, #260]	; (80007a4 <rwFlash+0x280>)
 800069e:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 80006a0:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <rwFlash+0x280>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1f5      	bne.n	8000694 <rwFlash+0x170>
		}
		bebe();
 80006a8:	f7ff ff0c 	bl	80004c4 <bebe>
	if ((magicKey != 0x1234) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 80006ac:	bf00      	nop
			Thr1 = (uint32_t) (tmpVal / (float)cfgLevel1);
			Thr2 = (uint32_t) (tmpVal / (float)cfgLevel2);
			Thr3 = (uint32_t) (tmpVal / (float)cfgLevel3);
		}
	}
}
 80006ae:	e06a      	b.n	8000786 <rwFlash+0x262>
		cfgData = *(__IO uint16_t*) (pageAdr + 4);
 80006b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b2:	3304      	adds	r3, #4
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	4b36      	ldr	r3, [pc, #216]	; (8000794 <rwFlash+0x270>)
 80006ba:	801a      	strh	r2, [r3, #0]
		resolution = (uint8_t) (cfgData >> 8 & 0x3);
 80006bc:	4b35      	ldr	r3, [pc, #212]	; (8000794 <rwFlash+0x270>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	0a1b      	lsrs	r3, r3, #8
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	f003 0303 	and.w	r3, r3, #3
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b37      	ldr	r3, [pc, #220]	; (80007ac <rwFlash+0x288>)
 80006ce:	701a      	strb	r2, [r3, #0]
		cfgLevel1 = *(__IO uint16_t*) (pageAdr + 6);
 80006d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006d2:	3306      	adds	r3, #6
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <rwFlash+0x274>)
 80006da:	801a      	strh	r2, [r3, #0]
		cfgLevel2 = *(__IO uint16_t*) (pageAdr + 8);
 80006dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006de:	3308      	adds	r3, #8
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	4b2d      	ldr	r3, [pc, #180]	; (800079c <rwFlash+0x278>)
 80006e6:	801a      	strh	r2, [r3, #0]
		cfgLevel3 = *(__IO uint16_t*) (pageAdr + 10);
 80006e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ea:	330a      	adds	r3, #10
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <rwFlash+0x27c>)
 80006f2:	801a      	strh	r2, [r3, #0]
		uint32_t koefAddr = pageAdr + 12;
 80006f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006f6:	330c      	adds	r3, #12
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
		cfgKoef.uint = *(__IO uint32_t*) (koefAddr);
 80006fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a2a      	ldr	r2, [pc, #168]	; (80007a8 <rwFlash+0x284>)
 8000700:	6013      	str	r3, [r2, #0]
		if (cfgKoef.flt > 0) {
 8000702:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <rwFlash+0x284>)
 8000704:	edd3 7a00 	vldr	s15, [r3]
 8000708:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800070c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000710:	dc00      	bgt.n	8000714 <rwFlash+0x1f0>
}
 8000712:	e038      	b.n	8000786 <rwFlash+0x262>
			float tmpVal = cfgKoef.flt * 1000;
 8000714:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <rwFlash+0x284>)
 8000716:	edd3 7a00 	vldr	s15, [r3]
 800071a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80007b0 <rwFlash+0x28c>
 800071e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000722:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			Thr1 = (uint32_t) (tmpVal / (float)cfgLevel1);
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <rwFlash+0x274>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	ee07 3a90 	vmov	s15, r3
 800072e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000732:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800073a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800073e:	ee17 2a90 	vmov	r2, s15
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <rwFlash+0x290>)
 8000744:	601a      	str	r2, [r3, #0]
			Thr2 = (uint32_t) (tmpVal / (float)cfgLevel2);
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <rwFlash+0x278>)
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	ee07 3a90 	vmov	s15, r3
 800074e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000752:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800075a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800075e:	ee17 2a90 	vmov	r2, s15
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <rwFlash+0x294>)
 8000764:	601a      	str	r2, [r3, #0]
			Thr3 = (uint32_t) (tmpVal / (float)cfgLevel3);
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <rwFlash+0x27c>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	ee07 3a90 	vmov	s15, r3
 800076e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000772:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800077a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800077e:	ee17 2a90 	vmov	r2, s15
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <rwFlash+0x298>)
 8000784:	601a      	str	r2, [r3, #0]
}
 8000786:	bf00      	nop
 8000788:	3744      	adds	r7, #68	; 0x44
 800078a:	46bd      	mov	sp, r7
 800078c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000790:	0800f800 	.word	0x0800f800
 8000794:	20004e00 	.word	0x20004e00
 8000798:	20004e06 	.word	0x20004e06
 800079c:	20004e04 	.word	0x20004e04
 80007a0:	20004226 	.word	0x20004226
 80007a4:	20004e68 	.word	0x20004e68
 80007a8:	2000415c 	.word	0x2000415c
 80007ac:	20004154 	.word	0x20004154
 80007b0:	447a0000 	.word	0x447a0000
 80007b4:	20000064 	.word	0x20000064
 80007b8:	20000068 	.word	0x20000068
 80007bc:	2000006c 	.word	0x2000006c

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b096      	sub	sp, #88	; 0x58
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f001 fef6 	bl	80025b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 fd71 	bl	80012b0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ce:	f001 f89b 	bl	8001908 <MX_GPIO_Init>
  MX_DMA_Init();
 80007d2:	f001 f873 	bl	80018bc <MX_DMA_Init>
  MX_ADC1_Init();
 80007d6:	f000 fdcd 	bl	8001374 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80007da:	f001 f83b 	bl	8001854 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 80007de:	f000 ffaf 	bl	8001740 <MX_TIM15_Init>
  MX_ADC2_Init();
 80007e2:	f000 fe59 	bl	8001498 <MX_ADC2_Init>
  MX_TIM2_Init();
 80007e6:	f000 fef7 	bl	80015d8 <MX_TIM2_Init>
  MX_TIM16_Init();
 80007ea:	f001 f803 	bl	80017f4 <MX_TIM16_Init>
  MX_TIM6_Init();
 80007ee:	f000 ff71 	bl	80016d4 <MX_TIM6_Init>
  MX_LPTIM2_Init();
 80007f2:	f000 fec1 	bl	8001578 <MX_LPTIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_LPTIM_Counter_Stop_IT(&hlptim2);
 80007f6:	489c      	ldr	r0, [pc, #624]	; (8000a68 <main+0x2a8>)
 80007f8:	f005 f964 	bl	8005ac4 <HAL_LPTIM_Counter_Stop_IT>
  //HAL_PWREx_EnableLowPowerRunMode();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int j = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	657b      	str	r3, [r7, #84]	; 0x54
  uint8_t btCommand[sizeCommand];
  uint8_t prefix[3] = {'<', 'B', '>'};
 8000800:	4a9a      	ldr	r2, [pc, #616]	; (8000a6c <main+0x2ac>)
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	6812      	ldr	r2, [r2, #0]
 8000808:	4611      	mov	r1, r2
 800080a:	8019      	strh	r1, [r3, #0]
 800080c:	3302      	adds	r3, #2
 800080e:	0c12      	lsrs	r2, r2, #16
 8000810:	701a      	strb	r2, [r3, #0]
  /*
   * Температура с учетом калибровки
   * (TS_CAL2_TEMP - TS_CAL1_TEMP) / (TS_CAL2 - TS_CAL1) * (TS_DATA - TS_CAL1) + 30
   *
   * */
  temperatureKoeff1 = (float) (TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP) / (float) (*TEMPSENSOR_CAL2_ADDR - *TEMPSENSOR_CAL1_ADDR);
 8000812:	4b97      	ldr	r3, [pc, #604]	; (8000a70 <main+0x2b0>)
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	4b96      	ldr	r3, [pc, #600]	; (8000a74 <main+0x2b4>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	ee07 3a90 	vmov	s15, r3
 8000822:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000826:	eddf 6a94 	vldr	s13, [pc, #592]	; 8000a78 <main+0x2b8>
 800082a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800082e:	4b93      	ldr	r3, [pc, #588]	; (8000a7c <main+0x2bc>)
 8000830:	edc3 7a00 	vstr	s15, [r3]
  temperatureKoeff2 = 30 - temperatureKoeff1 * (float) ( *(__IO uint16_t*) TEMPSENSOR_CAL1_ADDR);
 8000834:	4b8f      	ldr	r3, [pc, #572]	; (8000a74 <main+0x2b4>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	b29b      	uxth	r3, r3
 800083a:	ee07 3a90 	vmov	s15, r3
 800083e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000842:	4b8e      	ldr	r3, [pc, #568]	; (8000a7c <main+0x2bc>)
 8000844:	edd3 7a00 	vldr	s15, [r3]
 8000848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800084c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000850:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000854:	4b8a      	ldr	r3, [pc, #552]	; (8000a80 <main+0x2c0>)
 8000856:	edc3 7a00 	vstr	s15, [r3]

  uint32_t initDelay, oldTime = HAL_GetTick();
 800085a:	f001 ff15 	bl	8002688 <HAL_GetTick>
 800085e:	6338      	str	r0, [r7, #48]	; 0x30
  initDelay = oldTime;
 8000860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  oldTimeAll = oldTime;
 8000864:	4a87      	ldr	r2, [pc, #540]	; (8000a84 <main+0x2c4>)
 8000866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000868:	6013      	str	r3, [r2, #0]
  sleepFlag = oldTime;
 800086a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800086c:	2b00      	cmp	r3, #0
 800086e:	bf14      	ite	ne
 8000870:	2301      	movne	r3, #1
 8000872:	2300      	moveq	r3, #0
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b84      	ldr	r3, [pc, #528]	; (8000a88 <main+0x2c8>)
 8000878:	701a      	strb	r2, [r3, #0]
  batteryInterval = 0;
 800087a:	4b84      	ldr	r3, [pc, #528]	; (8000a8c <main+0x2cc>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
  counterCC = 0;
 8000880:	4b83      	ldr	r3, [pc, #524]	; (8000a90 <main+0x2d0>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]

  rwFlash(0); // Read config from flash.
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff fe4c 	bl	8000524 <rwFlash>

  HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_SET); // LED on.
 800088c:	2201      	movs	r2, #1
 800088e:	2108      	movs	r1, #8
 8000890:	4880      	ldr	r0, [pc, #512]	; (8000a94 <main+0x2d4>)
 8000892:	f004 ffa9 	bl	80057e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, COM_PIN, GPIO_PIN_SET); // Com pin disable
 8000896:	2201      	movs	r2, #1
 8000898:	2140      	movs	r1, #64	; 0x40
 800089a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089e:	f004 ffa3 	bl	80057e8 <HAL_GPIO_WritePin>
  __HAL_TIM_CLEAR_FLAG(&htim15, TIM_SR_UIF); // Clear flags
 80008a2:	4b7d      	ldr	r3, [pc, #500]	; (8000a98 <main+0x2d8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f06f 0201 	mvn.w	r2, #1
 80008aa:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim15); // Start timer for turn off LED
 80008ac:	487a      	ldr	r0, [pc, #488]	; (8000a98 <main+0x2d8>)
 80008ae:	f006 fc85 	bl	80071bc <HAL_TIM_Base_Start_IT>
  //
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_3);  // Sound on
 80008b2:	2108      	movs	r1, #8
 80008b4:	4879      	ldr	r0, [pc, #484]	; (8000a9c <main+0x2dc>)
 80008b6:	f006 fd65 	bl	8007384 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);  // Sound on
 80008ba:	210c      	movs	r1, #12
 80008bc:	4877      	ldr	r0, [pc, #476]	; (8000a9c <main+0x2dc>)
 80008be:	f006 fd61 	bl	8007384 <HAL_TIM_OC_Start>
  HAL_GPIO_WritePin(GPIOA, VIBRO_PIN, GPIO_PIN_SET); // Vibro on.
 80008c2:	2201      	movs	r2, #1
 80008c4:	2102      	movs	r1, #2
 80008c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ca:	f004 ff8d 	bl	80057e8 <HAL_GPIO_WritePin>
  __HAL_TIM_CLEAR_FLAG(&htim16, TIM_SR_UIF); // Clear flags
 80008ce:	4b74      	ldr	r3, [pc, #464]	; (8000aa0 <main+0x2e0>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f06f 0201 	mvn.w	r2, #1
 80008d6:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 80008d8:	4871      	ldr	r0, [pc, #452]	; (8000aa0 <main+0x2e0>)
 80008da:	f006 fc6f 	bl	80071bc <HAL_TIM_Base_Start_IT>

  alarmLevel = 0;
 80008de:	4b71      	ldr	r3, [pc, #452]	; (8000aa4 <main+0x2e4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	801a      	strh	r2, [r3, #0]
  alarmCount = 0;
 80008e4:	4b70      	ldr	r3, [pc, #448]	; (8000aa8 <main+0x2e8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim6); // Alarm timer.
 80008ea:	4870      	ldr	r0, [pc, #448]	; (8000aac <main+0x2ec>)
 80008ec:	f006 fc66 	bl	80071bc <HAL_TIM_Base_Start_IT>
	  counterCC = 0;
	  oldTime = HAL_GetTick();
	  ssd1306_SetCursor(0, 0);
	  ssd1306_WriteString(counterPP, Font_6x8, 0x01);
	#endif
	  uint32_t max = 1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	653b      	str	r3, [r7, #80]	; 0x50
	  for ( int i = reservDataSize; i < 2050; i++) {
 80008f4:	2306      	movs	r3, #6
 80008f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80008f8:	e00f      	b.n	800091a <main+0x15a>
		  if (spectrData[i][0] > max)
 80008fa:	4a6d      	ldr	r2, [pc, #436]	; (8000ab0 <main+0x2f0>)
 80008fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008fe:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000902:	461a      	mov	r2, r3
 8000904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000906:	4293      	cmp	r3, r2
 8000908:	d204      	bcs.n	8000914 <main+0x154>
			  max = spectrData[i][0];
 800090a:	4a69      	ldr	r2, [pc, #420]	; (8000ab0 <main+0x2f0>)
 800090c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800090e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000912:	653b      	str	r3, [r7, #80]	; 0x50
	  for ( int i = reservDataSize; i < 2050; i++) {
 8000914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000916:	3301      	adds	r3, #1
 8000918:	64fb      	str	r3, [r7, #76]	; 0x4c
 800091a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800091c:	f640 0201 	movw	r2, #2049	; 0x801
 8000920:	4293      	cmp	r3, r2
 8000922:	ddea      	ble.n	80008fa <main+0x13a>
	  */
	#ifdef DISPLAY_ENABLE
	  ssd1306_UpdateScreen();
	#endif
	  // Delay after on.
	  if (initFlag && (HAL_GetTick() - initDelay > INIT_TIME)) {
 8000924:	4b63      	ldr	r3, [pc, #396]	; (8000ab4 <main+0x2f4>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d017      	beq.n	800095c <main+0x19c>
 800092c:	f001 feac 	bl	8002688 <HAL_GetTick>
 8000930:	4602      	mov	r2, r0
 8000932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800093a:	d90f      	bls.n	800095c <main+0x19c>
		  initFlag = 0;
 800093c:	4b5d      	ldr	r3, [pc, #372]	; (8000ab4 <main+0x2f4>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_IT(&hadc2);  // Init ADC for sipm channel.
 8000942:	485d      	ldr	r0, [pc, #372]	; (8000ab8 <main+0x2f8>)
 8000944:	f002 fa78 	bl	8002e38 <HAL_ADC_Start_IT>
		  oldTimeAll = HAL_GetTick();
 8000948:	f001 fe9e 	bl	8002688 <HAL_GetTick>
 800094c:	4603      	mov	r3, r0
 800094e:	4a4d      	ldr	r2, [pc, #308]	; (8000a84 <main+0x2c4>)
 8000950:	6013      	str	r3, [r2, #0]
		  HAL_LPTIM_Counter_Start_IT(&hlptim2, 32000);
 8000952:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 8000956:	4844      	ldr	r0, [pc, #272]	; (8000a68 <main+0x2a8>)
 8000958:	f005 f826 	bl	80059a8 <HAL_LPTIM_Counter_Start_IT>
	  }
	#ifdef DISPLAY_ENABLE
	  ssd1306_SetCursor(0, 24);
	#endif
	  /* Status JDY-19, BT connected ? */
	  if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == 1 ) { // BT State active ?
 800095c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000964:	f004 ff28 	bl	80057b8 <HAL_GPIO_ReadPin>
 8000968:	4603      	mov	r3, r0
 800096a:	2b01      	cmp	r3, #1
 800096c:	f040 83de 	bne.w	800112c <main+0x96c>
	#ifdef DISPLAY_ENABLE
		  ssd1306_WriteString("BT: connect   ", Font_6x8, 0x01);
	#endif
		  /* Init uart after sleep */
		  if (initUART) {
 8000970:	4b52      	ldr	r3, [pc, #328]	; (8000abc <main+0x2fc>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00c      	beq.n	8000992 <main+0x1d2>
			  HAL_UART_Init(&huart1);
 8000978:	4851      	ldr	r0, [pc, #324]	; (8000ac0 <main+0x300>)
 800097a:	f007 fd77 	bl	800846c <HAL_UART_Init>
			  HAL_UART_Receive_DMA(&huart1, btCommand, sizeCommand);
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	2214      	movs	r2, #20
 8000984:	4619      	mov	r1, r3
 8000986:	484e      	ldr	r0, [pc, #312]	; (8000ac0 <main+0x300>)
 8000988:	f007 fe8c 	bl	80086a4 <HAL_UART_Receive_DMA>
			  initUART = 0;
 800098c:	4b4b      	ldr	r3, [pc, #300]	; (8000abc <main+0x2fc>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
		  }

		  /* Receive data from android */
		  if (hdma_usart1_rx.State == HAL_DMA_STATE_READY) {
 8000992:	4b4c      	ldr	r3, [pc, #304]	; (8000ac4 <main+0x304>)
 8000994:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b01      	cmp	r3, #1
 800099c:	f040 8138 	bne.w	8000c10 <main+0x450>
			  HAL_UART_Receive_DMA(&huart1, btCommand, sizeCommand);
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2214      	movs	r2, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	4845      	ldr	r0, [pc, #276]	; (8000ac0 <main+0x300>)
 80009aa:	f007 fe7b 	bl	80086a4 <HAL_UART_Receive_DMA>
			  if (btCommand[0] == '<' && btCommand[2] == '>') {
 80009ae:	7b3b      	ldrb	r3, [r7, #12]
 80009b0:	2b3c      	cmp	r3, #60	; 0x3c
 80009b2:	f040 812d 	bne.w	8000c10 <main+0x450>
 80009b6:	7bbb      	ldrb	r3, [r7, #14]
 80009b8:	2b3e      	cmp	r3, #62	; 0x3e
 80009ba:	f040 8129 	bne.w	8000c10 <main+0x450>
				  uint16_t CS = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				  for (int i = 0; i < 18; i++) {
 80009c4:	2300      	movs	r3, #0
 80009c6:	647b      	str	r3, [r7, #68]	; 0x44
 80009c8:	e00d      	b.n	80009e6 <main+0x226>
					  CS = CS + btCommand[i];
 80009ca:	f107 020c 	add.w	r2, r7, #12
 80009ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009d0:	4413      	add	r3, r2
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80009da:	4413      	add	r3, r2
 80009dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				  for (int i = 0; i < 18; i++) {
 80009e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009e2:	3301      	adds	r3, #1
 80009e4:	647b      	str	r3, [r7, #68]	; 0x44
 80009e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009e8:	2b11      	cmp	r3, #17
 80009ea:	ddee      	ble.n	80009ca <main+0x20a>
				  }
				  if (((CS & 0xFF) == btCommand[18]) && (((CS >> 8) & 0xFF) == btCommand[19])) {
 80009ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	7fba      	ldrb	r2, [r7, #30]
 80009f4:	4293      	cmp	r3, r2
 80009f6:	f040 810b 	bne.w	8000c10 <main+0x450>
 80009fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80009fe:	0a1b      	lsrs	r3, r3, #8
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	7ffa      	ldrb	r2, [r7, #31]
 8000a06:	4293      	cmp	r3, r2
 8000a08:	f040 8102 	bne.w	8000c10 <main+0x450>
					  //HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
					  //HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
					  if (btCommand[1] == '1')  { // Clear statistics
 8000a0c:	7b7b      	ldrb	r3, [r7, #13]
 8000a0e:	2b31      	cmp	r3, #49	; 0x31
 8000a10:	d162      	bne.n	8000ad8 <main+0x318>
						  for (int i = 0; i < 2050; i++) {
 8000a12:	2300      	movs	r3, #0
 8000a14:	643b      	str	r3, [r7, #64]	; 0x40
 8000a16:	e019      	b.n	8000a4c <main+0x28c>
							  spectrData[i][specterHistory] = 0;
 8000a18:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <main+0x308>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4a24      	ldr	r2, [pc, #144]	; (8000ab0 <main+0x2f0>)
 8000a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	440b      	add	r3, r1
 8000a26:	2100      	movs	r1, #0
 8000a28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							  batteryInterval = 0;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <main+0x2cc>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
							  if (specterHistory == 1) {
 8000a32:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <main+0x308>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d105      	bne.n	8000a46 <main+0x286>
								  counterCCAlarm = 0;
 8000a3a:	4b24      	ldr	r3, [pc, #144]	; (8000acc <main+0x30c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
								  alarmTime = 0;
 8000a40:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <main+0x310>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
						  for (int i = 0; i < 2050; i++) {
 8000a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a48:	3301      	adds	r3, #1
 8000a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8000a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a4e:	f640 0201 	movw	r2, #2049	; 0x801
 8000a52:	4293      	cmp	r3, r2
 8000a54:	dde0      	ble.n	8000a18 <main+0x258>
							  }
						  }
						  oldTimeAll = HAL_GetTick();
 8000a56:	f001 fe17 	bl	8002688 <HAL_GetTick>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4a09      	ldr	r2, [pc, #36]	; (8000a84 <main+0x2c4>)
 8000a5e:	6013      	str	r3, [r2, #0]
						  counterALL = 0;
 8000a60:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <main+0x314>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	e0d3      	b.n	8000c10 <main+0x450>
 8000a68:	200042ec 	.word	0x200042ec
 8000a6c:	080091ec 	.word	0x080091ec
 8000a70:	1fff75ca 	.word	0x1fff75ca
 8000a74:	1fff75a8 	.word	0x1fff75a8
 8000a78:	42c80000 	.word	0x42c80000
 8000a7c:	20004dfc 	.word	0x20004dfc
 8000a80:	2000416c 	.word	0x2000416c
 8000a84:	20004da0 	.word	0x20004da0
 8000a88:	20000003 	.word	0x20000003
 8000a8c:	20004da8 	.word	0x20004da8
 8000a90:	20000054 	.word	0x20000054
 8000a94:	48000400 	.word	0x48000400
 8000a98:	200041d8 	.word	0x200041d8
 8000a9c:	20004dac 	.word	0x20004dac
 8000aa0:	20004e08 	.word	0x20004e08
 8000aa4:	20004224 	.word	0x20004224
 8000aa8:	20004df8 	.word	0x20004df8
 8000aac:	20004d54 	.word	0x20004d54
 8000ab0:	20000074 	.word	0x20000074
 8000ab4:	20000002 	.word	0x20000002
 8000ab8:	20004174 	.word	0x20004174
 8000abc:	20000004 	.word	0x20000004
 8000ac0:	20004328 	.word	0x20004328
 8000ac4:	200042a4 	.word	0x200042a4
 8000ac8:	20004155 	.word	0x20004155
 8000acc:	20000050 	.word	0x20000050
 8000ad0:	2000005c 	.word	0x2000005c
 8000ad4:	20000058 	.word	0x20000058
					  } else if (btCommand[1] == '2') { // Write config data
 8000ad8:	7b7b      	ldrb	r3, [r7, #13]
 8000ada:	2b32      	cmp	r3, #50	; 0x32
 8000adc:	f040 8084 	bne.w	8000be8 <main+0x428>
						  cfgData = ((btCommand[4] << 8) & 0xFF00) | btCommand[3];
 8000ae0:	7c3b      	ldrb	r3, [r7, #16]
 8000ae2:	021b      	lsls	r3, r3, #8
 8000ae4:	b21a      	sxth	r2, r3
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	b21b      	sxth	r3, r3
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b21b      	sxth	r3, r3
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	4baa      	ldr	r3, [pc, #680]	; (8000d9c <main+0x5dc>)
 8000af2:	801a      	strh	r2, [r3, #0]
						  resolution = (uint8_t) (cfgData >> 8 & 0x3);
 8000af4:	4ba9      	ldr	r3, [pc, #676]	; (8000d9c <main+0x5dc>)
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	0a1b      	lsrs	r3, r3, #8
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	f003 0303 	and.w	r3, r3, #3
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	4ba6      	ldr	r3, [pc, #664]	; (8000da0 <main+0x5e0>)
 8000b06:	701a      	strb	r2, [r3, #0]
						  cfgLevel1 = ((btCommand[6] << 8) & 0xFF00) | btCommand[5];
 8000b08:	7cbb      	ldrb	r3, [r7, #18]
 8000b0a:	021b      	lsls	r3, r3, #8
 8000b0c:	b21a      	sxth	r2, r3
 8000b0e:	7c7b      	ldrb	r3, [r7, #17]
 8000b10:	b21b      	sxth	r3, r3
 8000b12:	4313      	orrs	r3, r2
 8000b14:	b21b      	sxth	r3, r3
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	4ba2      	ldr	r3, [pc, #648]	; (8000da4 <main+0x5e4>)
 8000b1a:	801a      	strh	r2, [r3, #0]
						  cfgLevel2 = ((btCommand[8] << 8) & 0xFF00) | btCommand[7];
 8000b1c:	7d3b      	ldrb	r3, [r7, #20]
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	b21a      	sxth	r2, r3
 8000b22:	7cfb      	ldrb	r3, [r7, #19]
 8000b24:	b21b      	sxth	r3, r3
 8000b26:	4313      	orrs	r3, r2
 8000b28:	b21b      	sxth	r3, r3
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	4b9e      	ldr	r3, [pc, #632]	; (8000da8 <main+0x5e8>)
 8000b2e:	801a      	strh	r2, [r3, #0]
						  cfgLevel3 = ((btCommand[10] << 8) & 0xFF00) | btCommand[9];
 8000b30:	7dbb      	ldrb	r3, [r7, #22]
 8000b32:	021b      	lsls	r3, r3, #8
 8000b34:	b21a      	sxth	r2, r3
 8000b36:	7d7b      	ldrb	r3, [r7, #21]
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	b21b      	sxth	r3, r3
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b9a      	ldr	r3, [pc, #616]	; (8000dac <main+0x5ec>)
 8000b42:	801a      	strh	r2, [r3, #0]
						  //cfgKoefRh = *(float *) &btCommand[11];
						  cfgKoef.uint = (uint32_t) (btCommand[11] | (uint32_t) btCommand[12] << 8 | (uint32_t) btCommand[13] << 16 | (uint32_t) btCommand[14] << 24);
 8000b44:	7dfb      	ldrb	r3, [r7, #23]
 8000b46:	461a      	mov	r2, r3
 8000b48:	7e3b      	ldrb	r3, [r7, #24]
 8000b4a:	021b      	lsls	r3, r3, #8
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	7e7b      	ldrb	r3, [r7, #25]
 8000b50:	041b      	lsls	r3, r3, #16
 8000b52:	431a      	orrs	r2, r3
 8000b54:	7ebb      	ldrb	r3, [r7, #26]
 8000b56:	061b      	lsls	r3, r3, #24
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	4a95      	ldr	r2, [pc, #596]	; (8000db0 <main+0x5f0>)
 8000b5c:	6013      	str	r3, [r2, #0]
						  if (cfgKoef.flt > 0) {
 8000b5e:	4b94      	ldr	r3, [pc, #592]	; (8000db0 <main+0x5f0>)
 8000b60:	edd3 7a00 	vldr	s15, [r3]
 8000b64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b6c:	dd38      	ble.n	8000be0 <main+0x420>
							  //float tmpVal = cfgKoefRh * 1000;
							  float tmpVal = cfgKoef.flt * 1000;
 8000b6e:	4b90      	ldr	r3, [pc, #576]	; (8000db0 <main+0x5f0>)
 8000b70:	edd3 7a00 	vldr	s15, [r3]
 8000b74:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8000db4 <main+0x5f4>
 8000b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b7c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
							  Thr1 = (uint32_t) (tmpVal / (float)cfgLevel1);
 8000b80:	4b88      	ldr	r3, [pc, #544]	; (8000da4 <main+0x5e4>)
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	ee07 3a90 	vmov	s15, r3
 8000b88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b8c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b98:	ee17 2a90 	vmov	r2, s15
 8000b9c:	4b86      	ldr	r3, [pc, #536]	; (8000db8 <main+0x5f8>)
 8000b9e:	601a      	str	r2, [r3, #0]
							  Thr2 = (uint32_t) (tmpVal / (float)cfgLevel2);
 8000ba0:	4b81      	ldr	r3, [pc, #516]	; (8000da8 <main+0x5e8>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	ee07 3a90 	vmov	s15, r3
 8000ba8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bac:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bb8:	ee17 2a90 	vmov	r2, s15
 8000bbc:	4b7f      	ldr	r3, [pc, #508]	; (8000dbc <main+0x5fc>)
 8000bbe:	601a      	str	r2, [r3, #0]
							  Thr3 = (uint32_t) (tmpVal / (float)cfgLevel3);
 8000bc0:	4b7a      	ldr	r3, [pc, #488]	; (8000dac <main+0x5ec>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	ee07 3a90 	vmov	s15, r3
 8000bc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bcc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bd8:	ee17 2a90 	vmov	r2, s15
 8000bdc:	4b78      	ldr	r3, [pc, #480]	; (8000dc0 <main+0x600>)
 8000bde:	601a      	str	r2, [r3, #0]
						  }
						  rwFlash(1); // Write to flash
 8000be0:	2001      	movs	r0, #1
 8000be2:	f7ff fc9f 	bl	8000524 <rwFlash>
 8000be6:	e013      	b.n	8000c10 <main+0x450>
					  } else if (btCommand[1] == '3') {  // Request log data.
 8000be8:	7b7b      	ldrb	r3, [r7, #13]
 8000bea:	2b33      	cmp	r3, #51	; 0x33
 8000bec:	d103      	bne.n	8000bf6 <main+0x436>
						  logDataFlag = 1;
 8000bee:	4b75      	ldr	r3, [pc, #468]	; (8000dc4 <main+0x604>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
 8000bf4:	e00c      	b.n	8000c10 <main+0x450>
					  } else if (btCommand[1] == '4') {  // Toggle to alarm specter array
 8000bf6:	7b7b      	ldrb	r3, [r7, #13]
 8000bf8:	2b34      	cmp	r3, #52	; 0x34
 8000bfa:	d103      	bne.n	8000c04 <main+0x444>
						  specterHistory = 1;
 8000bfc:	4b72      	ldr	r3, [pc, #456]	; (8000dc8 <main+0x608>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
 8000c02:	e005      	b.n	8000c10 <main+0x450>
					  } else if (btCommand[1] == '5') {  // Toggle to normal specter array
 8000c04:	7b7b      	ldrb	r3, [r7, #13]
 8000c06:	2b35      	cmp	r3, #53	; 0x35
 8000c08:	d102      	bne.n	8000c10 <main+0x450>
						  specterHistory = 0;
 8000c0a:	4b6f      	ldr	r3, [pc, #444]	; (8000dc8 <main+0x608>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
		  }

		  /*
		   *  Transmit data over BT.
		   */
		  if (logDataFlag == 0) {  // Spectert data
 8000c10:	4b6c      	ldr	r3, [pc, #432]	; (8000dc4 <main+0x604>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	f083 0301 	eor.w	r3, r3, #1
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f000 80e6 	beq.w	8000dec <main+0x62c>
			  if (specterHistory == 0) {
 8000c20:	4b69      	ldr	r3, [pc, #420]	; (8000dc8 <main+0x608>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d138      	bne.n	8000c9a <main+0x4da>
				  prefix[1] = 'B';		// Normal specter
 8000c28:	2342      	movs	r3, #66	; 0x42
 8000c2a:	727b      	strb	r3, [r7, #9]
				  spectrData[0][specterHistory] = (uint16_t) ((HAL_GetTick() - oldTimeAll) / 1000); // Specter collection time.
 8000c2c:	f001 fd2c 	bl	8002688 <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	4b66      	ldr	r3, [pc, #408]	; (8000dcc <main+0x60c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	4a65      	ldr	r2, [pc, #404]	; (8000dd0 <main+0x610>)
 8000c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3e:	0999      	lsrs	r1, r3, #6
 8000c40:	4b61      	ldr	r3, [pc, #388]	; (8000dc8 <main+0x608>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	b289      	uxth	r1, r1
 8000c48:	4b62      	ldr	r3, [pc, #392]	; (8000dd4 <main+0x614>)
 8000c4a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				  spectrData[1][specterHistory] = (uint16_t) (((HAL_GetTick() - oldTimeAll) / 1000) >> 16);
 8000c4e:	f001 fd1b 	bl	8002688 <HAL_GetTick>
 8000c52:	4602      	mov	r2, r0
 8000c54:	4b5d      	ldr	r3, [pc, #372]	; (8000dcc <main+0x60c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	4a5d      	ldr	r2, [pc, #372]	; (8000dd0 <main+0x610>)
 8000c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c60:	099b      	lsrs	r3, r3, #6
 8000c62:	0c1a      	lsrs	r2, r3, #16
 8000c64:	4b58      	ldr	r3, [pc, #352]	; (8000dc8 <main+0x608>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b291      	uxth	r1, r2
 8000c6a:	4a5a      	ldr	r2, [pc, #360]	; (8000dd4 <main+0x614>)
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  spectrData[2][specterHistory] = (uint16_t) (counterALL & 0xFFFF);
 8000c72:	4b59      	ldr	r3, [pc, #356]	; (8000dd8 <main+0x618>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4b54      	ldr	r3, [pc, #336]	; (8000dc8 <main+0x608>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	b291      	uxth	r1, r2
 8000c7c:	4a55      	ldr	r2, [pc, #340]	; (8000dd4 <main+0x614>)
 8000c7e:	3304      	adds	r3, #4
 8000c80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  spectrData[3][specterHistory] = (uint16_t) (counterALL >> 16);
 8000c84:	4b54      	ldr	r3, [pc, #336]	; (8000dd8 <main+0x618>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	0c1a      	lsrs	r2, r3, #16
 8000c8a:	4b4f      	ldr	r3, [pc, #316]	; (8000dc8 <main+0x608>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	b291      	uxth	r1, r2
 8000c90:	4a50      	ldr	r2, [pc, #320]	; (8000dd4 <main+0x614>)
 8000c92:	3306      	adds	r3, #6
 8000c94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c98:	e027      	b.n	8000cea <main+0x52a>
			  } else {
				  prefix[1] = 'b';		// Alarm specter
 8000c9a:	2362      	movs	r3, #98	; 0x62
 8000c9c:	727b      	strb	r3, [r7, #9]
				  spectrData[0][specterHistory] = (uint16_t) (alarmTime & 0xFFFF); // Specter collection time.
 8000c9e:	4b4f      	ldr	r3, [pc, #316]	; (8000ddc <main+0x61c>)
 8000ca0:	6819      	ldr	r1, [r3, #0]
 8000ca2:	4b49      	ldr	r3, [pc, #292]	; (8000dc8 <main+0x608>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	b289      	uxth	r1, r1
 8000caa:	4b4a      	ldr	r3, [pc, #296]	; (8000dd4 <main+0x614>)
 8000cac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				  spectrData[1][specterHistory] = (uint16_t) (alarmTime >> 16);
 8000cb0:	4b4a      	ldr	r3, [pc, #296]	; (8000ddc <main+0x61c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	0c1a      	lsrs	r2, r3, #16
 8000cb6:	4b44      	ldr	r3, [pc, #272]	; (8000dc8 <main+0x608>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b291      	uxth	r1, r2
 8000cbc:	4a45      	ldr	r2, [pc, #276]	; (8000dd4 <main+0x614>)
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  spectrData[2][specterHistory] = (uint16_t) (counterCCAlarm & 0xFFFF);
 8000cc4:	4b46      	ldr	r3, [pc, #280]	; (8000de0 <main+0x620>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b3f      	ldr	r3, [pc, #252]	; (8000dc8 <main+0x608>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b291      	uxth	r1, r2
 8000cce:	4a41      	ldr	r2, [pc, #260]	; (8000dd4 <main+0x614>)
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  spectrData[3][specterHistory] = (uint16_t) (counterCCAlarm >> 16);
 8000cd6:	4b42      	ldr	r3, [pc, #264]	; (8000de0 <main+0x620>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	0c1a      	lsrs	r2, r3, #16
 8000cdc:	4b3a      	ldr	r3, [pc, #232]	; (8000dc8 <main+0x608>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b291      	uxth	r1, r2
 8000ce2:	4a3c      	ldr	r2, [pc, #240]	; (8000dd4 <main+0x614>)
 8000ce4:	3306      	adds	r3, #6
 8000ce6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  }
			  HAL_UART_Transmit(&huart1, prefix, 3, 1000); // Start sequence.
 8000cea:	f107 0108 	add.w	r1, r7, #8
 8000cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	483b      	ldr	r0, [pc, #236]	; (8000de4 <main+0x624>)
 8000cf6:	f007 fc40 	bl	800857a <HAL_UART_Transmit>
			  //spectrData[2] = 0;
			  //spectrData[3] = 1;
			  spectrCRC = 0;
 8000cfa:	4b3b      	ldr	r3, [pc, #236]	; (8000de8 <main+0x628>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	801a      	strh	r2, [r3, #0]
			  HAL_Delay(TRANSMIT_DALAY);  // Increase time delay if transmit error.
 8000d00:	2014      	movs	r0, #20
 8000d02:	f001 fccd 	bl	80026a0 <HAL_Delay>
			  j = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	657b      	str	r3, [r7, #84]	; 0x54
			  for ( int i = 0; i < 1042; i++) {
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d0e:	e03e      	b.n	8000d8e <main+0x5ce>
				  lowSpectr = spectrData[i][specterHistory] & 0xFF;
 8000d10:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <main+0x608>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	4a2f      	ldr	r2, [pc, #188]	; (8000dd4 <main+0x614>)
 8000d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	440b      	add	r3, r1
 8000d1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	71fb      	strb	r3, [r7, #7]
				  highSpectr = (spectrData[i][specterHistory] & 0xFF00) >> 8;
 8000d26:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <main+0x608>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4a29      	ldr	r2, [pc, #164]	; (8000dd4 <main+0x614>)
 8000d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	440b      	add	r3, r1
 8000d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	71bb      	strb	r3, [r7, #6]
				  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <main+0x628>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	4413      	add	r3, r2
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <main+0x628>)
 8000d56:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8000d58:	1db9      	adds	r1, r7, #6
 8000d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4820      	ldr	r0, [pc, #128]	; (8000de4 <main+0x624>)
 8000d62:	f007 fc0a 	bl	800857a <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8000d66:	1df9      	adds	r1, r7, #7
 8000d68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	481d      	ldr	r0, [pc, #116]	; (8000de4 <main+0x624>)
 8000d70:	f007 fc03 	bl	800857a <HAL_UART_Transmit>
				  if ( j++ >= 9) {
 8000d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	657a      	str	r2, [r7, #84]	; 0x54
 8000d7a:	2b08      	cmp	r3, #8
 8000d7c:	dd04      	ble.n	8000d88 <main+0x5c8>
					  HAL_Delay(TRANSMIT_DALAY);  // Increase time delay if transmit error.
 8000d7e:	2014      	movs	r0, #20
 8000d80:	f001 fc8e 	bl	80026a0 <HAL_Delay>
					  j = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	657b      	str	r3, [r7, #84]	; 0x54
			  for ( int i = 0; i < 1042; i++) {
 8000d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d90:	f240 4211 	movw	r2, #1041	; 0x411
 8000d94:	4293      	cmp	r3, r2
 8000d96:	ddbb      	ble.n	8000d10 <main+0x550>
 8000d98:	e197      	b.n	80010ca <main+0x90a>
 8000d9a:	bf00      	nop
 8000d9c:	20004e00 	.word	0x20004e00
 8000da0:	20004154 	.word	0x20004154
 8000da4:	20004e06 	.word	0x20004e06
 8000da8:	20004e04 	.word	0x20004e04
 8000dac:	20004226 	.word	0x20004226
 8000db0:	2000415c 	.word	0x2000415c
 8000db4:	447a0000 	.word	0x447a0000
 8000db8:	20000064 	.word	0x20000064
 8000dbc:	20000068 	.word	0x20000068
 8000dc0:	2000006c 	.word	0x2000006c
 8000dc4:	20004158 	.word	0x20004158
 8000dc8:	20004155 	.word	0x20004155
 8000dcc:	20004da0 	.word	0x20004da0
 8000dd0:	10624dd3 	.word	0x10624dd3
 8000dd4:	20000074 	.word	0x20000074
 8000dd8:	20000058 	.word	0x20000058
 8000ddc:	2000005c 	.word	0x2000005c
 8000de0:	20000050 	.word	0x20000050
 8000de4:	20004328 	.word	0x20004328
 8000de8:	20004e02 	.word	0x20004e02
				  }
			  }
		  } else {  // Log data
			  uint32_t logTime = HAL_GetTick() / 1000;
 8000dec:	f001 fc4c 	bl	8002688 <HAL_GetTick>
 8000df0:	4603      	mov	r3, r0
 8000df2:	4a3a      	ldr	r2, [pc, #232]	; (8000edc <main+0x71c>)
 8000df4:	fba2 2303 	umull	r2, r3, r2, r3
 8000df8:	099b      	lsrs	r3, r3, #6
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
			  uint8_t emptyBuff[5] = {0};
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	2300      	movs	r3, #0
 8000e02:	713b      	strb	r3, [r7, #4]
			  logDataFlag = 0;	// Reset log data flag
 8000e04:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <main+0x720>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
			  prefix[1] = 'L';
 8000e0a:	234c      	movs	r3, #76	; 0x4c
 8000e0c:	727b      	strb	r3, [r7, #9]
			  HAL_UART_Transmit(&huart1, prefix, 3, 1000); // Start sequence.
 8000e0e:	f107 0108 	add.w	r1, r7, #8
 8000e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e16:	2203      	movs	r2, #3
 8000e18:	4832      	ldr	r0, [pc, #200]	; (8000ee4 <main+0x724>)
 8000e1a:	f007 fbae 	bl	800857a <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, &logRecords, 1, 1000); // Records count
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	2201      	movs	r2, #1
 8000e24:	4930      	ldr	r1, [pc, #192]	; (8000ee8 <main+0x728>)
 8000e26:	482f      	ldr	r0, [pc, #188]	; (8000ee4 <main+0x724>)
 8000e28:	f007 fba7 	bl	800857a <HAL_UART_Transmit>
			  spectrCRC = logRecords;
 8000e2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <main+0x728>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <main+0x72c>)
 8000e34:	801a      	strh	r2, [r3, #0]
			  /* Send current time */
			  lowSpectr = logTime & 0xFF;
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	71fb      	strb	r3, [r7, #7]
			  highSpectr = (logTime & 0xFF00) >> 8;
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	0a1b      	lsrs	r3, r3, #8
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	71bb      	strb	r3, [r7, #6]
			  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	4b28      	ldr	r3, [pc, #160]	; (8000eec <main+0x72c>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	79bb      	ldrb	r3, [r7, #6]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	4413      	add	r3, r2
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <main+0x72c>)
 8000e5a:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8000e5c:	1db9      	adds	r1, r7, #6
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	2201      	movs	r2, #1
 8000e64:	481f      	ldr	r0, [pc, #124]	; (8000ee4 <main+0x724>)
 8000e66:	f007 fb88 	bl	800857a <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8000e6a:	1df9      	adds	r1, r7, #7
 8000e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e70:	2201      	movs	r2, #1
 8000e72:	481c      	ldr	r0, [pc, #112]	; (8000ee4 <main+0x724>)
 8000e74:	f007 fb81 	bl	800857a <HAL_UART_Transmit>
			  lowSpectr = (logTime & 0xFF0000) >> 16;
 8000e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7a:	0c1b      	lsrs	r3, r3, #16
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	71fb      	strb	r3, [r7, #7]
			  highSpectr = (logTime & 0xFF000000) >> 24;
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	0e1b      	lsrs	r3, r3, #24
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	71bb      	strb	r3, [r7, #6]
			  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <main+0x72c>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	4413      	add	r3, r2
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	79bb      	ldrb	r3, [r7, #6]
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	4413      	add	r3, r2
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <main+0x72c>)
 8000e9e:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8000ea0:	1db9      	adds	r1, r7, #6
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	480e      	ldr	r0, [pc, #56]	; (8000ee4 <main+0x724>)
 8000eaa:	f007 fb66 	bl	800857a <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8000eae:	1df9      	adds	r1, r7, #7
 8000eb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <main+0x724>)
 8000eb8:	f007 fb5f 	bl	800857a <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, emptyBuff, 5, 1000);
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec2:	2205      	movs	r2, #5
 8000ec4:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <main+0x724>)
 8000ec6:	f007 fb58 	bl	800857a <HAL_UART_Transmit>
			  HAL_Delay(TRANSMIT_DALAY);  // Increase time delay if transmit error.
 8000eca:	2014      	movs	r0, #20
 8000ecc:	f001 fbe8 	bl	80026a0 <HAL_Delay>
			  j = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	657b      	str	r3, [r7, #84]	; 0x54
			  for (int i = 0; i < logRecords; i++) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ed8:	e0f0      	b.n	80010bc <main+0x8fc>
 8000eda:	bf00      	nop
 8000edc:	10624dd3 	.word	0x10624dd3
 8000ee0:	20004158 	.word	0x20004158
 8000ee4:	20004328 	.word	0x20004328
 8000ee8:	20004157 	.word	0x20004157
 8000eec:	20004e02 	.word	0x20004e02
				  lowSpectr = logDat[i].timeData & 0xFF;
 8000ef0:	4988      	ldr	r1, [pc, #544]	; (8001114 <main+0x954>)
 8000ef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	71fb      	strb	r3, [r7, #7]
				  highSpectr = (logDat[i].timeData & 0xFF00) >> 8;
 8000f04:	4983      	ldr	r1, [pc, #524]	; (8001114 <main+0x954>)
 8000f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f08:	4613      	mov	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	440b      	add	r3, r1
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	71bb      	strb	r3, [r7, #6]
				  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	4b7e      	ldr	r3, [pc, #504]	; (8001118 <main+0x958>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	79bb      	ldrb	r3, [r7, #6]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b7a      	ldr	r3, [pc, #488]	; (8001118 <main+0x958>)
 8000f30:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8000f32:	1db9      	adds	r1, r7, #6
 8000f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4878      	ldr	r0, [pc, #480]	; (800111c <main+0x95c>)
 8000f3c:	f007 fb1d 	bl	800857a <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8000f40:	1df9      	adds	r1, r7, #7
 8000f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f46:	2201      	movs	r2, #1
 8000f48:	4874      	ldr	r0, [pc, #464]	; (800111c <main+0x95c>)
 8000f4a:	f007 fb16 	bl	800857a <HAL_UART_Transmit>
				  lowSpectr = (logDat[i].timeData & 0xFF0000) >> 16;
 8000f4e:	4971      	ldr	r1, [pc, #452]	; (8001114 <main+0x954>)
 8000f50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	0c1b      	lsrs	r3, r3, #16
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	71fb      	strb	r3, [r7, #7]
				  highSpectr = (logDat[i].timeData & 0xFF000000) >> 24;
 8000f64:	496b      	ldr	r1, [pc, #428]	; (8001114 <main+0x954>)
 8000f66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f68:	4613      	mov	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	0e1b      	lsrs	r3, r3, #24
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	71bb      	strb	r3, [r7, #6]
				  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	4b66      	ldr	r3, [pc, #408]	; (8001118 <main+0x958>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	4b62      	ldr	r3, [pc, #392]	; (8001118 <main+0x958>)
 8000f90:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8000f92:	1db9      	adds	r1, r7, #6
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4860      	ldr	r0, [pc, #384]	; (800111c <main+0x95c>)
 8000f9c:	f007 faed 	bl	800857a <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8000fa0:	1df9      	adds	r1, r7, #7
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	485c      	ldr	r0, [pc, #368]	; (800111c <main+0x95c>)
 8000faa:	f007 fae6 	bl	800857a <HAL_UART_Transmit>
				  spectrCRC = spectrCRC + logDat[i].eventType;
 8000fae:	4959      	ldr	r1, [pc, #356]	; (8001114 <main+0x954>)
 8000fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	440b      	add	r3, r1
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4b55      	ldr	r3, [pc, #340]	; (8001118 <main+0x958>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	4b53      	ldr	r3, [pc, #332]	; (8001118 <main+0x958>)
 8000fcc:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, &logDat[i].eventType, 1, 1000);
 8000fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4413      	add	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4a4e      	ldr	r2, [pc, #312]	; (8001114 <main+0x954>)
 8000fda:	4413      	add	r3, r2
 8000fdc:	1d19      	adds	r1, r3, #4
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	484d      	ldr	r0, [pc, #308]	; (800111c <main+0x95c>)
 8000fe6:	f007 fac8 	bl	800857a <HAL_UART_Transmit>
				  lowSpectr = logDat[i].event_data & 0xFF;
 8000fea:	494a      	ldr	r1, [pc, #296]	; (8001114 <main+0x954>)
 8000fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3308      	adds	r3, #8
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	71fb      	strb	r3, [r7, #7]
				  highSpectr = (logDat[i].event_data & 0xFF00) >> 8;
 8001000:	4944      	ldr	r1, [pc, #272]	; (8001114 <main+0x954>)
 8001002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	440b      	add	r3, r1
 800100e:	3308      	adds	r3, #8
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	0a1b      	lsrs	r3, r3, #8
 8001014:	b2db      	uxtb	r3, r3
 8001016:	71bb      	strb	r3, [r7, #6]
				  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b3e      	ldr	r3, [pc, #248]	; (8001118 <main+0x958>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	b29a      	uxth	r2, r3
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	b29b      	uxth	r3, r3
 8001028:	4413      	add	r3, r2
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <main+0x958>)
 800102e:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8001030:	1db9      	adds	r1, r7, #6
 8001032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001036:	2201      	movs	r2, #1
 8001038:	4838      	ldr	r0, [pc, #224]	; (800111c <main+0x95c>)
 800103a:	f007 fa9e 	bl	800857a <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 800103e:	1df9      	adds	r1, r7, #7
 8001040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001044:	2201      	movs	r2, #1
 8001046:	4835      	ldr	r0, [pc, #212]	; (800111c <main+0x95c>)
 8001048:	f007 fa97 	bl	800857a <HAL_UART_Transmit>
				  lowSpectr = (logDat[i].event_data & 0xFF0000) >> 16;
 800104c:	4931      	ldr	r1, [pc, #196]	; (8001114 <main+0x954>)
 800104e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001050:	4613      	mov	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	3308      	adds	r3, #8
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	0c1b      	lsrs	r3, r3, #16
 8001060:	b2db      	uxtb	r3, r3
 8001062:	71fb      	strb	r3, [r7, #7]
				  highSpectr = (logDat[i].event_data & 0xFF000000) >> 24;
 8001064:	492b      	ldr	r1, [pc, #172]	; (8001114 <main+0x954>)
 8001066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001068:	4613      	mov	r3, r2
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	4413      	add	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	440b      	add	r3, r1
 8001072:	3308      	adds	r3, #8
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	0e1b      	lsrs	r3, r3, #24
 8001078:	b2db      	uxtb	r3, r3
 800107a:	71bb      	strb	r3, [r7, #6]
				  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <main+0x958>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	4413      	add	r3, r2
 8001086:	b29a      	uxth	r2, r3
 8001088:	79bb      	ldrb	r3, [r7, #6]
 800108a:	b29b      	uxth	r3, r3
 800108c:	4413      	add	r3, r2
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b21      	ldr	r3, [pc, #132]	; (8001118 <main+0x958>)
 8001092:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8001094:	1db9      	adds	r1, r7, #6
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	2201      	movs	r2, #1
 800109c:	481f      	ldr	r0, [pc, #124]	; (800111c <main+0x95c>)
 800109e:	f007 fa6c 	bl	800857a <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 80010a2:	1df9      	adds	r1, r7, #7
 80010a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a8:	2201      	movs	r2, #1
 80010aa:	481c      	ldr	r0, [pc, #112]	; (800111c <main+0x95c>)
 80010ac:	f007 fa65 	bl	800857a <HAL_UART_Transmit>
				  HAL_Delay(TRANSMIT_DALAY);  // Increase time delay if transmit error.
 80010b0:	2014      	movs	r0, #20
 80010b2:	f001 faf5 	bl	80026a0 <HAL_Delay>
			  for (int i = 0; i < logRecords; i++) {
 80010b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010b8:	3301      	adds	r3, #1
 80010ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <main+0x960>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010c4:	4293      	cmp	r3, r2
 80010c6:	f6ff af13 	blt.w	8000ef0 <main+0x730>
			  }
		  }
		  /* Transmit CRC */
		  HAL_Delay(TRANSMIT_DALAY);
 80010ca:	2014      	movs	r0, #20
 80010cc:	f001 fae8 	bl	80026a0 <HAL_Delay>
		  lowSpectr = spectrCRC & 0xFF;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <main+0x958>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	71fb      	strb	r3, [r7, #7]
		  highSpectr = (spectrCRC & 0xFF00) >> 8;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <main+0x958>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	b29b      	uxth	r3, r3
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	71bb      	strb	r3, [r7, #6]
		  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 80010e4:	1db9      	adds	r1, r7, #6
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	2201      	movs	r2, #1
 80010ec:	480b      	ldr	r0, [pc, #44]	; (800111c <main+0x95c>)
 80010ee:	f007 fa44 	bl	800857a <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 80010f2:	1df9      	adds	r1, r7, #7
 80010f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f8:	2201      	movs	r2, #1
 80010fa:	4808      	ldr	r0, [pc, #32]	; (800111c <main+0x95c>)
 80010fc:	f007 fa3d 	bl	800857a <HAL_UART_Transmit>
		  sleepDelay = HAL_GetTick();
 8001100:	f001 fac2 	bl	8002688 <HAL_GetTick>
 8001104:	4603      	mov	r3, r0
 8001106:	4a07      	ldr	r2, [pc, #28]	; (8001124 <main+0x964>)
 8001108:	6013      	str	r3, [r2, #0]
		  sleepFlag = 1;
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <main+0x968>)
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	e03b      	b.n	800118a <main+0x9ca>
 8001112:	bf00      	nop
 8001114:	200043ac 	.word	0x200043ac
 8001118:	20004e02 	.word	0x20004e02
 800111c:	20004328 	.word	0x20004328
 8001120:	20004157 	.word	0x20004157
 8001124:	2000423c 	.word	0x2000423c
 8001128:	20000003 	.word	0x20000003
	#ifdef DISPLAY_ENABLE
		  HAL_Delay(500);
		  ssd1306_WriteString("BT: disconnect", Font_6x8, 0x01);
	#endif
		  // BT sleep control
		  if (sleepFlag && (HAL_GetTick() - sleepDelay > SLEEPDALAY)) {
 800112c:	4b53      	ldr	r3, [pc, #332]	; (800127c <main+0xabc>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d02a      	beq.n	800118a <main+0x9ca>
 8001134:	f001 faa8 	bl	8002688 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	4b51      	ldr	r3, [pc, #324]	; (8001280 <main+0xac0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001144:	d921      	bls.n	800118a <main+0x9ca>
			  sleepFlag = 0;
 8001146:	4b4d      	ldr	r3, [pc, #308]	; (800127c <main+0xabc>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, (uint8_t*) "AT+SLEEP\n", 9, 1000);    //For JDY-10
 800114c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001150:	2209      	movs	r2, #9
 8001152:	494c      	ldr	r1, [pc, #304]	; (8001284 <main+0xac4>)
 8001154:	484c      	ldr	r0, [pc, #304]	; (8001288 <main+0xac8>)
 8001156:	f007 fa10 	bl	800857a <HAL_UART_Transmit>
			  HAL_Delay(200);
 800115a:	20c8      	movs	r0, #200	; 0xc8
 800115c:	f001 faa0 	bl	80026a0 <HAL_Delay>
			  HAL_UART_Transmit(&huart1, (uint8_t*) "AT+SLEEP\r\n", 10, 1000); //For JDY-19
 8001160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001164:	220a      	movs	r2, #10
 8001166:	4949      	ldr	r1, [pc, #292]	; (800128c <main+0xacc>)
 8001168:	4847      	ldr	r0, [pc, #284]	; (8001288 <main+0xac8>)
 800116a:	f007 fa06 	bl	800857a <HAL_UART_Transmit>
			  HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_SET); // LED on.
 800116e:	2201      	movs	r2, #1
 8001170:	2108      	movs	r1, #8
 8001172:	4847      	ldr	r0, [pc, #284]	; (8001290 <main+0xad0>)
 8001174:	f004 fb38 	bl	80057e8 <HAL_GPIO_WritePin>
			  HAL_TIM_Base_Start_IT(&htim15); // Start timer for turn off LED.
 8001178:	4846      	ldr	r0, [pc, #280]	; (8001294 <main+0xad4>)
 800117a:	f006 f81f 	bl	80071bc <HAL_TIM_Base_Start_IT>
			  HAL_UART_DeInit(&huart1);
 800117e:	4842      	ldr	r0, [pc, #264]	; (8001288 <main+0xac8>)
 8001180:	f007 f9c2 	bl	8008508 <HAL_UART_DeInit>
			  initUART = 1;
 8001184:	4b44      	ldr	r3, [pc, #272]	; (8001298 <main+0xad8>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  /*
	   * Measure battery voltage and temperature
	   */
	  if ((HAL_GetTick() - batteryInterval > batteryMeasureInterval) || batteryInterval == 0) {
 800118a:	f001 fa7d 	bl	8002688 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	4b42      	ldr	r3, [pc, #264]	; (800129c <main+0xadc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	f644 6220 	movw	r2, #20000	; 0x4e20
 800119a:	4293      	cmp	r3, r2
 800119c:	d803      	bhi.n	80011a6 <main+0x9e6>
 800119e:	4b3f      	ldr	r3, [pc, #252]	; (800129c <main+0xadc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d163      	bne.n	800126e <main+0xaae>
		  HAL_GPIO_WritePin(GPIOA, COM_PIN, GPIO_PIN_RESET); // Enable common pin
 80011a6:	2200      	movs	r2, #0
 80011a8:	2140      	movs	r1, #64	; 0x40
 80011aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ae:	f004 fb1b 	bl	80057e8 <HAL_GPIO_WritePin>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &adc1Result, 2);
 80011b2:	2202      	movs	r2, #2
 80011b4:	493a      	ldr	r1, [pc, #232]	; (80012a0 <main+0xae0>)
 80011b6:	483b      	ldr	r0, [pc, #236]	; (80012a4 <main+0xae4>)
 80011b8:	f001 ff70 	bl	800309c <HAL_ADC_Start_DMA>
		  batteryInterval = HAL_GetTick();
 80011bc:	f001 fa64 	bl	8002688 <HAL_GetTick>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a36      	ldr	r2, [pc, #216]	; (800129c <main+0xadc>)
 80011c4:	6013      	str	r3, [r2, #0]

		  /* DAC LTC1662 control */
		  //dacValue = 0xa20f;  // Constant for test
		  dacValue = 0x400;  // Constant for test
 80011c6:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <main+0xae8>)
 80011c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011cc:	801a      	strh	r2, [r3, #0]
		  uint16_t transmitData = 0xA000 | dacValue;
 80011ce:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <main+0xae8>)
 80011d0:	881a      	ldrh	r2, [r3, #0]
 80011d2:	4b36      	ldr	r3, [pc, #216]	; (80012ac <main+0xaec>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	847b      	strh	r3, [r7, #34]	; 0x22
		  HAL_GPIO_WritePin(GPIOA, CS_DAC, GPIO_PIN_SET);		// Disable CS pin
 80011d8:	2201      	movs	r2, #1
 80011da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e2:	f004 fb01 	bl	80057e8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SCK_DAC, GPIO_PIN_SET);		// Pulse on SCK pin
 80011e6:	2201      	movs	r2, #1
 80011e8:	2110      	movs	r1, #16
 80011ea:	4829      	ldr	r0, [pc, #164]	; (8001290 <main+0xad0>)
 80011ec:	f004 fafc 	bl	80057e8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SCK_DAC, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2110      	movs	r1, #16
 80011f4:	4826      	ldr	r0, [pc, #152]	; (8001290 <main+0xad0>)
 80011f6:	f004 faf7 	bl	80057e8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, CS_DAC, GPIO_PIN_RESET);		// Enable CS pin
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001204:	f004 faf0 	bl	80057e8 <HAL_GPIO_WritePin>
		  for (int i = 0; i < 16; i++) {
 8001208:	2300      	movs	r3, #0
 800120a:	637b      	str	r3, [r7, #52]	; 0x34
 800120c:	e025      	b.n	800125a <main+0xa9a>
			  if ((transmitData & (1 << (15 - i))) == 0) {
 800120e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001212:	f1c3 030f 	rsb	r3, r3, #15
 8001216:	fa42 f303 	asr.w	r3, r2, r3
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	d107      	bne.n	8001232 <main+0xa72>
				  HAL_GPIO_WritePin(GPIOA, SDI_DAC, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122c:	f004 fadc 	bl	80057e8 <HAL_GPIO_WritePin>
 8001230:	e006      	b.n	8001240 <main+0xa80>
			  } else {
				  HAL_GPIO_WritePin(GPIOA, SDI_DAC, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123c:	f004 fad4 	bl	80057e8 <HAL_GPIO_WritePin>
			  }
			  HAL_GPIO_WritePin(GPIOB, SCK_DAC, GPIO_PIN_SET);		// Pulse on SCK pin
 8001240:	2201      	movs	r2, #1
 8001242:	2110      	movs	r1, #16
 8001244:	4812      	ldr	r0, [pc, #72]	; (8001290 <main+0xad0>)
 8001246:	f004 facf 	bl	80057e8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, SCK_DAC, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2110      	movs	r1, #16
 800124e:	4810      	ldr	r0, [pc, #64]	; (8001290 <main+0xad0>)
 8001250:	f004 faca 	bl	80057e8 <HAL_GPIO_WritePin>
		  for (int i = 0; i < 16; i++) {
 8001254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001256:	3301      	adds	r3, #1
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
 800125a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125c:	2b0f      	cmp	r3, #15
 800125e:	ddd6      	ble.n	800120e <main+0xa4e>
		  }
		  HAL_GPIO_WritePin(GPIOA, CS_DAC, GPIO_PIN_SET);		// Disable CS pin and execute command
 8001260:	2201      	movs	r2, #1
 8001262:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126a:	f004 fabd 	bl	80057e8 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(500);
 800126e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001272:	f001 fa15 	bl	80026a0 <HAL_Delay>
  {
 8001276:	f7ff bb3b 	b.w	80008f0 <main+0x130>
 800127a:	bf00      	nop
 800127c:	20000003 	.word	0x20000003
 8001280:	2000423c 	.word	0x2000423c
 8001284:	080091d4 	.word	0x080091d4
 8001288:	20004328 	.word	0x20004328
 800128c:	080091e0 	.word	0x080091e0
 8001290:	48000400 	.word	0x48000400
 8001294:	200041d8 	.word	0x200041d8
 8001298:	20000004 	.word	0x20000004
 800129c:	20004da8 	.word	0x20004da8
 80012a0:	20004164 	.word	0x20004164
 80012a4:	20004240 	.word	0x20004240
 80012a8:	20004168 	.word	0x20004168
 80012ac:	ffffa000 	.word	0xffffa000

080012b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b0a4      	sub	sp, #144	; 0x90
 80012b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012ba:	2244      	movs	r2, #68	; 0x44
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f007 ff74 	bl	80091ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2234      	movs	r2, #52	; 0x34
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f007 ff66 	bl	80091ac <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012e4:	f004 feca 	bl	800607c <HAL_PWREx_ControlVoltageScaling>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0x42>
  {
    Error_Handler();
 80012ee:	f000 fb8d 	bl	8001a0c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80012f2:	2318      	movs	r3, #24
 80012f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012f6:	2301      	movs	r3, #1
 80012f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012fa:	2301      	movs	r3, #1
 80012fc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001302:	2370      	movs	r3, #112	; 0x70
 8001304:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001306:	2300      	movs	r3, #0
 8001308:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800130e:	4618      	mov	r0, r3
 8001310:	f004 ff0a 	bl	8006128 <HAL_RCC_OscConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800131a:	f000 fb77 	bl	8001a0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131e:	230f      	movs	r3, #15
 8001320:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001322:	2300      	movs	r3, #0
 8001324:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8001326:	23b0      	movs	r3, #176	; 0xb0
 8001328:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800132e:	2300      	movs	r3, #0
 8001330:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001332:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f005 fb5b 	bl	80069f4 <HAL_RCC_ClockConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001344:	f000 fb62 	bl	8001a0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPTIM2
 8001348:	f244 4301 	movw	r3, #17409	; 0x4401
 800134c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 800134e:	2301      	movs	r3, #1
 8001350:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_LSI;
 8001352:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	4618      	mov	r0, r3
 800135c:	f005 fd50 	bl	8006e00 <HAL_RCCEx_PeriphCLKConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001366:	f000 fb51 	bl	8001a0c <Error_Handler>
  }
}
 800136a:	bf00      	nop
 800136c:	3790      	adds	r7, #144	; 0x90
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
 8001394:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001396:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <MX_ADC1_Init+0x114>)
 8001398:	4a3c      	ldr	r2, [pc, #240]	; (800148c <MX_ADC1_Init+0x118>)
 800139a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800139c:	4b3a      	ldr	r3, [pc, #232]	; (8001488 <MX_ADC1_Init+0x114>)
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80013a2:	4b39      	ldr	r3, [pc, #228]	; (8001488 <MX_ADC1_Init+0x114>)
 80013a4:	2208      	movs	r2, #8
 80013a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013a8:	4b37      	ldr	r3, [pc, #220]	; (8001488 <MX_ADC1_Init+0x114>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013ae:	4b36      	ldr	r3, [pc, #216]	; (8001488 <MX_ADC1_Init+0x114>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b4:	4b34      	ldr	r3, [pc, #208]	; (8001488 <MX_ADC1_Init+0x114>)
 80013b6:	2204      	movs	r2, #4
 80013b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 80013ba:	4b33      	ldr	r3, [pc, #204]	; (8001488 <MX_ADC1_Init+0x114>)
 80013bc:	2201      	movs	r2, #1
 80013be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013c0:	4b31      	ldr	r3, [pc, #196]	; (8001488 <MX_ADC1_Init+0x114>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80013c6:	4b30      	ldr	r3, [pc, #192]	; (8001488 <MX_ADC1_Init+0x114>)
 80013c8:	2202      	movs	r2, #2
 80013ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013cc:	4b2e      	ldr	r3, [pc, #184]	; (8001488 <MX_ADC1_Init+0x114>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d4:	4b2c      	ldr	r3, [pc, #176]	; (8001488 <MX_ADC1_Init+0x114>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013da:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <MX_ADC1_Init+0x114>)
 80013dc:	2200      	movs	r2, #0
 80013de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013e0:	4b29      	ldr	r3, [pc, #164]	; (8001488 <MX_ADC1_Init+0x114>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013e8:	4b27      	ldr	r3, [pc, #156]	; (8001488 <MX_ADC1_Init+0x114>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <MX_ADC1_Init+0x114>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f6:	4824      	ldr	r0, [pc, #144]	; (8001488 <MX_ADC1_Init+0x114>)
 80013f8:	f001 fbce 	bl	8002b98 <HAL_ADC_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001402:	f000 fb03 	bl	8001a0c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	4619      	mov	r1, r3
 8001410:	481d      	ldr	r0, [pc, #116]	; (8001488 <MX_ADC1_Init+0x114>)
 8001412:	f003 f899 	bl	8004548 <HAL_ADCEx_MultiModeConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800141c:	f000 faf6 	bl	8001a0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <MX_ADC1_Init+0x11c>)
 8001422:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001424:	2306      	movs	r3, #6
 8001426:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8001428:	2303      	movs	r3, #3
 800142a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800142c:	237f      	movs	r3, #127	; 0x7f
 800142e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001430:	2304      	movs	r3, #4
 8001432:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 1;
 8001434:	2301      	movs	r3, #1
 8001436:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	4619      	mov	r1, r3
 800143c:	4812      	ldr	r0, [pc, #72]	; (8001488 <MX_ADC1_Init+0x114>)
 800143e:	f002 f991 	bl	8003764 <HAL_ADC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001448:	f000 fae0 	bl	8001a0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_ADC1_Init+0x120>)
 800144e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001450:	230c      	movs	r3, #12
 8001452:	60bb      	str	r3, [r7, #8]
  sConfig.Offset = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	4619      	mov	r1, r3
 800145c:	480a      	ldr	r0, [pc, #40]	; (8001488 <MX_ADC1_Init+0x114>)
 800145e:	f002 f981 	bl	8003764 <HAL_ADC_ConfigChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8001468:	f000 fad0 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  while (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK);
 800146c:	bf00      	nop
 800146e:	217f      	movs	r1, #127	; 0x7f
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_ADC1_Init+0x114>)
 8001472:	f002 ffd7 	bl	8004424 <HAL_ADCEx_Calibration_Start>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f8      	bne.n	800146e <MX_ADC1_Init+0xfa>

  /* USER CODE END ADC1_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20004240 	.word	0x20004240
 800148c:	50040000 	.word	0x50040000
 8001490:	32601000 	.word	0x32601000
 8001494:	c7520000 	.word	0xc7520000

08001498 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800149e:	463b      	mov	r3, r7
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
 80014ac:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80014ae:	4b2f      	ldr	r3, [pc, #188]	; (800156c <MX_ADC2_Init+0xd4>)
 80014b0:	4a2f      	ldr	r2, [pc, #188]	; (8001570 <MX_ADC2_Init+0xd8>)
 80014b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014b4:	4b2d      	ldr	r3, [pc, #180]	; (800156c <MX_ADC2_Init+0xd4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80014ba:	4b2c      	ldr	r3, [pc, #176]	; (800156c <MX_ADC2_Init+0xd4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014c0:	4b2a      	ldr	r3, [pc, #168]	; (800156c <MX_ADC2_Init+0xd4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014c6:	4b29      	ldr	r3, [pc, #164]	; (800156c <MX_ADC2_Init+0xd4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014cc:	4b27      	ldr	r3, [pc, #156]	; (800156c <MX_ADC2_Init+0xd4>)
 80014ce:	2204      	movs	r2, #4
 80014d0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = ENABLE;
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <MX_ADC2_Init+0xd4>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80014d8:	4b24      	ldr	r3, [pc, #144]	; (800156c <MX_ADC2_Init+0xd4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80014de:	4b23      	ldr	r3, [pc, #140]	; (800156c <MX_ADC2_Init+0xd4>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014e4:	4b21      	ldr	r3, [pc, #132]	; (800156c <MX_ADC2_Init+0xd4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <MX_ADC2_Init+0xd4>)
 80014ee:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <MX_ADC2_Init+0xd4>)
 80014f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <MX_ADC2_Init+0xd4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <MX_ADC2_Init+0xd4>)
 8001506:	2200      	movs	r2, #0
 8001508:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <MX_ADC2_Init+0xd4>)
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001512:	4816      	ldr	r0, [pc, #88]	; (800156c <MX_ADC2_Init+0xd4>)
 8001514:	f001 fb40 	bl	8002b98 <HAL_ADC_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800151e:	f000 fa75 	bl	8001a0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_ADC2_Init+0xdc>)
 8001524:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001526:	2306      	movs	r3, #6
 8001528:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES_5;
 800152a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800152e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001530:	237f      	movs	r3, #127	; 0x7f
 8001532:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 1;
 8001538:	2301      	movs	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	480a      	ldr	r0, [pc, #40]	; (800156c <MX_ADC2_Init+0xd4>)
 8001542:	f002 f90f 	bl	8003764 <HAL_ADC_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 800154c:	f000 fa5e 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  while(HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK);
 8001550:	bf00      	nop
 8001552:	217f      	movs	r1, #127	; 0x7f
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_ADC2_Init+0xd4>)
 8001556:	f002 ff65 	bl	8004424 <HAL_ADCEx_Calibration_Start>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f8      	bne.n	8001552 <MX_ADC2_Init+0xba>
  //HAL_ADCEx_Calibration_SetValue(&hadc2, ADC_SINGLE_ENDED, cal_dat);

  //while(HAL_ADCEx_Calibration_Start(&hadc2, ADC_DIFFERENTIAL_ENDED) != HAL_OK);
  /* USER CODE END ADC2_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20004174 	.word	0x20004174
 8001570:	50040100 	.word	0x50040100
 8001574:	43210000 	.word	0x43210000

08001578 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_LPTIM2_Init+0x58>)
 800157e:	4a15      	ldr	r2, [pc, #84]	; (80015d4 <MX_LPTIM2_Init+0x5c>)
 8001580:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_LPTIM2_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_LPTIM2_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_LPTIM2_Init+0x58>)
 8001590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001594:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_LPTIM2_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_LPTIM2_Init+0x58>)
 800159e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <MX_LPTIM2_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_LPTIM2_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <MX_LPTIM2_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim2.Init.RepetitionCounter = 0;
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_LPTIM2_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MX_LPTIM2_Init+0x58>)
 80015be:	f004 f92b 	bl	8005818 <HAL_LPTIM_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_LPTIM2_Init+0x54>
  {
    Error_Handler();
 80015c8:	f000 fa20 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200042ec 	.word	0x200042ec
 80015d4:	40009400 	.word	0x40009400

080015d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08e      	sub	sp, #56	; 0x38
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f8:	463b      	mov	r3, r7
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]
 8001606:	615a      	str	r2, [r3, #20]
 8001608:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800160a:	4b31      	ldr	r3, [pc, #196]	; (80016d0 <MX_TIM2_Init+0xf8>)
 800160c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001610:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001612:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <MX_TIM2_Init+0xf8>)
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <MX_TIM2_Init+0xf8>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 56;
 800161e:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <MX_TIM2_Init+0xf8>)
 8001620:	2238      	movs	r2, #56	; 0x38
 8001622:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001624:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <MX_TIM2_Init+0xf8>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800162a:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <MX_TIM2_Init+0xf8>)
 800162c:	2280      	movs	r2, #128	; 0x80
 800162e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001630:	4827      	ldr	r0, [pc, #156]	; (80016d0 <MX_TIM2_Init+0xf8>)
 8001632:	f005 fd6b 	bl	800710c <HAL_TIM_Base_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800163c:	f000 f9e6 	bl	8001a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800164a:	4619      	mov	r1, r3
 800164c:	4820      	ldr	r0, [pc, #128]	; (80016d0 <MX_TIM2_Init+0xf8>)
 800164e:	f006 f9ef 	bl	8007a30 <HAL_TIM_ConfigClockSource>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001658:	f000 f9d8 	bl	8001a0c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800165c:	481c      	ldr	r0, [pc, #112]	; (80016d0 <MX_TIM2_Init+0xf8>)
 800165e:	f005 fe30 	bl	80072c2 <HAL_TIM_OC_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001668:	f000 f9d0 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800166c:	2320      	movs	r3, #32
 800166e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	4619      	mov	r1, r3
 800167a:	4815      	ldr	r0, [pc, #84]	; (80016d0 <MX_TIM2_Init+0xf8>)
 800167c:	f006 fe72 	bl	8008364 <HAL_TIMEx_MasterConfigSynchronization>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001686:	f000 f9c1 	bl	8001a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800168a:	2330      	movs	r3, #48	; 0x30
 800168c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001692:	2302      	movs	r3, #2
 8001694:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800169a:	463b      	mov	r3, r7
 800169c:	220c      	movs	r2, #12
 800169e:	4619      	mov	r1, r3
 80016a0:	480b      	ldr	r0, [pc, #44]	; (80016d0 <MX_TIM2_Init+0xf8>)
 80016a2:	f006 f94f 	bl	8007944 <HAL_TIM_OC_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80016ac:	f000 f9ae 	bl	8001a0c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_4);
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <MX_TIM2_Init+0xf8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	69da      	ldr	r2, [r3, #28]
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_TIM2_Init+0xf8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016be:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016c0:	4803      	ldr	r0, [pc, #12]	; (80016d0 <MX_TIM2_Init+0xf8>)
 80016c2:	f000 fb25 	bl	8001d10 <HAL_TIM_MspPostInit>

}
 80016c6:	bf00      	nop
 80016c8:	3738      	adds	r7, #56	; 0x38
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20004dac 	.word	0x20004dac

080016d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <MX_TIM6_Init+0x64>)
 80016e6:	4a15      	ldr	r2, [pc, #84]	; (800173c <MX_TIM6_Init+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <MX_TIM6_Init+0x64>)
 80016ec:	2202      	movs	r2, #2
 80016ee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_TIM6_Init+0x64>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <MX_TIM6_Init+0x64>)
 80016f8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80016fc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_TIM6_Init+0x64>)
 8001700:	2280      	movs	r2, #128	; 0x80
 8001702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001704:	480c      	ldr	r0, [pc, #48]	; (8001738 <MX_TIM6_Init+0x64>)
 8001706:	f005 fd01 	bl	800710c <HAL_TIM_Base_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001710:	f000 f97c 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_TIM6_Init+0x64>)
 8001722:	f006 fe1f 	bl	8008364 <HAL_TIMEx_MasterConfigSynchronization>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800172c:	f000 f96e 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20004d54 	.word	0x20004d54
 800173c:	40001000 	.word	0x40001000

08001740 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001746:	f107 0310 	add.w	r3, r7, #16
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <MX_TIM15_Init+0xac>)
 8001760:	4a23      	ldr	r2, [pc, #140]	; (80017f0 <MX_TIM15_Init+0xb0>)
 8001762:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001764:	4b21      	ldr	r3, [pc, #132]	; (80017ec <MX_TIM15_Init+0xac>)
 8001766:	2200      	movs	r2, #0
 8001768:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <MX_TIM15_Init+0xac>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100;
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <MX_TIM15_Init+0xac>)
 8001772:	2264      	movs	r2, #100	; 0x64
 8001774:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001776:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <MX_TIM15_Init+0xac>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <MX_TIM15_Init+0xac>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001782:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <MX_TIM15_Init+0xac>)
 8001784:	2280      	movs	r2, #128	; 0x80
 8001786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001788:	4818      	ldr	r0, [pc, #96]	; (80017ec <MX_TIM15_Init+0xac>)
 800178a:	f005 fcbf 	bl	800710c <HAL_TIM_Base_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8001794:	f000 f93a 	bl	8001a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	4619      	mov	r1, r3
 80017a4:	4811      	ldr	r0, [pc, #68]	; (80017ec <MX_TIM15_Init+0xac>)
 80017a6:	f006 f943 	bl	8007a30 <HAL_TIM_ConfigClockSource>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 80017b0:	f000 f92c 	bl	8001a0c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim15, TIM_OPMODE_SINGLE) != HAL_OK)
 80017b4:	2108      	movs	r1, #8
 80017b6:	480d      	ldr	r0, [pc, #52]	; (80017ec <MX_TIM15_Init+0xac>)
 80017b8:	f005 ff4a 	bl	8007650 <HAL_TIM_OnePulse_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM15_Init+0x86>
  {
    Error_Handler();
 80017c2:	f000 f923 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017c6:	2320      	movs	r3, #32
 80017c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	4619      	mov	r1, r3
 80017d2:	4806      	ldr	r0, [pc, #24]	; (80017ec <MX_TIM15_Init+0xac>)
 80017d4:	f006 fdc6 	bl	8008364 <HAL_TIMEx_MasterConfigSynchronization>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM15_Init+0xa2>
  {
    Error_Handler();
 80017de:	f000 f915 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */
  /* USER CODE END TIM15_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	3720      	adds	r7, #32
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200041d8 	.word	0x200041d8
 80017f0:	40014000 	.word	0x40014000

080017f4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_TIM16_Init+0x58>)
 80017fa:	4a15      	ldr	r2, [pc, #84]	; (8001850 <MX_TIM16_Init+0x5c>)
 80017fc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <MX_TIM16_Init+0x58>)
 8001800:	2200      	movs	r2, #0
 8001802:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_TIM16_Init+0x58>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 30000;
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <MX_TIM16_Init+0x58>)
 800180c:	f247 5230 	movw	r2, #30000	; 0x7530
 8001810:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_TIM16_Init+0x58>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_TIM16_Init+0x58>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <MX_TIM16_Init+0x58>)
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001824:	4809      	ldr	r0, [pc, #36]	; (800184c <MX_TIM16_Init+0x58>)
 8001826:	f005 fc71 	bl	800710c <HAL_TIM_Base_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001830:	f000 f8ec 	bl	8001a0c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001834:	2108      	movs	r1, #8
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_TIM16_Init+0x58>)
 8001838:	f005 ff0a 	bl	8007650 <HAL_TIM_OnePulse_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001842:	f000 f8e3 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20004e08 	.word	0x20004e08
 8001850:	40014400 	.word	0x40014400

08001854 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001858:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <MX_USART1_UART_Init+0x60>)
 800185a:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <MX_USART1_UART_Init+0x64>)
 800185c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <MX_USART1_UART_Init+0x60>)
 8001860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <MX_USART1_UART_Init+0x60>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_USART1_UART_Init+0x60>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_USART1_UART_Init+0x60>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001878:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_USART1_UART_Init+0x60>)
 800187a:	220c      	movs	r2, #12
 800187c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <MX_USART1_UART_Init+0x60>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <MX_USART1_UART_Init+0x60>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <MX_USART1_UART_Init+0x60>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <MX_USART1_UART_Init+0x60>)
 8001892:	2220      	movs	r2, #32
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <MX_USART1_UART_Init+0x60>)
 8001898:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800189c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_USART1_UART_Init+0x60>)
 80018a0:	f006 fde4 	bl	800846c <HAL_UART_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80018aa:	f000 f8af 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20004328 	.word	0x20004328
 80018b8:	40013800 	.word	0x40013800

080018bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <MX_DMA_Init+0x48>)
 80018c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c6:	4a0f      	ldr	r2, [pc, #60]	; (8001904 <MX_DMA_Init+0x48>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6493      	str	r3, [r2, #72]	; 0x48
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <MX_DMA_Init+0x48>)
 80018d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	200b      	movs	r0, #11
 80018e0:	f002 ffb1 	bl	8004846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018e4:	200b      	movs	r0, #11
 80018e6:	f002 ffca 	bl	800487e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	200f      	movs	r0, #15
 80018f0:	f002 ffa9 	bl	8004846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80018f4:	200f      	movs	r0, #15
 80018f6:	f002 ffc2 	bl	800487e <HAL_NVIC_EnableIRQ>

}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000

08001908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <MX_GPIO_Init+0xf8>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	4a37      	ldr	r2, [pc, #220]	; (8001a00 <MX_GPIO_Init+0xf8>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192a:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <MX_GPIO_Init+0xf8>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <MX_GPIO_Init+0xf8>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	4a31      	ldr	r2, [pc, #196]	; (8001a00 <MX_GPIO_Init+0xf8>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001942:	4b2f      	ldr	r3, [pc, #188]	; (8001a00 <MX_GPIO_Init+0xf8>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Vibro_Pin|COM_Pin|GPIO_PIN_8|CS_Pin, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f241 1142 	movw	r1, #4418	; 0x1142
 8001954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001958:	f003 ff46 	bl	80057e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SC_Pin, GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	2118      	movs	r1, #24
 8001960:	4828      	ldr	r0, [pc, #160]	; (8001a04 <MX_GPIO_Init+0xfc>)
 8001962:	f003 ff41 	bl	80057e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Vibro_Pin PA8 CS_Pin */
  GPIO_InitStruct.Pin = Vibro_Pin|GPIO_PIN_8|CS_Pin;
 8001966:	f241 1302 	movw	r3, #4354	; 0x1102
 800196a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	4619      	mov	r1, r3
 800197e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001982:	f003 fcd5 	bl	8005330 <HAL_GPIO_Init>

  /*Configure GPIO pin : COM_Pin */
  GPIO_InitStruct.Pin = COM_Pin;
 8001986:	2340      	movs	r3, #64	; 0x40
 8001988:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800198a:	2311      	movs	r3, #17
 800198c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(COM_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	4619      	mov	r1, r3
 800199c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a0:	f003 fcc6 	bl	8005330 <HAL_GPIO_Init>

  /*Configure GPIO pin : StartADC_Pin */
  GPIO_InitStruct.Pin = StartADC_Pin;
 80019a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019aa:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <MX_GPIO_Init+0x100>)
 80019ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(StartADC_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	4619      	mov	r1, r3
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019bc:	f003 fcb8 	bl	8005330 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_Status_Pin */
  GPIO_InitStruct.Pin = BT_Status_Pin;
 80019c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BT_Status_GPIO_Port, &GPIO_InitStruct);
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	4619      	mov	r1, r3
 80019d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d8:	f003 fcaa 	bl	8005330 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin SC_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SC_Pin;
 80019dc:	2318      	movs	r3, #24
 80019de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	4619      	mov	r1, r3
 80019f2:	4804      	ldr	r0, [pc, #16]	; (8001a04 <MX_GPIO_Init+0xfc>)
 80019f4:	f003 fc9c 	bl	8005330 <HAL_GPIO_Init>

}
 80019f8:	bf00      	nop
 80019fa:	3720      	adds	r7, #32
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	48000400 	.word	0x48000400
 8001a08:	10110000 	.word	0x10110000

08001a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_MspInit+0x44>)
 8001a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a26:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <HAL_MspInit+0x44>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <HAL_MspInit+0x44>)
 8001a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_MspInit+0x44>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <HAL_MspInit+0x44>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a44:	6593      	str	r3, [r2, #88]	; 0x58
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_MspInit+0x44>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000

08001a64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08c      	sub	sp, #48	; 0x30
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a51      	ldr	r2, [pc, #324]	; (8001bc8 <HAL_ADC_MspInit+0x164>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d161      	bne.n	8001b4a <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001a86:	4b51      	ldr	r3, [pc, #324]	; (8001bcc <HAL_ADC_MspInit+0x168>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	4a4f      	ldr	r2, [pc, #316]	; (8001bcc <HAL_ADC_MspInit+0x168>)
 8001a8e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001a90:	4b4e      	ldr	r3, [pc, #312]	; (8001bcc <HAL_ADC_MspInit+0x168>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d10b      	bne.n	8001ab0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001a98:	4b4d      	ldr	r3, [pc, #308]	; (8001bd0 <HAL_ADC_MspInit+0x16c>)
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9c:	4a4c      	ldr	r2, [pc, #304]	; (8001bd0 <HAL_ADC_MspInit+0x16c>)
 8001a9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001aa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa4:	4b4a      	ldr	r3, [pc, #296]	; (8001bd0 <HAL_ADC_MspInit+0x16c>)
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab0:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <HAL_ADC_MspInit+0x16c>)
 8001ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab4:	4a46      	ldr	r2, [pc, #280]	; (8001bd0 <HAL_ADC_MspInit+0x16c>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001abc:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <HAL_ADC_MspInit+0x16c>)
 8001abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = BAT_LEVEL_Pin;
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001acc:	230b      	movs	r3, #11
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ade:	f003 fc27 	bl	8005330 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ae2:	4b3c      	ldr	r3, [pc, #240]	; (8001bd4 <HAL_ADC_MspInit+0x170>)
 8001ae4:	4a3c      	ldr	r2, [pc, #240]	; (8001bd8 <HAL_ADC_MspInit+0x174>)
 8001ae6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <HAL_ADC_MspInit+0x170>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aee:	4b39      	ldr	r3, [pc, #228]	; (8001bd4 <HAL_ADC_MspInit+0x170>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af4:	4b37      	ldr	r3, [pc, #220]	; (8001bd4 <HAL_ADC_MspInit+0x170>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001afa:	4b36      	ldr	r3, [pc, #216]	; (8001bd4 <HAL_ADC_MspInit+0x170>)
 8001afc:	2280      	movs	r2, #128	; 0x80
 8001afe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b00:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <HAL_ADC_MspInit+0x170>)
 8001b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b06:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b08:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <HAL_ADC_MspInit+0x170>)
 8001b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b0e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001b10:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <HAL_ADC_MspInit+0x170>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b16:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <HAL_ADC_MspInit+0x170>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b1c:	482d      	ldr	r0, [pc, #180]	; (8001bd4 <HAL_ADC_MspInit+0x170>)
 8001b1e:	f002 fec9 	bl	80048b4 <HAL_DMA_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001b28:	f7ff ff70 	bl	8001a0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a29      	ldr	r2, [pc, #164]	; (8001bd4 <HAL_ADC_MspInit+0x170>)
 8001b30:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b32:	4a28      	ldr	r2, [pc, #160]	; (8001bd4 <HAL_ADC_MspInit+0x170>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2012      	movs	r0, #18
 8001b3e:	f002 fe82 	bl	8004846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b42:	2012      	movs	r0, #18
 8001b44:	f002 fe9b 	bl	800487e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b48:	e039      	b.n	8001bbe <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a23      	ldr	r2, [pc, #140]	; (8001bdc <HAL_ADC_MspInit+0x178>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d134      	bne.n	8001bbe <HAL_ADC_MspInit+0x15a>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001b54:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <HAL_ADC_MspInit+0x168>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <HAL_ADC_MspInit+0x168>)
 8001b5c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_ADC_MspInit+0x168>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d10b      	bne.n	8001b7e <HAL_ADC_MspInit+0x11a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001b66:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <HAL_ADC_MspInit+0x16c>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	4a19      	ldr	r2, [pc, #100]	; (8001bd0 <HAL_ADC_MspInit+0x16c>)
 8001b6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <HAL_ADC_MspInit+0x16c>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_ADC_MspInit+0x16c>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	4a13      	ldr	r2, [pc, #76]	; (8001bd0 <HAL_ADC_MspInit+0x16c>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b8a:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <HAL_ADC_MspInit+0x16c>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SiPM_Pin;
 8001b96:	2302      	movs	r3, #2
 8001b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b9a:	230b      	movs	r3, #11
 8001b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SiPM_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	480d      	ldr	r0, [pc, #52]	; (8001be0 <HAL_ADC_MspInit+0x17c>)
 8001baa:	f003 fbc1 	bl	8005330 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2012      	movs	r0, #18
 8001bb4:	f002 fe47 	bl	8004846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001bb8:	2012      	movs	r0, #18
 8001bba:	f002 fe60 	bl	800487e <HAL_NVIC_EnableIRQ>
}
 8001bbe:	bf00      	nop
 8001bc0:	3730      	adds	r7, #48	; 0x30
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	50040000 	.word	0x50040000
 8001bcc:	20004160 	.word	0x20004160
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	20004d0c 	.word	0x20004d0c
 8001bd8:	40020008 	.word	0x40020008
 8001bdc:	50040100 	.word	0x50040100
 8001be0:	48000400 	.word	0x48000400

08001be4 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <HAL_LPTIM_MspInit+0x44>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d113      	bne.n	8001c1e <HAL_LPTIM_MspInit+0x3a>
  {
  /* USER CODE BEGIN LPTIM2_MspInit 0 */

  /* USER CODE END LPTIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <HAL_LPTIM_MspInit+0x48>)
 8001bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfa:	4a0c      	ldr	r2, [pc, #48]	; (8001c2c <HAL_LPTIM_MspInit+0x48>)
 8001bfc:	f043 0320 	orr.w	r3, r3, #32
 8001c00:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <HAL_LPTIM_MspInit+0x48>)
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM2 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	2042      	movs	r0, #66	; 0x42
 8001c14:	f002 fe17 	bl	8004846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 8001c18:	2042      	movs	r0, #66	; 0x42
 8001c1a:	f002 fe30 	bl	800487e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40009400 	.word	0x40009400
 8001c2c:	40021000 	.word	0x40021000

08001c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c40:	d10c      	bne.n	8001c5c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c42:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <HAL_TIM_Base_MspInit+0xd0>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	4a2e      	ldr	r2, [pc, #184]	; (8001d00 <HAL_TIM_Base_MspInit+0xd0>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c4e:	4b2c      	ldr	r3, [pc, #176]	; (8001d00 <HAL_TIM_Base_MspInit+0xd0>)
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001c5a:	e04c      	b.n	8001cf6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a28      	ldr	r2, [pc, #160]	; (8001d04 <HAL_TIM_Base_MspInit+0xd4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d114      	bne.n	8001c90 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <HAL_TIM_Base_MspInit+0xd0>)
 8001c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6a:	4a25      	ldr	r2, [pc, #148]	; (8001d00 <HAL_TIM_Base_MspInit+0xd0>)
 8001c6c:	f043 0310 	orr.w	r3, r3, #16
 8001c70:	6593      	str	r3, [r2, #88]	; 0x58
 8001c72:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <HAL_TIM_Base_MspInit+0xd0>)
 8001c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	2036      	movs	r0, #54	; 0x36
 8001c84:	f002 fddf 	bl	8004846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001c88:	2036      	movs	r0, #54	; 0x36
 8001c8a:	f002 fdf8 	bl	800487e <HAL_NVIC_EnableIRQ>
}
 8001c8e:	e032      	b.n	8001cf6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM15)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <HAL_TIM_Base_MspInit+0xd8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d114      	bne.n	8001cc4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001c9a:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_TIM_Base_MspInit+0xd0>)
 8001c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9e:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <HAL_TIM_Base_MspInit+0xd0>)
 8001ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ca6:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <HAL_TIM_Base_MspInit+0xd0>)
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2018      	movs	r0, #24
 8001cb8:	f002 fdc5 	bl	8004846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001cbc:	2018      	movs	r0, #24
 8001cbe:	f002 fdde 	bl	800487e <HAL_NVIC_EnableIRQ>
}
 8001cc2:	e018      	b.n	8001cf6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM16)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a10      	ldr	r2, [pc, #64]	; (8001d0c <HAL_TIM_Base_MspInit+0xdc>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d113      	bne.n	8001cf6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_TIM_Base_MspInit+0xd0>)
 8001cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <HAL_TIM_Base_MspInit+0xd0>)
 8001cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_TIM_Base_MspInit+0xd0>)
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	2019      	movs	r0, #25
 8001cec:	f002 fdab 	bl	8004846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001cf0:	2019      	movs	r0, #25
 8001cf2:	f002 fdc4 	bl	800487e <HAL_NVIC_EnableIRQ>
}
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40001000 	.word	0x40001000
 8001d08:	40014000 	.word	0x40014000
 8001d0c:	40014400 	.word	0x40014400

08001d10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d30:	d11c      	bne.n	8001d6c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_TIM_MspPostInit+0x64>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	4a0f      	ldr	r2, [pc, #60]	; (8001d74 <HAL_TIM_MspPostInit+0x64>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <HAL_TIM_MspPostInit+0x64>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 030c 	add.w	r3, r7, #12
 8001d62:	4619      	mov	r1, r3
 8001d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d68:	f003 fae2 	bl	8005330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d6c:	bf00      	nop
 8001d6e:	3720      	adds	r7, #32
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000

08001d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2c      	ldr	r2, [pc, #176]	; (8001e48 <HAL_UART_MspInit+0xd0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d152      	bne.n	8001e40 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d9a:	4b2c      	ldr	r3, [pc, #176]	; (8001e4c <HAL_UART_MspInit+0xd4>)
 8001d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d9e:	4a2b      	ldr	r2, [pc, #172]	; (8001e4c <HAL_UART_MspInit+0xd4>)
 8001da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da4:	6613      	str	r3, [r2, #96]	; 0x60
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <HAL_UART_MspInit+0xd4>)
 8001da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <HAL_UART_MspInit+0xd4>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	4a25      	ldr	r2, [pc, #148]	; (8001e4c <HAL_UART_MspInit+0xd4>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dbe:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <HAL_UART_MspInit+0xd4>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BT_TX_Pin|BT_RX_Pin;
 8001dca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ddc:	2307      	movs	r3, #7
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4619      	mov	r1, r3
 8001de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dea:	f003 faa1 	bl	8005330 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001dee:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <HAL_UART_MspInit+0xd8>)
 8001df0:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <HAL_UART_MspInit+0xdc>)
 8001df2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001df4:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <HAL_UART_MspInit+0xd8>)
 8001df6:	2202      	movs	r2, #2
 8001df8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_UART_MspInit+0xd8>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <HAL_UART_MspInit+0xd8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_UART_MspInit+0xd8>)
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e0c:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HAL_UART_MspInit+0xd8>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e12:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <HAL_UART_MspInit+0xd8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001e18:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <HAL_UART_MspInit+0xd8>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <HAL_UART_MspInit+0xd8>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e24:	480a      	ldr	r0, [pc, #40]	; (8001e50 <HAL_UART_MspInit+0xd8>)
 8001e26:	f002 fd45 	bl	80048b4 <HAL_DMA_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8001e30:	f7ff fdec 	bl	8001a0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a06      	ldr	r2, [pc, #24]	; (8001e50 <HAL_UART_MspInit+0xd8>)
 8001e38:	671a      	str	r2, [r3, #112]	; 0x70
 8001e3a:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <HAL_UART_MspInit+0xd8>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e40:	bf00      	nop
 8001e42:	3728      	adds	r7, #40	; 0x28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40013800 	.word	0x40013800
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	200042a4 	.word	0x200042a4
 8001e54:	40020058 	.word	0x40020058

08001e58 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <HAL_UART_MspDeInit+0x3c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d110      	bne.n	8001e8c <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_UART_MspDeInit+0x40>)
 8001e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <HAL_UART_MspDeInit+0x40>)
 8001e70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e74:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, BT_TX_Pin|BT_RX_Pin);
 8001e76:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7e:	f003 fbc9 	bl	8005614 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 fdcc 	bl	8004a24 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40013800 	.word	0x40013800
 8001e98:	40021000 	.word	0x40021000

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <HardFault_Handler+0x4>

08001eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <MemManage_Handler+0x4>

08001eb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <BusFault_Handler+0x4>

08001ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <UsageFault_Handler+0x4>

08001ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef0:	f000 fbb6 	bl	8002660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	// Battery voltage.
	HAL_ADC_Stop_DMA(&hadc1);
 8001efe:	4827      	ldr	r0, [pc, #156]	; (8001f9c <DMA1_Channel1_IRQHandler+0xa4>)
 8001f00:	f001 f980 	bl	8003204 <HAL_ADC_Stop_DMA>
	HAL_GPIO_WritePin(GPIOA, COM_PIN, GPIO_PIN_SET);  // Disable common pin
 8001f04:	2201      	movs	r2, #1
 8001f06:	2140      	movs	r1, #64	; 0x40
 8001f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0c:	f003 fc6c 	bl	80057e8 <HAL_GPIO_WritePin>

	/* Battery level */
	uint16_t batv;
	if (adc1Result[0] < 785) {
 8001f10:	4b23      	ldr	r3, [pc, #140]	; (8001fa0 <DMA1_Channel1_IRQHandler+0xa8>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8001f18:	d802      	bhi.n	8001f20 <DMA1_Channel1_IRQHandler+0x28>
		batv = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	80fb      	strh	r3, [r7, #6]
 8001f1e:	e004      	b.n	8001f2a <DMA1_Channel1_IRQHandler+0x32>
	} else {
		batv = adc1Result[0] - 785; // 3.2v -- 4.2v
 8001f20:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <DMA1_Channel1_IRQHandler+0xa8>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8001f28:	80fb      	strh	r3, [r7, #6]
	}

	/* Temperature*/

	uint16_t temper = (uint16_t) ( temperatureKoeff1 * (float) adc1Result[1] * 4 + temperatureKoeff2);
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <DMA1_Channel1_IRQHandler+0xa8>)
 8001f2c:	885b      	ldrh	r3, [r3, #2]
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f36:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <DMA1_Channel1_IRQHandler+0xac>)
 8001f38:	edd3 7a00 	vldr	s15, [r3]
 8001f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f40:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001f44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f48:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <DMA1_Channel1_IRQHandler+0xb0>)
 8001f4a:	edd3 7a00 	vldr	s15, [r3]
 8001f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f56:	ee17 3a90 	vmov	r3, s15
 8001f5a:	80bb      	strh	r3, [r7, #4]
	//uint16_t temper = (uint16_t) (((float) adc1Result[1] / 1024 * 3 - 0.76f) / 2.5f + 30);
	spectrData[4][0] = (temper << 8) | (batv & 0x00FF); // Main specter
 8001f5c:	88bb      	ldrh	r3, [r7, #4]
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	b21a      	sxth	r2, r3
 8001f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	b21b      	sxth	r3, r3
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <DMA1_Channel1_IRQHandler+0xb4>)
 8001f72:	821a      	strh	r2, [r3, #16]
	spectrData[4][1] = (temper << 8) | (batv & 0x00FF); // History specter
 8001f74:	88bb      	ldrh	r3, [r7, #4]
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	b21a      	sxth	r2, r3
 8001f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	b21b      	sxth	r3, r3
 8001f82:	4313      	orrs	r3, r2
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <DMA1_Channel1_IRQHandler+0xb4>)
 8001f8a:	825a      	strh	r2, [r3, #18]
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f8c:	4808      	ldr	r0, [pc, #32]	; (8001fb0 <DMA1_Channel1_IRQHandler+0xb8>)
 8001f8e:	f002 fe79 	bl	8004c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20004240 	.word	0x20004240
 8001fa0:	20004164 	.word	0x20004164
 8001fa4:	20004dfc 	.word	0x20004dfc
 8001fa8:	2000416c 	.word	0x2000416c
 8001fac:	20000074 	.word	0x20000074
 8001fb0:	20004d0c 	.word	0x20004d0c

08001fb4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <DMA1_Channel5_IRQHandler+0x10>)
 8001fba:	f002 fe63 	bl	8004c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200042a4 	.word	0x200042a4

08001fc8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	uint32_t nowInterval;
	if( __HAL_ADC_GET_FLAG(&hadc2, ADC_ISR_EOC) != RESET) {
 8001fce:	4b56      	ldr	r3, [pc, #344]	; (8002128 <ADC1_2_IRQHandler+0x160>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	f040 809a 	bne.w	8002112 <ADC1_2_IRQHandler+0x14a>
	  adc2Result = HAL_ADC_GetValue(&hadc2);
 8001fde:	4852      	ldr	r0, [pc, #328]	; (8002128 <ADC1_2_IRQHandler+0x160>)
 8001fe0:	f001 f971 	bl	80032c6 <HAL_ADC_GetValue>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	4b50      	ldr	r3, [pc, #320]	; (800212c <ADC1_2_IRQHandler+0x164>)
 8001fea:	801a      	strh	r2, [r3, #0]
	  if (adc2Result > 0) {
 8001fec:	4b4f      	ldr	r3, [pc, #316]	; (800212c <ADC1_2_IRQHandler+0x164>)
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 808e 	beq.w	8002112 <ADC1_2_IRQHandler+0x14a>
		  adc2Result = adc2Result & 0x0FFF;
 8001ff6:	4b4d      	ldr	r3, [pc, #308]	; (800212c <ADC1_2_IRQHandler+0x164>)
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	4b4a      	ldr	r3, [pc, #296]	; (800212c <ADC1_2_IRQHandler+0x164>)
 8002002:	801a      	strh	r2, [r3, #0]
		  if (resolution == 1) {
 8002004:	4b4a      	ldr	r3, [pc, #296]	; (8002130 <ADC1_2_IRQHandler+0x168>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d106      	bne.n	800201a <ADC1_2_IRQHandler+0x52>
			  adc2Result = adc2Result >> 2;			// 1024 channels
 800200c:	4b47      	ldr	r3, [pc, #284]	; (800212c <ADC1_2_IRQHandler+0x164>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	b29a      	uxth	r2, r3
 8002014:	4b45      	ldr	r3, [pc, #276]	; (800212c <ADC1_2_IRQHandler+0x164>)
 8002016:	801a      	strh	r2, [r3, #0]
 8002018:	e009      	b.n	800202e <ADC1_2_IRQHandler+0x66>
		  } else {
			  if (resolution == 2) {
 800201a:	4b45      	ldr	r3, [pc, #276]	; (8002130 <ADC1_2_IRQHandler+0x168>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d105      	bne.n	800202e <ADC1_2_IRQHandler+0x66>
				  adc2Result = adc2Result >> 1;		// 2048 channels
 8002022:	4b42      	ldr	r3, [pc, #264]	; (800212c <ADC1_2_IRQHandler+0x164>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	085b      	lsrs	r3, r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	4b40      	ldr	r3, [pc, #256]	; (800212c <ADC1_2_IRQHandler+0x164>)
 800202c:	801a      	strh	r2, [r3, #0]
			  }										// else 4096 channels
		  }
		  adc2Result = adc2Result + reservDataSize;	// Reserved additional parameter in send buffer ( 12 bytes )
 800202e:	4b3f      	ldr	r3, [pc, #252]	; (800212c <ADC1_2_IRQHandler+0x164>)
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	3306      	adds	r3, #6
 8002034:	b29a      	uxth	r2, r3
 8002036:	4b3d      	ldr	r3, [pc, #244]	; (800212c <ADC1_2_IRQHandler+0x164>)
 8002038:	801a      	strh	r2, [r3, #0]
		  if (spectrData[adc2Result][0] < 0xFFFF)		// Check overflow in channel.
 800203a:	4b3c      	ldr	r3, [pc, #240]	; (800212c <ADC1_2_IRQHandler+0x164>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	4b3c      	ldr	r3, [pc, #240]	; (8002134 <ADC1_2_IRQHandler+0x16c>)
 8002042:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8002046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800204a:	4293      	cmp	r3, r2
 800204c:	d009      	beq.n	8002062 <ADC1_2_IRQHandler+0x9a>
			  spectrData[adc2Result][0]++;
 800204e:	4b37      	ldr	r3, [pc, #220]	; (800212c <ADC1_2_IRQHandler+0x164>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	4a38      	ldr	r2, [pc, #224]	; (8002134 <ADC1_2_IRQHandler+0x16c>)
 8002054:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8002058:	3201      	adds	r2, #1
 800205a:	b291      	uxth	r1, r2
 800205c:	4a35      	ldr	r2, [pc, #212]	; (8002134 <ADC1_2_IRQHandler+0x16c>)
 800205e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		  if (alarmLevel != 0) {		// Record to alarm specter array
 8002062:	4b35      	ldr	r3, [pc, #212]	; (8002138 <ADC1_2_IRQHandler+0x170>)
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d01c      	beq.n	80020a4 <ADC1_2_IRQHandler+0xdc>
			  if (spectrData[adc2Result][1] < 0xFFFF)		// Check overflow in alarm channel.
 800206a:	4b30      	ldr	r3, [pc, #192]	; (800212c <ADC1_2_IRQHandler+0x164>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	4a31      	ldr	r2, [pc, #196]	; (8002134 <ADC1_2_IRQHandler+0x16c>)
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	885b      	ldrh	r3, [r3, #2]
 8002076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800207a:	4293      	cmp	r3, r2
 800207c:	d00d      	beq.n	800209a <ADC1_2_IRQHandler+0xd2>
				  spectrData[adc2Result][1]++;
 800207e:	4b2b      	ldr	r3, [pc, #172]	; (800212c <ADC1_2_IRQHandler+0x164>)
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	492b      	ldr	r1, [pc, #172]	; (8002134 <ADC1_2_IRQHandler+0x16c>)
 8002086:	0093      	lsls	r3, r2, #2
 8002088:	440b      	add	r3, r1
 800208a:	885b      	ldrh	r3, [r3, #2]
 800208c:	3301      	adds	r3, #1
 800208e:	b298      	uxth	r0, r3
 8002090:	4928      	ldr	r1, [pc, #160]	; (8002134 <ADC1_2_IRQHandler+0x16c>)
 8002092:	0093      	lsls	r3, r2, #2
 8002094:	440b      	add	r3, r1
 8002096:	4602      	mov	r2, r0
 8002098:	805a      	strh	r2, [r3, #2]
			  counterCCAlarm++;
 800209a:	4b28      	ldr	r3, [pc, #160]	; (800213c <ADC1_2_IRQHandler+0x174>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	3301      	adds	r3, #1
 80020a0:	4a26      	ldr	r2, [pc, #152]	; (800213c <ADC1_2_IRQHandler+0x174>)
 80020a2:	6013      	str	r3, [r2, #0]
		  }
		  counterCC++;
 80020a4:	4b26      	ldr	r3, [pc, #152]	; (8002140 <ADC1_2_IRQHandler+0x178>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3301      	adds	r3, #1
 80020aa:	4a25      	ldr	r2, [pc, #148]	; (8002140 <ADC1_2_IRQHandler+0x178>)
 80020ac:	6013      	str	r3, [r2, #0]
		  counterALL++;
 80020ae:	4b25      	ldr	r3, [pc, #148]	; (8002144 <ADC1_2_IRQHandler+0x17c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	3301      	adds	r3, #1
 80020b4:	4a23      	ldr	r2, [pc, #140]	; (8002144 <ADC1_2_IRQHandler+0x17c>)
 80020b6:	6013      	str	r3, [r2, #0]

		  /* intervals for radiation levels */
		  nowInterval = HAL_GetTick();
 80020b8:	f000 fae6 	bl	8002688 <HAL_GetTick>
 80020bc:	6078      	str	r0, [r7, #4]
		  if (oldInterval > 0) {
 80020be:	4b22      	ldr	r3, [pc, #136]	; (8002148 <ADC1_2_IRQHandler+0x180>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d014      	beq.n	80020f0 <ADC1_2_IRQHandler+0x128>
			  radBuffer[indexBuffer++] = nowInterval - oldInterval;
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <ADC1_2_IRQHandler+0x180>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b20      	ldr	r3, [pc, #128]	; (800214c <ADC1_2_IRQHandler+0x184>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	1c59      	adds	r1, r3, #1
 80020d0:	b2c8      	uxtb	r0, r1
 80020d2:	491e      	ldr	r1, [pc, #120]	; (800214c <ADC1_2_IRQHandler+0x184>)
 80020d4:	7008      	strb	r0, [r1, #0]
 80020d6:	4619      	mov	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	4a1c      	ldr	r2, [pc, #112]	; (8002150 <ADC1_2_IRQHandler+0x188>)
 80020de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			  if (indexBuffer > radBufferSize - 1) { // Buffer size = radBufferSize.
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <ADC1_2_IRQHandler+0x184>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b31      	cmp	r3, #49	; 0x31
 80020e8:	d902      	bls.n	80020f0 <ADC1_2_IRQHandler+0x128>
				  indexBuffer = 0;
 80020ea:	4b18      	ldr	r3, [pc, #96]	; (800214c <ADC1_2_IRQHandler+0x184>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  oldInterval = nowInterval;
 80020f0:	4a15      	ldr	r2, [pc, #84]	; (8002148 <ADC1_2_IRQHandler+0x180>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6013      	str	r3, [r2, #0]

		  if ((cfgData & 64) > 0) {					// Check config data for LED activity
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <ADC1_2_IRQHandler+0x18c>)
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	dd07      	ble.n	8002112 <ADC1_2_IRQHandler+0x14a>
			  HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_SET); // LED on.
 8002102:	2201      	movs	r2, #1
 8002104:	2108      	movs	r1, #8
 8002106:	4814      	ldr	r0, [pc, #80]	; (8002158 <ADC1_2_IRQHandler+0x190>)
 8002108:	f003 fb6e 	bl	80057e8 <HAL_GPIO_WritePin>
			  HAL_TIM_Base_Start_IT(&htim15);		// Start timer for turn off LED.
 800210c:	4813      	ldr	r0, [pc, #76]	; (800215c <ADC1_2_IRQHandler+0x194>)
 800210e:	f005 f855 	bl	80071bc <HAL_TIM_Base_Start_IT>
		  }
	  }
	}
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002112:	4813      	ldr	r0, [pc, #76]	; (8002160 <ADC1_2_IRQHandler+0x198>)
 8002114:	f001 f8e4 	bl	80032e0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002118:	4803      	ldr	r0, [pc, #12]	; (8002128 <ADC1_2_IRQHandler+0x160>)
 800211a:	f001 f8e1 	bl	80032e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20004174 	.word	0x20004174
 800212c:	20000070 	.word	0x20000070
 8002130:	20004154 	.word	0x20004154
 8002134:	20000074 	.word	0x20000074
 8002138:	20004224 	.word	0x20004224
 800213c:	20000050 	.word	0x20000050
 8002140:	20000054 	.word	0x20000054
 8002144:	20000058 	.word	0x20000058
 8002148:	20000060 	.word	0x20000060
 800214c:	20004da4 	.word	0x20004da4
 8002150:	2000408c 	.word	0x2000408c
 8002154:	20004e00 	.word	0x20004e00
 8002158:	48000400 	.word	0x48000400
 800215c:	200041d8 	.word	0x200041d8
 8002160:	20004240 	.word	0x20004240

08002164 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_RESET); // LED off.
 8002168:	2200      	movs	r2, #0
 800216a:	2108      	movs	r1, #8
 800216c:	4805      	ldr	r0, [pc, #20]	; (8002184 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 800216e:	f003 fb3b 	bl	80057e8 <HAL_GPIO_WritePin>
	//HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002172:	4805      	ldr	r0, [pc, #20]	; (8002188 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8002174:	f005 fac6 	bl	8007704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim15);
 8002178:	4803      	ldr	r0, [pc, #12]	; (8002188 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 800217a:	f005 f873 	bl	8007264 <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	48000400 	.word	0x48000400
 8002188:	200041d8 	.word	0x200041d8

0800218c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_3);  // Sound off
 8002190:	2108      	movs	r1, #8
 8002192:	480a      	ldr	r0, [pc, #40]	; (80021bc <TIM1_UP_TIM16_IRQHandler+0x30>)
 8002194:	f005 f9d4 	bl	8007540 <HAL_TIM_OC_Stop>
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);  // Sound off
 8002198:	210c      	movs	r1, #12
 800219a:	4808      	ldr	r0, [pc, #32]	; (80021bc <TIM1_UP_TIM16_IRQHandler+0x30>)
 800219c:	f005 f9d0 	bl	8007540 <HAL_TIM_OC_Stop>
    HAL_GPIO_WritePin(GPIOA, VIBRO_PIN, GPIO_PIN_RESET); // Vibro off.
 80021a0:	2200      	movs	r2, #0
 80021a2:	2102      	movs	r1, #2
 80021a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a8:	f003 fb1e 	bl	80057e8 <HAL_GPIO_WritePin>

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <TIM1_UP_TIM16_IRQHandler+0x34>)
 80021ae:	f005 faa9 	bl	8007704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim16);
 80021b2:	4803      	ldr	r0, [pc, #12]	; (80021c0 <TIM1_UP_TIM16_IRQHandler+0x34>)
 80021b4:	f005 f856 	bl	8007264 <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20004dac 	.word	0x20004dac
 80021c0:	20004e08 	.word	0x20004e08

080021c4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021c8:	485d      	ldr	r0, [pc, #372]	; (8002340 <TIM6_IRQHandler+0x17c>)
 80021ca:	f005 fa9b 	bl	8007704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  if ((cfgData & 0x3F) > 0 ){  // Sound on.
 80021ce:	4b5d      	ldr	r3, [pc, #372]	; (8002344 <TIM6_IRQHandler+0x180>)
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f340 80a8 	ble.w	800232c <TIM6_IRQHandler+0x168>
	  switch (alarmLevel) {
 80021dc:	4b5a      	ldr	r3, [pc, #360]	; (8002348 <TIM6_IRQHandler+0x184>)
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	f200 80aa 	bhi.w	800233a <TIM6_IRQHandler+0x176>
 80021e6:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <TIM6_IRQHandler+0x28>)
 80021e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ec:	080021fd 	.word	0x080021fd
 80021f0:	08002205 	.word	0x08002205
 80021f4:	08002269 	.word	0x08002269
 80021f8:	080022cb 	.word	0x080022cb
	  case 0:
		  alarmCount = 0;
 80021fc:	4b53      	ldr	r3, [pc, #332]	; (800234c <TIM6_IRQHandler+0x188>)
 80021fe:	2200      	movs	r2, #0
 8002200:	801a      	strh	r2, [r3, #0]
		  break;
 8002202:	e09a      	b.n	800233a <TIM6_IRQHandler+0x176>
	  case 1:
		  if (alarmCount-- <= 0) {
 8002204:	4b51      	ldr	r3, [pc, #324]	; (800234c <TIM6_IRQHandler+0x188>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	1e5a      	subs	r2, r3, #1
 800220a:	b291      	uxth	r1, r2
 800220c:	4a4f      	ldr	r2, [pc, #316]	; (800234c <TIM6_IRQHandler+0x188>)
 800220e:	8011      	strh	r1, [r2, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d103      	bne.n	800221c <TIM6_IRQHandler+0x58>
			  alarmCount = 4;
 8002214:	4b4d      	ldr	r3, [pc, #308]	; (800234c <TIM6_IRQHandler+0x188>)
 8002216:	2204      	movs	r2, #4
 8002218:	801a      	strh	r2, [r3, #0]
					  HAL_GPIO_WritePin(GPIOA, VIBRO_PIN, GPIO_PIN_SET); // Vibro on.
					  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Vibro
				  }
			  }
		  }
		  break;
 800221a:	e089      	b.n	8002330 <TIM6_IRQHandler+0x16c>
			  if (alarmCount > 2) {
 800221c:	4b4b      	ldr	r3, [pc, #300]	; (800234c <TIM6_IRQHandler+0x188>)
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	2b02      	cmp	r3, #2
 8002222:	f240 8085 	bls.w	8002330 <TIM6_IRQHandler+0x16c>
				  if ((cfgData & 0x1) != 0) { // Check enabled flag sound level 1
 8002226:	4b47      	ldr	r3, [pc, #284]	; (8002344 <TIM6_IRQHandler+0x180>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <TIM6_IRQHandler+0x84>
					  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_3);
 8002232:	2108      	movs	r1, #8
 8002234:	4846      	ldr	r0, [pc, #280]	; (8002350 <TIM6_IRQHandler+0x18c>)
 8002236:	f005 f8a5 	bl	8007384 <HAL_TIM_OC_Start>
					  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
 800223a:	210c      	movs	r1, #12
 800223c:	4844      	ldr	r0, [pc, #272]	; (8002350 <TIM6_IRQHandler+0x18c>)
 800223e:	f005 f8a1 	bl	8007384 <HAL_TIM_OC_Start>
					  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 8002242:	4844      	ldr	r0, [pc, #272]	; (8002354 <TIM6_IRQHandler+0x190>)
 8002244:	f004 ffba 	bl	80071bc <HAL_TIM_Base_Start_IT>
				  if ((cfgData & 0x2) != 0) { // Check enabled flag vibro level 1
 8002248:	4b3e      	ldr	r3, [pc, #248]	; (8002344 <TIM6_IRQHandler+0x180>)
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d06d      	beq.n	8002330 <TIM6_IRQHandler+0x16c>
					  HAL_GPIO_WritePin(GPIOA, VIBRO_PIN, GPIO_PIN_SET); // Vibro on.
 8002254:	2201      	movs	r2, #1
 8002256:	2102      	movs	r1, #2
 8002258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800225c:	f003 fac4 	bl	80057e8 <HAL_GPIO_WritePin>
					  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Vibro
 8002260:	483c      	ldr	r0, [pc, #240]	; (8002354 <TIM6_IRQHandler+0x190>)
 8002262:	f004 ffab 	bl	80071bc <HAL_TIM_Base_Start_IT>
		  break;
 8002266:	e063      	b.n	8002330 <TIM6_IRQHandler+0x16c>
	  case 2:
			  if (alarmCount-- <= 0) {
 8002268:	4b38      	ldr	r3, [pc, #224]	; (800234c <TIM6_IRQHandler+0x188>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	1e5a      	subs	r2, r3, #1
 800226e:	b291      	uxth	r1, r2
 8002270:	4a36      	ldr	r2, [pc, #216]	; (800234c <TIM6_IRQHandler+0x188>)
 8002272:	8011      	strh	r1, [r2, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d103      	bne.n	8002280 <TIM6_IRQHandler+0xbc>
				  alarmCount = 5;
 8002278:	4b34      	ldr	r3, [pc, #208]	; (800234c <TIM6_IRQHandler+0x188>)
 800227a:	2205      	movs	r2, #5
 800227c:	801a      	strh	r2, [r3, #0]
						  HAL_GPIO_WritePin(GPIOA, VIBRO_PIN, GPIO_PIN_SET); // Vibro on.
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Vibro
					  }
				  }
			  }
		  break;
 800227e:	e059      	b.n	8002334 <TIM6_IRQHandler+0x170>
				  if (alarmCount > 2) {
 8002280:	4b32      	ldr	r3, [pc, #200]	; (800234c <TIM6_IRQHandler+0x188>)
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d955      	bls.n	8002334 <TIM6_IRQHandler+0x170>
					  if ((cfgData & 0x4) != 0) {  // Check enabled flag sound level 2
 8002288:	4b2e      	ldr	r3, [pc, #184]	; (8002344 <TIM6_IRQHandler+0x180>)
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <TIM6_IRQHandler+0xe6>
						  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_3);
 8002294:	2108      	movs	r1, #8
 8002296:	482e      	ldr	r0, [pc, #184]	; (8002350 <TIM6_IRQHandler+0x18c>)
 8002298:	f005 f874 	bl	8007384 <HAL_TIM_OC_Start>
						  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
 800229c:	210c      	movs	r1, #12
 800229e:	482c      	ldr	r0, [pc, #176]	; (8002350 <TIM6_IRQHandler+0x18c>)
 80022a0:	f005 f870 	bl	8007384 <HAL_TIM_OC_Start>
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 80022a4:	482b      	ldr	r0, [pc, #172]	; (8002354 <TIM6_IRQHandler+0x190>)
 80022a6:	f004 ff89 	bl	80071bc <HAL_TIM_Base_Start_IT>
					  if ((cfgData & 0x8) != 0) { // Check enabled flag vibro level 2
 80022aa:	4b26      	ldr	r3, [pc, #152]	; (8002344 <TIM6_IRQHandler+0x180>)
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d03e      	beq.n	8002334 <TIM6_IRQHandler+0x170>
						  HAL_GPIO_WritePin(GPIOA, VIBRO_PIN, GPIO_PIN_SET); // Vibro on.
 80022b6:	2201      	movs	r2, #1
 80022b8:	2102      	movs	r1, #2
 80022ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022be:	f003 fa93 	bl	80057e8 <HAL_GPIO_WritePin>
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Vibro
 80022c2:	4824      	ldr	r0, [pc, #144]	; (8002354 <TIM6_IRQHandler+0x190>)
 80022c4:	f004 ff7a 	bl	80071bc <HAL_TIM_Base_Start_IT>
		  break;
 80022c8:	e034      	b.n	8002334 <TIM6_IRQHandler+0x170>
	  case 3:
			  if (alarmCount-- <= 0) {
 80022ca:	4b20      	ldr	r3, [pc, #128]	; (800234c <TIM6_IRQHandler+0x188>)
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	1e5a      	subs	r2, r3, #1
 80022d0:	b291      	uxth	r1, r2
 80022d2:	4a1e      	ldr	r2, [pc, #120]	; (800234c <TIM6_IRQHandler+0x188>)
 80022d4:	8011      	strh	r1, [r2, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d103      	bne.n	80022e2 <TIM6_IRQHandler+0x11e>
				  alarmCount = 6;
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <TIM6_IRQHandler+0x188>)
 80022dc:	2206      	movs	r2, #6
 80022de:	801a      	strh	r2, [r3, #0]
						  HAL_GPIO_WritePin(GPIOA, VIBRO_PIN, GPIO_PIN_SET); // Vibro on.
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Vibro
					  }
				  }
			  }
		  break;
 80022e0:	e02a      	b.n	8002338 <TIM6_IRQHandler+0x174>
				  if (alarmCount > 2) {
 80022e2:	4b1a      	ldr	r3, [pc, #104]	; (800234c <TIM6_IRQHandler+0x188>)
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d926      	bls.n	8002338 <TIM6_IRQHandler+0x174>
					  if ((cfgData & 0x10) != 0) { // Check enabled flag sound level 3
 80022ea:	4b16      	ldr	r3, [pc, #88]	; (8002344 <TIM6_IRQHandler+0x180>)
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <TIM6_IRQHandler+0x148>
						  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_3);
 80022f6:	2108      	movs	r1, #8
 80022f8:	4815      	ldr	r0, [pc, #84]	; (8002350 <TIM6_IRQHandler+0x18c>)
 80022fa:	f005 f843 	bl	8007384 <HAL_TIM_OC_Start>
						  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
 80022fe:	210c      	movs	r1, #12
 8002300:	4813      	ldr	r0, [pc, #76]	; (8002350 <TIM6_IRQHandler+0x18c>)
 8002302:	f005 f83f 	bl	8007384 <HAL_TIM_OC_Start>
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 8002306:	4813      	ldr	r0, [pc, #76]	; (8002354 <TIM6_IRQHandler+0x190>)
 8002308:	f004 ff58 	bl	80071bc <HAL_TIM_Base_Start_IT>
					  if ((cfgData & 0x20) != 0) { // Check enabled flag vibro level 3
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <TIM6_IRQHandler+0x180>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00f      	beq.n	8002338 <TIM6_IRQHandler+0x174>
						  HAL_GPIO_WritePin(GPIOA, VIBRO_PIN, GPIO_PIN_SET); // Vibro on.
 8002318:	2201      	movs	r2, #1
 800231a:	2102      	movs	r1, #2
 800231c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002320:	f003 fa62 	bl	80057e8 <HAL_GPIO_WritePin>
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Vibro
 8002324:	480b      	ldr	r0, [pc, #44]	; (8002354 <TIM6_IRQHandler+0x190>)
 8002326:	f004 ff49 	bl	80071bc <HAL_TIM_Base_Start_IT>
		  break;
 800232a:	e005      	b.n	8002338 <TIM6_IRQHandler+0x174>
	  }
  }
 800232c:	bf00      	nop
 800232e:	e004      	b.n	800233a <TIM6_IRQHandler+0x176>
		  break;
 8002330:	bf00      	nop
 8002332:	e002      	b.n	800233a <TIM6_IRQHandler+0x176>
		  break;
 8002334:	bf00      	nop
 8002336:	e000      	b.n	800233a <TIM6_IRQHandler+0x176>
		  break;
 8002338:	bf00      	nop

  /* USER CODE END TIM6_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20004d54 	.word	0x20004d54
 8002344:	20004e00 	.word	0x20004e00
 8002348:	20004224 	.word	0x20004224
 800234c:	20004df8 	.word	0x20004df8
 8002350:	20004dac 	.word	0x20004dac
 8002354:	20004e08 	.word	0x20004e08

08002358 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */
  uint32_t realCount;

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 800235e:	4859      	ldr	r0, [pc, #356]	; (80024c4 <LPTIM2_IRQHandler+0x16c>)
 8002360:	f003 fc02 	bl	8005b68 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */
  avgRadInterval = 0;	// Average interval
 8002364:	4b58      	ldr	r3, [pc, #352]	; (80024c8 <LPTIM2_IRQHandler+0x170>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
  realCount = 0;		// Counter real data interval
 800236a:	2300      	movs	r3, #0
 800236c:	607b      	str	r3, [r7, #4]
  for ( int i = 0; i < radBufferSize; i++) {
 800236e:	2300      	movs	r3, #0
 8002370:	603b      	str	r3, [r7, #0]
 8002372:	e014      	b.n	800239e <LPTIM2_IRQHandler+0x46>
	  if (radBuffer[i] > 0) {	// Calculate only positive interval
 8002374:	4a55      	ldr	r2, [pc, #340]	; (80024cc <LPTIM2_IRQHandler+0x174>)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00b      	beq.n	8002398 <LPTIM2_IRQHandler+0x40>
		  realCount++;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3301      	adds	r3, #1
 8002384:	607b      	str	r3, [r7, #4]
		  avgRadInterval = avgRadInterval + radBuffer[i];
 8002386:	4a51      	ldr	r2, [pc, #324]	; (80024cc <LPTIM2_IRQHandler+0x174>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800238e:	4b4e      	ldr	r3, [pc, #312]	; (80024c8 <LPTIM2_IRQHandler+0x170>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4413      	add	r3, r2
 8002394:	4a4c      	ldr	r2, [pc, #304]	; (80024c8 <LPTIM2_IRQHandler+0x170>)
 8002396:	6013      	str	r3, [r2, #0]
  for ( int i = 0; i < radBufferSize; i++) {
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	3301      	adds	r3, #1
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b31      	cmp	r3, #49	; 0x31
 80023a2:	dde7      	ble.n	8002374 <LPTIM2_IRQHandler+0x1c>
	  }
  }
  if (realCount > 0) {
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d036      	beq.n	8002418 <LPTIM2_IRQHandler+0xc0>
	  avgRadInterval = avgRadInterval / realCount;
 80023aa:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <LPTIM2_IRQHandler+0x170>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	4a44      	ldr	r2, [pc, #272]	; (80024c8 <LPTIM2_IRQHandler+0x170>)
 80023b6:	6013      	str	r3, [r2, #0]
	  if (avgRadInterval < Thr3) {
 80023b8:	4b43      	ldr	r3, [pc, #268]	; (80024c8 <LPTIM2_IRQHandler+0x170>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b44      	ldr	r3, [pc, #272]	; (80024d0 <LPTIM2_IRQHandler+0x178>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d208      	bcs.n	80023d6 <LPTIM2_IRQHandler+0x7e>
			  alarmLevel = 3;			// Activate 3 alarm level
 80023c4:	4b43      	ldr	r3, [pc, #268]	; (80024d4 <LPTIM2_IRQHandler+0x17c>)
 80023c6:	2203      	movs	r2, #3
 80023c8:	801a      	strh	r2, [r3, #0]
			  alarmTime++;
 80023ca:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <LPTIM2_IRQHandler+0x180>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	3301      	adds	r3, #1
 80023d0:	4a41      	ldr	r2, [pc, #260]	; (80024d8 <LPTIM2_IRQHandler+0x180>)
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	e020      	b.n	8002418 <LPTIM2_IRQHandler+0xc0>
	  } else {
		  if (avgRadInterval < Thr2) {
 80023d6:	4b3c      	ldr	r3, [pc, #240]	; (80024c8 <LPTIM2_IRQHandler+0x170>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b40      	ldr	r3, [pc, #256]	; (80024dc <LPTIM2_IRQHandler+0x184>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d208      	bcs.n	80023f4 <LPTIM2_IRQHandler+0x9c>
				  alarmLevel = 2;		// Activate 2 alarm level
 80023e2:	4b3c      	ldr	r3, [pc, #240]	; (80024d4 <LPTIM2_IRQHandler+0x17c>)
 80023e4:	2202      	movs	r2, #2
 80023e6:	801a      	strh	r2, [r3, #0]
				  alarmTime++;
 80023e8:	4b3b      	ldr	r3, [pc, #236]	; (80024d8 <LPTIM2_IRQHandler+0x180>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	4a3a      	ldr	r2, [pc, #232]	; (80024d8 <LPTIM2_IRQHandler+0x180>)
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e011      	b.n	8002418 <LPTIM2_IRQHandler+0xc0>
		  } else {
			  if (avgRadInterval < Thr1) {
 80023f4:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <LPTIM2_IRQHandler+0x170>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <LPTIM2_IRQHandler+0x188>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d208      	bcs.n	8002412 <LPTIM2_IRQHandler+0xba>
					  alarmLevel = 1;	// Activate 1 alarm level
 8002400:	4b34      	ldr	r3, [pc, #208]	; (80024d4 <LPTIM2_IRQHandler+0x17c>)
 8002402:	2201      	movs	r2, #1
 8002404:	801a      	strh	r2, [r3, #0]
					  alarmTime++;
 8002406:	4b34      	ldr	r3, [pc, #208]	; (80024d8 <LPTIM2_IRQHandler+0x180>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	3301      	adds	r3, #1
 800240c:	4a32      	ldr	r2, [pc, #200]	; (80024d8 <LPTIM2_IRQHandler+0x180>)
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	e002      	b.n	8002418 <LPTIM2_IRQHandler+0xc0>
			  } else {
				  alarmLevel = 0;		// Disable alarm sound
 8002412:	4b30      	ldr	r3, [pc, #192]	; (80024d4 <LPTIM2_IRQHandler+0x17c>)
 8002414:	2200      	movs	r2, #0
 8002416:	801a      	strh	r2, [r3, #0]
			  }
		  }
	  }
  }
  /* Record log data */
  if (oldAlarmLevel != alarmLevel) {
 8002418:	4b32      	ldr	r3, [pc, #200]	; (80024e4 <LPTIM2_IRQHandler+0x18c>)
 800241a:	881a      	ldrh	r2, [r3, #0]
 800241c:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <LPTIM2_IRQHandler+0x17c>)
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d04b      	beq.n	80024bc <LPTIM2_IRQHandler+0x164>
	  logDat[logIndex].timeData = HAL_GetTick() / 1000;
 8002424:	f000 f930 	bl	8002688 <HAL_GetTick>
 8002428:	4603      	mov	r3, r0
 800242a:	4a2f      	ldr	r2, [pc, #188]	; (80024e8 <LPTIM2_IRQHandler+0x190>)
 800242c:	7812      	ldrb	r2, [r2, #0]
 800242e:	4610      	mov	r0, r2
 8002430:	4a2e      	ldr	r2, [pc, #184]	; (80024ec <LPTIM2_IRQHandler+0x194>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	099a      	lsrs	r2, r3, #6
 8002438:	492d      	ldr	r1, [pc, #180]	; (80024f0 <LPTIM2_IRQHandler+0x198>)
 800243a:	4603      	mov	r3, r0
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4403      	add	r3, r0
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	601a      	str	r2, [r3, #0]
	  logDat[logIndex].eventType = alarmLevel;
 8002446:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <LPTIM2_IRQHandler+0x17c>)
 8002448:	881a      	ldrh	r2, [r3, #0]
 800244a:	4b27      	ldr	r3, [pc, #156]	; (80024e8 <LPTIM2_IRQHandler+0x190>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	4619      	mov	r1, r3
 8002450:	b2d0      	uxtb	r0, r2
 8002452:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <LPTIM2_IRQHandler+0x198>)
 8002454:	460b      	mov	r3, r1
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	440b      	add	r3, r1
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	3304      	adds	r3, #4
 8002460:	4602      	mov	r2, r0
 8002462:	701a      	strb	r2, [r3, #0]
	  logDat[logIndex].event_data = avgRadInterval;
 8002464:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <LPTIM2_IRQHandler+0x190>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <LPTIM2_IRQHandler+0x170>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4920      	ldr	r1, [pc, #128]	; (80024f0 <LPTIM2_IRQHandler+0x198>)
 8002470:	4603      	mov	r3, r0
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4403      	add	r3, r0
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	3308      	adds	r3, #8
 800247c:	601a      	str	r2, [r3, #0]
	  if (logIndex < logSize - 1) {
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <LPTIM2_IRQHandler+0x190>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2bc6      	cmp	r3, #198	; 0xc6
 8002484:	d806      	bhi.n	8002494 <LPTIM2_IRQHandler+0x13c>
		  logIndex++;
 8002486:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <LPTIM2_IRQHandler+0x190>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	3301      	adds	r3, #1
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <LPTIM2_IRQHandler+0x190>)
 8002490:	701a      	strb	r2, [r3, #0]
 8002492:	e002      	b.n	800249a <LPTIM2_IRQHandler+0x142>
	  } else {
		  logIndex = 0;
 8002494:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <LPTIM2_IRQHandler+0x190>)
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
	  }
	  if (++logRecords > logSize) {
 800249a:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <LPTIM2_IRQHandler+0x19c>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	3301      	adds	r3, #1
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <LPTIM2_IRQHandler+0x19c>)
 80024a4:	701a      	strb	r2, [r3, #0]
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <LPTIM2_IRQHandler+0x19c>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2bc8      	cmp	r3, #200	; 0xc8
 80024ac:	d902      	bls.n	80024b4 <LPTIM2_IRQHandler+0x15c>
		  logRecords = logSize;
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <LPTIM2_IRQHandler+0x19c>)
 80024b0:	22c8      	movs	r2, #200	; 0xc8
 80024b2:	701a      	strb	r2, [r3, #0]
	  }
	  oldAlarmLevel = alarmLevel;
 80024b4:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <LPTIM2_IRQHandler+0x17c>)
 80024b6:	881a      	ldrh	r2, [r3, #0]
 80024b8:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <LPTIM2_IRQHandler+0x18c>)
 80024ba:	801a      	strh	r2, [r3, #0]
  }
  //uint8_t s[100];
  //sprintf(s, "Avg: %d, Cnt: %d, alarm: %d\r\n", avgRadInterval, realCount, alarmLevel);
  //HAL_UART_Transmit(&huart1, s, strlen((char *)s), 1000);
  /* USER CODE END LPTIM2_IRQn 1 */
}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	200042ec 	.word	0x200042ec
 80024c8:	20004170 	.word	0x20004170
 80024cc:	2000408c 	.word	0x2000408c
 80024d0:	2000006c 	.word	0x2000006c
 80024d4:	20004224 	.word	0x20004224
 80024d8:	2000005c 	.word	0x2000005c
 80024dc:	20000068 	.word	0x20000068
 80024e0:	20000064 	.word	0x20000064
 80024e4:	20000000 	.word	0x20000000
 80024e8:	20004156 	.word	0x20004156
 80024ec:	10624dd3 	.word	0x10624dd3
 80024f0:	200043ac 	.word	0x200043ac
 80024f4:	20004157 	.word	0x20004157

080024f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024fc:	4b17      	ldr	r3, [pc, #92]	; (800255c <SystemInit+0x64>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	4a16      	ldr	r2, [pc, #88]	; (800255c <SystemInit+0x64>)
 8002504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800250c:	4b14      	ldr	r3, [pc, #80]	; (8002560 <SystemInit+0x68>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a13      	ldr	r2, [pc, #76]	; (8002560 <SystemInit+0x68>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002518:	4b11      	ldr	r3, [pc, #68]	; (8002560 <SystemInit+0x68>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800251e:	4b10      	ldr	r3, [pc, #64]	; (8002560 <SystemInit+0x68>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a0f      	ldr	r2, [pc, #60]	; (8002560 <SystemInit+0x68>)
 8002524:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002528:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800252c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <SystemInit+0x68>)
 8002530:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002534:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002536:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <SystemInit+0x68>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a09      	ldr	r2, [pc, #36]	; (8002560 <SystemInit+0x68>)
 800253c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002540:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002542:	4b07      	ldr	r3, [pc, #28]	; (8002560 <SystemInit+0x68>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <SystemInit+0x64>)
 800254a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800254e:	609a      	str	r2, [r3, #8]
#endif
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000ed00 	.word	0xe000ed00
 8002560:	40021000 	.word	0x40021000

08002564 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800259c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002568:	f7ff ffc6 	bl	80024f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800256c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800256e:	e003      	b.n	8002578 <LoopCopyDataInit>

08002570 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002572:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002574:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002576:	3104      	adds	r1, #4

08002578 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002578:	480a      	ldr	r0, [pc, #40]	; (80025a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800257c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800257e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002580:	d3f6      	bcc.n	8002570 <CopyDataInit>
	ldr	r2, =_sbss
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8002584:	e002      	b.n	800258c <LoopFillZerobss>

08002586 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002586:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002588:	f842 3b04 	str.w	r3, [r2], #4

0800258c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <LoopForever+0x16>)
	cmp	r2, r3
 800258e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002590:	d3f9      	bcc.n	8002586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002592:	f006 fde7 	bl	8009164 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002596:	f7fe f913 	bl	80007c0 <main>

0800259a <LoopForever>:

LoopForever:
    b LoopForever
 800259a:	e7fe      	b.n	800259a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800259c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80025a0:	08009248 	.word	0x08009248
	ldr	r0, =_sdata
 80025a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80025a8:	20000034 	.word	0x20000034
	ldr	r2, =_sbss
 80025ac:	20000034 	.word	0x20000034
	ldr	r3, = _ebss
 80025b0:	20004e70 	.word	0x20004e70

080025b4 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025b4:	e7fe      	b.n	80025b4 <COMP_IRQHandler>

080025b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c0:	2003      	movs	r0, #3
 80025c2:	f002 f935 	bl	8004830 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025c6:	2000      	movs	r0, #0
 80025c8:	f000 f80e 	bl	80025e8 <HAL_InitTick>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	71fb      	strb	r3, [r7, #7]
 80025d6:	e001      	b.n	80025dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025d8:	f7ff fa20 	bl	8001a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025dc:	79fb      	ldrb	r3, [r7, #7]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80025f4:	4b17      	ldr	r3, [pc, #92]	; (8002654 <HAL_InitTick+0x6c>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d023      	beq.n	8002644 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025fc:	4b16      	ldr	r3, [pc, #88]	; (8002658 <HAL_InitTick+0x70>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b14      	ldr	r3, [pc, #80]	; (8002654 <HAL_InitTick+0x6c>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4619      	mov	r1, r3
 8002606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800260a:	fbb3 f3f1 	udiv	r3, r3, r1
 800260e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002612:	4618      	mov	r0, r3
 8002614:	f002 f941 	bl	800489a <HAL_SYSTICK_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10f      	bne.n	800263e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b0f      	cmp	r3, #15
 8002622:	d809      	bhi.n	8002638 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002624:	2200      	movs	r2, #0
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800262c:	f002 f90b 	bl	8004846 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002630:	4a0a      	ldr	r2, [pc, #40]	; (800265c <HAL_InitTick+0x74>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e007      	b.n	8002648 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
 800263c:	e004      	b.n	8002648 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
 8002642:	e001      	b.n	8002648 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000010 	.word	0x20000010
 8002658:	20000008 	.word	0x20000008
 800265c:	2000000c 	.word	0x2000000c

08002660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_IncTick+0x20>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_IncTick+0x24>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4413      	add	r3, r2
 8002670:	4a04      	ldr	r2, [pc, #16]	; (8002684 <HAL_IncTick+0x24>)
 8002672:	6013      	str	r3, [r2, #0]
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000010 	.word	0x20000010
 8002684:	20004e6c 	.word	0x20004e6c

08002688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return uwTick;
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <HAL_GetTick+0x14>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20004e6c 	.word	0x20004e6c

080026a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a8:	f7ff ffee 	bl	8002688 <HAL_GetTick>
 80026ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b8:	d005      	beq.n	80026c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <HAL_Delay+0x44>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4413      	add	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026c6:	bf00      	nop
 80026c8:	f7ff ffde 	bl	8002688 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d8f7      	bhi.n	80026c8 <HAL_Delay+0x28>
  {
  }
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000010 	.word	0x20000010

080026e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	609a      	str	r2, [r3, #8]
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	609a      	str	r2, [r3, #8]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002750:	b480      	push	{r7}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	3360      	adds	r3, #96	; 0x60
 8002762:	461a      	mov	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <LL_ADC_SetOffset+0x44>)
 8002772:	4013      	ands	r3, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	4313      	orrs	r3, r2
 8002780:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002788:	bf00      	nop
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	03fff000 	.word	0x03fff000

08002798 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3360      	adds	r3, #96	; 0x60
 80027a6:	461a      	mov	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3360      	adds	r3, #96	; 0x60
 80027d4:	461a      	mov	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027ee:	bf00      	nop
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	615a      	str	r2, [r3, #20]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002846:	b480      	push	{r7}
 8002848:	b087      	sub	sp, #28
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3330      	adds	r3, #48	; 0x30
 8002856:	461a      	mov	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	0a1b      	lsrs	r3, r3, #8
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	4413      	add	r3, r2
 8002864:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	211f      	movs	r1, #31
 8002872:	fa01 f303 	lsl.w	r3, r1, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	401a      	ands	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	0e9b      	lsrs	r3, r3, #26
 800287e:	f003 011f 	and.w	r1, r3, #31
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	431a      	orrs	r2, r3
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002892:	bf00      	nop
 8002894:	371c      	adds	r7, #28
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3314      	adds	r3, #20
 80028d4:	461a      	mov	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	0e5b      	lsrs	r3, r3, #25
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	4413      	add	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	0d1b      	lsrs	r3, r3, #20
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	2107      	movs	r1, #7
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	401a      	ands	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	0d1b      	lsrs	r3, r3, #20
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	fa01 f303 	lsl.w	r3, r1, r3
 8002908:	431a      	orrs	r2, r3
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800290e:	bf00      	nop
 8002910:	371c      	adds	r7, #28
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002934:	43db      	mvns	r3, r3
 8002936:	401a      	ands	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f003 0318 	and.w	r3, r3, #24
 800293e:	4908      	ldr	r1, [pc, #32]	; (8002960 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002940:	40d9      	lsrs	r1, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	400b      	ands	r3, r1
 8002946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294a:	431a      	orrs	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	0007ffff 	.word	0x0007ffff

08002964 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 031f 	and.w	r3, r3, #31
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80029ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6093      	str	r3, [r2, #8]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029d4:	d101      	bne.n	80029da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80029f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a24:	d101      	bne.n	8002a2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a4c:	f043 0201 	orr.w	r2, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a74:	f043 0202 	orr.w	r2, r3, #2
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <LL_ADC_IsEnabled+0x18>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <LL_ADC_IsEnabled+0x1a>
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d101      	bne.n	8002ac6 <LL_ADC_IsDisableOngoing+0x18>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <LL_ADC_IsDisableOngoing+0x1a>
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ae4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ae8:	f043 0204 	orr.w	r2, r3, #4
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b10:	f043 0210 	orr.w	r2, r3, #16
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d101      	bne.n	8002b3c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b5e:	f043 0220 	orr.w	r2, r3, #32
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d101      	bne.n	8002b8a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e131      	b.n	8002e16 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7fe ff4f 	bl	8001a64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fef1 	bl	80029c0 <LL_ADC_IsDeepPowerDownEnabled>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d004      	beq.n	8002bee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fed7 	bl	800299c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff ff0c 	bl	8002a10 <LL_ADC_IsInternalRegulatorEnabled>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d115      	bne.n	8002c2a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fef0 	bl	80029e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c08:	4b85      	ldr	r3, [pc, #532]	; (8002e20 <HAL_ADC_Init+0x288>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	099b      	lsrs	r3, r3, #6
 8002c0e:	4a85      	ldr	r2, [pc, #532]	; (8002e24 <HAL_ADC_Init+0x28c>)
 8002c10:	fba2 2303 	umull	r2, r3, r2, r3
 8002c14:	099b      	lsrs	r3, r3, #6
 8002c16:	3301      	adds	r3, #1
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c1c:	e002      	b.n	8002c24 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f9      	bne.n	8002c1e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff feee 	bl	8002a10 <LL_ADC_IsInternalRegulatorEnabled>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10d      	bne.n	8002c56 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3e:	f043 0210 	orr.w	r2, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4a:	f043 0201 	orr.w	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ff62 	bl	8002b24 <LL_ADC_REG_IsConversionOngoing>
 8002c60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 80ca 	bne.w	8002e04 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f040 80c6 	bne.w	8002e04 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c80:	f043 0202 	orr.w	r2, r3, #2
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fefb 	bl	8002a88 <LL_ADC_IsEnabled>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d110      	bne.n	8002cba <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c98:	4863      	ldr	r0, [pc, #396]	; (8002e28 <HAL_ADC_Init+0x290>)
 8002c9a:	f7ff fef5 	bl	8002a88 <LL_ADC_IsEnabled>
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	4862      	ldr	r0, [pc, #392]	; (8002e2c <HAL_ADC_Init+0x294>)
 8002ca2:	f7ff fef1 	bl	8002a88 <LL_ADC_IsEnabled>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4323      	orrs	r3, r4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d105      	bne.n	8002cba <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	485e      	ldr	r0, [pc, #376]	; (8002e30 <HAL_ADC_Init+0x298>)
 8002cb6:	f7ff fd17 	bl	80026e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	7e5b      	ldrb	r3, [r3, #25]
 8002cbe:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cc4:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002cca:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002cd0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd8:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d106      	bne.n	8002cf6 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	3b01      	subs	r3, #1
 8002cee:	045b      	lsls	r3, r3, #17
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	4b46      	ldr	r3, [pc, #280]	; (8002e34 <HAL_ADC_Init+0x29c>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	69b9      	ldr	r1, [r7, #24]
 8002d22:	430b      	orrs	r3, r1
 8002d24:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fefa 	bl	8002b24 <LL_ADC_REG_IsConversionOngoing>
 8002d30:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff ff1b 	bl	8002b72 <LL_ADC_INJ_IsConversionOngoing>
 8002d3c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d13d      	bne.n	8002dc0 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d13a      	bne.n	8002dc0 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d4e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d56:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d66:	f023 0302 	bic.w	r3, r3, #2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	69b9      	ldr	r1, [r7, #24]
 8002d70:	430b      	orrs	r3, r1
 8002d72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d118      	bne.n	8002db0 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d88:	f023 0304 	bic.w	r3, r3, #4
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d94:	4311      	orrs	r1, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d9a:	4311      	orrs	r1, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002da0:	430a      	orrs	r2, r1
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0201 	orr.w	r2, r2, #1
 8002dac:	611a      	str	r2, [r3, #16]
 8002dae:	e007      	b.n	8002dc0 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d10c      	bne.n	8002de2 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f023 010f 	bic.w	r1, r3, #15
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	1e5a      	subs	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
 8002de0:	e007      	b.n	8002df2 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 020f 	bic.w	r2, r2, #15
 8002df0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df6:	f023 0303 	bic.w	r3, r3, #3
 8002dfa:	f043 0201 	orr.w	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	655a      	str	r2, [r3, #84]	; 0x54
 8002e02:	e007      	b.n	8002e14 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e08:	f043 0210 	orr.w	r2, r3, #16
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e14:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3724      	adds	r7, #36	; 0x24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd90      	pop	{r4, r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000008 	.word	0x20000008
 8002e24:	053e2d63 	.word	0x053e2d63
 8002e28:	50040000 	.word	0x50040000
 8002e2c:	50040100 	.word	0x50040100
 8002e30:	50040300 	.word	0x50040300
 8002e34:	fff0c007 	.word	0xfff0c007

08002e38 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e40:	4893      	ldr	r0, [pc, #588]	; (8003090 <HAL_ADC_Start_IT+0x258>)
 8002e42:	f7ff fd8f 	bl	8002964 <LL_ADC_GetMultimode>
 8002e46:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fe69 	bl	8002b24 <LL_ADC_REG_IsConversionOngoing>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 8111 	bne.w	800307c <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_ADC_Start_IT+0x30>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e10e      	b.n	8003086 <HAL_ADC_Start_IT+0x24e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f001 f92f 	bl	80040d4 <ADC_Enable>
 8002e76:	4603      	mov	r3, r0
 8002e78:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f040 80f8 	bne.w	8003072 <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e8a:	f023 0301 	bic.w	r3, r3, #1
 8002e8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a7e      	ldr	r2, [pc, #504]	; (8003094 <HAL_ADC_Start_IT+0x25c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d002      	beq.n	8002ea6 <HAL_ADC_Start_IT+0x6e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	e000      	b.n	8002ea8 <HAL_ADC_Start_IT+0x70>
 8002ea6:	4b7c      	ldr	r3, [pc, #496]	; (8003098 <HAL_ADC_Start_IT+0x260>)
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d002      	beq.n	8002eb6 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d006      	beq.n	8002edc <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed2:	f023 0206 	bic.w	r2, r3, #6
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	659a      	str	r2, [r3, #88]	; 0x58
 8002eda:	e002      	b.n	8002ee2 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	221c      	movs	r2, #28
 8002ee8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 021c 	bic.w	r2, r2, #28
 8002f00:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d108      	bne.n	8002f1c <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 0208 	orr.w	r2, r2, #8
 8002f18:	605a      	str	r2, [r3, #4]
          break;
 8002f1a:	e008      	b.n	8002f2e <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0204 	orr.w	r2, r2, #4
 8002f2a:	605a      	str	r2, [r3, #4]
          break;
 8002f2c:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d107      	bne.n	8002f46 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0210 	orr.w	r2, r2, #16
 8002f44:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a52      	ldr	r2, [pc, #328]	; (8003094 <HAL_ADC_Start_IT+0x25c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d002      	beq.n	8002f56 <HAL_ADC_Start_IT+0x11e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	e000      	b.n	8002f58 <HAL_ADC_Start_IT+0x120>
 8002f56:	4b50      	ldr	r3, [pc, #320]	; (8003098 <HAL_ADC_Start_IT+0x260>)
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d008      	beq.n	8002f72 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b05      	cmp	r3, #5
 8002f6a:	d002      	beq.n	8002f72 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	2b09      	cmp	r3, #9
 8002f70:	d13b      	bne.n	8002fea <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d02d      	beq.n	8002fdc <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d110      	bne.n	8002fba <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0220 	bic.w	r2, r2, #32
 8002fa6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fb6:	605a      	str	r2, [r3, #4]
              break;
 8002fb8:	e011      	b.n	8002fde <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fc8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0220 	orr.w	r2, r2, #32
 8002fd8:	605a      	str	r2, [r3, #4]
              break;
 8002fda:	e000      	b.n	8002fde <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8002fdc:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fd76 	bl	8002ad4 <LL_ADC_REG_StartConversion>
 8002fe8:	e04c      	b.n	8003084 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a26      	ldr	r2, [pc, #152]	; (8003094 <HAL_ADC_Start_IT+0x25c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d002      	beq.n	8003006 <HAL_ADC_Start_IT+0x1ce>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	e000      	b.n	8003008 <HAL_ADC_Start_IT+0x1d0>
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_ADC_Start_IT+0x260>)
 8003008:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d035      	beq.n	8003082 <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800301e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	2b08      	cmp	r3, #8
 800302c:	d110      	bne.n	8003050 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0220 	bic.w	r2, r2, #32
 800303c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800304c:	605a      	str	r2, [r3, #4]
              break;
 800304e:	e019      	b.n	8003084 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800305e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0220 	orr.w	r2, r2, #32
 800306e:	605a      	str	r2, [r3, #4]
              break;
 8003070:	e008      	b.n	8003084 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800307a:	e003      	b.n	8003084 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800307c:	2302      	movs	r3, #2
 800307e:	75fb      	strb	r3, [r7, #23]
 8003080:	e000      	b.n	8003084 <HAL_ADC_Start_IT+0x24c>
        }
 8003082:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8003084:	7dfb      	ldrb	r3, [r7, #23]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	50040300 	.word	0x50040300
 8003094:	50040100 	.word	0x50040100
 8003098:	50040000 	.word	0x50040000

0800309c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030a8:	4850      	ldr	r0, [pc, #320]	; (80031ec <HAL_ADC_Start_DMA+0x150>)
 80030aa:	f7ff fc5b 	bl	8002964 <LL_ADC_GetMultimode>
 80030ae:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fd35 	bl	8002b24 <LL_ADC_REG_IsConversionOngoing>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f040 808e 	bne.w	80031de <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_ADC_Start_DMA+0x34>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e089      	b.n	80031e4 <HAL_ADC_Start_DMA+0x148>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d005      	beq.n	80030ea <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b05      	cmp	r3, #5
 80030e2:	d002      	beq.n	80030ea <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b09      	cmp	r3, #9
 80030e8:	d172      	bne.n	80031d0 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fff2 	bl	80040d4 <ADC_Enable>
 80030f0:	4603      	mov	r3, r0
 80030f2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80030f4:	7dfb      	ldrb	r3, [r7, #23]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d165      	bne.n	80031c6 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003102:	f023 0301 	bic.w	r3, r3, #1
 8003106:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a37      	ldr	r2, [pc, #220]	; (80031f0 <HAL_ADC_Start_DMA+0x154>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d002      	beq.n	800311e <HAL_ADC_Start_DMA+0x82>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	e000      	b.n	8003120 <HAL_ADC_Start_DMA+0x84>
 800311e:	4b35      	ldr	r3, [pc, #212]	; (80031f4 <HAL_ADC_Start_DMA+0x158>)
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	4293      	cmp	r3, r2
 8003126:	d002      	beq.n	800312e <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d105      	bne.n	800313a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003132:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d006      	beq.n	8003154 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314a:	f023 0206 	bic.w	r2, r3, #6
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	659a      	str	r2, [r3, #88]	; 0x58
 8003152:	e002      	b.n	800315a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315e:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <HAL_ADC_Start_DMA+0x15c>)
 8003160:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003166:	4a25      	ldr	r2, [pc, #148]	; (80031fc <HAL_ADC_Start_DMA+0x160>)
 8003168:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316e:	4a24      	ldr	r2, [pc, #144]	; (8003200 <HAL_ADC_Start_DMA+0x164>)
 8003170:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	221c      	movs	r2, #28
 8003178:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0210 	orr.w	r2, r2, #16
 8003190:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f042 0201 	orr.w	r2, r2, #1
 80031a0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3340      	adds	r3, #64	; 0x40
 80031ac:	4619      	mov	r1, r3
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f001 fcc9 	bl	8004b48 <HAL_DMA_Start_IT>
 80031b6:	4603      	mov	r3, r0
 80031b8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fc88 	bl	8002ad4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80031c4:	e00d      	b.n	80031e2 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80031ce:	e008      	b.n	80031e2 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80031dc:	e001      	b.n	80031e2 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031de:	2302      	movs	r3, #2
 80031e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	50040300 	.word	0x50040300
 80031f0:	50040100 	.word	0x50040100
 80031f4:	50040000 	.word	0x50040000
 80031f8:	08004257 	.word	0x08004257
 80031fc:	0800432f 	.word	0x0800432f
 8003200:	0800434b 	.word	0x0800434b

08003204 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_ADC_Stop_DMA+0x16>
 8003216:	2302      	movs	r3, #2
 8003218:	e051      	b.n	80032be <HAL_ADC_Stop_DMA+0xba>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003222:	2103      	movs	r1, #3
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fe99 	bl	8003f5c <ADC_ConversionStop>
 800322a:	4603      	mov	r3, r0
 800322c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d13f      	bne.n	80032b4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003248:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d10f      	bne.n	8003272 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003256:	4618      	mov	r0, r3
 8003258:	f001 fcd6 	bl	8004c08 <HAL_DMA_Abort>
 800325c:	4603      	mov	r3, r0
 800325e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d005      	beq.n	8003272 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0210 	bic.w	r2, r2, #16
 8003280:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d105      	bne.n	8003294 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 ff85 	bl	8004198 <ADC_Disable>
 800328e:	4603      	mov	r3, r0
 8003290:	73fb      	strb	r3, [r7, #15]
 8003292:	e002      	b.n	800329a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 ff7f 	bl	8004198 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d109      	bne.n	80032b4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	f043 0201 	orr.w	r2, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08a      	sub	sp, #40	; 0x28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80032e8:	2300      	movs	r3, #0
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032fc:	4882      	ldr	r0, [pc, #520]	; (8003508 <HAL_ADC_IRQHandler+0x228>)
 80032fe:	f7ff fb31 	bl	8002964 <LL_ADC_GetMultimode>
 8003302:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d017      	beq.n	800333e <HAL_ADC_IRQHandler+0x5e>
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d012      	beq.n	800333e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b00      	cmp	r3, #0
 8003322:	d105      	bne.n	8003330 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003328:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f001 f8ff 	bl	8004534 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2202      	movs	r2, #2
 800333c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d004      	beq.n	8003352 <HAL_ADC_IRQHandler+0x72>
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10a      	bne.n	8003368 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8083 	beq.w	8003464 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d07d      	beq.n	8003464 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	d105      	bne.n	8003380 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003378:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fa4b 	bl	8002820 <LL_ADC_REG_IsTriggerSourceSWStart>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d062      	beq.n	8003456 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a5d      	ldr	r2, [pc, #372]	; (800350c <HAL_ADC_IRQHandler+0x22c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d002      	beq.n	80033a0 <HAL_ADC_IRQHandler+0xc0>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	e000      	b.n	80033a2 <HAL_ADC_IRQHandler+0xc2>
 80033a0:	4b5b      	ldr	r3, [pc, #364]	; (8003510 <HAL_ADC_IRQHandler+0x230>)
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d008      	beq.n	80033bc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d002      	beq.n	80033bc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b09      	cmp	r3, #9
 80033ba:	d104      	bne.n	80033c6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	623b      	str	r3, [r7, #32]
 80033c4:	e00c      	b.n	80033e0 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a50      	ldr	r2, [pc, #320]	; (800350c <HAL_ADC_IRQHandler+0x22c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d002      	beq.n	80033d6 <HAL_ADC_IRQHandler+0xf6>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	e000      	b.n	80033d8 <HAL_ADC_IRQHandler+0xf8>
 80033d6:	4b4e      	ldr	r3, [pc, #312]	; (8003510 <HAL_ADC_IRQHandler+0x230>)
 80033d8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d135      	bne.n	8003456 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d12e      	bne.n	8003456 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fb91 	bl	8002b24 <LL_ADC_REG_IsConversionOngoing>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d11a      	bne.n	800343e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 020c 	bic.w	r2, r2, #12
 8003416:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d112      	bne.n	8003456 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003434:	f043 0201 	orr.w	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	655a      	str	r2, [r3, #84]	; 0x54
 800343c:	e00b      	b.n	8003456 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003442:	f043 0210 	orr.w	r2, r3, #16
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344e:	f043 0201 	orr.w	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f95c 	bl	8003714 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	220c      	movs	r2, #12
 8003462:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d004      	beq.n	8003478 <HAL_ADC_IRQHandler+0x198>
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10b      	bne.n	8003490 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 809f 	beq.w	80035c2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 8099 	beq.w	80035c2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	d105      	bne.n	80034a8 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff f9f6 	bl	800289e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80034b2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff f9b1 	bl	8002820 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034be:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a11      	ldr	r2, [pc, #68]	; (800350c <HAL_ADC_IRQHandler+0x22c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d002      	beq.n	80034d0 <HAL_ADC_IRQHandler+0x1f0>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	e000      	b.n	80034d2 <HAL_ADC_IRQHandler+0x1f2>
 80034d0:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <HAL_ADC_IRQHandler+0x230>)
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6812      	ldr	r2, [r2, #0]
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d008      	beq.n	80034ec <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b06      	cmp	r3, #6
 80034e4:	d002      	beq.n	80034ec <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b07      	cmp	r3, #7
 80034ea:	d104      	bne.n	80034f6 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	623b      	str	r3, [r7, #32]
 80034f4:	e013      	b.n	800351e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a04      	ldr	r2, [pc, #16]	; (800350c <HAL_ADC_IRQHandler+0x22c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d009      	beq.n	8003514 <HAL_ADC_IRQHandler+0x234>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	e007      	b.n	8003516 <HAL_ADC_IRQHandler+0x236>
 8003506:	bf00      	nop
 8003508:	50040300 	.word	0x50040300
 800350c:	50040100 	.word	0x50040100
 8003510:	50040000 	.word	0x50040000
 8003514:	4b7d      	ldr	r3, [pc, #500]	; (800370c <HAL_ADC_IRQHandler+0x42c>)
 8003516:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d047      	beq.n	80035b4 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d007      	beq.n	800353e <HAL_ADC_IRQHandler+0x25e>
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d03f      	beq.n	80035b4 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800353a:	2b00      	cmp	r3, #0
 800353c:	d13a      	bne.n	80035b4 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	2b40      	cmp	r3, #64	; 0x40
 800354a:	d133      	bne.n	80035b4 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d12e      	bne.n	80035b4 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fb09 	bl	8002b72 <LL_ADC_INJ_IsConversionOngoing>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d11a      	bne.n	800359c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003574:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358a:	2b00      	cmp	r3, #0
 800358c:	d112      	bne.n	80035b4 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003592:	f043 0201 	orr.w	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
 800359a:	e00b      	b.n	80035b4 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a0:	f043 0210 	orr.w	r2, r3, #16
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ac:	f043 0201 	orr.w	r2, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 ff95 	bl	80044e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2260      	movs	r2, #96	; 0x60
 80035c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d011      	beq.n	80035f0 <HAL_ADC_IRQHandler+0x310>
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00c      	beq.n	80035f0 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f8aa 	bl	800373c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2280      	movs	r2, #128	; 0x80
 80035ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d012      	beq.n	8003620 <HAL_ADC_IRQHandler+0x340>
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00d      	beq.n	8003620 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003608:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 ff7b 	bl	800450c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800361e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003626:	2b00      	cmp	r3, #0
 8003628:	d012      	beq.n	8003650 <HAL_ADC_IRQHandler+0x370>
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00d      	beq.n	8003650 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 ff6d 	bl	8004520 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800364e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b00      	cmp	r3, #0
 8003658:	d036      	beq.n	80036c8 <HAL_ADC_IRQHandler+0x3e8>
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b00      	cmp	r3, #0
 8003662:	d031      	beq.n	80036c8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003668:	2b00      	cmp	r3, #0
 800366a:	d102      	bne.n	8003672 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800366c:	2301      	movs	r3, #1
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
 8003670:	e014      	b.n	800369c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003678:	4825      	ldr	r0, [pc, #148]	; (8003710 <HAL_ADC_IRQHandler+0x430>)
 800367a:	f7ff f981 	bl	8002980 <LL_ADC_GetMultiDMATransfer>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00b      	beq.n	800369c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003684:	2301      	movs	r3, #1
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
 8003688:	e008      	b.n	800369c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003698:	2301      	movs	r3, #1
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d10e      	bne.n	80036c0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b2:	f043 0202 	orr.w	r2, r3, #2
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f848 	bl	8003750 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2210      	movs	r2, #16
 80036c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d018      	beq.n	8003704 <HAL_ADC_IRQHandler+0x424>
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d013      	beq.n	8003704 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	f043 0208 	orr.w	r2, r3, #8
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036fc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fefa 	bl	80044f8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003704:	bf00      	nop
 8003706:	3728      	adds	r7, #40	; 0x28
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	50040000 	.word	0x50040000
 8003710:	50040300 	.word	0x50040300

08003714 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b0b6      	sub	sp, #216	; 0xd8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x22>
 8003782:	2302      	movs	r3, #2
 8003784:	e3d5      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x7ce>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff f9c6 	bl	8002b24 <LL_ADC_REG_IsConversionOngoing>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	f040 83ba 	bne.w	8003f14 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b05      	cmp	r3, #5
 80037a6:	d824      	bhi.n	80037f2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	3b02      	subs	r3, #2
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d81b      	bhi.n	80037ea <HAL_ADC_ConfigChannel+0x86>
 80037b2:	a201      	add	r2, pc, #4	; (adr r2, 80037b8 <HAL_ADC_ConfigChannel+0x54>)
 80037b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b8:	080037c9 	.word	0x080037c9
 80037bc:	080037d1 	.word	0x080037d1
 80037c0:	080037d9 	.word	0x080037d9
 80037c4:	080037e1 	.word	0x080037e1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	220c      	movs	r2, #12
 80037cc:	605a      	str	r2, [r3, #4]
          break;
 80037ce:	e011      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2212      	movs	r2, #18
 80037d4:	605a      	str	r2, [r3, #4]
          break;
 80037d6:	e00d      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2218      	movs	r2, #24
 80037dc:	605a      	str	r2, [r3, #4]
          break;
 80037de:	e009      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037e6:	605a      	str	r2, [r3, #4]
          break;
 80037e8:	e004      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2206      	movs	r2, #6
 80037ee:	605a      	str	r2, [r3, #4]
          break;
 80037f0:	e000      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80037f2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	6859      	ldr	r1, [r3, #4]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	f7ff f820 	bl	8002846 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff f98a 	bl	8002b24 <LL_ADC_REG_IsConversionOngoing>
 8003810:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff f9aa 	bl	8002b72 <LL_ADC_INJ_IsConversionOngoing>
 800381e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003822:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003826:	2b00      	cmp	r3, #0
 8003828:	f040 81c1 	bne.w	8003bae <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800382c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003830:	2b00      	cmp	r3, #0
 8003832:	f040 81bc 	bne.w	8003bae <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800383e:	d10f      	bne.n	8003860 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6818      	ldr	r0, [r3, #0]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2200      	movs	r2, #0
 800384a:	4619      	mov	r1, r3
 800384c:	f7ff f83a 	bl	80028c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003858:	4618      	mov	r0, r3
 800385a:	f7fe ffce 	bl	80027fa <LL_ADC_SetSamplingTimeCommonConfig>
 800385e:	e00e      	b.n	800387e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	6819      	ldr	r1, [r3, #0]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	461a      	mov	r2, r3
 800386e:	f7ff f829 	bl	80028c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe ffbe 	bl	80027fa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	08db      	lsrs	r3, r3, #3
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2b04      	cmp	r3, #4
 800389e:	d00a      	beq.n	80038b6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	6919      	ldr	r1, [r3, #16]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80038b0:	f7fe ff4e 	bl	8002750 <LL_ADC_SetOffset>
 80038b4:	e17b      	b.n	8003bae <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2100      	movs	r1, #0
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fe ff6b 	bl	8002798 <LL_ADC_GetOffsetChannel>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10a      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x17e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe ff60 	bl	8002798 <LL_ADC_GetOffsetChannel>
 80038d8:	4603      	mov	r3, r0
 80038da:	0e9b      	lsrs	r3, r3, #26
 80038dc:	f003 021f 	and.w	r2, r3, #31
 80038e0:	e01e      	b.n	8003920 <HAL_ADC_ConfigChannel+0x1bc>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fe ff55 	bl	8002798 <LL_ADC_GetOffsetChannel>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038f8:	fa93 f3a3 	rbit	r3, r3
 80038fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003900:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003904:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003908:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003910:	2320      	movs	r3, #32
 8003912:	e004      	b.n	800391e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003914:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003918:	fab3 f383 	clz	r3, r3
 800391c:	b2db      	uxtb	r3, r3
 800391e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003928:	2b00      	cmp	r3, #0
 800392a:	d105      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x1d4>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	0e9b      	lsrs	r3, r3, #26
 8003932:	f003 031f 	and.w	r3, r3, #31
 8003936:	e018      	b.n	800396a <HAL_ADC_ConfigChannel+0x206>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003940:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003944:	fa93 f3a3 	rbit	r3, r3
 8003948:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800394c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003954:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800395c:	2320      	movs	r3, #32
 800395e:	e004      	b.n	800396a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003960:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800396a:	429a      	cmp	r2, r3
 800396c:	d106      	bne.n	800397c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2200      	movs	r2, #0
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe ff24 	bl	80027c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2101      	movs	r1, #1
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe ff08 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8003988:	4603      	mov	r3, r0
 800398a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10a      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x244>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2101      	movs	r1, #1
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe fefd 	bl	8002798 <LL_ADC_GetOffsetChannel>
 800399e:	4603      	mov	r3, r0
 80039a0:	0e9b      	lsrs	r3, r3, #26
 80039a2:	f003 021f 	and.w	r2, r3, #31
 80039a6:	e01e      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x282>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2101      	movs	r1, #1
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe fef2 	bl	8002798 <LL_ADC_GetOffsetChannel>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80039c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80039ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80039d6:	2320      	movs	r3, #32
 80039d8:	e004      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80039da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039de:	fab3 f383 	clz	r3, r3
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d105      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x29a>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	0e9b      	lsrs	r3, r3, #26
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	e018      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x2cc>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003a12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003a1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003a22:	2320      	movs	r3, #32
 8003a24:	e004      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003a26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a2a:	fab3 f383 	clz	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d106      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fe fec1 	bl	80027c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2102      	movs	r1, #2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fe fea5 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10a      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x30a>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe fe9a 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8003a64:	4603      	mov	r3, r0
 8003a66:	0e9b      	lsrs	r3, r3, #26
 8003a68:	f003 021f 	and.w	r2, r3, #31
 8003a6c:	e01e      	b.n	8003aac <HAL_ADC_ConfigChannel+0x348>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2102      	movs	r1, #2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe fe8f 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a84:	fa93 f3a3 	rbit	r3, r3
 8003a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003a94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003a9c:	2320      	movs	r3, #32
 8003a9e:	e004      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003aa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003aa4:	fab3 f383 	clz	r3, r3
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d105      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x360>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	0e9b      	lsrs	r3, r3, #26
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	e016      	b.n	8003af2 <HAL_ADC_ConfigChannel+0x38e>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003acc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ad0:	fa93 f3a3 	rbit	r3, r3
 8003ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003ad6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003ae4:	2320      	movs	r3, #32
 8003ae6:	e004      	b.n	8003af2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aec:	fab3 f383 	clz	r3, r3
 8003af0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d106      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2200      	movs	r2, #0
 8003afc:	2102      	movs	r1, #2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe fe60 	bl	80027c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2103      	movs	r1, #3
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe fe44 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8003b10:	4603      	mov	r3, r0
 8003b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10a      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x3cc>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2103      	movs	r1, #3
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe fe39 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8003b26:	4603      	mov	r3, r0
 8003b28:	0e9b      	lsrs	r3, r3, #26
 8003b2a:	f003 021f 	and.w	r2, r3, #31
 8003b2e:	e017      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x3fc>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2103      	movs	r1, #3
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fe fe2e 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003b48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b4a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003b52:	2320      	movs	r3, #32
 8003b54:	e003      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b58:	fab3 f383 	clz	r3, r3
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d105      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x414>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	0e9b      	lsrs	r3, r3, #26
 8003b72:	f003 031f 	and.w	r3, r3, #31
 8003b76:	e011      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x438>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b80:	fa93 f3a3 	rbit	r3, r3
 8003b84:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003b86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b88:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003b90:	2320      	movs	r3, #32
 8003b92:	e003      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d106      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2103      	movs	r1, #3
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe fe0b 	bl	80027c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fe ff68 	bl	8002a88 <LL_ADC_IsEnabled>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f040 8140 	bne.w	8003e40 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	6819      	ldr	r1, [r3, #0]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	f7fe fea5 	bl	800291c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	4a8f      	ldr	r2, [pc, #572]	; (8003e14 <HAL_ADC_ConfigChannel+0x6b0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	f040 8131 	bne.w	8003e40 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10b      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x4a2>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	0e9b      	lsrs	r3, r3, #26
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	f003 031f 	and.w	r3, r3, #31
 8003bfa:	2b09      	cmp	r3, #9
 8003bfc:	bf94      	ite	ls
 8003bfe:	2301      	movls	r3, #1
 8003c00:	2300      	movhi	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	e019      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x4d6>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c0e:	fa93 f3a3 	rbit	r3, r3
 8003c12:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c16:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003c18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003c1e:	2320      	movs	r3, #32
 8003c20:	e003      	b.n	8003c2a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c24:	fab3 f383 	clz	r3, r3
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f003 031f 	and.w	r3, r3, #31
 8003c30:	2b09      	cmp	r3, #9
 8003c32:	bf94      	ite	ls
 8003c34:	2301      	movls	r3, #1
 8003c36:	2300      	movhi	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d079      	beq.n	8003d32 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d107      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x4f6>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	0e9b      	lsrs	r3, r3, #26
 8003c50:	3301      	adds	r3, #1
 8003c52:	069b      	lsls	r3, r3, #26
 8003c54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c58:	e015      	b.n	8003c86 <HAL_ADC_ConfigChannel+0x522>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003c72:	2320      	movs	r3, #32
 8003c74:	e003      	b.n	8003c7e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c78:	fab3 f383 	clz	r3, r3
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	3301      	adds	r3, #1
 8003c80:	069b      	lsls	r3, r3, #26
 8003c82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d109      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x542>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	0e9b      	lsrs	r3, r3, #26
 8003c98:	3301      	adds	r3, #1
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca4:	e017      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0x572>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003cbe:	2320      	movs	r3, #32
 8003cc0:	e003      	b.n	8003cca <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cc4:	fab3 f383 	clz	r3, r3
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	3301      	adds	r3, #1
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd6:	ea42 0103 	orr.w	r1, r2, r3
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10a      	bne.n	8003cfc <HAL_ADC_ConfigChannel+0x598>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	0e9b      	lsrs	r3, r3, #26
 8003cec:	3301      	adds	r3, #1
 8003cee:	f003 021f 	and.w	r2, r3, #31
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	051b      	lsls	r3, r3, #20
 8003cfa:	e018      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x5ca>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d04:	fa93 f3a3 	rbit	r3, r3
 8003d08:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003d14:	2320      	movs	r3, #32
 8003d16:	e003      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d1a:	fab3 f383 	clz	r3, r3
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	3301      	adds	r3, #1
 8003d22:	f003 021f 	and.w	r2, r3, #31
 8003d26:	4613      	mov	r3, r2
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	4413      	add	r3, r2
 8003d2c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	e081      	b.n	8003e36 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d107      	bne.n	8003d4e <HAL_ADC_ConfigChannel+0x5ea>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	0e9b      	lsrs	r3, r3, #26
 8003d44:	3301      	adds	r3, #1
 8003d46:	069b      	lsls	r3, r3, #26
 8003d48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d4c:	e015      	b.n	8003d7a <HAL_ADC_ConfigChannel+0x616>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d56:	fa93 f3a3 	rbit	r3, r3
 8003d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003d66:	2320      	movs	r3, #32
 8003d68:	e003      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	fab3 f383 	clz	r3, r3
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	3301      	adds	r3, #1
 8003d74:	069b      	lsls	r3, r3, #26
 8003d76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d109      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x636>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	0e9b      	lsrs	r3, r3, #26
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	f003 031f 	and.w	r3, r3, #31
 8003d92:	2101      	movs	r1, #1
 8003d94:	fa01 f303 	lsl.w	r3, r1, r3
 8003d98:	e017      	b.n	8003dca <HAL_ADC_ConfigChannel+0x666>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	fa93 f3a3 	rbit	r3, r3
 8003da6:	61fb      	str	r3, [r7, #28]
  return result;
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003db2:	2320      	movs	r3, #32
 8003db4:	e003      	b.n	8003dbe <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	fab3 f383 	clz	r3, r3
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dca:	ea42 0103 	orr.w	r1, r2, r3
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10d      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x692>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	0e9b      	lsrs	r3, r3, #26
 8003de0:	3301      	adds	r3, #1
 8003de2:	f003 021f 	and.w	r2, r3, #31
 8003de6:	4613      	mov	r3, r2
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	4413      	add	r3, r2
 8003dec:	3b1e      	subs	r3, #30
 8003dee:	051b      	lsls	r3, r3, #20
 8003df0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003df4:	e01e      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x6d0>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	fa93 f3a3 	rbit	r3, r3
 8003e02:	613b      	str	r3, [r7, #16]
  return result;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d104      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003e0e:	2320      	movs	r3, #32
 8003e10:	e006      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x6bc>
 8003e12:	bf00      	nop
 8003e14:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	fab3 f383 	clz	r3, r3
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	3301      	adds	r3, #1
 8003e22:	f003 021f 	and.w	r2, r3, #31
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3b1e      	subs	r3, #30
 8003e2e:	051b      	lsls	r3, r3, #20
 8003e30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e34:	430b      	orrs	r3, r1
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	6892      	ldr	r2, [r2, #8]
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	f7fe fd42 	bl	80028c4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4b3d      	ldr	r3, [pc, #244]	; (8003f3c <HAL_ADC_ConfigChannel+0x7d8>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d06c      	beq.n	8003f26 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e4c:	483c      	ldr	r0, [pc, #240]	; (8003f40 <HAL_ADC_ConfigChannel+0x7dc>)
 8003e4e:	f7fe fc71 	bl	8002734 <LL_ADC_GetCommonPathInternalCh>
 8003e52:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a3a      	ldr	r2, [pc, #232]	; (8003f44 <HAL_ADC_ConfigChannel+0x7e0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d127      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d121      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a35      	ldr	r2, [pc, #212]	; (8003f48 <HAL_ADC_ConfigChannel+0x7e4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d157      	bne.n	8003f26 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e7e:	4619      	mov	r1, r3
 8003e80:	482f      	ldr	r0, [pc, #188]	; (8003f40 <HAL_ADC_ConfigChannel+0x7dc>)
 8003e82:	f7fe fc44 	bl	800270e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e86:	4b31      	ldr	r3, [pc, #196]	; (8003f4c <HAL_ADC_ConfigChannel+0x7e8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	099b      	lsrs	r3, r3, #6
 8003e8c:	4a30      	ldr	r2, [pc, #192]	; (8003f50 <HAL_ADC_ConfigChannel+0x7ec>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	099b      	lsrs	r3, r3, #6
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	4613      	mov	r3, r2
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ea0:	e002      	b.n	8003ea8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f9      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003eae:	e03a      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a27      	ldr	r2, [pc, #156]	; (8003f54 <HAL_ADC_ConfigChannel+0x7f0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d113      	bne.n	8003ee2 <HAL_ADC_ConfigChannel+0x77e>
 8003eba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10d      	bne.n	8003ee2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1f      	ldr	r2, [pc, #124]	; (8003f48 <HAL_ADC_ConfigChannel+0x7e4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d12a      	bne.n	8003f26 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ed0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ed4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4819      	ldr	r0, [pc, #100]	; (8003f40 <HAL_ADC_ConfigChannel+0x7dc>)
 8003edc:	f7fe fc17 	bl	800270e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ee0:	e021      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1c      	ldr	r2, [pc, #112]	; (8003f58 <HAL_ADC_ConfigChannel+0x7f4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d11c      	bne.n	8003f26 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003eec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d116      	bne.n	8003f26 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a12      	ldr	r2, [pc, #72]	; (8003f48 <HAL_ADC_ConfigChannel+0x7e4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d111      	bne.n	8003f26 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	480c      	ldr	r0, [pc, #48]	; (8003f40 <HAL_ADC_ConfigChannel+0x7dc>)
 8003f0e:	f7fe fbfe 	bl	800270e <LL_ADC_SetCommonPathInternalCh>
 8003f12:	e008      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f18:	f043 0220 	orr.w	r2, r3, #32
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	37d8      	adds	r7, #216	; 0xd8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	80080000 	.word	0x80080000
 8003f40:	50040300 	.word	0x50040300
 8003f44:	c7520000 	.word	0xc7520000
 8003f48:	50040000 	.word	0x50040000
 8003f4c:	20000008 	.word	0x20000008
 8003f50:	053e2d63 	.word	0x053e2d63
 8003f54:	cb840000 	.word	0xcb840000
 8003f58:	80000001 	.word	0x80000001

08003f5c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fe fdd6 	bl	8002b24 <LL_ADC_REG_IsConversionOngoing>
 8003f78:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe fdf7 	bl	8002b72 <LL_ADC_INJ_IsConversionOngoing>
 8003f84:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 8098 	beq.w	80040c4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d02a      	beq.n	8003ff8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	7e5b      	ldrb	r3, [r3, #25]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d126      	bne.n	8003ff8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	7e1b      	ldrb	r3, [r3, #24]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d122      	bne.n	8003ff8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003fb6:	e014      	b.n	8003fe2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	4a45      	ldr	r2, [pc, #276]	; (80040d0 <ADC_ConversionStop+0x174>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d90d      	bls.n	8003fdc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc4:	f043 0210 	orr.w	r2, r3, #16
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	f043 0201 	orr.w	r2, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e074      	b.n	80040c6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fec:	2b40      	cmp	r3, #64	; 0x40
 8003fee:	d1e3      	bne.n	8003fb8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2240      	movs	r2, #64	; 0x40
 8003ff6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d014      	beq.n	8004028 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe fd8e 	bl	8002b24 <LL_ADC_REG_IsConversionOngoing>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00c      	beq.n	8004028 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f7fe fd4b 	bl	8002aae <LL_ADC_IsDisableOngoing>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d104      	bne.n	8004028 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe fd6a 	bl	8002afc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d014      	beq.n	8004058 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe fd9d 	bl	8002b72 <LL_ADC_INJ_IsConversionOngoing>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00c      	beq.n	8004058 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f7fe fd33 	bl	8002aae <LL_ADC_IsDisableOngoing>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d104      	bne.n	8004058 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f7fe fd79 	bl	8002b4a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d005      	beq.n	800406a <ADC_ConversionStop+0x10e>
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b03      	cmp	r3, #3
 8004062:	d105      	bne.n	8004070 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004064:	230c      	movs	r3, #12
 8004066:	617b      	str	r3, [r7, #20]
        break;
 8004068:	e005      	b.n	8004076 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800406a:	2308      	movs	r3, #8
 800406c:	617b      	str	r3, [r7, #20]
        break;
 800406e:	e002      	b.n	8004076 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004070:	2304      	movs	r3, #4
 8004072:	617b      	str	r3, [r7, #20]
        break;
 8004074:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004076:	f7fe fb07 	bl	8002688 <HAL_GetTick>
 800407a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800407c:	e01b      	b.n	80040b6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800407e:	f7fe fb03 	bl	8002688 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b05      	cmp	r3, #5
 800408a:	d914      	bls.n	80040b6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	4013      	ands	r3, r2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00d      	beq.n	80040b6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	f043 0210 	orr.w	r2, r3, #16
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	f043 0201 	orr.w	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e007      	b.n	80040c6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	4013      	ands	r3, r2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1dc      	bne.n	800407e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3720      	adds	r7, #32
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	a33fffff 	.word	0xa33fffff

080040d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fe fcd1 	bl	8002a88 <LL_ADC_IsEnabled>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d14d      	bne.n	8004188 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	4b28      	ldr	r3, [pc, #160]	; (8004194 <ADC_Enable+0xc0>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00d      	beq.n	8004116 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fe:	f043 0210 	orr.w	r2, r3, #16
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	f043 0201 	orr.w	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e039      	b.n	800418a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7fe fc8c 	bl	8002a38 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004120:	f7fe fab2 	bl	8002688 <HAL_GetTick>
 8004124:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004126:	e028      	b.n	800417a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f7fe fcab 	bl	8002a88 <LL_ADC_IsEnabled>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4618      	mov	r0, r3
 800413e:	f7fe fc7b 	bl	8002a38 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004142:	f7fe faa1 	bl	8002688 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d914      	bls.n	800417a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b01      	cmp	r3, #1
 800415c:	d00d      	beq.n	800417a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004162:	f043 0210 	orr.w	r2, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416e:	f043 0201 	orr.w	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e007      	b.n	800418a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b01      	cmp	r3, #1
 8004186:	d1cf      	bne.n	8004128 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	8000003f 	.word	0x8000003f

08004198 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fe fc82 	bl	8002aae <LL_ADC_IsDisableOngoing>
 80041aa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe fc69 	bl	8002a88 <LL_ADC_IsEnabled>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d047      	beq.n	800424c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d144      	bne.n	800424c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 030d 	and.w	r3, r3, #13
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d10c      	bne.n	80041ea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fe fc43 	bl	8002a60 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2203      	movs	r2, #3
 80041e0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041e2:	f7fe fa51 	bl	8002688 <HAL_GetTick>
 80041e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041e8:	e029      	b.n	800423e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ee:	f043 0210 	orr.w	r2, r3, #16
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fa:	f043 0201 	orr.w	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e023      	b.n	800424e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004206:	f7fe fa3f 	bl	8002688 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d914      	bls.n	800423e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00d      	beq.n	800423e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	f043 0210 	orr.w	r2, r3, #16
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004232:	f043 0201 	orr.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e007      	b.n	800424e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1dc      	bne.n	8004206 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004262:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800426c:	2b00      	cmp	r3, #0
 800426e:	d14b      	bne.n	8004308 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d021      	beq.n	80042ce <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe fac6 	bl	8002820 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d032      	beq.n	8004300 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d12b      	bne.n	8004300 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d11f      	bne.n	8004300 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c4:	f043 0201 	orr.w	r2, r3, #1
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	655a      	str	r2, [r3, #84]	; 0x54
 80042cc:	e018      	b.n	8004300 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d111      	bne.n	8004300 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d105      	bne.n	8004300 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f8:	f043 0201 	orr.w	r2, r3, #1
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f7ff fa07 	bl	8003714 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004306:	e00e      	b.n	8004326 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f7ff fa1b 	bl	8003750 <HAL_ADC_ErrorCallback>
}
 800431a:	e004      	b.n	8004326 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	4798      	blx	r3
}
 8004326:	bf00      	nop
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f7ff f9f3 	bl	8003728 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004356:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004368:	f043 0204 	orr.w	r2, r3, #4
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f7ff f9ed 	bl	8003750 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004376:	bf00      	nop
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <LL_ADC_IsEnabled>:
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b01      	cmp	r3, #1
 8004390:	d101      	bne.n	8004396 <LL_ADC_IsEnabled+0x18>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <LL_ADC_IsEnabled+0x1a>
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <LL_ADC_StartCalibration>:
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80043b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	609a      	str	r2, [r3, #8]
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <LL_ADC_IsCalibrationOnGoing>:
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ea:	d101      	bne.n	80043f0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <LL_ADC_REG_IsConversionOngoing>:
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b04      	cmp	r3, #4
 8004410:	d101      	bne.n	8004416 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800442e:	2300      	movs	r3, #0
 8004430:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_ADCEx_Calibration_Start+0x1c>
 800443c:	2302      	movs	r3, #2
 800443e:	e04d      	b.n	80044dc <HAL_ADCEx_Calibration_Start+0xb8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff fea5 	bl	8004198 <ADC_Disable>
 800444e:	4603      	mov	r3, r0
 8004450:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d136      	bne.n	80044c6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004460:	f023 0302 	bic.w	r3, r3, #2
 8004464:	f043 0202 	orr.w	r2, r3, #2
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6839      	ldr	r1, [r7, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff ff96 	bl	80043a4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004478:	e014      	b.n	80044a4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	3301      	adds	r3, #1
 800447e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8004486:	d30d      	bcc.n	80044a4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448c:	f023 0312 	bic.w	r3, r3, #18
 8004490:	f043 0210 	orr.w	r2, r3, #16
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e01b      	b.n	80044dc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff ff94 	bl	80043d6 <LL_ADC_IsCalibrationOnGoing>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e2      	bne.n	800447a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b8:	f023 0303 	bic.w	r3, r3, #3
 80044bc:	f043 0201 	orr.w	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	655a      	str	r2, [r3, #84]	; 0x54
 80044c4:	e005      	b.n	80044d2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ca:	f043 0210 	orr.w	r2, r3, #16
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80044da:	7bfb      	ldrb	r3, [r7, #15]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004548:	b590      	push	{r4, r7, lr}
 800454a:	b09f      	sub	sp, #124	; 0x7c
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800455e:	2b01      	cmp	r3, #1
 8004560:	d101      	bne.n	8004566 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004562:	2302      	movs	r3, #2
 8004564:	e089      	b.n	800467a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800456e:	2300      	movs	r3, #0
 8004570:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004572:	2300      	movs	r3, #0
 8004574:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a42      	ldr	r2, [pc, #264]	; (8004684 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d102      	bne.n	8004586 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004580:	4b41      	ldr	r3, [pc, #260]	; (8004688 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004582:	60bb      	str	r3, [r7, #8]
 8004584:	e001      	b.n	800458a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004586:	2300      	movs	r3, #0
 8004588:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004594:	f043 0220 	orr.w	r2, r3, #32
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e068      	b.n	800467a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff ff27 	bl	80043fe <LL_ADC_REG_IsConversionOngoing>
 80045b0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff ff21 	bl	80043fe <LL_ADC_REG_IsConversionOngoing>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d14a      	bne.n	8004658 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80045c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d147      	bne.n	8004658 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80045c8:	4b30      	ldr	r3, [pc, #192]	; (800468c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80045ca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d027      	beq.n	8004624 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80045d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	6859      	ldr	r1, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045e6:	035b      	lsls	r3, r3, #13
 80045e8:	430b      	orrs	r3, r1
 80045ea:	431a      	orrs	r2, r3
 80045ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045f0:	4824      	ldr	r0, [pc, #144]	; (8004684 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80045f2:	f7ff fec4 	bl	800437e <LL_ADC_IsEnabled>
 80045f6:	4604      	mov	r4, r0
 80045f8:	4823      	ldr	r0, [pc, #140]	; (8004688 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80045fa:	f7ff fec0 	bl	800437e <LL_ADC_IsEnabled>
 80045fe:	4603      	mov	r3, r0
 8004600:	4323      	orrs	r3, r4
 8004602:	2b00      	cmp	r3, #0
 8004604:	d132      	bne.n	800466c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800460e:	f023 030f 	bic.w	r3, r3, #15
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	6811      	ldr	r1, [r2, #0]
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	6892      	ldr	r2, [r2, #8]
 800461a:	430a      	orrs	r2, r1
 800461c:	431a      	orrs	r2, r3
 800461e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004620:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004622:	e023      	b.n	800466c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800462c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004630:	4814      	ldr	r0, [pc, #80]	; (8004684 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004632:	f7ff fea4 	bl	800437e <LL_ADC_IsEnabled>
 8004636:	4604      	mov	r4, r0
 8004638:	4813      	ldr	r0, [pc, #76]	; (8004688 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800463a:	f7ff fea0 	bl	800437e <LL_ADC_IsEnabled>
 800463e:	4603      	mov	r3, r0
 8004640:	4323      	orrs	r3, r4
 8004642:	2b00      	cmp	r3, #0
 8004644:	d112      	bne.n	800466c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800464e:	f023 030f 	bic.w	r3, r3, #15
 8004652:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004654:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004656:	e009      	b.n	800466c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465c:	f043 0220 	orr.w	r2, r3, #32
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800466a:	e000      	b.n	800466e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800466c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004676:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800467a:	4618      	mov	r0, r3
 800467c:	377c      	adds	r7, #124	; 0x7c
 800467e:	46bd      	mov	sp, r7
 8004680:	bd90      	pop	{r4, r7, pc}
 8004682:	bf00      	nop
 8004684:	50040000 	.word	0x50040000
 8004688:	50040100 	.word	0x50040100
 800468c:	50040300 	.word	0x50040300

08004690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046a0:	4b0c      	ldr	r3, [pc, #48]	; (80046d4 <__NVIC_SetPriorityGrouping+0x44>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046ac:	4013      	ands	r3, r2
 80046ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046c2:	4a04      	ldr	r2, [pc, #16]	; (80046d4 <__NVIC_SetPriorityGrouping+0x44>)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	60d3      	str	r3, [r2, #12]
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	e000ed00 	.word	0xe000ed00

080046d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046dc:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <__NVIC_GetPriorityGrouping+0x18>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	0a1b      	lsrs	r3, r3, #8
 80046e2:	f003 0307 	and.w	r3, r3, #7
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	e000ed00 	.word	0xe000ed00

080046f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004702:	2b00      	cmp	r3, #0
 8004704:	db0b      	blt.n	800471e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	f003 021f 	and.w	r2, r3, #31
 800470c:	4907      	ldr	r1, [pc, #28]	; (800472c <__NVIC_EnableIRQ+0x38>)
 800470e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	2001      	movs	r0, #1
 8004716:	fa00 f202 	lsl.w	r2, r0, r2
 800471a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	e000e100 	.word	0xe000e100

08004730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	4603      	mov	r3, r0
 8004738:	6039      	str	r1, [r7, #0]
 800473a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800473c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004740:	2b00      	cmp	r3, #0
 8004742:	db0a      	blt.n	800475a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	b2da      	uxtb	r2, r3
 8004748:	490c      	ldr	r1, [pc, #48]	; (800477c <__NVIC_SetPriority+0x4c>)
 800474a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800474e:	0112      	lsls	r2, r2, #4
 8004750:	b2d2      	uxtb	r2, r2
 8004752:	440b      	add	r3, r1
 8004754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004758:	e00a      	b.n	8004770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	b2da      	uxtb	r2, r3
 800475e:	4908      	ldr	r1, [pc, #32]	; (8004780 <__NVIC_SetPriority+0x50>)
 8004760:	79fb      	ldrb	r3, [r7, #7]
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	3b04      	subs	r3, #4
 8004768:	0112      	lsls	r2, r2, #4
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	440b      	add	r3, r1
 800476e:	761a      	strb	r2, [r3, #24]
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	e000e100 	.word	0xe000e100
 8004780:	e000ed00 	.word	0xe000ed00

08004784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004784:	b480      	push	{r7}
 8004786:	b089      	sub	sp, #36	; 0x24
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f1c3 0307 	rsb	r3, r3, #7
 800479e:	2b04      	cmp	r3, #4
 80047a0:	bf28      	it	cs
 80047a2:	2304      	movcs	r3, #4
 80047a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	3304      	adds	r3, #4
 80047aa:	2b06      	cmp	r3, #6
 80047ac:	d902      	bls.n	80047b4 <NVIC_EncodePriority+0x30>
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	3b03      	subs	r3, #3
 80047b2:	e000      	b.n	80047b6 <NVIC_EncodePriority+0x32>
 80047b4:	2300      	movs	r3, #0
 80047b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	43da      	mvns	r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	401a      	ands	r2, r3
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	fa01 f303 	lsl.w	r3, r1, r3
 80047d6:	43d9      	mvns	r1, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047dc:	4313      	orrs	r3, r2
         );
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3724      	adds	r7, #36	; 0x24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
	...

080047ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047fc:	d301      	bcc.n	8004802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047fe:	2301      	movs	r3, #1
 8004800:	e00f      	b.n	8004822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004802:	4a0a      	ldr	r2, [pc, #40]	; (800482c <SysTick_Config+0x40>)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3b01      	subs	r3, #1
 8004808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800480a:	210f      	movs	r1, #15
 800480c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004810:	f7ff ff8e 	bl	8004730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004814:	4b05      	ldr	r3, [pc, #20]	; (800482c <SysTick_Config+0x40>)
 8004816:	2200      	movs	r2, #0
 8004818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800481a:	4b04      	ldr	r3, [pc, #16]	; (800482c <SysTick_Config+0x40>)
 800481c:	2207      	movs	r2, #7
 800481e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	e000e010 	.word	0xe000e010

08004830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7ff ff29 	bl	8004690 <__NVIC_SetPriorityGrouping>
}
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b086      	sub	sp, #24
 800484a:	af00      	add	r7, sp, #0
 800484c:	4603      	mov	r3, r0
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004858:	f7ff ff3e 	bl	80046d8 <__NVIC_GetPriorityGrouping>
 800485c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	6978      	ldr	r0, [r7, #20]
 8004864:	f7ff ff8e 	bl	8004784 <NVIC_EncodePriority>
 8004868:	4602      	mov	r2, r0
 800486a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800486e:	4611      	mov	r1, r2
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff ff5d 	bl	8004730 <__NVIC_SetPriority>
}
 8004876:	bf00      	nop
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	4603      	mov	r3, r0
 8004886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff ff31 	bl	80046f4 <__NVIC_EnableIRQ>
}
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b082      	sub	sp, #8
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7ff ffa2 	bl	80047ec <SysTick_Config>
 80048a8:	4603      	mov	r3, r0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
	...

080048b4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e098      	b.n	80049f8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	461a      	mov	r2, r3
 80048cc:	4b4d      	ldr	r3, [pc, #308]	; (8004a04 <HAL_DMA_Init+0x150>)
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d80f      	bhi.n	80048f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	4b4b      	ldr	r3, [pc, #300]	; (8004a08 <HAL_DMA_Init+0x154>)
 80048da:	4413      	add	r3, r2
 80048dc:	4a4b      	ldr	r2, [pc, #300]	; (8004a0c <HAL_DMA_Init+0x158>)
 80048de:	fba2 2303 	umull	r2, r3, r2, r3
 80048e2:	091b      	lsrs	r3, r3, #4
 80048e4:	009a      	lsls	r2, r3, #2
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a48      	ldr	r2, [pc, #288]	; (8004a10 <HAL_DMA_Init+0x15c>)
 80048ee:	641a      	str	r2, [r3, #64]	; 0x40
 80048f0:	e00e      	b.n	8004910 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	4b46      	ldr	r3, [pc, #280]	; (8004a14 <HAL_DMA_Init+0x160>)
 80048fa:	4413      	add	r3, r2
 80048fc:	4a43      	ldr	r2, [pc, #268]	; (8004a0c <HAL_DMA_Init+0x158>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	091b      	lsrs	r3, r3, #4
 8004904:	009a      	lsls	r2, r3, #2
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a42      	ldr	r2, [pc, #264]	; (8004a18 <HAL_DMA_Init+0x164>)
 800490e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004934:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004940:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800494c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800496a:	d039      	beq.n	80049e0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	4a27      	ldr	r2, [pc, #156]	; (8004a10 <HAL_DMA_Init+0x15c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d11a      	bne.n	80049ac <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004976:	4b29      	ldr	r3, [pc, #164]	; (8004a1c <HAL_DMA_Init+0x168>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497e:	f003 031c 	and.w	r3, r3, #28
 8004982:	210f      	movs	r1, #15
 8004984:	fa01 f303 	lsl.w	r3, r1, r3
 8004988:	43db      	mvns	r3, r3
 800498a:	4924      	ldr	r1, [pc, #144]	; (8004a1c <HAL_DMA_Init+0x168>)
 800498c:	4013      	ands	r3, r2
 800498e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004990:	4b22      	ldr	r3, [pc, #136]	; (8004a1c <HAL_DMA_Init+0x168>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6859      	ldr	r1, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499c:	f003 031c 	and.w	r3, r3, #28
 80049a0:	fa01 f303 	lsl.w	r3, r1, r3
 80049a4:	491d      	ldr	r1, [pc, #116]	; (8004a1c <HAL_DMA_Init+0x168>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	600b      	str	r3, [r1, #0]
 80049aa:	e019      	b.n	80049e0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80049ac:	4b1c      	ldr	r3, [pc, #112]	; (8004a20 <HAL_DMA_Init+0x16c>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b4:	f003 031c 	and.w	r3, r3, #28
 80049b8:	210f      	movs	r1, #15
 80049ba:	fa01 f303 	lsl.w	r3, r1, r3
 80049be:	43db      	mvns	r3, r3
 80049c0:	4917      	ldr	r1, [pc, #92]	; (8004a20 <HAL_DMA_Init+0x16c>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80049c6:	4b16      	ldr	r3, [pc, #88]	; (8004a20 <HAL_DMA_Init+0x16c>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6859      	ldr	r1, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d2:	f003 031c 	and.w	r3, r3, #28
 80049d6:	fa01 f303 	lsl.w	r3, r1, r3
 80049da:	4911      	ldr	r1, [pc, #68]	; (8004a20 <HAL_DMA_Init+0x16c>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	40020407 	.word	0x40020407
 8004a08:	bffdfff8 	.word	0xbffdfff8
 8004a0c:	cccccccd 	.word	0xcccccccd
 8004a10:	40020000 	.word	0x40020000
 8004a14:	bffdfbf8 	.word	0xbffdfbf8
 8004a18:	40020400 	.word	0x40020400
 8004a1c:	400200a8 	.word	0x400200a8
 8004a20:	400204a8 	.word	0x400204a8

08004a24 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e072      	b.n	8004b1c <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0201 	bic.w	r2, r2, #1
 8004a44:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	4b36      	ldr	r3, [pc, #216]	; (8004b28 <HAL_DMA_DeInit+0x104>)
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d80f      	bhi.n	8004a72 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	4b34      	ldr	r3, [pc, #208]	; (8004b2c <HAL_DMA_DeInit+0x108>)
 8004a5a:	4413      	add	r3, r2
 8004a5c:	4a34      	ldr	r2, [pc, #208]	; (8004b30 <HAL_DMA_DeInit+0x10c>)
 8004a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a62:	091b      	lsrs	r3, r3, #4
 8004a64:	009a      	lsls	r2, r3, #2
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a31      	ldr	r2, [pc, #196]	; (8004b34 <HAL_DMA_DeInit+0x110>)
 8004a6e:	641a      	str	r2, [r3, #64]	; 0x40
 8004a70:	e00e      	b.n	8004a90 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	4b2f      	ldr	r3, [pc, #188]	; (8004b38 <HAL_DMA_DeInit+0x114>)
 8004a7a:	4413      	add	r3, r2
 8004a7c:	4a2c      	ldr	r2, [pc, #176]	; (8004b30 <HAL_DMA_DeInit+0x10c>)
 8004a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a82:	091b      	lsrs	r3, r3, #4
 8004a84:	009a      	lsls	r2, r3, #2
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a2b      	ldr	r2, [pc, #172]	; (8004b3c <HAL_DMA_DeInit+0x118>)
 8004a8e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9c:	f003 021c 	and.w	r2, r3, #28
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aaa:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	4a20      	ldr	r2, [pc, #128]	; (8004b34 <HAL_DMA_DeInit+0x110>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d10d      	bne.n	8004ad2 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004ab6:	4b22      	ldr	r3, [pc, #136]	; (8004b40 <HAL_DMA_DeInit+0x11c>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	f003 031c 	and.w	r3, r3, #28
 8004ac2:	210f      	movs	r1, #15
 8004ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	491d      	ldr	r1, [pc, #116]	; (8004b40 <HAL_DMA_DeInit+0x11c>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	600b      	str	r3, [r1, #0]
 8004ad0:	e00c      	b.n	8004aec <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004ad2:	4b1c      	ldr	r3, [pc, #112]	; (8004b44 <HAL_DMA_DeInit+0x120>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	f003 031c 	and.w	r3, r3, #28
 8004ade:	210f      	movs	r1, #15
 8004ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	4917      	ldr	r1, [pc, #92]	; (8004b44 <HAL_DMA_DeInit+0x120>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	40020407 	.word	0x40020407
 8004b2c:	bffdfff8 	.word	0xbffdfff8
 8004b30:	cccccccd 	.word	0xcccccccd
 8004b34:	40020000 	.word	0x40020000
 8004b38:	bffdfbf8 	.word	0xbffdfbf8
 8004b3c:	40020400 	.word	0x40020400
 8004b40:	400200a8 	.word	0x400200a8
 8004b44:	400204a8 	.word	0x400204a8

08004b48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_DMA_Start_IT+0x20>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e04b      	b.n	8004c00 <HAL_DMA_Start_IT+0xb8>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d13a      	bne.n	8004bf2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0201 	bic.w	r2, r2, #1
 8004b98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f91e 	bl	8004de2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d008      	beq.n	8004bc0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 020e 	orr.w	r2, r2, #14
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	e00f      	b.n	8004be0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0204 	bic.w	r2, r2, #4
 8004bce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 020a 	orr.w	r2, r2, #10
 8004bde:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	e005      	b.n	8004bfe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d008      	beq.n	8004c32 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2204      	movs	r2, #4
 8004c24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e022      	b.n	8004c78 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 020e 	bic.w	r2, r2, #14
 8004c40:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0201 	bic.w	r2, r2, #1
 8004c50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	f003 021c 	and.w	r2, r3, #28
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	2101      	movs	r1, #1
 8004c60:	fa01 f202 	lsl.w	r2, r1, r2
 8004c64:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca0:	f003 031c 	and.w	r3, r3, #28
 8004ca4:	2204      	movs	r2, #4
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d026      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x7a>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d021      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0320 	and.w	r3, r3, #32
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d107      	bne.n	8004cd8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0204 	bic.w	r2, r2, #4
 8004cd6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cdc:	f003 021c 	and.w	r2, r3, #28
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	2104      	movs	r1, #4
 8004ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8004cea:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d071      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004cfc:	e06c      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d02:	f003 031c 	and.w	r3, r3, #28
 8004d06:	2202      	movs	r2, #2
 8004d08:	409a      	lsls	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d02e      	beq.n	8004d70 <HAL_DMA_IRQHandler+0xec>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d029      	beq.n	8004d70 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10b      	bne.n	8004d42 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 020a 	bic.w	r2, r2, #10
 8004d38:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d46:	f003 021c 	and.w	r2, r3, #28
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	2102      	movs	r1, #2
 8004d50:	fa01 f202 	lsl.w	r2, r1, r2
 8004d54:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d038      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004d6e:	e033      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d74:	f003 031c 	and.w	r3, r3, #28
 8004d78:	2208      	movs	r2, #8
 8004d7a:	409a      	lsls	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d02a      	beq.n	8004dda <HAL_DMA_IRQHandler+0x156>
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d025      	beq.n	8004dda <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 020e 	bic.w	r2, r2, #14
 8004d9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	f003 021c 	and.w	r2, r3, #28
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	2101      	movs	r1, #1
 8004dac:	fa01 f202 	lsl.w	r2, r1, r2
 8004db0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d004      	beq.n	8004dda <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004dd8:	bf00      	nop
 8004dda:	bf00      	nop
}
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b085      	sub	sp, #20
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	607a      	str	r2, [r7, #4]
 8004dee:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df4:	f003 021c 	and.w	r2, r3, #28
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8004e02:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	2b10      	cmp	r3, #16
 8004e12:	d108      	bne.n	8004e26 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004e24:	e007      	b.n	8004e36 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	60da      	str	r2, [r3, #12]
}
 8004e36:	bf00      	nop
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
	...

08004e44 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004e56:	4b2f      	ldr	r3, [pc, #188]	; (8004f14 <HAL_FLASH_Program+0xd0>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_FLASH_Program+0x1e>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e053      	b.n	8004f0a <HAL_FLASH_Program+0xc6>
 8004e62:	4b2c      	ldr	r3, [pc, #176]	; (8004f14 <HAL_FLASH_Program+0xd0>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e6c:	f000 f888 	bl	8004f80 <FLASH_WaitForLastOperation>
 8004e70:	4603      	mov	r3, r0
 8004e72:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d143      	bne.n	8004f02 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e7a:	4b26      	ldr	r3, [pc, #152]	; (8004f14 <HAL_FLASH_Program+0xd0>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004e80:	4b25      	ldr	r3, [pc, #148]	; (8004f18 <HAL_FLASH_Program+0xd4>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d009      	beq.n	8004ea0 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004e8c:	4b22      	ldr	r3, [pc, #136]	; (8004f18 <HAL_FLASH_Program+0xd4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a21      	ldr	r2, [pc, #132]	; (8004f18 <HAL_FLASH_Program+0xd4>)
 8004e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e96:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004e98:	4b1e      	ldr	r3, [pc, #120]	; (8004f14 <HAL_FLASH_Program+0xd0>)
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	771a      	strb	r2, [r3, #28]
 8004e9e:	e002      	b.n	8004ea6 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004ea0:	4b1c      	ldr	r3, [pc, #112]	; (8004f14 <HAL_FLASH_Program+0xd0>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d107      	bne.n	8004ebc <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eb0:	68b8      	ldr	r0, [r7, #8]
 8004eb2:	f000 f8bd 	bl	8005030 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	e010      	b.n	8004ede <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d002      	beq.n	8004ec8 <HAL_FLASH_Program+0x84>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d10a      	bne.n	8004ede <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	68b8      	ldr	r0, [r7, #8]
 8004ece:	f000 f8d5 	bl	800507c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d102      	bne.n	8004ede <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8004ed8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004edc:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ede:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ee2:	f000 f84d 	bl	8004f80 <FLASH_WaitForLastOperation>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d006      	beq.n	8004efe <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8004ef0:	4b09      	ldr	r3, [pc, #36]	; (8004f18 <HAL_FLASH_Program+0xd4>)
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	43db      	mvns	r3, r3
 8004ef8:	4907      	ldr	r1, [pc, #28]	; (8004f18 <HAL_FLASH_Program+0xd4>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004efe:	f000 f9d3 	bl	80052a8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004f02:	4b04      	ldr	r3, [pc, #16]	; (8004f14 <HAL_FLASH_Program+0xd0>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	701a      	strb	r2, [r3, #0]

  return status;
 8004f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000014 	.word	0x20000014
 8004f18:	40022000 	.word	0x40022000

08004f1c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004f26:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <HAL_FLASH_Unlock+0x38>)
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	da0b      	bge.n	8004f46 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004f2e:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <HAL_FLASH_Unlock+0x38>)
 8004f30:	4a09      	ldr	r2, [pc, #36]	; (8004f58 <HAL_FLASH_Unlock+0x3c>)
 8004f32:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004f34:	4b07      	ldr	r3, [pc, #28]	; (8004f54 <HAL_FLASH_Unlock+0x38>)
 8004f36:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <HAL_FLASH_Unlock+0x40>)
 8004f38:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004f3a:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <HAL_FLASH_Unlock+0x38>)
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	da01      	bge.n	8004f46 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004f46:	79fb      	ldrb	r3, [r7, #7]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	40022000 	.word	0x40022000
 8004f58:	45670123 	.word	0x45670123
 8004f5c:	cdef89ab 	.word	0xcdef89ab

08004f60 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <HAL_FLASH_Lock+0x1c>)
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	4a04      	ldr	r2, [pc, #16]	; (8004f7c <HAL_FLASH_Lock+0x1c>)
 8004f6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f6e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	40022000 	.word	0x40022000

08004f80 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8004f88:	f7fd fb7e 	bl	8002688 <HAL_GetTick>
 8004f8c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004f8e:	e00d      	b.n	8004fac <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f96:	d009      	beq.n	8004fac <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8004f98:	f7fd fb76 	bl	8002688 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d801      	bhi.n	8004fac <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e036      	b.n	800501a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004fac:	4b1d      	ldr	r3, [pc, #116]	; (8005024 <FLASH_WaitForLastOperation+0xa4>)
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1eb      	bne.n	8004f90 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8004fb8:	4b1a      	ldr	r3, [pc, #104]	; (8005024 <FLASH_WaitForLastOperation+0xa4>)
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	4b1a      	ldr	r3, [pc, #104]	; (8005028 <FLASH_WaitForLastOperation+0xa8>)
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01e      	beq.n	8005006 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8004fc8:	4b18      	ldr	r3, [pc, #96]	; (800502c <FLASH_WaitForLastOperation+0xac>)
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	4a16      	ldr	r2, [pc, #88]	; (800502c <FLASH_WaitForLastOperation+0xac>)
 8004fd2:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d007      	beq.n	8004fee <FLASH_WaitForLastOperation+0x6e>
 8004fde:	4b11      	ldr	r3, [pc, #68]	; (8005024 <FLASH_WaitForLastOperation+0xa4>)
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004fe8:	490e      	ldr	r1, [pc, #56]	; (8005024 <FLASH_WaitForLastOperation+0xa4>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	618b      	str	r3, [r1, #24]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d004      	beq.n	8005002 <FLASH_WaitForLastOperation+0x82>
 8004ff8:	4a0a      	ldr	r2, [pc, #40]	; (8005024 <FLASH_WaitForLastOperation+0xa4>)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005000:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e009      	b.n	800501a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005006:	4b07      	ldr	r3, [pc, #28]	; (8005024 <FLASH_WaitForLastOperation+0xa4>)
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005012:	4b04      	ldr	r3, [pc, #16]	; (8005024 <FLASH_WaitForLastOperation+0xa4>)
 8005014:	2201      	movs	r2, #1
 8005016:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40022000 	.word	0x40022000
 8005028:	0002c3fa 	.word	0x0002c3fa
 800502c:	20000014 	.word	0x20000014

08005030 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800503c:	4b0e      	ldr	r3, [pc, #56]	; (8005078 <FLASH_Program_DoubleWord+0x48>)
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	4a0d      	ldr	r2, [pc, #52]	; (8005078 <FLASH_Program_DoubleWord+0x48>)
 8005042:	f043 0301 	orr.w	r3, r3, #1
 8005046:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800504e:	f3bf 8f6f 	isb	sy
}
 8005052:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8005054:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	f04f 0300 	mov.w	r3, #0
 8005060:	000a      	movs	r2, r1
 8005062:	2300      	movs	r3, #0
 8005064:	68f9      	ldr	r1, [r7, #12]
 8005066:	3104      	adds	r1, #4
 8005068:	4613      	mov	r3, r2
 800506a:	600b      	str	r3, [r1, #0]
}
 800506c:	bf00      	nop
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	40022000 	.word	0x40022000

0800507c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800507c:	b480      	push	{r7}
 800507e:	b089      	sub	sp, #36	; 0x24
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005086:	2340      	movs	r3, #64	; 0x40
 8005088:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005092:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <FLASH_Program_Fast+0x68>)
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	4a13      	ldr	r2, [pc, #76]	; (80050e4 <FLASH_Program_Fast+0x68>)
 8005098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800509c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800509e:	f3ef 8310 	mrs	r3, PRIMASK
 80050a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80050a4:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80050a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80050a8:	b672      	cpsid	i
}
 80050aa:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	3304      	adds	r3, #4
 80050b8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	3304      	adds	r3, #4
 80050be:	617b      	str	r3, [r7, #20]
    row_index--;
 80050c0:	7ffb      	ldrb	r3, [r7, #31]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80050c6:	7ffb      	ldrb	r3, [r7, #31]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1ef      	bne.n	80050ac <FLASH_Program_Fast+0x30>
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f383 8810 	msr	PRIMASK, r3
}
 80050d6:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80050d8:	bf00      	nop
 80050da:	3724      	adds	r7, #36	; 0x24
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	40022000 	.word	0x40022000

080050e8 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80050f2:	4b4a      	ldr	r3, [pc, #296]	; (800521c <HAL_FLASHEx_Erase+0x134>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_FLASHEx_Erase+0x16>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e089      	b.n	8005212 <HAL_FLASHEx_Erase+0x12a>
 80050fe:	4b47      	ldr	r3, [pc, #284]	; (800521c <HAL_FLASHEx_Erase+0x134>)
 8005100:	2201      	movs	r2, #1
 8005102:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005104:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005108:	f7ff ff3a 	bl	8004f80 <FLASH_WaitForLastOperation>
 800510c:	4603      	mov	r3, r0
 800510e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005110:	7bfb      	ldrb	r3, [r7, #15]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d179      	bne.n	800520a <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005116:	4b41      	ldr	r3, [pc, #260]	; (800521c <HAL_FLASHEx_Erase+0x134>)
 8005118:	2200      	movs	r2, #0
 800511a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800511c:	4b40      	ldr	r3, [pc, #256]	; (8005220 <HAL_FLASHEx_Erase+0x138>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005124:	2b00      	cmp	r3, #0
 8005126:	d019      	beq.n	800515c <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005128:	4b3d      	ldr	r3, [pc, #244]	; (8005220 <HAL_FLASHEx_Erase+0x138>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a3c      	ldr	r2, [pc, #240]	; (8005220 <HAL_FLASHEx_Erase+0x138>)
 800512e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005132:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005134:	4b3a      	ldr	r3, [pc, #232]	; (8005220 <HAL_FLASHEx_Erase+0x138>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800513c:	2b00      	cmp	r3, #0
 800513e:	d009      	beq.n	8005154 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005140:	4b37      	ldr	r3, [pc, #220]	; (8005220 <HAL_FLASHEx_Erase+0x138>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a36      	ldr	r2, [pc, #216]	; (8005220 <HAL_FLASHEx_Erase+0x138>)
 8005146:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800514a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800514c:	4b33      	ldr	r3, [pc, #204]	; (800521c <HAL_FLASHEx_Erase+0x134>)
 800514e:	2203      	movs	r2, #3
 8005150:	771a      	strb	r2, [r3, #28]
 8005152:	e016      	b.n	8005182 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005154:	4b31      	ldr	r3, [pc, #196]	; (800521c <HAL_FLASHEx_Erase+0x134>)
 8005156:	2201      	movs	r2, #1
 8005158:	771a      	strb	r2, [r3, #28]
 800515a:	e012      	b.n	8005182 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800515c:	4b30      	ldr	r3, [pc, #192]	; (8005220 <HAL_FLASHEx_Erase+0x138>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005164:	2b00      	cmp	r3, #0
 8005166:	d009      	beq.n	800517c <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005168:	4b2d      	ldr	r3, [pc, #180]	; (8005220 <HAL_FLASHEx_Erase+0x138>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a2c      	ldr	r2, [pc, #176]	; (8005220 <HAL_FLASHEx_Erase+0x138>)
 800516e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005172:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005174:	4b29      	ldr	r3, [pc, #164]	; (800521c <HAL_FLASHEx_Erase+0x134>)
 8005176:	2202      	movs	r2, #2
 8005178:	771a      	strb	r2, [r3, #28]
 800517a:	e002      	b.n	8005182 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800517c:	4b27      	ldr	r3, [pc, #156]	; (800521c <HAL_FLASHEx_Erase+0x134>)
 800517e:	2200      	movs	r2, #0
 8005180:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d111      	bne.n	80051ae <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	4618      	mov	r0, r3
 8005190:	f000 f848 	bl	8005224 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005194:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005198:	f7ff fef2 	bl	8004f80 <FLASH_WaitForLastOperation>
 800519c:	4603      	mov	r3, r0
 800519e:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80051a0:	4b1f      	ldr	r3, [pc, #124]	; (8005220 <HAL_FLASHEx_Erase+0x138>)
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	4a1e      	ldr	r2, [pc, #120]	; (8005220 <HAL_FLASHEx_Erase+0x138>)
 80051a6:	f023 0304 	bic.w	r3, r3, #4
 80051aa:	6153      	str	r3, [r2, #20]
 80051ac:	e02b      	b.n	8005206 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051b4:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	60bb      	str	r3, [r7, #8]
 80051bc:	e01b      	b.n	80051f6 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	4619      	mov	r1, r3
 80051c4:	68b8      	ldr	r0, [r7, #8]
 80051c6:	f000 f84b 	bl	8005260 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80051ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80051ce:	f7ff fed7 	bl	8004f80 <FLASH_WaitForLastOperation>
 80051d2:	4603      	mov	r3, r0
 80051d4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80051d6:	4b12      	ldr	r3, [pc, #72]	; (8005220 <HAL_FLASHEx_Erase+0x138>)
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	4a11      	ldr	r2, [pc, #68]	; (8005220 <HAL_FLASHEx_Erase+0x138>)
 80051dc:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80051e0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	601a      	str	r2, [r3, #0]
          break;
 80051ee:	e00a      	b.n	8005206 <HAL_FLASHEx_Erase+0x11e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	3301      	adds	r3, #1
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	429a      	cmp	r2, r3
 8005204:	d3db      	bcc.n	80051be <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005206:	f000 f84f 	bl	80052a8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800520a:	4b04      	ldr	r3, [pc, #16]	; (800521c <HAL_FLASHEx_Erase+0x134>)
 800520c:	2200      	movs	r2, #0
 800520e:	701a      	strb	r2, [r3, #0]

  return status;
 8005210:	7bfb      	ldrb	r3, [r7, #15]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20000014 	.word	0x20000014
 8005220:	40022000 	.word	0x40022000

08005224 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d005      	beq.n	8005242 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8005236:	4b09      	ldr	r3, [pc, #36]	; (800525c <FLASH_MassErase+0x38>)
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	4a08      	ldr	r2, [pc, #32]	; (800525c <FLASH_MassErase+0x38>)
 800523c:	f043 0304 	orr.w	r3, r3, #4
 8005240:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005242:	4b06      	ldr	r3, [pc, #24]	; (800525c <FLASH_MassErase+0x38>)
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	4a05      	ldr	r2, [pc, #20]	; (800525c <FLASH_MassErase+0x38>)
 8005248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800524c:	6153      	str	r3, [r2, #20]
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40022000 	.word	0x40022000

08005260 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800526a:	4b0e      	ldr	r3, [pc, #56]	; (80052a4 <FLASH_PageErase+0x44>)
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800527a:	490a      	ldr	r1, [pc, #40]	; (80052a4 <FLASH_PageErase+0x44>)
 800527c:	4313      	orrs	r3, r2
 800527e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005280:	4b08      	ldr	r3, [pc, #32]	; (80052a4 <FLASH_PageErase+0x44>)
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	4a07      	ldr	r2, [pc, #28]	; (80052a4 <FLASH_PageErase+0x44>)
 8005286:	f043 0302 	orr.w	r3, r3, #2
 800528a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800528c:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <FLASH_PageErase+0x44>)
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	4a04      	ldr	r2, [pc, #16]	; (80052a4 <FLASH_PageErase+0x44>)
 8005292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005296:	6153      	str	r3, [r2, #20]
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	40022000 	.word	0x40022000

080052a8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80052ae:	4b1e      	ldr	r3, [pc, #120]	; (8005328 <FLASH_FlushCaches+0x80>)
 80052b0:	7f1b      	ldrb	r3, [r3, #28]
 80052b2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80052b4:	79fb      	ldrb	r3, [r7, #7]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d002      	beq.n	80052c0 <FLASH_FlushCaches+0x18>
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d111      	bne.n	80052e4 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80052c0:	4b1a      	ldr	r3, [pc, #104]	; (800532c <FLASH_FlushCaches+0x84>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a19      	ldr	r2, [pc, #100]	; (800532c <FLASH_FlushCaches+0x84>)
 80052c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	4b17      	ldr	r3, [pc, #92]	; (800532c <FLASH_FlushCaches+0x84>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a16      	ldr	r2, [pc, #88]	; (800532c <FLASH_FlushCaches+0x84>)
 80052d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052d6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80052d8:	4b14      	ldr	r3, [pc, #80]	; (800532c <FLASH_FlushCaches+0x84>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a13      	ldr	r2, [pc, #76]	; (800532c <FLASH_FlushCaches+0x84>)
 80052de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052e2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80052e4:	79fb      	ldrb	r3, [r7, #7]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d002      	beq.n	80052f0 <FLASH_FlushCaches+0x48>
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	2b03      	cmp	r3, #3
 80052ee:	d111      	bne.n	8005314 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80052f0:	4b0e      	ldr	r3, [pc, #56]	; (800532c <FLASH_FlushCaches+0x84>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a0d      	ldr	r2, [pc, #52]	; (800532c <FLASH_FlushCaches+0x84>)
 80052f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	4b0b      	ldr	r3, [pc, #44]	; (800532c <FLASH_FlushCaches+0x84>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a0a      	ldr	r2, [pc, #40]	; (800532c <FLASH_FlushCaches+0x84>)
 8005302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005306:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005308:	4b08      	ldr	r3, [pc, #32]	; (800532c <FLASH_FlushCaches+0x84>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a07      	ldr	r2, [pc, #28]	; (800532c <FLASH_FlushCaches+0x84>)
 800530e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005312:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005314:	4b04      	ldr	r3, [pc, #16]	; (8005328 <FLASH_FlushCaches+0x80>)
 8005316:	2200      	movs	r2, #0
 8005318:	771a      	strb	r2, [r3, #28]
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	20000014 	.word	0x20000014
 800532c:	40022000 	.word	0x40022000

08005330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800533a:	2300      	movs	r3, #0
 800533c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800533e:	e14e      	b.n	80055de <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	2101      	movs	r1, #1
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	fa01 f303 	lsl.w	r3, r1, r3
 800534c:	4013      	ands	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 8140 	beq.w	80055d8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d00b      	beq.n	8005378 <HAL_GPIO_Init+0x48>
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b02      	cmp	r3, #2
 8005366:	d007      	beq.n	8005378 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800536c:	2b11      	cmp	r3, #17
 800536e:	d003      	beq.n	8005378 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b12      	cmp	r3, #18
 8005376:	d130      	bne.n	80053da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	2203      	movs	r2, #3
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	43db      	mvns	r3, r3
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4013      	ands	r3, r2
 800538e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053ae:	2201      	movs	r2, #1
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	fa02 f303 	lsl.w	r3, r2, r3
 80053b6:	43db      	mvns	r3, r3
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4013      	ands	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	091b      	lsrs	r3, r3, #4
 80053c4:	f003 0201 	and.w	r2, r3, #1
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	2203      	movs	r2, #3
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	43db      	mvns	r3, r3
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4013      	ands	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	fa02 f303 	lsl.w	r3, r2, r3
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d003      	beq.n	800541a <HAL_GPIO_Init+0xea>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b12      	cmp	r3, #18
 8005418:	d123      	bne.n	8005462 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	08da      	lsrs	r2, r3, #3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3208      	adds	r2, #8
 8005422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005426:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	220f      	movs	r2, #15
 8005432:	fa02 f303 	lsl.w	r3, r2, r3
 8005436:	43db      	mvns	r3, r3
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4013      	ands	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	08da      	lsrs	r2, r3, #3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3208      	adds	r2, #8
 800545c:	6939      	ldr	r1, [r7, #16]
 800545e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	2203      	movs	r2, #3
 800546e:	fa02 f303 	lsl.w	r3, r2, r3
 8005472:	43db      	mvns	r3, r3
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4013      	ands	r3, r2
 8005478:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f003 0203 	and.w	r2, r3, #3
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	fa02 f303 	lsl.w	r3, r2, r3
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 809a 	beq.w	80055d8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054a4:	4b55      	ldr	r3, [pc, #340]	; (80055fc <HAL_GPIO_Init+0x2cc>)
 80054a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a8:	4a54      	ldr	r2, [pc, #336]	; (80055fc <HAL_GPIO_Init+0x2cc>)
 80054aa:	f043 0301 	orr.w	r3, r3, #1
 80054ae:	6613      	str	r3, [r2, #96]	; 0x60
 80054b0:	4b52      	ldr	r3, [pc, #328]	; (80055fc <HAL_GPIO_Init+0x2cc>)
 80054b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80054bc:	4a50      	ldr	r2, [pc, #320]	; (8005600 <HAL_GPIO_Init+0x2d0>)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	089b      	lsrs	r3, r3, #2
 80054c2:	3302      	adds	r3, #2
 80054c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	220f      	movs	r2, #15
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	43db      	mvns	r3, r3
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	4013      	ands	r3, r2
 80054de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80054e6:	d013      	beq.n	8005510 <HAL_GPIO_Init+0x1e0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a46      	ldr	r2, [pc, #280]	; (8005604 <HAL_GPIO_Init+0x2d4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00d      	beq.n	800550c <HAL_GPIO_Init+0x1dc>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a45      	ldr	r2, [pc, #276]	; (8005608 <HAL_GPIO_Init+0x2d8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d007      	beq.n	8005508 <HAL_GPIO_Init+0x1d8>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a44      	ldr	r2, [pc, #272]	; (800560c <HAL_GPIO_Init+0x2dc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d101      	bne.n	8005504 <HAL_GPIO_Init+0x1d4>
 8005500:	2303      	movs	r3, #3
 8005502:	e006      	b.n	8005512 <HAL_GPIO_Init+0x1e2>
 8005504:	2307      	movs	r3, #7
 8005506:	e004      	b.n	8005512 <HAL_GPIO_Init+0x1e2>
 8005508:	2302      	movs	r3, #2
 800550a:	e002      	b.n	8005512 <HAL_GPIO_Init+0x1e2>
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <HAL_GPIO_Init+0x1e2>
 8005510:	2300      	movs	r3, #0
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	f002 0203 	and.w	r2, r2, #3
 8005518:	0092      	lsls	r2, r2, #2
 800551a:	4093      	lsls	r3, r2
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005522:	4937      	ldr	r1, [pc, #220]	; (8005600 <HAL_GPIO_Init+0x2d0>)
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	089b      	lsrs	r3, r3, #2
 8005528:	3302      	adds	r3, #2
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005530:	4b37      	ldr	r3, [pc, #220]	; (8005610 <HAL_GPIO_Init+0x2e0>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	43db      	mvns	r3, r3
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4013      	ands	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005554:	4a2e      	ldr	r2, [pc, #184]	; (8005610 <HAL_GPIO_Init+0x2e0>)
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800555a:	4b2d      	ldr	r3, [pc, #180]	; (8005610 <HAL_GPIO_Init+0x2e0>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	43db      	mvns	r3, r3
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	4013      	ands	r3, r2
 8005568:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800557e:	4a24      	ldr	r2, [pc, #144]	; (8005610 <HAL_GPIO_Init+0x2e0>)
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005584:	4b22      	ldr	r3, [pc, #136]	; (8005610 <HAL_GPIO_Init+0x2e0>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	43db      	mvns	r3, r3
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4013      	ands	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80055a8:	4a19      	ldr	r2, [pc, #100]	; (8005610 <HAL_GPIO_Init+0x2e0>)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80055ae:	4b18      	ldr	r3, [pc, #96]	; (8005610 <HAL_GPIO_Init+0x2e0>)
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	43db      	mvns	r3, r3
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	4013      	ands	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80055d2:	4a0f      	ldr	r2, [pc, #60]	; (8005610 <HAL_GPIO_Init+0x2e0>)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	3301      	adds	r3, #1
 80055dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	fa22 f303 	lsr.w	r3, r2, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f47f aea9 	bne.w	8005340 <HAL_GPIO_Init+0x10>
  }
}
 80055ee:	bf00      	nop
 80055f0:	bf00      	nop
 80055f2:	371c      	adds	r7, #28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	40021000 	.word	0x40021000
 8005600:	40010000 	.word	0x40010000
 8005604:	48000400 	.word	0x48000400
 8005608:	48000800 	.word	0x48000800
 800560c:	48000c00 	.word	0x48000c00
 8005610:	40010400 	.word	0x40010400

08005614 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005622:	e0b1      	b.n	8005788 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005624:	2201      	movs	r2, #1
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	fa02 f303 	lsl.w	r3, r2, r3
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	4013      	ands	r3, r2
 8005630:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80a4 	beq.w	8005782 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800563a:	4a5a      	ldr	r2, [pc, #360]	; (80057a4 <HAL_GPIO_DeInit+0x190>)
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	089b      	lsrs	r3, r3, #2
 8005640:	3302      	adds	r3, #2
 8005642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005646:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	220f      	movs	r2, #15
 8005652:	fa02 f303 	lsl.w	r3, r2, r3
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4013      	ands	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005662:	d013      	beq.n	800568c <HAL_GPIO_DeInit+0x78>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a50      	ldr	r2, [pc, #320]	; (80057a8 <HAL_GPIO_DeInit+0x194>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00d      	beq.n	8005688 <HAL_GPIO_DeInit+0x74>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a4f      	ldr	r2, [pc, #316]	; (80057ac <HAL_GPIO_DeInit+0x198>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d007      	beq.n	8005684 <HAL_GPIO_DeInit+0x70>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a4e      	ldr	r2, [pc, #312]	; (80057b0 <HAL_GPIO_DeInit+0x19c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d101      	bne.n	8005680 <HAL_GPIO_DeInit+0x6c>
 800567c:	2303      	movs	r3, #3
 800567e:	e006      	b.n	800568e <HAL_GPIO_DeInit+0x7a>
 8005680:	2307      	movs	r3, #7
 8005682:	e004      	b.n	800568e <HAL_GPIO_DeInit+0x7a>
 8005684:	2302      	movs	r3, #2
 8005686:	e002      	b.n	800568e <HAL_GPIO_DeInit+0x7a>
 8005688:	2301      	movs	r3, #1
 800568a:	e000      	b.n	800568e <HAL_GPIO_DeInit+0x7a>
 800568c:	2300      	movs	r3, #0
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	f002 0203 	and.w	r2, r2, #3
 8005694:	0092      	lsls	r2, r2, #2
 8005696:	4093      	lsls	r3, r2
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	429a      	cmp	r2, r3
 800569c:	d132      	bne.n	8005704 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800569e:	4b45      	ldr	r3, [pc, #276]	; (80057b4 <HAL_GPIO_DeInit+0x1a0>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	43db      	mvns	r3, r3
 80056a6:	4943      	ldr	r1, [pc, #268]	; (80057b4 <HAL_GPIO_DeInit+0x1a0>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80056ac:	4b41      	ldr	r3, [pc, #260]	; (80057b4 <HAL_GPIO_DeInit+0x1a0>)
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	43db      	mvns	r3, r3
 80056b4:	493f      	ldr	r1, [pc, #252]	; (80057b4 <HAL_GPIO_DeInit+0x1a0>)
 80056b6:	4013      	ands	r3, r2
 80056b8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80056ba:	4b3e      	ldr	r3, [pc, #248]	; (80057b4 <HAL_GPIO_DeInit+0x1a0>)
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	493c      	ldr	r1, [pc, #240]	; (80057b4 <HAL_GPIO_DeInit+0x1a0>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80056c8:	4b3a      	ldr	r3, [pc, #232]	; (80057b4 <HAL_GPIO_DeInit+0x1a0>)
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	43db      	mvns	r3, r3
 80056d0:	4938      	ldr	r1, [pc, #224]	; (80057b4 <HAL_GPIO_DeInit+0x1a0>)
 80056d2:	4013      	ands	r3, r2
 80056d4:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	220f      	movs	r2, #15
 80056e0:	fa02 f303 	lsl.w	r3, r2, r3
 80056e4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80056e6:	4a2f      	ldr	r2, [pc, #188]	; (80057a4 <HAL_GPIO_DeInit+0x190>)
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	089b      	lsrs	r3, r3, #2
 80056ec:	3302      	adds	r3, #2
 80056ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	43da      	mvns	r2, r3
 80056f6:	482b      	ldr	r0, [pc, #172]	; (80057a4 <HAL_GPIO_DeInit+0x190>)
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	089b      	lsrs	r3, r3, #2
 80056fc:	400a      	ands	r2, r1
 80056fe:	3302      	adds	r3, #2
 8005700:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	2103      	movs	r1, #3
 800570e:	fa01 f303 	lsl.w	r3, r1, r3
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	08da      	lsrs	r2, r3, #3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3208      	adds	r2, #8
 8005720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	220f      	movs	r2, #15
 800572e:	fa02 f303 	lsl.w	r3, r2, r3
 8005732:	43db      	mvns	r3, r3
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	08d2      	lsrs	r2, r2, #3
 8005738:	4019      	ands	r1, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	3208      	adds	r2, #8
 800573e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	2103      	movs	r1, #3
 800574c:	fa01 f303 	lsl.w	r3, r1, r3
 8005750:	43db      	mvns	r3, r3
 8005752:	401a      	ands	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	2101      	movs	r1, #1
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	fa01 f303 	lsl.w	r3, r1, r3
 8005764:	43db      	mvns	r3, r3
 8005766:	401a      	ands	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68da      	ldr	r2, [r3, #12]
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	2103      	movs	r1, #3
 8005776:	fa01 f303 	lsl.w	r3, r1, r3
 800577a:	43db      	mvns	r3, r3
 800577c:	401a      	ands	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	3301      	adds	r3, #1
 8005786:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	fa22 f303 	lsr.w	r3, r2, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	f47f af47 	bne.w	8005624 <HAL_GPIO_DeInit+0x10>
  }
}
 8005796:	bf00      	nop
 8005798:	bf00      	nop
 800579a:	371c      	adds	r7, #28
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	40010000 	.word	0x40010000
 80057a8:	48000400 	.word	0x48000400
 80057ac:	48000800 	.word	0x48000800
 80057b0:	48000c00 	.word	0x48000c00
 80057b4:	40010400 	.word	0x40010400

080057b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	887b      	ldrh	r3, [r7, #2]
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057d0:	2301      	movs	r3, #1
 80057d2:	73fb      	strb	r3, [r7, #15]
 80057d4:	e001      	b.n	80057da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057d6:	2300      	movs	r3, #0
 80057d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057da:	7bfb      	ldrb	r3, [r7, #15]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	460b      	mov	r3, r1
 80057f2:	807b      	strh	r3, [r7, #2]
 80057f4:	4613      	mov	r3, r2
 80057f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057f8:	787b      	ldrb	r3, [r7, #1]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057fe:	887a      	ldrh	r2, [r7, #2]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005804:	e002      	b.n	800580c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005806:	887a      	ldrh	r2, [r7, #2]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e0b6      	b.n	8005998 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d106      	bne.n	800584a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f7fc f9cd 	bl	8001be4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2202      	movs	r2, #2
 800584e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if defined(LPTIM_RCR_REP)

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f042 0201 	orr.w	r2, r2, #1
 8005860:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f44f 7280 	mov.w	r2, #256	; 0x100
 800586a:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005874:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8005876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 faa4 	bl	8005dc8 <LPTIM_WaitForFlag>
 8005880:	4603      	mov	r3, r0
 8005882:	2b03      	cmp	r3, #3
 8005884:	d101      	bne.n	800588a <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e086      	b.n	8005998 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 facc 	bl	8005e28 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fa8b 	bl	8005dac <HAL_LPTIM_GetState>
 8005896:	4603      	mov	r3, r0
 8005898:	2b03      	cmp	r3, #3
 800589a:	d101      	bne.n	80058a0 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e07b      	b.n	8005998 <HAL_LPTIM_Init+0x180>
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d004      	beq.n	80058ba <HAL_LPTIM_Init+0xa2>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058b8:	d103      	bne.n	80058c2 <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f023 031e 	bic.w	r3, r3, #30
 80058c0:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d005      	beq.n	80058da <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80058d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80058d8:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4b30      	ldr	r3, [pc, #192]	; (80059a0 <HAL_LPTIM_Init+0x188>)
 80058de:	4013      	ands	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80058ea:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80058f0:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80058f6:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80058fc:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d107      	bne.n	800591c <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005914:	4313      	orrs	r3, r2
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d004      	beq.n	800592e <HAL_LPTIM_Init+0x116>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005928:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800592c:	d107      	bne.n	800593e <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005936:	4313      	orrs	r3, r2
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005946:	4293      	cmp	r3, r2
 8005948:	d00a      	beq.n	8005960 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005952:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8005958:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4313      	orrs	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a0d      	ldr	r2, [pc, #52]	; (80059a4 <HAL_LPTIM_Init+0x18c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d108      	bne.n	8005984 <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	621a      	str	r2, [r3, #32]
 8005982:	e004      	b.n	800598e <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800598c:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	ff19f1fe 	.word	0xff19f1fe
 80059a4:	40007c00 	.word	0x40007c00

080059a8 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2202      	movs	r2, #2
 80059b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a3f      	ldr	r2, [pc, #252]	; (8005abc <HAL_LPTIM_Counter_Start_IT+0x114>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d106      	bne.n	80059d2 <HAL_LPTIM_Counter_Start_IT+0x2a>
 80059c4:	4b3e      	ldr	r3, [pc, #248]	; (8005ac0 <HAL_LPTIM_Counter_Start_IT+0x118>)
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	4a3d      	ldr	r2, [pc, #244]	; (8005ac0 <HAL_LPTIM_Counter_Start_IT+0x118>)
 80059ca:	f043 0301 	orr.w	r3, r3, #1
 80059ce:	6213      	str	r3, [r2, #32]
 80059d0:	e005      	b.n	80059de <HAL_LPTIM_Counter_Start_IT+0x36>
 80059d2:	4b3b      	ldr	r3, [pc, #236]	; (8005ac0 <HAL_LPTIM_Counter_Start_IT+0x118>)
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	4a3a      	ldr	r2, [pc, #232]	; (8005ac0 <HAL_LPTIM_Counter_Start_IT+0x118>)
 80059d8:	f043 0302 	orr.w	r3, r3, #2
 80059dc:	6213      	str	r3, [r2, #32]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d00c      	beq.n	8005a00 <HAL_LPTIM_Counter_Start_IT+0x58>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059ee:	d107      	bne.n	8005a00 <HAL_LPTIM_Counter_Start_IT+0x58>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80059fe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691a      	ldr	r2, [r3, #16]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0201 	orr.w	r2, r2, #1
 8005a0e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2210      	movs	r2, #16
 8005a16:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005a20:	2110      	movs	r1, #16
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f9d0 	bl	8005dc8 <LPTIM_WaitForFlag>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d101      	bne.n	8005a32 <HAL_LPTIM_Counter_Start_IT+0x8a>
  {
    return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e03f      	b.n	8005ab2 <HAL_LPTIM_Counter_Start_IT+0x10a>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f9f8 	bl	8005e28 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f9b7 	bl	8005dac <HAL_LPTIM_GetState>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d101      	bne.n	8005a48 <HAL_LPTIM_Counter_Start_IT+0xa0>
  {
    return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e034      	b.n	8005ab2 <HAL_LPTIM_Counter_Start_IT+0x10a>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0210 	orr.w	r2, r2, #16
 8005a56:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0202 	orr.w	r2, r2, #2
 8005a66:	609a      	str	r2, [r3, #8]

#if defined(LPTIM_RCR_REP)
  /* Enable Rep Update Ok interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a76:	609a      	str	r2, [r3, #8]

  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a86:	609a      	str	r2, [r3, #8]

#endif
  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0201 	orr.w	r2, r2, #1
 8005a96:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0204 	orr.w	r2, r2, #4
 8005aa6:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40007c00 	.word	0x40007c00
 8005ac0:	40010400 	.word	0x40010400

08005ac4 <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a21      	ldr	r2, [pc, #132]	; (8005b60 <HAL_LPTIM_Counter_Stop_IT+0x9c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d106      	bne.n	8005aec <HAL_LPTIM_Counter_Stop_IT+0x28>
 8005ade:	4b21      	ldr	r3, [pc, #132]	; (8005b64 <HAL_LPTIM_Counter_Stop_IT+0xa0>)
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	4a20      	ldr	r2, [pc, #128]	; (8005b64 <HAL_LPTIM_Counter_Stop_IT+0xa0>)
 8005ae4:	f023 0301 	bic.w	r3, r3, #1
 8005ae8:	6213      	str	r3, [r2, #32]
 8005aea:	e005      	b.n	8005af8 <HAL_LPTIM_Counter_Stop_IT+0x34>
 8005aec:	4b1d      	ldr	r3, [pc, #116]	; (8005b64 <HAL_LPTIM_Counter_Stop_IT+0xa0>)
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	4a1c      	ldr	r2, [pc, #112]	; (8005b64 <HAL_LPTIM_Counter_Stop_IT+0xa0>)
 8005af2:	f023 0302 	bic.w	r3, r3, #2
 8005af6:	6213      	str	r3, [r2, #32]

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f995 	bl	8005e28 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f954 	bl	8005dac <HAL_LPTIM_GetState>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d101      	bne.n	8005b0e <HAL_LPTIM_Counter_Stop_IT+0x4a>
  {
    return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e024      	b.n	8005b58 <HAL_LPTIM_Counter_Stop_IT+0x94>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0210 	bic.w	r2, r2, #16
 8005b1c:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0202 	bic.w	r2, r2, #2
 8005b2c:	609a      	str	r2, [r3, #8]
#if defined(LPTIM_RCR_REP)

  /* Disable Rep Update Ok interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_REPOK);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b3c:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b4c:	609a      	str	r2, [r3, #8]
#endif
  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	40007c00 	.word	0x40007c00
 8005b64:	40010400 	.word	0x40010400

08005b68 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d10d      	bne.n	8005b9a <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d106      	bne.n	8005b9a <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2201      	movs	r2, #1
 8005b92:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f8af 	bl	8005cf8 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d10d      	bne.n	8005bc4 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d106      	bne.n	8005bc4 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f8a4 	bl	8005d0c <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0304 	and.w	r3, r3, #4
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d10d      	bne.n	8005bee <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d106      	bne.n	8005bee <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2204      	movs	r2, #4
 8005be6:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f899 	bl	8005d20 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d10d      	bne.n	8005c18 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d106      	bne.n	8005c18 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2208      	movs	r2, #8
 8005c10:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f88e 	bl	8005d34 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0310 	and.w	r3, r3, #16
 8005c22:	2b10      	cmp	r3, #16
 8005c24:	d10d      	bne.n	8005c42 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f003 0310 	and.w	r3, r3, #16
 8005c30:	2b10      	cmp	r3, #16
 8005c32:	d106      	bne.n	8005c42 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2210      	movs	r2, #16
 8005c3a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f883 	bl	8005d48 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0320 	and.w	r3, r3, #32
 8005c4c:	2b20      	cmp	r3, #32
 8005c4e:	d10d      	bne.n	8005c6c <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b20      	cmp	r3, #32
 8005c5c:	d106      	bne.n	8005c6c <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2220      	movs	r2, #32
 8005c64:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f878 	bl	8005d5c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c76:	2b40      	cmp	r3, #64	; 0x40
 8005c78:	d10d      	bne.n	8005c96 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c84:	2b40      	cmp	r3, #64	; 0x40
 8005c86:	d106      	bne.n	8005c96 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2240      	movs	r2, #64	; 0x40
 8005c8e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f86d 	bl	8005d70 <HAL_LPTIM_DirectionDownCallback>
  }
#if defined(LPTIM_RCR_REP)

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca0:	2b80      	cmp	r3, #128	; 0x80
 8005ca2:	d10d      	bne.n	8005cc0 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cae:	2b80      	cmp	r3, #128	; 0x80
 8005cb0:	d106      	bne.n	8005cc0 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2280      	movs	r2, #128	; 0x80
 8005cb8:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f862 	bl	8005d84 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cce:	d10f      	bne.n	8005cf0 <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cde:	d107      	bne.n	8005cf0 <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ce8:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f854 	bl	8005d98 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8005cf0:	bf00      	nop
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005dba:	b2db      	uxtb	r3, r3
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8005dd6:	4b12      	ldr	r3, [pc, #72]	; (8005e20 <LPTIM_WaitForFlag+0x58>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a12      	ldr	r2, [pc, #72]	; (8005e24 <LPTIM_WaitForFlag+0x5c>)
 8005ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8005de0:	0b9b      	lsrs	r3, r3, #14
 8005de2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005de6:	fb02 f303 	mul.w	r3, r2, r3
 8005dea:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	4013      	ands	r3, r2
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d002      	beq.n	8005e12 <LPTIM_WaitForFlag+0x4a>
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1ec      	bne.n	8005dec <LPTIM_WaitForFlag+0x24>

  return result;
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	20000008 	.word	0x20000008
 8005e24:	d1b71759 	.word	0xd1b71759

08005e28 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8005e34:	b672      	cpsid	i
}
 8005e36:	bf00      	nop

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a85      	ldr	r2, [pc, #532]	; (8006054 <LPTIM_Disable+0x22c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d003      	beq.n	8005e4a <LPTIM_Disable+0x22>
 8005e42:	4a85      	ldr	r2, [pc, #532]	; (8006058 <LPTIM_Disable+0x230>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d007      	beq.n	8005e58 <LPTIM_Disable+0x30>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8005e48:	e00d      	b.n	8005e66 <LPTIM_Disable+0x3e>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005e4a:	4b84      	ldr	r3, [pc, #528]	; (800605c <LPTIM_Disable+0x234>)
 8005e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005e56:	e006      	b.n	8005e66 <LPTIM_Disable+0x3e>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005e58:	4b80      	ldr	r3, [pc, #512]	; (800605c <LPTIM_Disable+0x234>)
 8005e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005e64:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	623b      	str	r3, [r7, #32]
  tmpCFGR = hlptim->Instance->CFGR;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	61fb      	str	r3, [r7, #28]
  tmpCMP = hlptim->Instance->CMP;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	61bb      	str	r3, [r7, #24]
  tmpARR = hlptim->Instance->ARR;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	617b      	str	r3, [r7, #20]
  tmpOR = hlptim->Instance->OR;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	613b      	str	r3, [r7, #16]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e94:	60fb      	str	r3, [r7, #12]
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a6e      	ldr	r2, [pc, #440]	; (8006054 <LPTIM_Disable+0x22c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d003      	beq.n	8005ea8 <LPTIM_Disable+0x80>
 8005ea0:	4a6d      	ldr	r2, [pc, #436]	; (8006058 <LPTIM_Disable+0x230>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00d      	beq.n	8005ec2 <LPTIM_Disable+0x9a>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8005ea6:	e019      	b.n	8005edc <LPTIM_Disable+0xb4>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8005ea8:	4b6c      	ldr	r3, [pc, #432]	; (800605c <LPTIM_Disable+0x234>)
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	4a6b      	ldr	r2, [pc, #428]	; (800605c <LPTIM_Disable+0x234>)
 8005eae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005eb2:	6393      	str	r3, [r2, #56]	; 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8005eb4:	4b69      	ldr	r3, [pc, #420]	; (800605c <LPTIM_Disable+0x234>)
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	4a68      	ldr	r2, [pc, #416]	; (800605c <LPTIM_Disable+0x234>)
 8005eba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ebe:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 8005ec0:	e00c      	b.n	8005edc <LPTIM_Disable+0xb4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8005ec2:	4b66      	ldr	r3, [pc, #408]	; (800605c <LPTIM_Disable+0x234>)
 8005ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec6:	4a65      	ldr	r2, [pc, #404]	; (800605c <LPTIM_Disable+0x234>)
 8005ec8:	f043 0320 	orr.w	r3, r3, #32
 8005ecc:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8005ece:	4b63      	ldr	r3, [pc, #396]	; (800605c <LPTIM_Disable+0x234>)
 8005ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed2:	4a62      	ldr	r2, [pc, #392]	; (800605c <LPTIM_Disable+0x234>)
 8005ed4:	f023 0320 	bic.w	r3, r3, #32
 8005ed8:	63d3      	str	r3, [r2, #60]	; 0x3c
      break;
 8005eda:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d106      	bne.n	8005ef0 <LPTIM_Disable+0xc8>
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d103      	bne.n	8005ef0 <LPTIM_Disable+0xc8>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 8096 	beq.w	800601c <LPTIM_Disable+0x1f4>
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a57      	ldr	r2, [pc, #348]	; (8006054 <LPTIM_Disable+0x22c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d003      	beq.n	8005f02 <LPTIM_Disable+0xda>
 8005efa:	4a57      	ldr	r2, [pc, #348]	; (8006058 <LPTIM_Disable+0x230>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d009      	beq.n	8005f14 <LPTIM_Disable+0xec>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8005f00:	e011      	b.n	8005f26 <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8005f02:	4b56      	ldr	r3, [pc, #344]	; (800605c <LPTIM_Disable+0x234>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f08:	4a54      	ldr	r2, [pc, #336]	; (800605c <LPTIM_Disable+0x234>)
 8005f0a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8005f0e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8005f12:	e008      	b.n	8005f26 <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8005f14:	4b51      	ldr	r3, [pc, #324]	; (800605c <LPTIM_Disable+0x234>)
 8005f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1a:	4a50      	ldr	r2, [pc, #320]	; (800605c <LPTIM_Disable+0x234>)
 8005f1c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8005f24:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01a      	beq.n	8005f62 <LPTIM_Disable+0x13a>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691a      	ldr	r2, [r3, #16]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0201 	orr.w	r2, r2, #1
 8005f3a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005f44:	2108      	movs	r1, #8
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff ff3e 	bl	8005dc8 <LPTIM_WaitForFlag>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d103      	bne.n	8005f5a <LPTIM_Disable+0x132>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2203      	movs	r2, #3
 8005f56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2208      	movs	r2, #8
 8005f60:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d01a      	beq.n	8005f9e <LPTIM_Disable+0x176>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691a      	ldr	r2, [r3, #16]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0201 	orr.w	r2, r2, #1
 8005f76:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005f80:	2110      	movs	r1, #16
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7ff ff20 	bl	8005dc8 <LPTIM_WaitForFlag>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	d103      	bne.n	8005f96 <LPTIM_Disable+0x16e>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2203      	movs	r2, #3
 8005f92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2210      	movs	r2, #16
 8005f9c:	605a      	str	r2, [r3, #4]
    }
#if defined(LPTIM_RCR_REP)

    if (tmpRCR != 0UL)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d01c      	beq.n	8005fde <LPTIM_Disable+0x1b6>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691a      	ldr	r2, [r3, #16]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8005fbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff ff01 	bl	8005dc8 <LPTIM_WaitForFlag>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d103      	bne.n	8005fd4 <LPTIM_Disable+0x1ac>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2203      	movs	r2, #3
 8005fd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fdc:	605a      	str	r2, [r3, #4]
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a1c      	ldr	r2, [pc, #112]	; (8006054 <LPTIM_Disable+0x22c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d003      	beq.n	8005ff0 <LPTIM_Disable+0x1c8>
 8005fe8:	4a1b      	ldr	r2, [pc, #108]	; (8006058 <LPTIM_Disable+0x230>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d00b      	beq.n	8006006 <LPTIM_Disable+0x1de>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8005fee:	e016      	b.n	800601e <LPTIM_Disable+0x1f6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8005ff0:	4b1a      	ldr	r3, [pc, #104]	; (800605c <LPTIM_Disable+0x234>)
 8005ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ffa:	4918      	ldr	r1, [pc, #96]	; (800605c <LPTIM_Disable+0x234>)
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8006004:	e00b      	b.n	800601e <LPTIM_Disable+0x1f6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8006006:	4b15      	ldr	r3, [pc, #84]	; (800605c <LPTIM_Disable+0x234>)
 8006008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006010:	4912      	ldr	r1, [pc, #72]	; (800605c <LPTIM_Disable+0x234>)
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	4313      	orrs	r3, r2
 8006016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 800601a:	e000      	b.n	800601e <LPTIM_Disable+0x1f6>
    }
  }
 800601c:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0201 	bic.w	r2, r2, #1
 800602c:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6a3a      	ldr	r2, [r7, #32]
 8006034:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69fa      	ldr	r2, [r7, #28]
 800603c:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 8006046:	b662      	cpsie	i
}
 8006048:	bf00      	nop

  __enable_irq();
}
 800604a:	bf00      	nop
 800604c:	3728      	adds	r7, #40	; 0x28
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	40007c00 	.word	0x40007c00
 8006058:	40009400 	.word	0x40009400
 800605c:	40021000 	.word	0x40021000

08006060 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006064:	4b04      	ldr	r3, [pc, #16]	; (8006078 <HAL_PWREx_GetVoltageRange+0x18>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800606c:	4618      	mov	r0, r3
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	40007000 	.word	0x40007000

0800607c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800608a:	d130      	bne.n	80060ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800608c:	4b23      	ldr	r3, [pc, #140]	; (800611c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006098:	d038      	beq.n	800610c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800609a:	4b20      	ldr	r3, [pc, #128]	; (800611c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80060a2:	4a1e      	ldr	r2, [pc, #120]	; (800611c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80060aa:	4b1d      	ldr	r3, [pc, #116]	; (8006120 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2232      	movs	r2, #50	; 0x32
 80060b0:	fb02 f303 	mul.w	r3, r2, r3
 80060b4:	4a1b      	ldr	r2, [pc, #108]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80060b6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ba:	0c9b      	lsrs	r3, r3, #18
 80060bc:	3301      	adds	r3, #1
 80060be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060c0:	e002      	b.n	80060c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3b01      	subs	r3, #1
 80060c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060c8:	4b14      	ldr	r3, [pc, #80]	; (800611c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d4:	d102      	bne.n	80060dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f2      	bne.n	80060c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80060dc:	4b0f      	ldr	r3, [pc, #60]	; (800611c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e8:	d110      	bne.n	800610c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e00f      	b.n	800610e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80060ee:	4b0b      	ldr	r3, [pc, #44]	; (800611c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80060f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060fa:	d007      	beq.n	800610c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80060fc:	4b07      	ldr	r3, [pc, #28]	; (800611c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006104:	4a05      	ldr	r2, [pc, #20]	; (800611c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006106:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800610a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	40007000 	.word	0x40007000
 8006120:	20000008 	.word	0x20000008
 8006124:	431bde83 	.word	0x431bde83

08006128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08a      	sub	sp, #40	; 0x28
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d102      	bne.n	800613c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	f000 bc56 	b.w	80069e8 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800613c:	4ba1      	ldr	r3, [pc, #644]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f003 030c 	and.w	r3, r3, #12
 8006144:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006146:	4b9f      	ldr	r3, [pc, #636]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f003 0303 	and.w	r3, r3, #3
 800614e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0310 	and.w	r3, r3, #16
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 80e6 	beq.w	800632a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d007      	beq.n	8006174 <HAL_RCC_OscConfig+0x4c>
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	2b0c      	cmp	r3, #12
 8006168:	f040 808d 	bne.w	8006286 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	2b01      	cmp	r3, #1
 8006170:	f040 8089 	bne.w	8006286 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006174:	4b93      	ldr	r3, [pc, #588]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d006      	beq.n	800618e <HAL_RCC_OscConfig+0x66>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d102      	bne.n	800618e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	f000 bc2d 	b.w	80069e8 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006192:	4b8c      	ldr	r3, [pc, #560]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b00      	cmp	r3, #0
 800619c:	d004      	beq.n	80061a8 <HAL_RCC_OscConfig+0x80>
 800619e:	4b89      	ldr	r3, [pc, #548]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061a6:	e005      	b.n	80061b4 <HAL_RCC_OscConfig+0x8c>
 80061a8:	4b86      	ldr	r3, [pc, #536]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80061aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061ae:	091b      	lsrs	r3, r3, #4
 80061b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d224      	bcs.n	8006202 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fdbf 	bl	8006d40 <RCC_SetFlashLatencyFromMSIRange>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	f000 bc0d 	b.w	80069e8 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061ce:	4b7d      	ldr	r3, [pc, #500]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a7c      	ldr	r2, [pc, #496]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80061d4:	f043 0308 	orr.w	r3, r3, #8
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	4b7a      	ldr	r3, [pc, #488]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	4977      	ldr	r1, [pc, #476]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061ec:	4b75      	ldr	r3, [pc, #468]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	021b      	lsls	r3, r3, #8
 80061fa:	4972      	ldr	r1, [pc, #456]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	604b      	str	r3, [r1, #4]
 8006200:	e025      	b.n	800624e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006202:	4b70      	ldr	r3, [pc, #448]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a6f      	ldr	r2, [pc, #444]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 8006208:	f043 0308 	orr.w	r3, r3, #8
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	4b6d      	ldr	r3, [pc, #436]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	496a      	ldr	r1, [pc, #424]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 800621c:	4313      	orrs	r3, r2
 800621e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006220:	4b68      	ldr	r3, [pc, #416]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	4965      	ldr	r1, [pc, #404]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 8006230:	4313      	orrs	r3, r2
 8006232:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d109      	bne.n	800624e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	4618      	mov	r0, r3
 8006240:	f000 fd7e 	bl	8006d40 <RCC_SetFlashLatencyFromMSIRange>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e3cc      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800624e:	f000 fcb3 	bl	8006bb8 <HAL_RCC_GetSysClockFreq>
 8006252:	4602      	mov	r2, r0
 8006254:	4b5b      	ldr	r3, [pc, #364]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	091b      	lsrs	r3, r3, #4
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	495a      	ldr	r1, [pc, #360]	; (80063c8 <HAL_RCC_OscConfig+0x2a0>)
 8006260:	5ccb      	ldrb	r3, [r1, r3]
 8006262:	f003 031f 	and.w	r3, r3, #31
 8006266:	fa22 f303 	lsr.w	r3, r2, r3
 800626a:	4a58      	ldr	r2, [pc, #352]	; (80063cc <HAL_RCC_OscConfig+0x2a4>)
 800626c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800626e:	4b58      	ldr	r3, [pc, #352]	; (80063d0 <HAL_RCC_OscConfig+0x2a8>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f7fc f9b8 	bl	80025e8 <HAL_InitTick>
 8006278:	4603      	mov	r3, r0
 800627a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800627c:	7dfb      	ldrb	r3, [r7, #23]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d052      	beq.n	8006328 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8006282:	7dfb      	ldrb	r3, [r7, #23]
 8006284:	e3b0      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d032      	beq.n	80062f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800628e:	4b4d      	ldr	r3, [pc, #308]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a4c      	ldr	r2, [pc, #304]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 8006294:	f043 0301 	orr.w	r3, r3, #1
 8006298:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800629a:	f7fc f9f5 	bl	8002688 <HAL_GetTick>
 800629e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062a0:	e008      	b.n	80062b4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062a2:	f7fc f9f1 	bl	8002688 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d901      	bls.n	80062b4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e399      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062b4:	4b43      	ldr	r3, [pc, #268]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0f0      	beq.n	80062a2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062c0:	4b40      	ldr	r3, [pc, #256]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a3f      	ldr	r2, [pc, #252]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80062c6:	f043 0308 	orr.w	r3, r3, #8
 80062ca:	6013      	str	r3, [r2, #0]
 80062cc:	4b3d      	ldr	r3, [pc, #244]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	493a      	ldr	r1, [pc, #232]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062de:	4b39      	ldr	r3, [pc, #228]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	4935      	ldr	r1, [pc, #212]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	604b      	str	r3, [r1, #4]
 80062f2:	e01a      	b.n	800632a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80062f4:	4b33      	ldr	r3, [pc, #204]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a32      	ldr	r2, [pc, #200]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80062fa:	f023 0301 	bic.w	r3, r3, #1
 80062fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006300:	f7fc f9c2 	bl	8002688 <HAL_GetTick>
 8006304:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006308:	f7fc f9be 	bl	8002688 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e366      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800631a:	4b2a      	ldr	r3, [pc, #168]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1f0      	bne.n	8006308 <HAL_RCC_OscConfig+0x1e0>
 8006326:	e000      	b.n	800632a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006328:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d073      	beq.n	800641e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	2b08      	cmp	r3, #8
 800633a:	d005      	beq.n	8006348 <HAL_RCC_OscConfig+0x220>
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	2b0c      	cmp	r3, #12
 8006340:	d10e      	bne.n	8006360 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	2b03      	cmp	r3, #3
 8006346:	d10b      	bne.n	8006360 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006348:	4b1e      	ldr	r3, [pc, #120]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d063      	beq.n	800641c <HAL_RCC_OscConfig+0x2f4>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d15f      	bne.n	800641c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e343      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006368:	d106      	bne.n	8006378 <HAL_RCC_OscConfig+0x250>
 800636a:	4b16      	ldr	r3, [pc, #88]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a15      	ldr	r2, [pc, #84]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 8006370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	e01d      	b.n	80063b4 <HAL_RCC_OscConfig+0x28c>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006380:	d10c      	bne.n	800639c <HAL_RCC_OscConfig+0x274>
 8006382:	4b10      	ldr	r3, [pc, #64]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a0f      	ldr	r2, [pc, #60]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 8006388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	4b0d      	ldr	r3, [pc, #52]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a0c      	ldr	r2, [pc, #48]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 8006394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	e00b      	b.n	80063b4 <HAL_RCC_OscConfig+0x28c>
 800639c:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a08      	ldr	r2, [pc, #32]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80063a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a05      	ldr	r2, [pc, #20]	; (80063c4 <HAL_RCC_OscConfig+0x29c>)
 80063ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d01b      	beq.n	80063f4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063bc:	f7fc f964 	bl	8002688 <HAL_GetTick>
 80063c0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063c2:	e010      	b.n	80063e6 <HAL_RCC_OscConfig+0x2be>
 80063c4:	40021000 	.word	0x40021000
 80063c8:	080091f0 	.word	0x080091f0
 80063cc:	20000008 	.word	0x20000008
 80063d0:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063d4:	f7fc f958 	bl	8002688 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b64      	cmp	r3, #100	; 0x64
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e300      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063e6:	4ba0      	ldr	r3, [pc, #640]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0f0      	beq.n	80063d4 <HAL_RCC_OscConfig+0x2ac>
 80063f2:	e014      	b.n	800641e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f4:	f7fc f948 	bl	8002688 <HAL_GetTick>
 80063f8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063fa:	e008      	b.n	800640e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063fc:	f7fc f944 	bl	8002688 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b64      	cmp	r3, #100	; 0x64
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e2ec      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800640e:	4b96      	ldr	r3, [pc, #600]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1f0      	bne.n	80063fc <HAL_RCC_OscConfig+0x2d4>
 800641a:	e000      	b.n	800641e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800641c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d060      	beq.n	80064ec <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	2b04      	cmp	r3, #4
 800642e:	d005      	beq.n	800643c <HAL_RCC_OscConfig+0x314>
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	2b0c      	cmp	r3, #12
 8006434:	d119      	bne.n	800646a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	2b02      	cmp	r3, #2
 800643a:	d116      	bne.n	800646a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800643c:	4b8a      	ldr	r3, [pc, #552]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006444:	2b00      	cmp	r3, #0
 8006446:	d005      	beq.n	8006454 <HAL_RCC_OscConfig+0x32c>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e2c9      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006454:	4b84      	ldr	r3, [pc, #528]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	061b      	lsls	r3, r3, #24
 8006462:	4981      	ldr	r1, [pc, #516]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 8006464:	4313      	orrs	r3, r2
 8006466:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006468:	e040      	b.n	80064ec <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d023      	beq.n	80064ba <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006472:	4b7d      	ldr	r3, [pc, #500]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a7c      	ldr	r2, [pc, #496]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 8006478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800647c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647e:	f7fc f903 	bl	8002688 <HAL_GetTick>
 8006482:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006484:	e008      	b.n	8006498 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006486:	f7fc f8ff 	bl	8002688 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d901      	bls.n	8006498 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e2a7      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006498:	4b73      	ldr	r3, [pc, #460]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0f0      	beq.n	8006486 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a4:	4b70      	ldr	r3, [pc, #448]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	061b      	lsls	r3, r3, #24
 80064b2:	496d      	ldr	r1, [pc, #436]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	604b      	str	r3, [r1, #4]
 80064b8:	e018      	b.n	80064ec <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064ba:	4b6b      	ldr	r3, [pc, #428]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a6a      	ldr	r2, [pc, #424]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 80064c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c6:	f7fc f8df 	bl	8002688 <HAL_GetTick>
 80064ca:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064cc:	e008      	b.n	80064e0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064ce:	f7fc f8db 	bl	8002688 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e283      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064e0:	4b61      	ldr	r3, [pc, #388]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1f0      	bne.n	80064ce <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d07f      	beq.n	80065f8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d05f      	beq.n	80065c0 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8006500:	4b59      	ldr	r3, [pc, #356]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 8006502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006506:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699a      	ldr	r2, [r3, #24]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f003 0310 	and.w	r3, r3, #16
 8006512:	429a      	cmp	r2, r3
 8006514:	d037      	beq.n	8006586 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d006      	beq.n	800652e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e25c      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01b      	beq.n	8006570 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8006538:	4b4b      	ldr	r3, [pc, #300]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 800653a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800653e:	4a4a      	ldr	r2, [pc, #296]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 8006540:	f023 0301 	bic.w	r3, r3, #1
 8006544:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006548:	f7fc f89e 	bl	8002688 <HAL_GetTick>
 800654c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800654e:	e008      	b.n	8006562 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006550:	f7fc f89a 	bl	8002688 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b11      	cmp	r3, #17
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e242      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006562:	4b41      	ldr	r3, [pc, #260]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 8006564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1ef      	bne.n	8006550 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8006570:	4b3d      	ldr	r3, [pc, #244]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 8006572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006576:	f023 0210 	bic.w	r2, r3, #16
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	493a      	ldr	r1, [pc, #232]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 8006580:	4313      	orrs	r3, r2
 8006582:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006586:	4b38      	ldr	r3, [pc, #224]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 8006588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800658c:	4a36      	ldr	r2, [pc, #216]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 800658e:	f043 0301 	orr.w	r3, r3, #1
 8006592:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006596:	f7fc f877 	bl	8002688 <HAL_GetTick>
 800659a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800659c:	e008      	b.n	80065b0 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800659e:	f7fc f873 	bl	8002688 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b11      	cmp	r3, #17
 80065aa:	d901      	bls.n	80065b0 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e21b      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80065b0:	4b2d      	ldr	r3, [pc, #180]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 80065b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0ef      	beq.n	800659e <HAL_RCC_OscConfig+0x476>
 80065be:	e01b      	b.n	80065f8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065c0:	4b29      	ldr	r3, [pc, #164]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 80065c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065c6:	4a28      	ldr	r2, [pc, #160]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 80065c8:	f023 0301 	bic.w	r3, r3, #1
 80065cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d0:	f7fc f85a 	bl	8002688 <HAL_GetTick>
 80065d4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065d8:	f7fc f856 	bl	8002688 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b11      	cmp	r3, #17
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e1fe      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065ea:	4b1f      	ldr	r3, [pc, #124]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 80065ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1ef      	bne.n	80065d8 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 80c1 	beq.w	8006788 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006606:	2300      	movs	r3, #0
 8006608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800660c:	4b16      	ldr	r3, [pc, #88]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 800660e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10e      	bne.n	8006636 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006618:	4b13      	ldr	r3, [pc, #76]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 800661a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661c:	4a12      	ldr	r2, [pc, #72]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 800661e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006622:	6593      	str	r3, [r2, #88]	; 0x58
 8006624:	4b10      	ldr	r3, [pc, #64]	; (8006668 <HAL_RCC_OscConfig+0x540>)
 8006626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800662c:	60fb      	str	r3, [r7, #12]
 800662e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006630:	2301      	movs	r3, #1
 8006632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006636:	4b0d      	ldr	r3, [pc, #52]	; (800666c <HAL_RCC_OscConfig+0x544>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663e:	2b00      	cmp	r3, #0
 8006640:	d11c      	bne.n	800667c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006642:	4b0a      	ldr	r3, [pc, #40]	; (800666c <HAL_RCC_OscConfig+0x544>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a09      	ldr	r2, [pc, #36]	; (800666c <HAL_RCC_OscConfig+0x544>)
 8006648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800664c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800664e:	f7fc f81b 	bl	8002688 <HAL_GetTick>
 8006652:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006654:	e00c      	b.n	8006670 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006656:	f7fc f817 	bl	8002688 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b02      	cmp	r3, #2
 8006662:	d905      	bls.n	8006670 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e1bf      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
 8006668:	40021000 	.word	0x40021000
 800666c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006670:	4bb1      	ldr	r3, [pc, #708]	; (8006938 <HAL_RCC_OscConfig+0x810>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0ec      	beq.n	8006656 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d02c      	beq.n	80066e2 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8006688:	4bac      	ldr	r3, [pc, #688]	; (800693c <HAL_RCC_OscConfig+0x814>)
 800668a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	49a8      	ldr	r1, [pc, #672]	; (800693c <HAL_RCC_OscConfig+0x814>)
 800669c:	4313      	orrs	r3, r2
 800669e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d010      	beq.n	80066d0 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80066ae:	4ba3      	ldr	r3, [pc, #652]	; (800693c <HAL_RCC_OscConfig+0x814>)
 80066b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b4:	4aa1      	ldr	r2, [pc, #644]	; (800693c <HAL_RCC_OscConfig+0x814>)
 80066b6:	f043 0304 	orr.w	r3, r3, #4
 80066ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80066be:	4b9f      	ldr	r3, [pc, #636]	; (800693c <HAL_RCC_OscConfig+0x814>)
 80066c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c4:	4a9d      	ldr	r2, [pc, #628]	; (800693c <HAL_RCC_OscConfig+0x814>)
 80066c6:	f043 0301 	orr.w	r3, r3, #1
 80066ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80066ce:	e018      	b.n	8006702 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80066d0:	4b9a      	ldr	r3, [pc, #616]	; (800693c <HAL_RCC_OscConfig+0x814>)
 80066d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d6:	4a99      	ldr	r2, [pc, #612]	; (800693c <HAL_RCC_OscConfig+0x814>)
 80066d8:	f043 0301 	orr.w	r3, r3, #1
 80066dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80066e0:	e00f      	b.n	8006702 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80066e2:	4b96      	ldr	r3, [pc, #600]	; (800693c <HAL_RCC_OscConfig+0x814>)
 80066e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e8:	4a94      	ldr	r2, [pc, #592]	; (800693c <HAL_RCC_OscConfig+0x814>)
 80066ea:	f023 0301 	bic.w	r3, r3, #1
 80066ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80066f2:	4b92      	ldr	r3, [pc, #584]	; (800693c <HAL_RCC_OscConfig+0x814>)
 80066f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f8:	4a90      	ldr	r2, [pc, #576]	; (800693c <HAL_RCC_OscConfig+0x814>)
 80066fa:	f023 0304 	bic.w	r3, r3, #4
 80066fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d016      	beq.n	8006738 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800670a:	f7fb ffbd 	bl	8002688 <HAL_GetTick>
 800670e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006710:	e00a      	b.n	8006728 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006712:	f7fb ffb9 	bl	8002688 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006720:	4293      	cmp	r3, r2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e15f      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006728:	4b84      	ldr	r3, [pc, #528]	; (800693c <HAL_RCC_OscConfig+0x814>)
 800672a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0ed      	beq.n	8006712 <HAL_RCC_OscConfig+0x5ea>
 8006736:	e01d      	b.n	8006774 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006738:	f7fb ffa6 	bl	8002688 <HAL_GetTick>
 800673c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800673e:	e00a      	b.n	8006756 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006740:	f7fb ffa2 	bl	8002688 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	f241 3288 	movw	r2, #5000	; 0x1388
 800674e:	4293      	cmp	r3, r2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e148      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006756:	4b79      	ldr	r3, [pc, #484]	; (800693c <HAL_RCC_OscConfig+0x814>)
 8006758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1ed      	bne.n	8006740 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8006764:	4b75      	ldr	r3, [pc, #468]	; (800693c <HAL_RCC_OscConfig+0x814>)
 8006766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676a:	4a74      	ldr	r2, [pc, #464]	; (800693c <HAL_RCC_OscConfig+0x814>)
 800676c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006778:	2b01      	cmp	r3, #1
 800677a:	d105      	bne.n	8006788 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800677c:	4b6f      	ldr	r3, [pc, #444]	; (800693c <HAL_RCC_OscConfig+0x814>)
 800677e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006780:	4a6e      	ldr	r2, [pc, #440]	; (800693c <HAL_RCC_OscConfig+0x814>)
 8006782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006786:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0320 	and.w	r3, r3, #32
 8006790:	2b00      	cmp	r3, #0
 8006792:	d03c      	beq.n	800680e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006798:	2b00      	cmp	r3, #0
 800679a:	d01c      	beq.n	80067d6 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800679c:	4b67      	ldr	r3, [pc, #412]	; (800693c <HAL_RCC_OscConfig+0x814>)
 800679e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067a2:	4a66      	ldr	r2, [pc, #408]	; (800693c <HAL_RCC_OscConfig+0x814>)
 80067a4:	f043 0301 	orr.w	r3, r3, #1
 80067a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ac:	f7fb ff6c 	bl	8002688 <HAL_GetTick>
 80067b0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067b4:	f7fb ff68 	bl	8002688 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e110      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80067c6:	4b5d      	ldr	r3, [pc, #372]	; (800693c <HAL_RCC_OscConfig+0x814>)
 80067c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d0ef      	beq.n	80067b4 <HAL_RCC_OscConfig+0x68c>
 80067d4:	e01b      	b.n	800680e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067d6:	4b59      	ldr	r3, [pc, #356]	; (800693c <HAL_RCC_OscConfig+0x814>)
 80067d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067dc:	4a57      	ldr	r2, [pc, #348]	; (800693c <HAL_RCC_OscConfig+0x814>)
 80067de:	f023 0301 	bic.w	r3, r3, #1
 80067e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067e6:	f7fb ff4f 	bl	8002688 <HAL_GetTick>
 80067ea:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80067ec:	e008      	b.n	8006800 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067ee:	f7fb ff4b 	bl	8002688 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d901      	bls.n	8006800 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e0f3      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006800:	4b4e      	ldr	r3, [pc, #312]	; (800693c <HAL_RCC_OscConfig+0x814>)
 8006802:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1ef      	bne.n	80067ee <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 80e7 	beq.w	80069e6 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	2b02      	cmp	r3, #2
 800681e:	f040 80b7 	bne.w	8006990 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006822:	4b46      	ldr	r3, [pc, #280]	; (800693c <HAL_RCC_OscConfig+0x814>)
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	f003 0203 	and.w	r2, r3, #3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006832:	429a      	cmp	r2, r3
 8006834:	d124      	bne.n	8006880 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006840:	3b01      	subs	r3, #1
 8006842:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006844:	429a      	cmp	r2, r3
 8006846:	d11b      	bne.n	8006880 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006852:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006854:	429a      	cmp	r2, r3
 8006856:	d113      	bne.n	8006880 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006862:	085b      	lsrs	r3, r3, #1
 8006864:	3b01      	subs	r3, #1
 8006866:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006868:	429a      	cmp	r2, r3
 800686a:	d109      	bne.n	8006880 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006876:	085b      	lsrs	r3, r3, #1
 8006878:	3b01      	subs	r3, #1
 800687a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800687c:	429a      	cmp	r2, r3
 800687e:	d061      	beq.n	8006944 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	2b0c      	cmp	r3, #12
 8006884:	d056      	beq.n	8006934 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006886:	4b2d      	ldr	r3, [pc, #180]	; (800693c <HAL_RCC_OscConfig+0x814>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a2c      	ldr	r2, [pc, #176]	; (800693c <HAL_RCC_OscConfig+0x814>)
 800688c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006890:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006892:	f7fb fef9 	bl	8002688 <HAL_GetTick>
 8006896:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006898:	e008      	b.n	80068ac <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800689a:	f7fb fef5 	bl	8002688 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d901      	bls.n	80068ac <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e09d      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068ac:	4b23      	ldr	r3, [pc, #140]	; (800693c <HAL_RCC_OscConfig+0x814>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1f0      	bne.n	800689a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068b8:	4b20      	ldr	r3, [pc, #128]	; (800693c <HAL_RCC_OscConfig+0x814>)
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	4b20      	ldr	r3, [pc, #128]	; (8006940 <HAL_RCC_OscConfig+0x818>)
 80068be:	4013      	ands	r3, r2
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068c8:	3a01      	subs	r2, #1
 80068ca:	0112      	lsls	r2, r2, #4
 80068cc:	4311      	orrs	r1, r2
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80068d2:	0212      	lsls	r2, r2, #8
 80068d4:	4311      	orrs	r1, r2
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80068da:	0852      	lsrs	r2, r2, #1
 80068dc:	3a01      	subs	r2, #1
 80068de:	0552      	lsls	r2, r2, #21
 80068e0:	4311      	orrs	r1, r2
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80068e6:	0852      	lsrs	r2, r2, #1
 80068e8:	3a01      	subs	r2, #1
 80068ea:	0652      	lsls	r2, r2, #25
 80068ec:	430a      	orrs	r2, r1
 80068ee:	4913      	ldr	r1, [pc, #76]	; (800693c <HAL_RCC_OscConfig+0x814>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80068f4:	4b11      	ldr	r3, [pc, #68]	; (800693c <HAL_RCC_OscConfig+0x814>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a10      	ldr	r2, [pc, #64]	; (800693c <HAL_RCC_OscConfig+0x814>)
 80068fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006900:	4b0e      	ldr	r3, [pc, #56]	; (800693c <HAL_RCC_OscConfig+0x814>)
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	4a0d      	ldr	r2, [pc, #52]	; (800693c <HAL_RCC_OscConfig+0x814>)
 8006906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800690a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800690c:	f7fb febc 	bl	8002688 <HAL_GetTick>
 8006910:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006912:	e008      	b.n	8006926 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006914:	f7fb feb8 	bl	8002688 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	2b02      	cmp	r3, #2
 8006920:	d901      	bls.n	8006926 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e060      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006926:	4b05      	ldr	r3, [pc, #20]	; (800693c <HAL_RCC_OscConfig+0x814>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d0f0      	beq.n	8006914 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006932:	e058      	b.n	80069e6 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e057      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
 8006938:	40007000 	.word	0x40007000
 800693c:	40021000 	.word	0x40021000
 8006940:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006944:	4b2a      	ldr	r3, [pc, #168]	; (80069f0 <HAL_RCC_OscConfig+0x8c8>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d14a      	bne.n	80069e6 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006950:	4b27      	ldr	r3, [pc, #156]	; (80069f0 <HAL_RCC_OscConfig+0x8c8>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a26      	ldr	r2, [pc, #152]	; (80069f0 <HAL_RCC_OscConfig+0x8c8>)
 8006956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800695a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800695c:	4b24      	ldr	r3, [pc, #144]	; (80069f0 <HAL_RCC_OscConfig+0x8c8>)
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	4a23      	ldr	r2, [pc, #140]	; (80069f0 <HAL_RCC_OscConfig+0x8c8>)
 8006962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006966:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006968:	f7fb fe8e 	bl	8002688 <HAL_GetTick>
 800696c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800696e:	e008      	b.n	8006982 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006970:	f7fb fe8a 	bl	8002688 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b02      	cmp	r3, #2
 800697c:	d901      	bls.n	8006982 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e032      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006982:	4b1b      	ldr	r3, [pc, #108]	; (80069f0 <HAL_RCC_OscConfig+0x8c8>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0f0      	beq.n	8006970 <HAL_RCC_OscConfig+0x848>
 800698e:	e02a      	b.n	80069e6 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	2b0c      	cmp	r3, #12
 8006994:	d025      	beq.n	80069e2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006996:	4b16      	ldr	r3, [pc, #88]	; (80069f0 <HAL_RCC_OscConfig+0x8c8>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a15      	ldr	r2, [pc, #84]	; (80069f0 <HAL_RCC_OscConfig+0x8c8>)
 800699c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069a0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80069a2:	4b13      	ldr	r3, [pc, #76]	; (80069f0 <HAL_RCC_OscConfig+0x8c8>)
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	4a12      	ldr	r2, [pc, #72]	; (80069f0 <HAL_RCC_OscConfig+0x8c8>)
 80069a8:	f023 0303 	bic.w	r3, r3, #3
 80069ac:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80069ae:	4b10      	ldr	r3, [pc, #64]	; (80069f0 <HAL_RCC_OscConfig+0x8c8>)
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	4a0f      	ldr	r2, [pc, #60]	; (80069f0 <HAL_RCC_OscConfig+0x8c8>)
 80069b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80069b8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ba:	f7fb fe65 	bl	8002688 <HAL_GetTick>
 80069be:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069c0:	e008      	b.n	80069d4 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c2:	f7fb fe61 	bl	8002688 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d901      	bls.n	80069d4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e009      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069d4:	4b06      	ldr	r3, [pc, #24]	; (80069f0 <HAL_RCC_OscConfig+0x8c8>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1f0      	bne.n	80069c2 <HAL_RCC_OscConfig+0x89a>
 80069e0:	e001      	b.n	80069e6 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e000      	b.n	80069e8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3728      	adds	r7, #40	; 0x28
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	40021000 	.word	0x40021000

080069f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e0c8      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a08:	4b66      	ldr	r3, [pc, #408]	; (8006ba4 <HAL_RCC_ClockConfig+0x1b0>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d910      	bls.n	8006a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a16:	4b63      	ldr	r3, [pc, #396]	; (8006ba4 <HAL_RCC_ClockConfig+0x1b0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f023 0207 	bic.w	r2, r3, #7
 8006a1e:	4961      	ldr	r1, [pc, #388]	; (8006ba4 <HAL_RCC_ClockConfig+0x1b0>)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a26:	4b5f      	ldr	r3, [pc, #380]	; (8006ba4 <HAL_RCC_ClockConfig+0x1b0>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0307 	and.w	r3, r3, #7
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d001      	beq.n	8006a38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e0b0      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d04c      	beq.n	8006ade <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d107      	bne.n	8006a5c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a4c:	4b56      	ldr	r3, [pc, #344]	; (8006ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d121      	bne.n	8006a9c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e09e      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d107      	bne.n	8006a74 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a64:	4b50      	ldr	r3, [pc, #320]	; (8006ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d115      	bne.n	8006a9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e092      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d107      	bne.n	8006a8c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006a7c:	4b4a      	ldr	r3, [pc, #296]	; (8006ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0302 	and.w	r3, r3, #2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d109      	bne.n	8006a9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e086      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a8c:	4b46      	ldr	r3, [pc, #280]	; (8006ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d101      	bne.n	8006a9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e07e      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a9c:	4b42      	ldr	r3, [pc, #264]	; (8006ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f023 0203 	bic.w	r2, r3, #3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	493f      	ldr	r1, [pc, #252]	; (8006ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aae:	f7fb fdeb 	bl	8002688 <HAL_GetTick>
 8006ab2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ab4:	e00a      	b.n	8006acc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ab6:	f7fb fde7 	bl	8002688 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d901      	bls.n	8006acc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e066      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006acc:	4b36      	ldr	r3, [pc, #216]	; (8006ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f003 020c 	and.w	r2, r3, #12
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d1eb      	bne.n	8006ab6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d008      	beq.n	8006afc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006aea:	4b2f      	ldr	r3, [pc, #188]	; (8006ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	492c      	ldr	r1, [pc, #176]	; (8006ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006afc:	4b29      	ldr	r3, [pc, #164]	; (8006ba4 <HAL_RCC_ClockConfig+0x1b0>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0307 	and.w	r3, r3, #7
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d210      	bcs.n	8006b2c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b0a:	4b26      	ldr	r3, [pc, #152]	; (8006ba4 <HAL_RCC_ClockConfig+0x1b0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f023 0207 	bic.w	r2, r3, #7
 8006b12:	4924      	ldr	r1, [pc, #144]	; (8006ba4 <HAL_RCC_ClockConfig+0x1b0>)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b1a:	4b22      	ldr	r3, [pc, #136]	; (8006ba4 <HAL_RCC_ClockConfig+0x1b0>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d001      	beq.n	8006b2c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e036      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d008      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b38:	4b1b      	ldr	r3, [pc, #108]	; (8006ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	4918      	ldr	r1, [pc, #96]	; (8006ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d009      	beq.n	8006b6a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b56:	4b14      	ldr	r3, [pc, #80]	; (8006ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	4910      	ldr	r1, [pc, #64]	; (8006ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b6a:	f000 f825 	bl	8006bb8 <HAL_RCC_GetSysClockFreq>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	4b0d      	ldr	r3, [pc, #52]	; (8006ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	091b      	lsrs	r3, r3, #4
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	490c      	ldr	r1, [pc, #48]	; (8006bac <HAL_RCC_ClockConfig+0x1b8>)
 8006b7c:	5ccb      	ldrb	r3, [r1, r3]
 8006b7e:	f003 031f 	and.w	r3, r3, #31
 8006b82:	fa22 f303 	lsr.w	r3, r2, r3
 8006b86:	4a0a      	ldr	r2, [pc, #40]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006b8a:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fb fd2a 	bl	80025e8 <HAL_InitTick>
 8006b94:	4603      	mov	r3, r0
 8006b96:	72fb      	strb	r3, [r7, #11]

  return status;
 8006b98:	7afb      	ldrb	r3, [r7, #11]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	40022000 	.word	0x40022000
 8006ba8:	40021000 	.word	0x40021000
 8006bac:	080091f0 	.word	0x080091f0
 8006bb0:	20000008 	.word	0x20000008
 8006bb4:	2000000c 	.word	0x2000000c

08006bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b089      	sub	sp, #36	; 0x24
 8006bbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	61fb      	str	r3, [r7, #28]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bc6:	4b3e      	ldr	r3, [pc, #248]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 030c 	and.w	r3, r3, #12
 8006bce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006bd0:	4b3b      	ldr	r3, [pc, #236]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f003 0303 	and.w	r3, r3, #3
 8006bd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d005      	beq.n	8006bec <HAL_RCC_GetSysClockFreq+0x34>
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2b0c      	cmp	r3, #12
 8006be4:	d121      	bne.n	8006c2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d11e      	bne.n	8006c2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006bec:	4b34      	ldr	r3, [pc, #208]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d107      	bne.n	8006c08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006bf8:	4b31      	ldr	r3, [pc, #196]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bfe:	0a1b      	lsrs	r3, r3, #8
 8006c00:	f003 030f 	and.w	r3, r3, #15
 8006c04:	61fb      	str	r3, [r7, #28]
 8006c06:	e005      	b.n	8006c14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006c08:	4b2d      	ldr	r3, [pc, #180]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	091b      	lsrs	r3, r3, #4
 8006c0e:	f003 030f 	and.w	r3, r3, #15
 8006c12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006c14:	4a2b      	ldr	r2, [pc, #172]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10d      	bne.n	8006c40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c28:	e00a      	b.n	8006c40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	d102      	bne.n	8006c36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c30:	4b25      	ldr	r3, [pc, #148]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006c32:	61bb      	str	r3, [r7, #24]
 8006c34:	e004      	b.n	8006c40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	2b08      	cmp	r3, #8
 8006c3a:	d101      	bne.n	8006c40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006c3c:	4b23      	ldr	r3, [pc, #140]	; (8006ccc <HAL_RCC_GetSysClockFreq+0x114>)
 8006c3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	2b0c      	cmp	r3, #12
 8006c44:	d134      	bne.n	8006cb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c46:	4b1e      	ldr	r3, [pc, #120]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d003      	beq.n	8006c5e <HAL_RCC_GetSysClockFreq+0xa6>
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	d003      	beq.n	8006c64 <HAL_RCC_GetSysClockFreq+0xac>
 8006c5c:	e005      	b.n	8006c6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006c5e:	4b1a      	ldr	r3, [pc, #104]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006c60:	617b      	str	r3, [r7, #20]
      break;
 8006c62:	e005      	b.n	8006c70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006c64:	4b19      	ldr	r3, [pc, #100]	; (8006ccc <HAL_RCC_GetSysClockFreq+0x114>)
 8006c66:	617b      	str	r3, [r7, #20]
      break;
 8006c68:	e002      	b.n	8006c70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	617b      	str	r3, [r7, #20]
      break;
 8006c6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c70:	4b13      	ldr	r3, [pc, #76]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	091b      	lsrs	r3, r3, #4
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006c7e:	4b10      	ldr	r3, [pc, #64]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	0a1b      	lsrs	r3, r3, #8
 8006c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	fb02 f203 	mul.w	r2, r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c96:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	0e5b      	lsrs	r3, r3, #25
 8006c9c:	f003 0303 	and.w	r3, r3, #3
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006cb0:	69bb      	ldr	r3, [r7, #24]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3724      	adds	r7, #36	; 0x24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	08009208 	.word	0x08009208
 8006cc8:	00f42400 	.word	0x00f42400
 8006ccc:	007a1200 	.word	0x007a1200

08006cd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cd4:	4b03      	ldr	r3, [pc, #12]	; (8006ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	20000008 	.word	0x20000008

08006ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006cec:	f7ff fff0 	bl	8006cd0 <HAL_RCC_GetHCLKFreq>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	4b06      	ldr	r3, [pc, #24]	; (8006d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	0a1b      	lsrs	r3, r3, #8
 8006cf8:	f003 0307 	and.w	r3, r3, #7
 8006cfc:	4904      	ldr	r1, [pc, #16]	; (8006d10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cfe:	5ccb      	ldrb	r3, [r1, r3]
 8006d00:	f003 031f 	and.w	r3, r3, #31
 8006d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	40021000 	.word	0x40021000
 8006d10:	08009200 	.word	0x08009200

08006d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006d18:	f7ff ffda 	bl	8006cd0 <HAL_RCC_GetHCLKFreq>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	0adb      	lsrs	r3, r3, #11
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	4904      	ldr	r1, [pc, #16]	; (8006d3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d2a:	5ccb      	ldrb	r3, [r1, r3]
 8006d2c:	f003 031f 	and.w	r3, r3, #31
 8006d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	40021000 	.word	0x40021000
 8006d3c:	08009200 	.word	0x08009200

08006d40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006d48:	2300      	movs	r3, #0
 8006d4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006d4c:	4b2a      	ldr	r3, [pc, #168]	; (8006df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d003      	beq.n	8006d60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006d58:	f7ff f982 	bl	8006060 <HAL_PWREx_GetVoltageRange>
 8006d5c:	6178      	str	r0, [r7, #20]
 8006d5e:	e014      	b.n	8006d8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d60:	4b25      	ldr	r3, [pc, #148]	; (8006df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d64:	4a24      	ldr	r2, [pc, #144]	; (8006df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8006d6c:	4b22      	ldr	r3, [pc, #136]	; (8006df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006d78:	f7ff f972 	bl	8006060 <HAL_PWREx_GetVoltageRange>
 8006d7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006d7e:	4b1e      	ldr	r3, [pc, #120]	; (8006df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d82:	4a1d      	ldr	r2, [pc, #116]	; (8006df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d90:	d10b      	bne.n	8006daa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b80      	cmp	r3, #128	; 0x80
 8006d96:	d919      	bls.n	8006dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2ba0      	cmp	r3, #160	; 0xa0
 8006d9c:	d902      	bls.n	8006da4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006d9e:	2302      	movs	r3, #2
 8006da0:	613b      	str	r3, [r7, #16]
 8006da2:	e013      	b.n	8006dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006da4:	2301      	movs	r3, #1
 8006da6:	613b      	str	r3, [r7, #16]
 8006da8:	e010      	b.n	8006dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b80      	cmp	r3, #128	; 0x80
 8006dae:	d902      	bls.n	8006db6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006db0:	2303      	movs	r3, #3
 8006db2:	613b      	str	r3, [r7, #16]
 8006db4:	e00a      	b.n	8006dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b80      	cmp	r3, #128	; 0x80
 8006dba:	d102      	bne.n	8006dc2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	e004      	b.n	8006dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b70      	cmp	r3, #112	; 0x70
 8006dc6:	d101      	bne.n	8006dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006dc8:	2301      	movs	r3, #1
 8006dca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006dcc:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f023 0207 	bic.w	r2, r3, #7
 8006dd4:	4909      	ldr	r1, [pc, #36]	; (8006dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006ddc:	4b07      	ldr	r3, [pc, #28]	; (8006dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d001      	beq.n	8006dee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e000      	b.n	8006df0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	40022000 	.word	0x40022000

08006e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e08:	2300      	movs	r3, #0
 8006e0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 809e 	beq.w	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006e22:	4b46      	ldr	r3, [pc, #280]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e000      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8006e32:	2300      	movs	r3, #0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00d      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e38:	4b40      	ldr	r3, [pc, #256]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3c:	4a3f      	ldr	r2, [pc, #252]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e42:	6593      	str	r3, [r2, #88]	; 0x58
 8006e44:	4b3d      	ldr	r3, [pc, #244]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e4c:	60bb      	str	r3, [r7, #8]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e50:	2301      	movs	r3, #1
 8006e52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e54:	4b3a      	ldr	r3, [pc, #232]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a39      	ldr	r2, [pc, #228]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e60:	f7fb fc12 	bl	8002688 <HAL_GetTick>
 8006e64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006e66:	e009      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e68:	f7fb fc0e 	bl	8002688 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d902      	bls.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	74fb      	strb	r3, [r7, #19]
        break;
 8006e7a:	e005      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006e7c:	4b30      	ldr	r3, [pc, #192]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d0ef      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8006e88:	7cfb      	ldrb	r3, [r7, #19]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d15a      	bne.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e8e:	4b2b      	ldr	r3, [pc, #172]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d01e      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d019      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006eaa:	4b24      	ldr	r3, [pc, #144]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eb4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006eb6:	4b21      	ldr	r3, [pc, #132]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ebc:	4a1f      	ldr	r2, [pc, #124]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ec6:	4b1d      	ldr	r3, [pc, #116]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ecc:	4a1b      	ldr	r2, [pc, #108]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ed6:	4a19      	ldr	r2, [pc, #100]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d016      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee8:	f7fb fbce 	bl	8002688 <HAL_GetTick>
 8006eec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eee:	e00b      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ef0:	f7fb fbca 	bl	8002688 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d902      	bls.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	74fb      	strb	r3, [r7, #19]
            break;
 8006f06:	e006      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f08:	4b0c      	ldr	r3, [pc, #48]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0ec      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8006f16:	7cfb      	ldrb	r3, [r7, #19]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10b      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f1c:	4b07      	ldr	r3, [pc, #28]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2a:	4904      	ldr	r1, [pc, #16]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006f32:	e009      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f34:	7cfb      	ldrb	r3, [r7, #19]
 8006f36:	74bb      	strb	r3, [r7, #18]
 8006f38:	e006      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8006f3a:	bf00      	nop
 8006f3c:	40021000 	.word	0x40021000
 8006f40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f44:	7cfb      	ldrb	r3, [r7, #19]
 8006f46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f48:	7c7b      	ldrb	r3, [r7, #17]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d105      	bne.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f4e:	4b6e      	ldr	r3, [pc, #440]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f52:	4a6d      	ldr	r2, [pc, #436]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f66:	4b68      	ldr	r3, [pc, #416]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f6c:	f023 0203 	bic.w	r2, r3, #3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	4964      	ldr	r1, [pc, #400]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00a      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f88:	4b5f      	ldr	r3, [pc, #380]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f8e:	f023 020c 	bic.w	r2, r3, #12
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	495c      	ldr	r1, [pc, #368]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0304 	and.w	r3, r3, #4
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00a      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006faa:	4b57      	ldr	r3, [pc, #348]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	4953      	ldr	r1, [pc, #332]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0320 	and.w	r3, r3, #32
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00a      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fcc:	4b4e      	ldr	r3, [pc, #312]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	494b      	ldr	r1, [pc, #300]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fee:	4b46      	ldr	r3, [pc, #280]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	4942      	ldr	r1, [pc, #264]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00a      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007010:	4b3d      	ldr	r3, [pc, #244]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007016:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	493a      	ldr	r1, [pc, #232]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007020:	4313      	orrs	r3, r2
 8007022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007032:	4b35      	ldr	r3, [pc, #212]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007038:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	4931      	ldr	r1, [pc, #196]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007042:	4313      	orrs	r3, r2
 8007044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00a      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007054:	4b2c      	ldr	r3, [pc, #176]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800705a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	4929      	ldr	r1, [pc, #164]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007064:	4313      	orrs	r3, r2
 8007066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00a      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007076:	4b24      	ldr	r3, [pc, #144]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	4920      	ldr	r1, [pc, #128]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007086:	4313      	orrs	r3, r2
 8007088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d015      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007098:	4b1b      	ldr	r3, [pc, #108]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800709a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800709e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a6:	4918      	ldr	r1, [pc, #96]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070b6:	d105      	bne.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070b8:	4b13      	ldr	r3, [pc, #76]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	4a12      	ldr	r2, [pc, #72]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80070be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d015      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070d0:	4b0d      	ldr	r3, [pc, #52]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80070d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070de:	490a      	ldr	r1, [pc, #40]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070ee:	d105      	bne.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070f0:	4b05      	ldr	r3, [pc, #20]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	4a04      	ldr	r2, [pc, #16]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80070f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80070fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	40021000 	.word	0x40021000

0800710c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e049      	b.n	80071b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d106      	bne.n	8007138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7fa fd7c 	bl	8001c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	3304      	adds	r3, #4
 8007148:	4619      	mov	r1, r3
 800714a:	4610      	mov	r0, r2
 800714c:	f000 fd68 	bl	8007c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d001      	beq.n	80071d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e03b      	b.n	800724c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2202      	movs	r2, #2
 80071d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f042 0201 	orr.w	r2, r2, #1
 80071ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a19      	ldr	r2, [pc, #100]	; (8007258 <HAL_TIM_Base_Start_IT+0x9c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d009      	beq.n	800720a <HAL_TIM_Base_Start_IT+0x4e>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071fe:	d004      	beq.n	800720a <HAL_TIM_Base_Start_IT+0x4e>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a15      	ldr	r2, [pc, #84]	; (800725c <HAL_TIM_Base_Start_IT+0xa0>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d115      	bne.n	8007236 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	4b13      	ldr	r3, [pc, #76]	; (8007260 <HAL_TIM_Base_Start_IT+0xa4>)
 8007212:	4013      	ands	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b06      	cmp	r3, #6
 800721a:	d015      	beq.n	8007248 <HAL_TIM_Base_Start_IT+0x8c>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007222:	d011      	beq.n	8007248 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0201 	orr.w	r2, r2, #1
 8007232:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007234:	e008      	b.n	8007248 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f042 0201 	orr.w	r2, r2, #1
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	e000      	b.n	800724a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007248:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	40012c00 	.word	0x40012c00
 800725c:	40014000 	.word	0x40014000
 8007260:	00010007 	.word	0x00010007

08007264 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68da      	ldr	r2, [r3, #12]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0201 	bic.w	r2, r2, #1
 800727a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6a1a      	ldr	r2, [r3, #32]
 8007282:	f241 1311 	movw	r3, #4369	; 0x1111
 8007286:	4013      	ands	r3, r2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10f      	bne.n	80072ac <HAL_TIM_Base_Stop_IT+0x48>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6a1a      	ldr	r2, [r3, #32]
 8007292:	f240 4344 	movw	r3, #1092	; 0x444
 8007296:	4013      	ands	r3, r2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d107      	bne.n	80072ac <HAL_TIM_Base_Stop_IT+0x48>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0201 	bic.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b082      	sub	sp, #8
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e049      	b.n	8007368 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d106      	bne.n	80072ee <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f841 	bl	8007370 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2202      	movs	r2, #2
 80072f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	3304      	adds	r3, #4
 80072fe:	4619      	mov	r1, r3
 8007300:	4610      	mov	r0, r2
 8007302:	f000 fc8d 	bl	8007c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d109      	bne.n	80073a8 <HAL_TIM_OC_Start+0x24>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b01      	cmp	r3, #1
 800739e:	bf14      	ite	ne
 80073a0:	2301      	movne	r3, #1
 80073a2:	2300      	moveq	r3, #0
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	e03c      	b.n	8007422 <HAL_TIM_OC_Start+0x9e>
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d109      	bne.n	80073c2 <HAL_TIM_OC_Start+0x3e>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	bf14      	ite	ne
 80073ba:	2301      	movne	r3, #1
 80073bc:	2300      	moveq	r3, #0
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	e02f      	b.n	8007422 <HAL_TIM_OC_Start+0x9e>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d109      	bne.n	80073dc <HAL_TIM_OC_Start+0x58>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	bf14      	ite	ne
 80073d4:	2301      	movne	r3, #1
 80073d6:	2300      	moveq	r3, #0
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	e022      	b.n	8007422 <HAL_TIM_OC_Start+0x9e>
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	2b0c      	cmp	r3, #12
 80073e0:	d109      	bne.n	80073f6 <HAL_TIM_OC_Start+0x72>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	bf14      	ite	ne
 80073ee:	2301      	movne	r3, #1
 80073f0:	2300      	moveq	r3, #0
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	e015      	b.n	8007422 <HAL_TIM_OC_Start+0x9e>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b10      	cmp	r3, #16
 80073fa:	d109      	bne.n	8007410 <HAL_TIM_OC_Start+0x8c>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b01      	cmp	r3, #1
 8007406:	bf14      	ite	ne
 8007408:	2301      	movne	r3, #1
 800740a:	2300      	moveq	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	e008      	b.n	8007422 <HAL_TIM_OC_Start+0x9e>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b01      	cmp	r3, #1
 800741a:	bf14      	ite	ne
 800741c:	2301      	movne	r3, #1
 800741e:	2300      	moveq	r3, #0
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e07e      	b.n	8007528 <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d104      	bne.n	800743a <HAL_TIM_OC_Start+0xb6>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2202      	movs	r2, #2
 8007434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007438:	e023      	b.n	8007482 <HAL_TIM_OC_Start+0xfe>
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b04      	cmp	r3, #4
 800743e:	d104      	bne.n	800744a <HAL_TIM_OC_Start+0xc6>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007448:	e01b      	b.n	8007482 <HAL_TIM_OC_Start+0xfe>
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	2b08      	cmp	r3, #8
 800744e:	d104      	bne.n	800745a <HAL_TIM_OC_Start+0xd6>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007458:	e013      	b.n	8007482 <HAL_TIM_OC_Start+0xfe>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b0c      	cmp	r3, #12
 800745e:	d104      	bne.n	800746a <HAL_TIM_OC_Start+0xe6>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2202      	movs	r2, #2
 8007464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007468:	e00b      	b.n	8007482 <HAL_TIM_OC_Start+0xfe>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b10      	cmp	r3, #16
 800746e:	d104      	bne.n	800747a <HAL_TIM_OC_Start+0xf6>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007478:	e003      	b.n	8007482 <HAL_TIM_OC_Start+0xfe>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2202      	movs	r2, #2
 800747e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2201      	movs	r2, #1
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	4618      	mov	r0, r3
 800748c:	f000 ff44 	bl	8008318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a26      	ldr	r2, [pc, #152]	; (8007530 <HAL_TIM_OC_Start+0x1ac>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d009      	beq.n	80074ae <HAL_TIM_OC_Start+0x12a>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a25      	ldr	r2, [pc, #148]	; (8007534 <HAL_TIM_OC_Start+0x1b0>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d004      	beq.n	80074ae <HAL_TIM_OC_Start+0x12a>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a23      	ldr	r2, [pc, #140]	; (8007538 <HAL_TIM_OC_Start+0x1b4>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d101      	bne.n	80074b2 <HAL_TIM_OC_Start+0x12e>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e000      	b.n	80074b4 <HAL_TIM_OC_Start+0x130>
 80074b2:	2300      	movs	r3, #0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d007      	beq.n	80074c8 <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a18      	ldr	r2, [pc, #96]	; (8007530 <HAL_TIM_OC_Start+0x1ac>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d009      	beq.n	80074e6 <HAL_TIM_OC_Start+0x162>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074da:	d004      	beq.n	80074e6 <HAL_TIM_OC_Start+0x162>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a14      	ldr	r2, [pc, #80]	; (8007534 <HAL_TIM_OC_Start+0x1b0>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d115      	bne.n	8007512 <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	4b13      	ldr	r3, [pc, #76]	; (800753c <HAL_TIM_OC_Start+0x1b8>)
 80074ee:	4013      	ands	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b06      	cmp	r3, #6
 80074f6:	d015      	beq.n	8007524 <HAL_TIM_OC_Start+0x1a0>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074fe:	d011      	beq.n	8007524 <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f042 0201 	orr.w	r2, r2, #1
 800750e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007510:	e008      	b.n	8007524 <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f042 0201 	orr.w	r2, r2, #1
 8007520:	601a      	str	r2, [r3, #0]
 8007522:	e000      	b.n	8007526 <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007524:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	40012c00 	.word	0x40012c00
 8007534:	40014000 	.word	0x40014000
 8007538:	40014400 	.word	0x40014400
 800753c:	00010007 	.word	0x00010007

08007540 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2200      	movs	r2, #0
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	4618      	mov	r0, r3
 8007554:	f000 fee0 	bl	8008318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a39      	ldr	r2, [pc, #228]	; (8007644 <HAL_TIM_OC_Stop+0x104>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d009      	beq.n	8007576 <HAL_TIM_OC_Stop+0x36>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a38      	ldr	r2, [pc, #224]	; (8007648 <HAL_TIM_OC_Stop+0x108>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d004      	beq.n	8007576 <HAL_TIM_OC_Stop+0x36>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a36      	ldr	r2, [pc, #216]	; (800764c <HAL_TIM_OC_Stop+0x10c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d101      	bne.n	800757a <HAL_TIM_OC_Stop+0x3a>
 8007576:	2301      	movs	r3, #1
 8007578:	e000      	b.n	800757c <HAL_TIM_OC_Stop+0x3c>
 800757a:	2300      	movs	r3, #0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d017      	beq.n	80075b0 <HAL_TIM_OC_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6a1a      	ldr	r2, [r3, #32]
 8007586:	f241 1311 	movw	r3, #4369	; 0x1111
 800758a:	4013      	ands	r3, r2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10f      	bne.n	80075b0 <HAL_TIM_OC_Stop+0x70>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6a1a      	ldr	r2, [r3, #32]
 8007596:	f240 4344 	movw	r3, #1092	; 0x444
 800759a:	4013      	ands	r3, r2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d107      	bne.n	80075b0 <HAL_TIM_OC_Stop+0x70>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6a1a      	ldr	r2, [r3, #32]
 80075b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80075ba:	4013      	ands	r3, r2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10f      	bne.n	80075e0 <HAL_TIM_OC_Stop+0xa0>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6a1a      	ldr	r2, [r3, #32]
 80075c6:	f240 4344 	movw	r3, #1092	; 0x444
 80075ca:	4013      	ands	r3, r2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d107      	bne.n	80075e0 <HAL_TIM_OC_Stop+0xa0>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 0201 	bic.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d104      	bne.n	80075f0 <HAL_TIM_OC_Stop+0xb0>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075ee:	e023      	b.n	8007638 <HAL_TIM_OC_Stop+0xf8>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	d104      	bne.n	8007600 <HAL_TIM_OC_Stop+0xc0>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075fe:	e01b      	b.n	8007638 <HAL_TIM_OC_Stop+0xf8>
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2b08      	cmp	r3, #8
 8007604:	d104      	bne.n	8007610 <HAL_TIM_OC_Stop+0xd0>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800760e:	e013      	b.n	8007638 <HAL_TIM_OC_Stop+0xf8>
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2b0c      	cmp	r3, #12
 8007614:	d104      	bne.n	8007620 <HAL_TIM_OC_Stop+0xe0>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800761e:	e00b      	b.n	8007638 <HAL_TIM_OC_Stop+0xf8>
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	2b10      	cmp	r3, #16
 8007624:	d104      	bne.n	8007630 <HAL_TIM_OC_Stop+0xf0>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800762e:	e003      	b.n	8007638 <HAL_TIM_OC_Stop+0xf8>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	40012c00 	.word	0x40012c00
 8007648:	40014000 	.word	0x40014000
 800764c:	40014400 	.word	0x40014400

08007650 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e041      	b.n	80076e8 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b00      	cmp	r3, #0
 800766e:	d106      	bne.n	800767e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f839 	bl	80076f0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2202      	movs	r2, #2
 8007682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3304      	adds	r3, #4
 800768e:	4619      	mov	r1, r3
 8007690:	4610      	mov	r0, r2
 8007692:	f000 fac5 	bl	8007c20 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f022 0208 	bic.w	r2, r2, #8
 80076a4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6819      	ldr	r1, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	430a      	orrs	r2, r1
 80076b4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b02      	cmp	r3, #2
 8007718:	d122      	bne.n	8007760 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f003 0302 	and.w	r3, r3, #2
 8007724:	2b02      	cmp	r3, #2
 8007726:	d11b      	bne.n	8007760 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f06f 0202 	mvn.w	r2, #2
 8007730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	f003 0303 	and.w	r3, r3, #3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fa4c 	bl	8007be4 <HAL_TIM_IC_CaptureCallback>
 800774c:	e005      	b.n	800775a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fa3e 	bl	8007bd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fa4f 	bl	8007bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	f003 0304 	and.w	r3, r3, #4
 800776a:	2b04      	cmp	r3, #4
 800776c:	d122      	bne.n	80077b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f003 0304 	and.w	r3, r3, #4
 8007778:	2b04      	cmp	r3, #4
 800777a:	d11b      	bne.n	80077b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f06f 0204 	mvn.w	r2, #4
 8007784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2202      	movs	r2, #2
 800778a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fa22 	bl	8007be4 <HAL_TIM_IC_CaptureCallback>
 80077a0:	e005      	b.n	80077ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fa14 	bl	8007bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fa25 	bl	8007bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	f003 0308 	and.w	r3, r3, #8
 80077be:	2b08      	cmp	r3, #8
 80077c0:	d122      	bne.n	8007808 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	f003 0308 	and.w	r3, r3, #8
 80077cc:	2b08      	cmp	r3, #8
 80077ce:	d11b      	bne.n	8007808 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f06f 0208 	mvn.w	r2, #8
 80077d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2204      	movs	r2, #4
 80077de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	f003 0303 	and.w	r3, r3, #3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d003      	beq.n	80077f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f9f8 	bl	8007be4 <HAL_TIM_IC_CaptureCallback>
 80077f4:	e005      	b.n	8007802 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f9ea 	bl	8007bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f9fb 	bl	8007bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f003 0310 	and.w	r3, r3, #16
 8007812:	2b10      	cmp	r3, #16
 8007814:	d122      	bne.n	800785c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	f003 0310 	and.w	r3, r3, #16
 8007820:	2b10      	cmp	r3, #16
 8007822:	d11b      	bne.n	800785c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f06f 0210 	mvn.w	r2, #16
 800782c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2208      	movs	r2, #8
 8007832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800783e:	2b00      	cmp	r3, #0
 8007840:	d003      	beq.n	800784a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f9ce 	bl	8007be4 <HAL_TIM_IC_CaptureCallback>
 8007848:	e005      	b.n	8007856 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f9c0 	bl	8007bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f9d1 	bl	8007bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b01      	cmp	r3, #1
 8007868:	d10e      	bne.n	8007888 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b01      	cmp	r3, #1
 8007876:	d107      	bne.n	8007888 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f06f 0201 	mvn.w	r2, #1
 8007880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f99a 	bl	8007bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007892:	2b80      	cmp	r3, #128	; 0x80
 8007894:	d10e      	bne.n	80078b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a0:	2b80      	cmp	r3, #128	; 0x80
 80078a2:	d107      	bne.n	80078b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fdc8 	bl	8008444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078c2:	d10e      	bne.n	80078e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ce:	2b80      	cmp	r3, #128	; 0x80
 80078d0:	d107      	bne.n	80078e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80078da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fdbb 	bl	8008458 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ec:	2b40      	cmp	r3, #64	; 0x40
 80078ee:	d10e      	bne.n	800790e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fa:	2b40      	cmp	r3, #64	; 0x40
 80078fc:	d107      	bne.n	800790e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f97f 	bl	8007c0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	f003 0320 	and.w	r3, r3, #32
 8007918:	2b20      	cmp	r3, #32
 800791a:	d10e      	bne.n	800793a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	f003 0320 	and.w	r3, r3, #32
 8007926:	2b20      	cmp	r3, #32
 8007928:	d107      	bne.n	800793a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f06f 0220 	mvn.w	r2, #32
 8007932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fd7b 	bl	8008430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800793a:	bf00      	nop
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007956:	2b01      	cmp	r3, #1
 8007958:	d101      	bne.n	800795e <HAL_TIM_OC_ConfigChannel+0x1a>
 800795a:	2302      	movs	r3, #2
 800795c:	e064      	b.n	8007a28 <HAL_TIM_OC_ConfigChannel+0xe4>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b14      	cmp	r3, #20
 800796a:	d857      	bhi.n	8007a1c <HAL_TIM_OC_ConfigChannel+0xd8>
 800796c:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <HAL_TIM_OC_ConfigChannel+0x30>)
 800796e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007972:	bf00      	nop
 8007974:	080079c9 	.word	0x080079c9
 8007978:	08007a1d 	.word	0x08007a1d
 800797c:	08007a1d 	.word	0x08007a1d
 8007980:	08007a1d 	.word	0x08007a1d
 8007984:	080079d7 	.word	0x080079d7
 8007988:	08007a1d 	.word	0x08007a1d
 800798c:	08007a1d 	.word	0x08007a1d
 8007990:	08007a1d 	.word	0x08007a1d
 8007994:	080079e5 	.word	0x080079e5
 8007998:	08007a1d 	.word	0x08007a1d
 800799c:	08007a1d 	.word	0x08007a1d
 80079a0:	08007a1d 	.word	0x08007a1d
 80079a4:	080079f3 	.word	0x080079f3
 80079a8:	08007a1d 	.word	0x08007a1d
 80079ac:	08007a1d 	.word	0x08007a1d
 80079b0:	08007a1d 	.word	0x08007a1d
 80079b4:	08007a01 	.word	0x08007a01
 80079b8:	08007a1d 	.word	0x08007a1d
 80079bc:	08007a1d 	.word	0x08007a1d
 80079c0:	08007a1d 	.word	0x08007a1d
 80079c4:	08007a0f 	.word	0x08007a0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68b9      	ldr	r1, [r7, #8]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 f98a 	bl	8007ce8 <TIM_OC1_SetConfig>
      break;
 80079d4:	e023      	b.n	8007a1e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 f9ff 	bl	8007de0 <TIM_OC2_SetConfig>
      break;
 80079e2:	e01c      	b.n	8007a1e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68b9      	ldr	r1, [r7, #8]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 fa72 	bl	8007ed4 <TIM_OC3_SetConfig>
      break;
 80079f0:	e015      	b.n	8007a1e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68b9      	ldr	r1, [r7, #8]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fae3 	bl	8007fc4 <TIM_OC4_SetConfig>
      break;
 80079fe:	e00e      	b.n	8007a1e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68b9      	ldr	r1, [r7, #8]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 fb3a 	bl	8008080 <TIM_OC5_SetConfig>
      break;
 8007a0c:	e007      	b.n	8007a1e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68b9      	ldr	r1, [r7, #8]
 8007a14:	4618      	mov	r0, r3
 8007a16:	f000 fb8b 	bl	8008130 <TIM_OC6_SetConfig>
      break;
 8007a1a:	e000      	b.n	8007a1e <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8007a1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d101      	bne.n	8007a48 <HAL_TIM_ConfigClockSource+0x18>
 8007a44:	2302      	movs	r3, #2
 8007a46:	e0b5      	b.n	8007bb4 <HAL_TIM_ConfigClockSource+0x184>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2202      	movs	r2, #2
 8007a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a84:	d03e      	beq.n	8007b04 <HAL_TIM_ConfigClockSource+0xd4>
 8007a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a8a:	f200 8087 	bhi.w	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a92:	f000 8085 	beq.w	8007ba0 <HAL_TIM_ConfigClockSource+0x170>
 8007a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a9a:	d87f      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007a9c:	2b70      	cmp	r3, #112	; 0x70
 8007a9e:	d01a      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0xa6>
 8007aa0:	2b70      	cmp	r3, #112	; 0x70
 8007aa2:	d87b      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007aa4:	2b60      	cmp	r3, #96	; 0x60
 8007aa6:	d050      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x11a>
 8007aa8:	2b60      	cmp	r3, #96	; 0x60
 8007aaa:	d877      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007aac:	2b50      	cmp	r3, #80	; 0x50
 8007aae:	d03c      	beq.n	8007b2a <HAL_TIM_ConfigClockSource+0xfa>
 8007ab0:	2b50      	cmp	r3, #80	; 0x50
 8007ab2:	d873      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007ab4:	2b40      	cmp	r3, #64	; 0x40
 8007ab6:	d058      	beq.n	8007b6a <HAL_TIM_ConfigClockSource+0x13a>
 8007ab8:	2b40      	cmp	r3, #64	; 0x40
 8007aba:	d86f      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007abc:	2b30      	cmp	r3, #48	; 0x30
 8007abe:	d064      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x15a>
 8007ac0:	2b30      	cmp	r3, #48	; 0x30
 8007ac2:	d86b      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007ac4:	2b20      	cmp	r3, #32
 8007ac6:	d060      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x15a>
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	d867      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d05c      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x15a>
 8007ad0:	2b10      	cmp	r3, #16
 8007ad2:	d05a      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007ad4:	e062      	b.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6818      	ldr	r0, [r3, #0]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	6899      	ldr	r1, [r3, #8]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	f000 fbf7 	bl	80082d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007af8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	609a      	str	r2, [r3, #8]
      break;
 8007b02:	e04e      	b.n	8007ba2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6818      	ldr	r0, [r3, #0]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	6899      	ldr	r1, [r3, #8]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f000 fbe0 	bl	80082d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b26:	609a      	str	r2, [r3, #8]
      break;
 8007b28:	e03b      	b.n	8007ba2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6818      	ldr	r0, [r3, #0]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	6859      	ldr	r1, [r3, #4]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	461a      	mov	r2, r3
 8007b38:	f000 fb54 	bl	80081e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2150      	movs	r1, #80	; 0x50
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 fbad 	bl	80082a2 <TIM_ITRx_SetConfig>
      break;
 8007b48:	e02b      	b.n	8007ba2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6818      	ldr	r0, [r3, #0]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	6859      	ldr	r1, [r3, #4]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	461a      	mov	r2, r3
 8007b58:	f000 fb73 	bl	8008242 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2160      	movs	r1, #96	; 0x60
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 fb9d 	bl	80082a2 <TIM_ITRx_SetConfig>
      break;
 8007b68:	e01b      	b.n	8007ba2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6818      	ldr	r0, [r3, #0]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	6859      	ldr	r1, [r3, #4]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	461a      	mov	r2, r3
 8007b78:	f000 fb34 	bl	80081e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2140      	movs	r1, #64	; 0x40
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 fb8d 	bl	80082a2 <TIM_ITRx_SetConfig>
      break;
 8007b88:	e00b      	b.n	8007ba2 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4619      	mov	r1, r3
 8007b94:	4610      	mov	r0, r2
 8007b96:	f000 fb84 	bl	80082a2 <TIM_ITRx_SetConfig>
        break;
 8007b9a:	e002      	b.n	8007ba2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8007b9c:	bf00      	nop
 8007b9e:	e000      	b.n	8007ba2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8007ba0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a2a      	ldr	r2, [pc, #168]	; (8007cdc <TIM_Base_SetConfig+0xbc>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d003      	beq.n	8007c40 <TIM_Base_SetConfig+0x20>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c3e:	d108      	bne.n	8007c52 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a21      	ldr	r2, [pc, #132]	; (8007cdc <TIM_Base_SetConfig+0xbc>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d00b      	beq.n	8007c72 <TIM_Base_SetConfig+0x52>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c60:	d007      	beq.n	8007c72 <TIM_Base_SetConfig+0x52>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a1e      	ldr	r2, [pc, #120]	; (8007ce0 <TIM_Base_SetConfig+0xc0>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d003      	beq.n	8007c72 <TIM_Base_SetConfig+0x52>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ce4 <TIM_Base_SetConfig+0xc4>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d108      	bne.n	8007c84 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	689a      	ldr	r2, [r3, #8]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a0c      	ldr	r2, [pc, #48]	; (8007cdc <TIM_Base_SetConfig+0xbc>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d007      	beq.n	8007cc0 <TIM_Base_SetConfig+0xa0>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a0b      	ldr	r2, [pc, #44]	; (8007ce0 <TIM_Base_SetConfig+0xc0>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d003      	beq.n	8007cc0 <TIM_Base_SetConfig+0xa0>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a0a      	ldr	r2, [pc, #40]	; (8007ce4 <TIM_Base_SetConfig+0xc4>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d103      	bne.n	8007cc8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	691a      	ldr	r2, [r3, #16]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	615a      	str	r2, [r3, #20]
}
 8007cce:	bf00      	nop
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	40012c00 	.word	0x40012c00
 8007ce0:	40014000 	.word	0x40014000
 8007ce4:	40014400 	.word	0x40014400

08007ce8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	f023 0201 	bic.w	r2, r3, #1
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f023 0303 	bic.w	r3, r3, #3
 8007d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f023 0302 	bic.w	r3, r3, #2
 8007d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a24      	ldr	r2, [pc, #144]	; (8007dd4 <TIM_OC1_SetConfig+0xec>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d007      	beq.n	8007d58 <TIM_OC1_SetConfig+0x70>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a23      	ldr	r2, [pc, #140]	; (8007dd8 <TIM_OC1_SetConfig+0xf0>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d003      	beq.n	8007d58 <TIM_OC1_SetConfig+0x70>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a22      	ldr	r2, [pc, #136]	; (8007ddc <TIM_OC1_SetConfig+0xf4>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d10c      	bne.n	8007d72 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f023 0308 	bic.w	r3, r3, #8
 8007d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f023 0304 	bic.w	r3, r3, #4
 8007d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a17      	ldr	r2, [pc, #92]	; (8007dd4 <TIM_OC1_SetConfig+0xec>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d007      	beq.n	8007d8a <TIM_OC1_SetConfig+0xa2>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a16      	ldr	r2, [pc, #88]	; (8007dd8 <TIM_OC1_SetConfig+0xf0>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d003      	beq.n	8007d8a <TIM_OC1_SetConfig+0xa2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a15      	ldr	r2, [pc, #84]	; (8007ddc <TIM_OC1_SetConfig+0xf4>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d111      	bne.n	8007dae <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	621a      	str	r2, [r3, #32]
}
 8007dc8:	bf00      	nop
 8007dca:	371c      	adds	r7, #28
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	40012c00 	.word	0x40012c00
 8007dd8:	40014000 	.word	0x40014000
 8007ddc:	40014400 	.word	0x40014400

08007de0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	f023 0210 	bic.w	r2, r3, #16
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	021b      	lsls	r3, r3, #8
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	f023 0320 	bic.w	r3, r3, #32
 8007e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	011b      	lsls	r3, r3, #4
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a22      	ldr	r2, [pc, #136]	; (8007ec8 <TIM_OC2_SetConfig+0xe8>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d10d      	bne.n	8007e60 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	011b      	lsls	r3, r3, #4
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a19      	ldr	r2, [pc, #100]	; (8007ec8 <TIM_OC2_SetConfig+0xe8>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d007      	beq.n	8007e78 <TIM_OC2_SetConfig+0x98>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a18      	ldr	r2, [pc, #96]	; (8007ecc <TIM_OC2_SetConfig+0xec>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d003      	beq.n	8007e78 <TIM_OC2_SetConfig+0x98>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a17      	ldr	r2, [pc, #92]	; (8007ed0 <TIM_OC2_SetConfig+0xf0>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d113      	bne.n	8007ea0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	621a      	str	r2, [r3, #32]
}
 8007eba:	bf00      	nop
 8007ebc:	371c      	adds	r7, #28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	40012c00 	.word	0x40012c00
 8007ecc:	40014000 	.word	0x40014000
 8007ed0:	40014400 	.word	0x40014400

08007ed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	69db      	ldr	r3, [r3, #28]
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f023 0303 	bic.w	r3, r3, #3
 8007f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	021b      	lsls	r3, r3, #8
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a21      	ldr	r2, [pc, #132]	; (8007fb8 <TIM_OC3_SetConfig+0xe4>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d10d      	bne.n	8007f52 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	021b      	lsls	r3, r3, #8
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a18      	ldr	r2, [pc, #96]	; (8007fb8 <TIM_OC3_SetConfig+0xe4>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d007      	beq.n	8007f6a <TIM_OC3_SetConfig+0x96>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a17      	ldr	r2, [pc, #92]	; (8007fbc <TIM_OC3_SetConfig+0xe8>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d003      	beq.n	8007f6a <TIM_OC3_SetConfig+0x96>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a16      	ldr	r2, [pc, #88]	; (8007fc0 <TIM_OC3_SetConfig+0xec>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d113      	bne.n	8007f92 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	011b      	lsls	r3, r3, #4
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	011b      	lsls	r3, r3, #4
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	685a      	ldr	r2, [r3, #4]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	621a      	str	r2, [r3, #32]
}
 8007fac:	bf00      	nop
 8007fae:	371c      	adds	r7, #28
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	40012c00 	.word	0x40012c00
 8007fbc:	40014000 	.word	0x40014000
 8007fc0:	40014400 	.word	0x40014400

08007fc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	021b      	lsls	r3, r3, #8
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	4313      	orrs	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	031b      	lsls	r3, r3, #12
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	4313      	orrs	r3, r2
 800801e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a14      	ldr	r2, [pc, #80]	; (8008074 <TIM_OC4_SetConfig+0xb0>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d007      	beq.n	8008038 <TIM_OC4_SetConfig+0x74>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a13      	ldr	r2, [pc, #76]	; (8008078 <TIM_OC4_SetConfig+0xb4>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d003      	beq.n	8008038 <TIM_OC4_SetConfig+0x74>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a12      	ldr	r2, [pc, #72]	; (800807c <TIM_OC4_SetConfig+0xb8>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d109      	bne.n	800804c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800803e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	019b      	lsls	r3, r3, #6
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	4313      	orrs	r3, r2
 800804a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	621a      	str	r2, [r3, #32]
}
 8008066:	bf00      	nop
 8008068:	371c      	adds	r7, #28
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	40012c00 	.word	0x40012c00
 8008078:	40014000 	.word	0x40014000
 800807c:	40014400 	.word	0x40014400

08008080 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008080:	b480      	push	{r7}
 8008082:	b087      	sub	sp, #28
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80080c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	041b      	lsls	r3, r3, #16
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a13      	ldr	r2, [pc, #76]	; (8008124 <TIM_OC5_SetConfig+0xa4>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d007      	beq.n	80080ea <TIM_OC5_SetConfig+0x6a>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a12      	ldr	r2, [pc, #72]	; (8008128 <TIM_OC5_SetConfig+0xa8>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d003      	beq.n	80080ea <TIM_OC5_SetConfig+0x6a>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a11      	ldr	r2, [pc, #68]	; (800812c <TIM_OC5_SetConfig+0xac>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d109      	bne.n	80080fe <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	021b      	lsls	r3, r3, #8
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	621a      	str	r2, [r3, #32]
}
 8008118:	bf00      	nop
 800811a:	371c      	adds	r7, #28
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	40012c00 	.word	0x40012c00
 8008128:	40014000 	.word	0x40014000
 800812c:	40014400 	.word	0x40014400

08008130 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008130:	b480      	push	{r7}
 8008132:	b087      	sub	sp, #28
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a1b      	ldr	r3, [r3, #32]
 800813e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800815e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	021b      	lsls	r3, r3, #8
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	4313      	orrs	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008176:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	051b      	lsls	r3, r3, #20
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	4313      	orrs	r3, r2
 8008182:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a14      	ldr	r2, [pc, #80]	; (80081d8 <TIM_OC6_SetConfig+0xa8>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d007      	beq.n	800819c <TIM_OC6_SetConfig+0x6c>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a13      	ldr	r2, [pc, #76]	; (80081dc <TIM_OC6_SetConfig+0xac>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d003      	beq.n	800819c <TIM_OC6_SetConfig+0x6c>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a12      	ldr	r2, [pc, #72]	; (80081e0 <TIM_OC6_SetConfig+0xb0>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d109      	bne.n	80081b0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	029b      	lsls	r3, r3, #10
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	621a      	str	r2, [r3, #32]
}
 80081ca:	bf00      	nop
 80081cc:	371c      	adds	r7, #28
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	40012c00 	.word	0x40012c00
 80081dc:	40014000 	.word	0x40014000
 80081e0:	40014400 	.word	0x40014400

080081e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	f023 0201 	bic.w	r2, r3, #1
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800820e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	4313      	orrs	r3, r2
 8008218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f023 030a 	bic.w	r3, r3, #10
 8008220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	621a      	str	r2, [r3, #32]
}
 8008236:	bf00      	nop
 8008238:	371c      	adds	r7, #28
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008242:	b480      	push	{r7}
 8008244:	b087      	sub	sp, #28
 8008246:	af00      	add	r7, sp, #0
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	f023 0210 	bic.w	r2, r3, #16
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800826c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	031b      	lsls	r3, r3, #12
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	4313      	orrs	r3, r2
 8008276:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800827e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	011b      	lsls	r3, r3, #4
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	4313      	orrs	r3, r2
 8008288:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	621a      	str	r2, [r3, #32]
}
 8008296:	bf00      	nop
 8008298:	371c      	adds	r7, #28
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b085      	sub	sp, #20
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4313      	orrs	r3, r2
 80082c0:	f043 0307 	orr.w	r3, r3, #7
 80082c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	609a      	str	r2, [r3, #8]
}
 80082cc:	bf00      	nop
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
 80082e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	021a      	lsls	r2, r3, #8
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	431a      	orrs	r2, r3
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	4313      	orrs	r3, r2
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	4313      	orrs	r3, r2
 8008304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	609a      	str	r2, [r3, #8]
}
 800830c:	bf00      	nop
 800830e:	371c      	adds	r7, #28
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	f003 031f 	and.w	r3, r3, #31
 800832a:	2201      	movs	r2, #1
 800832c:	fa02 f303 	lsl.w	r3, r2, r3
 8008330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6a1a      	ldr	r2, [r3, #32]
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	43db      	mvns	r3, r3
 800833a:	401a      	ands	r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6a1a      	ldr	r2, [r3, #32]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f003 031f 	and.w	r3, r3, #31
 800834a:	6879      	ldr	r1, [r7, #4]
 800834c:	fa01 f303 	lsl.w	r3, r1, r3
 8008350:	431a      	orrs	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	621a      	str	r2, [r3, #32]
}
 8008356:	bf00      	nop
 8008358:	371c      	adds	r7, #28
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
	...

08008364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008374:	2b01      	cmp	r3, #1
 8008376:	d101      	bne.n	800837c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008378:	2302      	movs	r3, #2
 800837a:	e04f      	b.n	800841c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2202      	movs	r2, #2
 8008388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a21      	ldr	r2, [pc, #132]	; (8008428 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d108      	bne.n	80083b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80083ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a14      	ldr	r2, [pc, #80]	; (8008428 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d009      	beq.n	80083f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e4:	d004      	beq.n	80083f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a10      	ldr	r2, [pc, #64]	; (800842c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d10c      	bne.n	800840a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	4313      	orrs	r3, r2
 8008400:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr
 8008428:	40012c00 	.word	0x40012c00
 800842c:	40014000 	.word	0x40014000

08008430 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d101      	bne.n	800847e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e040      	b.n	8008500 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008482:	2b00      	cmp	r3, #0
 8008484:	d106      	bne.n	8008494 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7f9 fc72 	bl	8001d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2224      	movs	r2, #36	; 0x24
 8008498:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f022 0201 	bic.w	r2, r2, #1
 80084a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f968 	bl	8008780 <UART_SetConfig>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d101      	bne.n	80084ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e022      	b.n	8008500 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d002      	beq.n	80084c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fb90 	bl	8008be8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689a      	ldr	r2, [r3, #8]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0201 	orr.w	r2, r2, #1
 80084f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fc17 	bl	8008d2c <UART_CheckIdleState>
 80084fe:	4603      	mov	r3, r0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e02b      	b.n	8008572 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2224      	movs	r2, #36	; 0x24
 800851e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 0201 	bic.w	r2, r2, #1
 800852e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2200      	movs	r2, #0
 800853e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2200      	movs	r2, #0
 8008546:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7f9 fc85 	bl	8001e58 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b08a      	sub	sp, #40	; 0x28
 800857e:	af02      	add	r7, sp, #8
 8008580:	60f8      	str	r0, [r7, #12]
 8008582:	60b9      	str	r1, [r7, #8]
 8008584:	603b      	str	r3, [r7, #0]
 8008586:	4613      	mov	r3, r2
 8008588:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800858e:	2b20      	cmp	r3, #32
 8008590:	f040 8082 	bne.w	8008698 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d002      	beq.n	80085a0 <HAL_UART_Transmit+0x26>
 800859a:	88fb      	ldrh	r3, [r7, #6]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e07a      	b.n	800869a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d101      	bne.n	80085b2 <HAL_UART_Transmit+0x38>
 80085ae:	2302      	movs	r3, #2
 80085b0:	e073      	b.n	800869a <HAL_UART_Transmit+0x120>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2221      	movs	r2, #33	; 0x21
 80085c6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085c8:	f7fa f85e 	bl	8002688 <HAL_GetTick>
 80085cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	88fa      	ldrh	r2, [r7, #6]
 80085d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	88fa      	ldrh	r2, [r7, #6]
 80085da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085e6:	d108      	bne.n	80085fa <HAL_UART_Transmit+0x80>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d104      	bne.n	80085fa <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80085f0:	2300      	movs	r3, #0
 80085f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	61bb      	str	r3, [r7, #24]
 80085f8:	e003      	b.n	8008602 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085fe:	2300      	movs	r3, #0
 8008600:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800860a:	e02d      	b.n	8008668 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	2200      	movs	r2, #0
 8008614:	2180      	movs	r1, #128	; 0x80
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f000 fbd1 	bl	8008dbe <UART_WaitOnFlagUntilTimeout>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e039      	b.n	800869a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10b      	bne.n	8008644 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	881a      	ldrh	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008638:	b292      	uxth	r2, r2
 800863a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	3302      	adds	r3, #2
 8008640:	61bb      	str	r3, [r7, #24]
 8008642:	e008      	b.n	8008656 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	781a      	ldrb	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	b292      	uxth	r2, r2
 800864e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	3301      	adds	r3, #1
 8008654:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800865c:	b29b      	uxth	r3, r3
 800865e:	3b01      	subs	r3, #1
 8008660:	b29a      	uxth	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800866e:	b29b      	uxth	r3, r3
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1cb      	bne.n	800860c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	2200      	movs	r2, #0
 800867c:	2140      	movs	r1, #64	; 0x40
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f000 fb9d 	bl	8008dbe <UART_WaitOnFlagUntilTimeout>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d001      	beq.n	800868e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e005      	b.n	800869a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2220      	movs	r2, #32
 8008692:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	e000      	b.n	800869a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008698:	2302      	movs	r3, #2
  }
}
 800869a:	4618      	mov	r0, r3
 800869c:	3720      	adds	r7, #32
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
	...

080086a4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	4613      	mov	r3, r2
 80086b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086b6:	2b20      	cmp	r3, #32
 80086b8:	d131      	bne.n	800871e <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <HAL_UART_Receive_DMA+0x22>
 80086c0:	88fb      	ldrh	r3, [r7, #6]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d101      	bne.n	80086ca <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e02a      	b.n	8008720 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d101      	bne.n	80086d8 <HAL_UART_Receive_DMA+0x34>
 80086d4:	2302      	movs	r3, #2
 80086d6:	e023      	b.n	8008720 <HAL_UART_Receive_DMA+0x7c>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a0f      	ldr	r2, [pc, #60]	; (8008728 <HAL_UART_Receive_DMA+0x84>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d00e      	beq.n	800870e <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d007      	beq.n	800870e <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800870c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800870e:	88fb      	ldrh	r3, [r7, #6]
 8008710:	461a      	mov	r2, r3
 8008712:	68b9      	ldr	r1, [r7, #8]
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f000 fbcf 	bl	8008eb8 <UART_Start_Receive_DMA>
 800871a:	4603      	mov	r3, r0
 800871c:	e000      	b.n	8008720 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800871e:	2302      	movs	r3, #2
  }
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	40008000 	.word	0x40008000

0800872c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008780:	b5b0      	push	{r4, r5, r7, lr}
 8008782:	b088      	sub	sp, #32
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	431a      	orrs	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	431a      	orrs	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	4baa      	ldr	r3, [pc, #680]	; (8008a54 <UART_SetConfig+0x2d4>)
 80087ac:	4013      	ands	r3, r2
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	6812      	ldr	r2, [r2, #0]
 80087b2:	69f9      	ldr	r1, [r7, #28]
 80087b4:	430b      	orrs	r3, r1
 80087b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	430a      	orrs	r2, r1
 80087cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a9f      	ldr	r2, [pc, #636]	; (8008a58 <UART_SetConfig+0x2d8>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d004      	beq.n	80087e8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	69fa      	ldr	r2, [r7, #28]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	430a      	orrs	r2, r1
 80087fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a96      	ldr	r2, [pc, #600]	; (8008a5c <UART_SetConfig+0x2dc>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d121      	bne.n	800884a <UART_SetConfig+0xca>
 8008806:	4b96      	ldr	r3, [pc, #600]	; (8008a60 <UART_SetConfig+0x2e0>)
 8008808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800880c:	f003 0303 	and.w	r3, r3, #3
 8008810:	2b03      	cmp	r3, #3
 8008812:	d817      	bhi.n	8008844 <UART_SetConfig+0xc4>
 8008814:	a201      	add	r2, pc, #4	; (adr r2, 800881c <UART_SetConfig+0x9c>)
 8008816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881a:	bf00      	nop
 800881c:	0800882d 	.word	0x0800882d
 8008820:	08008839 	.word	0x08008839
 8008824:	08008833 	.word	0x08008833
 8008828:	0800883f 	.word	0x0800883f
 800882c:	2301      	movs	r3, #1
 800882e:	76fb      	strb	r3, [r7, #27]
 8008830:	e096      	b.n	8008960 <UART_SetConfig+0x1e0>
 8008832:	2302      	movs	r3, #2
 8008834:	76fb      	strb	r3, [r7, #27]
 8008836:	e093      	b.n	8008960 <UART_SetConfig+0x1e0>
 8008838:	2304      	movs	r3, #4
 800883a:	76fb      	strb	r3, [r7, #27]
 800883c:	e090      	b.n	8008960 <UART_SetConfig+0x1e0>
 800883e:	2308      	movs	r3, #8
 8008840:	76fb      	strb	r3, [r7, #27]
 8008842:	e08d      	b.n	8008960 <UART_SetConfig+0x1e0>
 8008844:	2310      	movs	r3, #16
 8008846:	76fb      	strb	r3, [r7, #27]
 8008848:	e08a      	b.n	8008960 <UART_SetConfig+0x1e0>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a85      	ldr	r2, [pc, #532]	; (8008a64 <UART_SetConfig+0x2e4>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d132      	bne.n	80088ba <UART_SetConfig+0x13a>
 8008854:	4b82      	ldr	r3, [pc, #520]	; (8008a60 <UART_SetConfig+0x2e0>)
 8008856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800885a:	f003 030c 	and.w	r3, r3, #12
 800885e:	2b0c      	cmp	r3, #12
 8008860:	d828      	bhi.n	80088b4 <UART_SetConfig+0x134>
 8008862:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <UART_SetConfig+0xe8>)
 8008864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008868:	0800889d 	.word	0x0800889d
 800886c:	080088b5 	.word	0x080088b5
 8008870:	080088b5 	.word	0x080088b5
 8008874:	080088b5 	.word	0x080088b5
 8008878:	080088a9 	.word	0x080088a9
 800887c:	080088b5 	.word	0x080088b5
 8008880:	080088b5 	.word	0x080088b5
 8008884:	080088b5 	.word	0x080088b5
 8008888:	080088a3 	.word	0x080088a3
 800888c:	080088b5 	.word	0x080088b5
 8008890:	080088b5 	.word	0x080088b5
 8008894:	080088b5 	.word	0x080088b5
 8008898:	080088af 	.word	0x080088af
 800889c:	2300      	movs	r3, #0
 800889e:	76fb      	strb	r3, [r7, #27]
 80088a0:	e05e      	b.n	8008960 <UART_SetConfig+0x1e0>
 80088a2:	2302      	movs	r3, #2
 80088a4:	76fb      	strb	r3, [r7, #27]
 80088a6:	e05b      	b.n	8008960 <UART_SetConfig+0x1e0>
 80088a8:	2304      	movs	r3, #4
 80088aa:	76fb      	strb	r3, [r7, #27]
 80088ac:	e058      	b.n	8008960 <UART_SetConfig+0x1e0>
 80088ae:	2308      	movs	r3, #8
 80088b0:	76fb      	strb	r3, [r7, #27]
 80088b2:	e055      	b.n	8008960 <UART_SetConfig+0x1e0>
 80088b4:	2310      	movs	r3, #16
 80088b6:	76fb      	strb	r3, [r7, #27]
 80088b8:	e052      	b.n	8008960 <UART_SetConfig+0x1e0>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a6a      	ldr	r2, [pc, #424]	; (8008a68 <UART_SetConfig+0x2e8>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d120      	bne.n	8008906 <UART_SetConfig+0x186>
 80088c4:	4b66      	ldr	r3, [pc, #408]	; (8008a60 <UART_SetConfig+0x2e0>)
 80088c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80088ce:	2b30      	cmp	r3, #48	; 0x30
 80088d0:	d013      	beq.n	80088fa <UART_SetConfig+0x17a>
 80088d2:	2b30      	cmp	r3, #48	; 0x30
 80088d4:	d814      	bhi.n	8008900 <UART_SetConfig+0x180>
 80088d6:	2b20      	cmp	r3, #32
 80088d8:	d009      	beq.n	80088ee <UART_SetConfig+0x16e>
 80088da:	2b20      	cmp	r3, #32
 80088dc:	d810      	bhi.n	8008900 <UART_SetConfig+0x180>
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d002      	beq.n	80088e8 <UART_SetConfig+0x168>
 80088e2:	2b10      	cmp	r3, #16
 80088e4:	d006      	beq.n	80088f4 <UART_SetConfig+0x174>
 80088e6:	e00b      	b.n	8008900 <UART_SetConfig+0x180>
 80088e8:	2300      	movs	r3, #0
 80088ea:	76fb      	strb	r3, [r7, #27]
 80088ec:	e038      	b.n	8008960 <UART_SetConfig+0x1e0>
 80088ee:	2302      	movs	r3, #2
 80088f0:	76fb      	strb	r3, [r7, #27]
 80088f2:	e035      	b.n	8008960 <UART_SetConfig+0x1e0>
 80088f4:	2304      	movs	r3, #4
 80088f6:	76fb      	strb	r3, [r7, #27]
 80088f8:	e032      	b.n	8008960 <UART_SetConfig+0x1e0>
 80088fa:	2308      	movs	r3, #8
 80088fc:	76fb      	strb	r3, [r7, #27]
 80088fe:	e02f      	b.n	8008960 <UART_SetConfig+0x1e0>
 8008900:	2310      	movs	r3, #16
 8008902:	76fb      	strb	r3, [r7, #27]
 8008904:	e02c      	b.n	8008960 <UART_SetConfig+0x1e0>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a53      	ldr	r2, [pc, #332]	; (8008a58 <UART_SetConfig+0x2d8>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d125      	bne.n	800895c <UART_SetConfig+0x1dc>
 8008910:	4b53      	ldr	r3, [pc, #332]	; (8008a60 <UART_SetConfig+0x2e0>)
 8008912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008916:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800891a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800891e:	d017      	beq.n	8008950 <UART_SetConfig+0x1d0>
 8008920:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008924:	d817      	bhi.n	8008956 <UART_SetConfig+0x1d6>
 8008926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800892a:	d00b      	beq.n	8008944 <UART_SetConfig+0x1c4>
 800892c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008930:	d811      	bhi.n	8008956 <UART_SetConfig+0x1d6>
 8008932:	2b00      	cmp	r3, #0
 8008934:	d003      	beq.n	800893e <UART_SetConfig+0x1be>
 8008936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800893a:	d006      	beq.n	800894a <UART_SetConfig+0x1ca>
 800893c:	e00b      	b.n	8008956 <UART_SetConfig+0x1d6>
 800893e:	2300      	movs	r3, #0
 8008940:	76fb      	strb	r3, [r7, #27]
 8008942:	e00d      	b.n	8008960 <UART_SetConfig+0x1e0>
 8008944:	2302      	movs	r3, #2
 8008946:	76fb      	strb	r3, [r7, #27]
 8008948:	e00a      	b.n	8008960 <UART_SetConfig+0x1e0>
 800894a:	2304      	movs	r3, #4
 800894c:	76fb      	strb	r3, [r7, #27]
 800894e:	e007      	b.n	8008960 <UART_SetConfig+0x1e0>
 8008950:	2308      	movs	r3, #8
 8008952:	76fb      	strb	r3, [r7, #27]
 8008954:	e004      	b.n	8008960 <UART_SetConfig+0x1e0>
 8008956:	2310      	movs	r3, #16
 8008958:	76fb      	strb	r3, [r7, #27]
 800895a:	e001      	b.n	8008960 <UART_SetConfig+0x1e0>
 800895c:	2310      	movs	r3, #16
 800895e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a3c      	ldr	r2, [pc, #240]	; (8008a58 <UART_SetConfig+0x2d8>)
 8008966:	4293      	cmp	r3, r2
 8008968:	f040 8082 	bne.w	8008a70 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800896c:	7efb      	ldrb	r3, [r7, #27]
 800896e:	2b08      	cmp	r3, #8
 8008970:	d823      	bhi.n	80089ba <UART_SetConfig+0x23a>
 8008972:	a201      	add	r2, pc, #4	; (adr r2, 8008978 <UART_SetConfig+0x1f8>)
 8008974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008978:	0800899d 	.word	0x0800899d
 800897c:	080089bb 	.word	0x080089bb
 8008980:	080089a5 	.word	0x080089a5
 8008984:	080089bb 	.word	0x080089bb
 8008988:	080089ab 	.word	0x080089ab
 800898c:	080089bb 	.word	0x080089bb
 8008990:	080089bb 	.word	0x080089bb
 8008994:	080089bb 	.word	0x080089bb
 8008998:	080089b3 	.word	0x080089b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800899c:	f7fe f9a4 	bl	8006ce8 <HAL_RCC_GetPCLK1Freq>
 80089a0:	6178      	str	r0, [r7, #20]
        break;
 80089a2:	e00f      	b.n	80089c4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089a4:	4b31      	ldr	r3, [pc, #196]	; (8008a6c <UART_SetConfig+0x2ec>)
 80089a6:	617b      	str	r3, [r7, #20]
        break;
 80089a8:	e00c      	b.n	80089c4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089aa:	f7fe f905 	bl	8006bb8 <HAL_RCC_GetSysClockFreq>
 80089ae:	6178      	str	r0, [r7, #20]
        break;
 80089b0:	e008      	b.n	80089c4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089b6:	617b      	str	r3, [r7, #20]
        break;
 80089b8:	e004      	b.n	80089c4 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 80089ba:	2300      	movs	r3, #0
 80089bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	76bb      	strb	r3, [r7, #26]
        break;
 80089c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f000 8100 	beq.w	8008bcc <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685a      	ldr	r2, [r3, #4]
 80089d0:	4613      	mov	r3, r2
 80089d2:	005b      	lsls	r3, r3, #1
 80089d4:	4413      	add	r3, r2
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d305      	bcc.n	80089e8 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d902      	bls.n	80089ee <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	76bb      	strb	r3, [r7, #26]
 80089ec:	e0ee      	b.n	8008bcc <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f04f 0100 	mov.w	r1, #0
 80089f6:	f04f 0200 	mov.w	r2, #0
 80089fa:	f04f 0300 	mov.w	r3, #0
 80089fe:	020b      	lsls	r3, r1, #8
 8008a00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a04:	0202      	lsls	r2, r0, #8
 8008a06:	6879      	ldr	r1, [r7, #4]
 8008a08:	6849      	ldr	r1, [r1, #4]
 8008a0a:	0849      	lsrs	r1, r1, #1
 8008a0c:	4608      	mov	r0, r1
 8008a0e:	f04f 0100 	mov.w	r1, #0
 8008a12:	1814      	adds	r4, r2, r0
 8008a14:	eb43 0501 	adc.w	r5, r3, r1
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	f04f 0300 	mov.w	r3, #0
 8008a22:	4620      	mov	r0, r4
 8008a24:	4629      	mov	r1, r5
 8008a26:	f7f7 fbd1 	bl	80001cc <__aeabi_uldivmod>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	4613      	mov	r3, r2
 8008a30:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a38:	d308      	bcc.n	8008a4c <UART_SetConfig+0x2cc>
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a40:	d204      	bcs.n	8008a4c <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	60da      	str	r2, [r3, #12]
 8008a4a:	e0bf      	b.n	8008bcc <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	76bb      	strb	r3, [r7, #26]
 8008a50:	e0bc      	b.n	8008bcc <UART_SetConfig+0x44c>
 8008a52:	bf00      	nop
 8008a54:	efff69f3 	.word	0xefff69f3
 8008a58:	40008000 	.word	0x40008000
 8008a5c:	40013800 	.word	0x40013800
 8008a60:	40021000 	.word	0x40021000
 8008a64:	40004400 	.word	0x40004400
 8008a68:	40004800 	.word	0x40004800
 8008a6c:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	69db      	ldr	r3, [r3, #28]
 8008a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a78:	d15c      	bne.n	8008b34 <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 8008a7a:	7efb      	ldrb	r3, [r7, #27]
 8008a7c:	2b08      	cmp	r3, #8
 8008a7e:	d828      	bhi.n	8008ad2 <UART_SetConfig+0x352>
 8008a80:	a201      	add	r2, pc, #4	; (adr r2, 8008a88 <UART_SetConfig+0x308>)
 8008a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a86:	bf00      	nop
 8008a88:	08008aad 	.word	0x08008aad
 8008a8c:	08008ab5 	.word	0x08008ab5
 8008a90:	08008abd 	.word	0x08008abd
 8008a94:	08008ad3 	.word	0x08008ad3
 8008a98:	08008ac3 	.word	0x08008ac3
 8008a9c:	08008ad3 	.word	0x08008ad3
 8008aa0:	08008ad3 	.word	0x08008ad3
 8008aa4:	08008ad3 	.word	0x08008ad3
 8008aa8:	08008acb 	.word	0x08008acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008aac:	f7fe f91c 	bl	8006ce8 <HAL_RCC_GetPCLK1Freq>
 8008ab0:	6178      	str	r0, [r7, #20]
        break;
 8008ab2:	e013      	b.n	8008adc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ab4:	f7fe f92e 	bl	8006d14 <HAL_RCC_GetPCLK2Freq>
 8008ab8:	6178      	str	r0, [r7, #20]
        break;
 8008aba:	e00f      	b.n	8008adc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008abc:	4b49      	ldr	r3, [pc, #292]	; (8008be4 <UART_SetConfig+0x464>)
 8008abe:	617b      	str	r3, [r7, #20]
        break;
 8008ac0:	e00c      	b.n	8008adc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ac2:	f7fe f879 	bl	8006bb8 <HAL_RCC_GetSysClockFreq>
 8008ac6:	6178      	str	r0, [r7, #20]
        break;
 8008ac8:	e008      	b.n	8008adc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ace:	617b      	str	r3, [r7, #20]
        break;
 8008ad0:	e004      	b.n	8008adc <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	76bb      	strb	r3, [r7, #26]
        break;
 8008ada:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d074      	beq.n	8008bcc <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	005a      	lsls	r2, r3, #1
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	085b      	lsrs	r3, r3, #1
 8008aec:	441a      	add	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	2b0f      	cmp	r3, #15
 8008afe:	d916      	bls.n	8008b2e <UART_SetConfig+0x3ae>
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b06:	d212      	bcs.n	8008b2e <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	f023 030f 	bic.w	r3, r3, #15
 8008b10:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	085b      	lsrs	r3, r3, #1
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	f003 0307 	and.w	r3, r3, #7
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	89fb      	ldrh	r3, [r7, #14]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	89fa      	ldrh	r2, [r7, #14]
 8008b2a:	60da      	str	r2, [r3, #12]
 8008b2c:	e04e      	b.n	8008bcc <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	76bb      	strb	r3, [r7, #26]
 8008b32:	e04b      	b.n	8008bcc <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b34:	7efb      	ldrb	r3, [r7, #27]
 8008b36:	2b08      	cmp	r3, #8
 8008b38:	d827      	bhi.n	8008b8a <UART_SetConfig+0x40a>
 8008b3a:	a201      	add	r2, pc, #4	; (adr r2, 8008b40 <UART_SetConfig+0x3c0>)
 8008b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b40:	08008b65 	.word	0x08008b65
 8008b44:	08008b6d 	.word	0x08008b6d
 8008b48:	08008b75 	.word	0x08008b75
 8008b4c:	08008b8b 	.word	0x08008b8b
 8008b50:	08008b7b 	.word	0x08008b7b
 8008b54:	08008b8b 	.word	0x08008b8b
 8008b58:	08008b8b 	.word	0x08008b8b
 8008b5c:	08008b8b 	.word	0x08008b8b
 8008b60:	08008b83 	.word	0x08008b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b64:	f7fe f8c0 	bl	8006ce8 <HAL_RCC_GetPCLK1Freq>
 8008b68:	6178      	str	r0, [r7, #20]
        break;
 8008b6a:	e013      	b.n	8008b94 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b6c:	f7fe f8d2 	bl	8006d14 <HAL_RCC_GetPCLK2Freq>
 8008b70:	6178      	str	r0, [r7, #20]
        break;
 8008b72:	e00f      	b.n	8008b94 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b74:	4b1b      	ldr	r3, [pc, #108]	; (8008be4 <UART_SetConfig+0x464>)
 8008b76:	617b      	str	r3, [r7, #20]
        break;
 8008b78:	e00c      	b.n	8008b94 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b7a:	f7fe f81d 	bl	8006bb8 <HAL_RCC_GetSysClockFreq>
 8008b7e:	6178      	str	r0, [r7, #20]
        break;
 8008b80:	e008      	b.n	8008b94 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b86:	617b      	str	r3, [r7, #20]
        break;
 8008b88:	e004      	b.n	8008b94 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	76bb      	strb	r3, [r7, #26]
        break;
 8008b92:	bf00      	nop
    }

    if (pclk != 0U)
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d018      	beq.n	8008bcc <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	085a      	lsrs	r2, r3, #1
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	441a      	add	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	2b0f      	cmp	r3, #15
 8008bb4:	d908      	bls.n	8008bc8 <UART_SetConfig+0x448>
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bbc:	d204      	bcs.n	8008bc8 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	60da      	str	r2, [r3, #12]
 8008bc6:	e001      	b.n	8008bcc <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008bd8:	7ebb      	ldrb	r3, [r7, #26]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3720      	adds	r7, #32
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bdb0      	pop	{r4, r5, r7, pc}
 8008be2:	bf00      	nop
 8008be4:	00f42400 	.word	0x00f42400

08008be8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00a      	beq.n	8008c12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	430a      	orrs	r2, r1
 8008c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c16:	f003 0302 	and.w	r3, r3, #2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00a      	beq.n	8008c34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	430a      	orrs	r2, r1
 8008c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c38:	f003 0304 	and.w	r3, r3, #4
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00a      	beq.n	8008c56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	430a      	orrs	r2, r1
 8008c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5a:	f003 0308 	and.w	r3, r3, #8
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00a      	beq.n	8008c78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	430a      	orrs	r2, r1
 8008c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	f003 0310 	and.w	r3, r3, #16
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00a      	beq.n	8008c9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9e:	f003 0320 	and.w	r3, r3, #32
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00a      	beq.n	8008cbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	430a      	orrs	r2, r1
 8008cba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d01a      	beq.n	8008cfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ce6:	d10a      	bne.n	8008cfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00a      	beq.n	8008d20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	430a      	orrs	r2, r1
 8008d1e:	605a      	str	r2, [r3, #4]
  }
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af02      	add	r7, sp, #8
 8008d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d3c:	f7f9 fca4 	bl	8002688 <HAL_GetTick>
 8008d40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0308 	and.w	r3, r3, #8
 8008d4c:	2b08      	cmp	r3, #8
 8008d4e:	d10e      	bne.n	8008d6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d54:	9300      	str	r3, [sp, #0]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f82d 	bl	8008dbe <UART_WaitOnFlagUntilTimeout>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e023      	b.n	8008db6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0304 	and.w	r3, r3, #4
 8008d78:	2b04      	cmp	r3, #4
 8008d7a:	d10e      	bne.n	8008d9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d80:	9300      	str	r3, [sp, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f817 	bl	8008dbe <UART_WaitOnFlagUntilTimeout>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e00d      	b.n	8008db6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2220      	movs	r2, #32
 8008d9e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2220      	movs	r2, #32
 8008da4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	60f8      	str	r0, [r7, #12]
 8008dc6:	60b9      	str	r1, [r7, #8]
 8008dc8:	603b      	str	r3, [r7, #0]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dce:	e05e      	b.n	8008e8e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dd6:	d05a      	beq.n	8008e8e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dd8:	f7f9 fc56 	bl	8002688 <HAL_GetTick>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d302      	bcc.n	8008dee <UART_WaitOnFlagUntilTimeout+0x30>
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d11b      	bne.n	8008e26 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008dfc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	689a      	ldr	r2, [r3, #8]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f022 0201 	bic.w	r2, r2, #1
 8008e0c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2220      	movs	r2, #32
 8008e12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2220      	movs	r2, #32
 8008e18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e043      	b.n	8008eae <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d02c      	beq.n	8008e8e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	69db      	ldr	r3, [r3, #28]
 8008e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e42:	d124      	bne.n	8008e8e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e4c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008e5c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	689a      	ldr	r2, [r3, #8]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f022 0201 	bic.w	r2, r2, #1
 8008e6c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2220      	movs	r2, #32
 8008e72:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2220      	movs	r2, #32
 8008e78:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2220      	movs	r2, #32
 8008e7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e00f      	b.n	8008eae <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	69da      	ldr	r2, [r3, #28]
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	4013      	ands	r3, r2
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	bf0c      	ite	eq
 8008e9e:	2301      	moveq	r3, #1
 8008ea0:	2300      	movne	r3, #0
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	79fb      	ldrb	r3, [r7, #7]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d091      	beq.n	8008dd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
	...

08008eb8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	88fa      	ldrh	r2, [r7, #6]
 8008ed0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2222      	movs	r2, #34	; 0x22
 8008ee0:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d02b      	beq.n	8008f42 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eee:	4a25      	ldr	r2, [pc, #148]	; (8008f84 <UART_Start_Receive_DMA+0xcc>)
 8008ef0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef6:	4a24      	ldr	r2, [pc, #144]	; (8008f88 <UART_Start_Receive_DMA+0xd0>)
 8008ef8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efe:	4a23      	ldr	r2, [pc, #140]	; (8008f8c <UART_Start_Receive_DMA+0xd4>)
 8008f00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f06:	2200      	movs	r2, #0
 8008f08:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	3324      	adds	r3, #36	; 0x24
 8008f14:	4619      	mov	r1, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	88fb      	ldrh	r3, [r7, #6]
 8008f1e:	f7fb fe13 	bl	8004b48 <HAL_DMA_Start_IT>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00c      	beq.n	8008f42 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2210      	movs	r2, #16
 8008f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2220      	movs	r2, #32
 8008f3c:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e01c      	b.n	8008f7c <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f58:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	689a      	ldr	r2, [r3, #8]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f042 0201 	orr.w	r2, r2, #1
 8008f68:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	689a      	ldr	r2, [r3, #8]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f78:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	08009019 	.word	0x08009019
 8008f88:	080090b1 	.word	0x080090b1
 8008f8c:	080090e9 	.word	0x080090e9

08008f90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008fa6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2220      	movs	r2, #32
 8008fac:	679a      	str	r2, [r3, #120]	; 0x78
}
 8008fae:	bf00      	nop
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr

08008fba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fba:	b480      	push	{r7}
 8008fbc:	b083      	sub	sp, #12
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008fd0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	689a      	ldr	r2, [r3, #8]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f022 0201 	bic.w	r2, r2, #1
 8008fe0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d107      	bne.n	8008ffa <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f022 0210 	bic.w	r2, r2, #16
 8008ff8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2220      	movs	r2, #32
 8008ffe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009024:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0320 	and.w	r3, r3, #32
 8009030:	2b00      	cmp	r3, #0
 8009032:	d12a      	bne.n	800908a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800904a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689a      	ldr	r2, [r3, #8]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f022 0201 	bic.w	r2, r2, #1
 800905a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	689a      	ldr	r2, [r3, #8]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800906a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2220      	movs	r2, #32
 8009070:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009076:	2b01      	cmp	r3, #1
 8009078:	d107      	bne.n	800908a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f022 0210 	bic.w	r2, r2, #16
 8009088:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800908e:	2b01      	cmp	r3, #1
 8009090:	d107      	bne.n	80090a2 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009098:	4619      	mov	r1, r3
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f7ff fb64 	bl	8008768 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090a0:	e002      	b.n	80090a8 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f7ff fb42 	bl	800872c <HAL_UART_RxCpltCallback>
}
 80090a8:	bf00      	nop
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090bc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d109      	bne.n	80090da <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80090cc:	085b      	lsrs	r3, r3, #1
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	4619      	mov	r1, r3
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f7ff fb48 	bl	8008768 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090d8:	e002      	b.n	80090e0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f7ff fb30 	bl	8008740 <HAL_UART_RxHalfCpltCallback>
}
 80090e0:	bf00      	nop
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090fa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009100:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800910c:	2b80      	cmp	r3, #128	; 0x80
 800910e:	d109      	bne.n	8009124 <UART_DMAError+0x3c>
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	2b21      	cmp	r3, #33	; 0x21
 8009114:	d106      	bne.n	8009124 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	2200      	movs	r2, #0
 800911a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800911e:	6978      	ldr	r0, [r7, #20]
 8009120:	f7ff ff36 	bl	8008f90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912e:	2b40      	cmp	r3, #64	; 0x40
 8009130:	d109      	bne.n	8009146 <UART_DMAError+0x5e>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2b22      	cmp	r3, #34	; 0x22
 8009136:	d106      	bne.n	8009146 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	2200      	movs	r2, #0
 800913c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8009140:	6978      	ldr	r0, [r7, #20]
 8009142:	f7ff ff3a 	bl	8008fba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800914c:	f043 0210 	orr.w	r2, r3, #16
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009156:	6978      	ldr	r0, [r7, #20]
 8009158:	f7ff fafc 	bl	8008754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800915c:	bf00      	nop
 800915e:	3718      	adds	r7, #24
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <__libc_init_array>:
 8009164:	b570      	push	{r4, r5, r6, lr}
 8009166:	4d0d      	ldr	r5, [pc, #52]	; (800919c <__libc_init_array+0x38>)
 8009168:	4c0d      	ldr	r4, [pc, #52]	; (80091a0 <__libc_init_array+0x3c>)
 800916a:	1b64      	subs	r4, r4, r5
 800916c:	10a4      	asrs	r4, r4, #2
 800916e:	2600      	movs	r6, #0
 8009170:	42a6      	cmp	r6, r4
 8009172:	d109      	bne.n	8009188 <__libc_init_array+0x24>
 8009174:	4d0b      	ldr	r5, [pc, #44]	; (80091a4 <__libc_init_array+0x40>)
 8009176:	4c0c      	ldr	r4, [pc, #48]	; (80091a8 <__libc_init_array+0x44>)
 8009178:	f000 f820 	bl	80091bc <_init>
 800917c:	1b64      	subs	r4, r4, r5
 800917e:	10a4      	asrs	r4, r4, #2
 8009180:	2600      	movs	r6, #0
 8009182:	42a6      	cmp	r6, r4
 8009184:	d105      	bne.n	8009192 <__libc_init_array+0x2e>
 8009186:	bd70      	pop	{r4, r5, r6, pc}
 8009188:	f855 3b04 	ldr.w	r3, [r5], #4
 800918c:	4798      	blx	r3
 800918e:	3601      	adds	r6, #1
 8009190:	e7ee      	b.n	8009170 <__libc_init_array+0xc>
 8009192:	f855 3b04 	ldr.w	r3, [r5], #4
 8009196:	4798      	blx	r3
 8009198:	3601      	adds	r6, #1
 800919a:	e7f2      	b.n	8009182 <__libc_init_array+0x1e>
 800919c:	08009240 	.word	0x08009240
 80091a0:	08009240 	.word	0x08009240
 80091a4:	08009240 	.word	0x08009240
 80091a8:	08009244 	.word	0x08009244

080091ac <memset>:
 80091ac:	4402      	add	r2, r0
 80091ae:	4603      	mov	r3, r0
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d100      	bne.n	80091b6 <memset+0xa>
 80091b4:	4770      	bx	lr
 80091b6:	f803 1b01 	strb.w	r1, [r3], #1
 80091ba:	e7f9      	b.n	80091b0 <memset+0x4>

080091bc <_init>:
 80091bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091be:	bf00      	nop
 80091c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091c2:	bc08      	pop	{r3}
 80091c4:	469e      	mov	lr, r3
 80091c6:	4770      	bx	lr

080091c8 <_fini>:
 80091c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ca:	bf00      	nop
 80091cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ce:	bc08      	pop	{r3}
 80091d0:	469e      	mov	lr, r3
 80091d2:	4770      	bx	lr
