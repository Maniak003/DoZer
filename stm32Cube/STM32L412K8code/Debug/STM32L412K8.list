
STM32L412K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ef8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08009084  08009084  00019084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090e8  080090e8  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  080090e8  080090e8  000190e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090f0  080090f0  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090f0  080090f0  000190f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090f4  080090f4  000190f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  080090f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e34  20000034  0800912c  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e68  0800912c  00024e68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000182f5  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c43  00000000  00000000  00038359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  0003afa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  0003c508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d084  00000000  00000000  0003d980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ebc  00000000  00000000  0005aa04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0210  00000000  00000000  000708c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00130ad0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c10  00000000  00000000  00130b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000034 	.word	0x20000034
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800906c 	.word	0x0800906c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000038 	.word	0x20000038
 80001c8:	0800906c 	.word	0x0800906c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <bebe>:
static union {
	uint32_t uint;
	float flt;
}cfgKoef;

void bebe(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4); // Start timer for turn off Buzzer
 80004c8:	210c      	movs	r1, #12
 80004ca:	480d      	ldr	r0, [pc, #52]	; (8000500 <bebe+0x3c>)
 80004cc:	f006 feb2 	bl	8007234 <HAL_TIM_OC_Start>
	HAL_Delay(200);
 80004d0:	20c8      	movs	r0, #200	; 0xc8
 80004d2:	f002 f83d 	bl	8002550 <HAL_Delay>
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);
 80004d6:	210c      	movs	r1, #12
 80004d8:	4809      	ldr	r0, [pc, #36]	; (8000500 <bebe+0x3c>)
 80004da:	f006 ff89 	bl	80073f0 <HAL_TIM_OC_Stop>
	HAL_Delay(200);
 80004de:	20c8      	movs	r0, #200	; 0xc8
 80004e0:	f002 f836 	bl	8002550 <HAL_Delay>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4); // Start timer for turn off Buzzer
 80004e4:	210c      	movs	r1, #12
 80004e6:	4806      	ldr	r0, [pc, #24]	; (8000500 <bebe+0x3c>)
 80004e8:	f006 fea4 	bl	8007234 <HAL_TIM_OC_Start>
	HAL_Delay(200);
 80004ec:	20c8      	movs	r0, #200	; 0xc8
 80004ee:	f002 f82f 	bl	8002550 <HAL_Delay>
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);
 80004f2:	210c      	movs	r1, #12
 80004f4:	4802      	ldr	r0, [pc, #8]	; (8000500 <bebe+0x3c>)
 80004f6:	f006 ff7b 	bl	80073f0 <HAL_TIM_OC_Stop>
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20004da8 	.word	0x20004da8

08000504 <rwFlash>:
            13
            14
            15
            16
 */
void rwFlash(uint8_t rwFlag) {
 8000504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000508:	b091      	sub	sp, #68	; 0x44
 800050a:	af00      	add	r7, sp, #0
 800050c:	4603      	mov	r3, r0
 800050e:	73fb      	strb	r3, [r7, #15]
	uint32_t pageAdr = 0x800F800; // Begin of 31 page, last page flash for STM32L412K8.
 8000510:	4b97      	ldr	r3, [pc, #604]	; (8000770 <rwFlash+0x26c>)
 8000512:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t magicKey;
	uint64_t dataForSave;
	magicKey = *(__IO uint32_t*) pageAdr;
 8000514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	63bb      	str	r3, [r7, #56]	; 0x38
	if ((magicKey != 0x1234) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 800051a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800051c:	f241 2234 	movw	r2, #4660	; 0x1234
 8000520:	4293      	cmp	r3, r2
 8000522:	d103      	bne.n	800052c <rwFlash+0x28>
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	2b01      	cmp	r3, #1
 8000528:	f040 80b2 	bne.w	8000690 <rwFlash+0x18c>
		magicKey = 0x1234;
 800052c:	f241 2334 	movw	r3, #4660	; 0x1234
 8000530:	63bb      	str	r3, [r7, #56]	; 0x38
		if (rwFlag == 0) { // For first initial
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d10b      	bne.n	8000550 <rwFlash+0x4c>
			cfgData = 0;
 8000538:	4b8e      	ldr	r3, [pc, #568]	; (8000774 <rwFlash+0x270>)
 800053a:	2200      	movs	r2, #0
 800053c:	801a      	strh	r2, [r3, #0]
			cfgLevel1 = 0;
 800053e:	4b8e      	ldr	r3, [pc, #568]	; (8000778 <rwFlash+0x274>)
 8000540:	2200      	movs	r2, #0
 8000542:	801a      	strh	r2, [r3, #0]
			cfgLevel2 = 0;
 8000544:	4b8d      	ldr	r3, [pc, #564]	; (800077c <rwFlash+0x278>)
 8000546:	2200      	movs	r2, #0
 8000548:	801a      	strh	r2, [r3, #0]
			cfgLevel3 = 0;
 800054a:	4b8d      	ldr	r3, [pc, #564]	; (8000780 <rwFlash+0x27c>)
 800054c:	2200      	movs	r2, #0
 800054e:	801a      	strh	r2, [r3, #0]
		}
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t PAGEError = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
		EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000554:	2300      	movs	r3, #0
 8000556:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.Page = 31; // Page size for STM32L412K8 is 2KB
 8000558:	231f      	movs	r3, #31
 800055a:	623b      	str	r3, [r7, #32]
		EraseInitStruct.NbPages     = 1;
 800055c:	2301      	movs	r3, #1
 800055e:	627b      	str	r3, [r7, #36]	; 0x24

		flash_ok = HAL_ERROR;
 8000560:	4b88      	ldr	r3, [pc, #544]	; (8000784 <rwFlash+0x280>)
 8000562:	2201      	movs	r2, #1
 8000564:	701a      	strb	r2, [r3, #0]
		// Unlock flash
		while(flash_ok != HAL_OK) {
 8000566:	e005      	b.n	8000574 <rwFlash+0x70>
		  flash_ok = HAL_FLASH_Unlock();
 8000568:	f004 fc30 	bl	8004dcc <HAL_FLASH_Unlock>
 800056c:	4603      	mov	r3, r0
 800056e:	461a      	mov	r2, r3
 8000570:	4b84      	ldr	r3, [pc, #528]	; (8000784 <rwFlash+0x280>)
 8000572:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK) {
 8000574:	4b83      	ldr	r3, [pc, #524]	; (8000784 <rwFlash+0x280>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d1f5      	bne.n	8000568 <rwFlash+0x64>
		}
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) == HAL_OK) {
 800057c:	f107 0214 	add.w	r2, r7, #20
 8000580:	f107 0318 	add.w	r3, r7, #24
 8000584:	4611      	mov	r1, r2
 8000586:	4618      	mov	r0, r3
 8000588:	f004 fd06 	bl	8004f98 <HAL_FLASHEx_Erase>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d16c      	bne.n	800066c <rwFlash+0x168>
			dataForSave = (uint64_t) (magicKey | (((uint64_t) cfgData << 32) & 0xFFFFFFFF00000000) | (((uint64_t) cfgLevel1 << 48) & 0xFFFF000000000000));
 8000592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000594:	4619      	mov	r1, r3
 8000596:	f04f 0200 	mov.w	r2, #0
 800059a:	e9c7 1200 	strd	r1, r2, [r7]
 800059e:	4b75      	ldr	r3, [pc, #468]	; (8000774 <rwFlash+0x270>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	4619      	mov	r1, r3
 80005a4:	b289      	uxth	r1, r1
 80005a6:	f04f 0200 	mov.w	r2, #0
 80005aa:	4608      	mov	r0, r1
 80005ac:	4611      	mov	r1, r2
 80005ae:	f04f 0200 	mov.w	r2, #0
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	4606      	mov	r6, r0
 80005b8:	0033      	movs	r3, r6
 80005ba:	2200      	movs	r2, #0
 80005bc:	6839      	ldr	r1, [r7, #0]
 80005be:	ea41 0402 	orr.w	r4, r1, r2
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	4319      	orrs	r1, r3
 80005c6:	460d      	mov	r5, r1
 80005c8:	4b6b      	ldr	r3, [pc, #428]	; (8000778 <rwFlash+0x274>)
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	b298      	uxth	r0, r3
 80005ce:	f04f 0100 	mov.w	r1, #0
 80005d2:	f04f 0200 	mov.w	r2, #0
 80005d6:	f04f 0300 	mov.w	r3, #0
 80005da:	0403      	lsls	r3, r0, #16
 80005dc:	2200      	movs	r2, #0
 80005de:	ea44 0a02 	orr.w	sl, r4, r2
 80005e2:	ea45 0b03 	orr.w	fp, r5, r3
 80005e6:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
			flash_ok = HAL_ERROR;
 80005ea:	4b66      	ldr	r3, [pc, #408]	; (8000784 <rwFlash+0x280>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80005f0:	e009      	b.n	8000606 <rwFlash+0x102>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr, dataForSave); // Write  magic key into Flash
 80005f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80005f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80005f8:	2000      	movs	r0, #0
 80005fa:	f004 fb7b 	bl	8004cf4 <HAL_FLASH_Program>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	4b60      	ldr	r3, [pc, #384]	; (8000784 <rwFlash+0x280>)
 8000604:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8000606:	4b5f      	ldr	r3, [pc, #380]	; (8000784 <rwFlash+0x280>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d1f1      	bne.n	80005f2 <rwFlash+0xee>
			}
			//uint32_t tmpInt = *((uint32_t *) &cfgKoefRh);
			//dataForSave = (uint64_t) (cfgLevel2 | (cfgLevel3 << 16) | (uint64_t) tmpInt << 32);
			dataForSave = (uint64_t) (cfgLevel2 | (cfgLevel3 << 16) | (uint64_t) cfgKoef.uint << 32);
 800060e:	4b5b      	ldr	r3, [pc, #364]	; (800077c <rwFlash+0x278>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	4b5a      	ldr	r3, [pc, #360]	; (8000780 <rwFlash+0x27c>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	041b      	lsls	r3, r3, #16
 800061a:	4313      	orrs	r3, r2
 800061c:	4618      	mov	r0, r3
 800061e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000622:	4b59      	ldr	r3, [pc, #356]	; (8000788 <rwFlash+0x284>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	461c      	mov	r4, r3
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0200 	mov.w	r2, #0
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	0023      	movs	r3, r4
 8000636:	2200      	movs	r2, #0
 8000638:	ea40 0802 	orr.w	r8, r0, r2
 800063c:	ea41 0903 	orr.w	r9, r1, r3
 8000640:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
			flash_ok = HAL_ERROR;
 8000644:	4b4f      	ldr	r3, [pc, #316]	; (8000784 <rwFlash+0x280>)
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 800064a:	e00b      	b.n	8000664 <rwFlash+0x160>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr + 8, dataForSave); // Write Level2, Level3
 800064c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800064e:	f103 0108 	add.w	r1, r3, #8
 8000652:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000656:	2000      	movs	r0, #0
 8000658:	f004 fb4c 	bl	8004cf4 <HAL_FLASH_Program>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	4b48      	ldr	r3, [pc, #288]	; (8000784 <rwFlash+0x280>)
 8000662:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8000664:	4b47      	ldr	r3, [pc, #284]	; (8000784 <rwFlash+0x280>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1ef      	bne.n	800064c <rwFlash+0x148>
			}
		}
		// Lock flash
		flash_ok = HAL_ERROR;
 800066c:	4b45      	ldr	r3, [pc, #276]	; (8000784 <rwFlash+0x280>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 8000672:	e005      	b.n	8000680 <rwFlash+0x17c>
			flash_ok = HAL_FLASH_Lock();
 8000674:	f004 fbcc 	bl	8004e10 <HAL_FLASH_Lock>
 8000678:	4603      	mov	r3, r0
 800067a:	461a      	mov	r2, r3
 800067c:	4b41      	ldr	r3, [pc, #260]	; (8000784 <rwFlash+0x280>)
 800067e:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 8000680:	4b40      	ldr	r3, [pc, #256]	; (8000784 <rwFlash+0x280>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1f5      	bne.n	8000674 <rwFlash+0x170>
		}
		bebe();
 8000688:	f7ff ff1c 	bl	80004c4 <bebe>
	if ((magicKey != 0x1234) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 800068c:	bf00      	nop
			Thr1 = (uint32_t) (tmpVal / (float)cfgLevel1);
			Thr2 = (uint32_t) (tmpVal / (float)cfgLevel2);
			Thr3 = (uint32_t) (tmpVal / (float)cfgLevel3);
		}
	}
}
 800068e:	e06a      	b.n	8000766 <rwFlash+0x262>
		cfgData = *(__IO uint16_t*) (pageAdr + 4);
 8000690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000692:	3304      	adds	r3, #4
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b36      	ldr	r3, [pc, #216]	; (8000774 <rwFlash+0x270>)
 800069a:	801a      	strh	r2, [r3, #0]
		resolution = (uint8_t) (cfgData >> 8 & 0x3);
 800069c:	4b35      	ldr	r3, [pc, #212]	; (8000774 <rwFlash+0x270>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	0a1b      	lsrs	r3, r3, #8
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f003 0303 	and.w	r3, r3, #3
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <rwFlash+0x288>)
 80006ae:	701a      	strb	r2, [r3, #0]
		cfgLevel1 = *(__IO uint16_t*) (pageAdr + 6);
 80006b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b2:	3306      	adds	r3, #6
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	4b2f      	ldr	r3, [pc, #188]	; (8000778 <rwFlash+0x274>)
 80006ba:	801a      	strh	r2, [r3, #0]
		cfgLevel2 = *(__IO uint16_t*) (pageAdr + 8);
 80006bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006be:	3308      	adds	r3, #8
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4b2d      	ldr	r3, [pc, #180]	; (800077c <rwFlash+0x278>)
 80006c6:	801a      	strh	r2, [r3, #0]
		cfgLevel3 = *(__IO uint16_t*) (pageAdr + 10);
 80006c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ca:	330a      	adds	r3, #10
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <rwFlash+0x27c>)
 80006d2:	801a      	strh	r2, [r3, #0]
		uint32_t koefAddr = pageAdr + 12;
 80006d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006d6:	330c      	adds	r3, #12
 80006d8:	637b      	str	r3, [r7, #52]	; 0x34
		cfgKoef.uint = *(__IO uint32_t*) (koefAddr);
 80006da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a2a      	ldr	r2, [pc, #168]	; (8000788 <rwFlash+0x284>)
 80006e0:	6013      	str	r3, [r2, #0]
		if (cfgKoef.flt > 0) {
 80006e2:	4b29      	ldr	r3, [pc, #164]	; (8000788 <rwFlash+0x284>)
 80006e4:	edd3 7a00 	vldr	s15, [r3]
 80006e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f0:	dc00      	bgt.n	80006f4 <rwFlash+0x1f0>
}
 80006f2:	e038      	b.n	8000766 <rwFlash+0x262>
			float tmpVal = cfgKoef.flt * 1000;
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <rwFlash+0x284>)
 80006f6:	edd3 7a00 	vldr	s15, [r3]
 80006fa:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000790 <rwFlash+0x28c>
 80006fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000702:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			Thr1 = (uint32_t) (tmpVal / (float)cfgLevel1);
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <rwFlash+0x274>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	ee07 3a90 	vmov	s15, r3
 800070e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000712:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800071a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800071e:	ee17 2a90 	vmov	r2, s15
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <rwFlash+0x290>)
 8000724:	601a      	str	r2, [r3, #0]
			Thr2 = (uint32_t) (tmpVal / (float)cfgLevel2);
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <rwFlash+0x278>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	ee07 3a90 	vmov	s15, r3
 800072e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000732:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800073a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800073e:	ee17 2a90 	vmov	r2, s15
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <rwFlash+0x294>)
 8000744:	601a      	str	r2, [r3, #0]
			Thr3 = (uint32_t) (tmpVal / (float)cfgLevel3);
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <rwFlash+0x27c>)
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	ee07 3a90 	vmov	s15, r3
 800074e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000752:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800075a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800075e:	ee17 2a90 	vmov	r2, s15
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <rwFlash+0x298>)
 8000764:	601a      	str	r2, [r3, #0]
}
 8000766:	bf00      	nop
 8000768:	3744      	adds	r7, #68	; 0x44
 800076a:	46bd      	mov	sp, r7
 800076c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000770:	0800f800 	.word	0x0800f800
 8000774:	20004df6 	.word	0x20004df6
 8000778:	20004dfc 	.word	0x20004dfc
 800077c:	20004dfa 	.word	0x20004dfa
 8000780:	20004222 	.word	0x20004222
 8000784:	20004e60 	.word	0x20004e60
 8000788:	2000415c 	.word	0x2000415c
 800078c:	20004154 	.word	0x20004154
 8000790:	447a0000 	.word	0x447a0000
 8000794:	20000064 	.word	0x20000064
 8000798:	20000068 	.word	0x20000068
 800079c:	2000006c 	.word	0x2000006c

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b096      	sub	sp, #88	; 0x58
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a6:	f001 fe5e 	bl	8002466 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007aa:	f000 fd39 	bl	8001220 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ae:	f001 f863 	bl	8001878 <MX_GPIO_Init>
  MX_DMA_Init();
 80007b2:	f001 f83b 	bl	800182c <MX_DMA_Init>
  MX_ADC1_Init();
 80007b6:	f000 fd95 	bl	80012e4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80007ba:	f001 f803 	bl	80017c4 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 80007be:	f000 ff77 	bl	80016b0 <MX_TIM15_Init>
  MX_ADC2_Init();
 80007c2:	f000 fe21 	bl	8001408 <MX_ADC2_Init>
  MX_TIM2_Init();
 80007c6:	f000 febf 	bl	8001548 <MX_TIM2_Init>
  MX_TIM16_Init();
 80007ca:	f000 ffcb 	bl	8001764 <MX_TIM16_Init>
  MX_TIM6_Init();
 80007ce:	f000 ff39 	bl	8001644 <MX_TIM6_Init>
  MX_LPTIM2_Init();
 80007d2:	f000 fe89 	bl	80014e8 <MX_LPTIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_LPTIM_Counter_Stop_IT(&hlptim2);
 80007d6:	4885      	ldr	r0, [pc, #532]	; (80009ec <main+0x24c>)
 80007d8:	f005 f8cc 	bl	8005974 <HAL_LPTIM_Counter_Stop_IT>
  //HAL_PWREx_EnableLowPowerRunMode();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int j = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	657b      	str	r3, [r7, #84]	; 0x54
  uint8_t btCommand[sizeCommand];
  uint8_t prefix[3] = {'<', 'B', '>'};
 80007e0:	4a83      	ldr	r2, [pc, #524]	; (80009f0 <main+0x250>)
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	6812      	ldr	r2, [r2, #0]
 80007e8:	4611      	mov	r1, r2
 80007ea:	8019      	strh	r1, [r3, #0]
 80007ec:	3302      	adds	r3, #2
 80007ee:	0c12      	lsrs	r2, r2, #16
 80007f0:	701a      	strb	r2, [r3, #0]
  uint8_t lowSpectr, highSpectr;
  #ifdef DISPLAY_ENABLE
  ssd1306_Init();
  #endif
  //uint16_t tmpData;
  uint32_t initDelay, oldTime = HAL_GetTick();
 80007f2:	f001 fea1 	bl	8002538 <HAL_GetTick>
 80007f6:	6338      	str	r0, [r7, #48]	; 0x30
  initDelay = oldTime;
 80007f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  oldTimeAll = oldTime;
 80007fc:	4a7d      	ldr	r2, [pc, #500]	; (80009f4 <main+0x254>)
 80007fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000800:	6013      	str	r3, [r2, #0]
  sleepFlag = oldTime;
 8000802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000804:	2b00      	cmp	r3, #0
 8000806:	bf14      	ite	ne
 8000808:	2301      	movne	r3, #1
 800080a:	2300      	moveq	r3, #0
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b7a      	ldr	r3, [pc, #488]	; (80009f8 <main+0x258>)
 8000810:	701a      	strb	r2, [r3, #0]
  batteryInterval = 0;
 8000812:	4b7a      	ldr	r3, [pc, #488]	; (80009fc <main+0x25c>)
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
  counterCC = 0;
 8000818:	4b79      	ldr	r3, [pc, #484]	; (8000a00 <main+0x260>)
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]

  rwFlash(0); // Read config from flash.
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff fe70 	bl	8000504 <rwFlash>

  HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_SET); // LED on.
 8000824:	2201      	movs	r2, #1
 8000826:	2108      	movs	r1, #8
 8000828:	4876      	ldr	r0, [pc, #472]	; (8000a04 <main+0x264>)
 800082a:	f004 ff35 	bl	8005698 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, COM_PIN, GPIO_PIN_SET); // Com pin disable
 800082e:	2201      	movs	r2, #1
 8000830:	2140      	movs	r1, #64	; 0x40
 8000832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000836:	f004 ff2f 	bl	8005698 <HAL_GPIO_WritePin>
  __HAL_TIM_CLEAR_FLAG(&htim15, TIM_SR_UIF); // Clear flags
 800083a:	4b73      	ldr	r3, [pc, #460]	; (8000a08 <main+0x268>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f06f 0201 	mvn.w	r2, #1
 8000842:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim15); // Start timer for turn off LED
 8000844:	4870      	ldr	r0, [pc, #448]	; (8000a08 <main+0x268>)
 8000846:	f006 fc11 	bl	800706c <HAL_TIM_Base_Start_IT>
  //
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
 800084a:	210c      	movs	r1, #12
 800084c:	486f      	ldr	r0, [pc, #444]	; (8000a0c <main+0x26c>)
 800084e:	f006 fcf1 	bl	8007234 <HAL_TIM_OC_Start>
  __HAL_TIM_CLEAR_FLAG(&htim16, TIM_SR_UIF); // Clear flags
 8000852:	4b6f      	ldr	r3, [pc, #444]	; (8000a10 <main+0x270>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f06f 0201 	mvn.w	r2, #1
 800085a:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 800085c:	486c      	ldr	r0, [pc, #432]	; (8000a10 <main+0x270>)
 800085e:	f006 fc05 	bl	800706c <HAL_TIM_Base_Start_IT>

  alarmLevel = 0;
 8000862:	4b6c      	ldr	r3, [pc, #432]	; (8000a14 <main+0x274>)
 8000864:	2200      	movs	r2, #0
 8000866:	801a      	strh	r2, [r3, #0]
  alarmCount = 0;
 8000868:	4b6b      	ldr	r3, [pc, #428]	; (8000a18 <main+0x278>)
 800086a:	2200      	movs	r2, #0
 800086c:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim6); // Alarm timer.
 800086e:	486b      	ldr	r0, [pc, #428]	; (8000a1c <main+0x27c>)
 8000870:	f006 fbfc 	bl	800706c <HAL_TIM_Base_Start_IT>
	  counterCC = 0;
	  oldTime = HAL_GetTick();
	  ssd1306_SetCursor(0, 0);
	  ssd1306_WriteString(counterPP, Font_6x8, 0x01);
	#endif
	  uint32_t max = 1;
 8000874:	2301      	movs	r3, #1
 8000876:	653b      	str	r3, [r7, #80]	; 0x50
	  for ( int i = reservDataSize; i < 2050; i++) {
 8000878:	2306      	movs	r3, #6
 800087a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800087c:	e00f      	b.n	800089e <main+0xfe>
		  if (spectrData[i][0] > max)
 800087e:	4a68      	ldr	r2, [pc, #416]	; (8000a20 <main+0x280>)
 8000880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000882:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000886:	461a      	mov	r2, r3
 8000888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800088a:	4293      	cmp	r3, r2
 800088c:	d204      	bcs.n	8000898 <main+0xf8>
			  max = spectrData[i][0];
 800088e:	4a64      	ldr	r2, [pc, #400]	; (8000a20 <main+0x280>)
 8000890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000892:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000896:	653b      	str	r3, [r7, #80]	; 0x50
	  for ( int i = reservDataSize; i < 2050; i++) {
 8000898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800089a:	3301      	adds	r3, #1
 800089c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800089e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008a0:	f640 0201 	movw	r2, #2049	; 0x801
 80008a4:	4293      	cmp	r3, r2
 80008a6:	ddea      	ble.n	800087e <main+0xde>
	  */
	#ifdef DISPLAY_ENABLE
	  ssd1306_UpdateScreen();
	#endif
	  // Delay after on.
	  if (initFlag && (HAL_GetTick() - initDelay > INIT_TIME)) {
 80008a8:	4b5e      	ldr	r3, [pc, #376]	; (8000a24 <main+0x284>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d017      	beq.n	80008e0 <main+0x140>
 80008b0:	f001 fe42 	bl	8002538 <HAL_GetTick>
 80008b4:	4602      	mov	r2, r0
 80008b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80008be:	d90f      	bls.n	80008e0 <main+0x140>
		  initFlag = 0;
 80008c0:	4b58      	ldr	r3, [pc, #352]	; (8000a24 <main+0x284>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_IT(&hadc2);  // Init ADC for sipm channel.
 80008c6:	4858      	ldr	r0, [pc, #352]	; (8000a28 <main+0x288>)
 80008c8:	f002 fa0e 	bl	8002ce8 <HAL_ADC_Start_IT>
		  oldTimeAll = HAL_GetTick();
 80008cc:	f001 fe34 	bl	8002538 <HAL_GetTick>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4a48      	ldr	r2, [pc, #288]	; (80009f4 <main+0x254>)
 80008d4:	6013      	str	r3, [r2, #0]
		  HAL_LPTIM_Counter_Start_IT(&hlptim2, 32000);
 80008d6:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 80008da:	4844      	ldr	r0, [pc, #272]	; (80009ec <main+0x24c>)
 80008dc:	f004 ffbc 	bl	8005858 <HAL_LPTIM_Counter_Start_IT>
	  }
	#ifdef DISPLAY_ENABLE
	  ssd1306_SetCursor(0, 24);
	#endif
	  /* Status JDY-19, BT connected ? */
	  if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == 1 ) { // BT State active ?
 80008e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e8:	f004 febe 	bl	8005668 <HAL_GPIO_ReadPin>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	f040 83d4 	bne.w	800109c <main+0x8fc>
	#ifdef DISPLAY_ENABLE
		  ssd1306_WriteString("BT: connect   ", Font_6x8, 0x01);
	#endif
		  /* Init uart after sleep */
		  if (initUART) {
 80008f4:	4b4d      	ldr	r3, [pc, #308]	; (8000a2c <main+0x28c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d00c      	beq.n	8000916 <main+0x176>
			  HAL_UART_Init(&huart1);
 80008fc:	484c      	ldr	r0, [pc, #304]	; (8000a30 <main+0x290>)
 80008fe:	f007 fd0d 	bl	800831c <HAL_UART_Init>
			  HAL_UART_Receive_DMA(&huart1, btCommand, sizeCommand);
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	2214      	movs	r2, #20
 8000908:	4619      	mov	r1, r3
 800090a:	4849      	ldr	r0, [pc, #292]	; (8000a30 <main+0x290>)
 800090c:	f007 fe22 	bl	8008554 <HAL_UART_Receive_DMA>
			  initUART = 0;
 8000910:	4b46      	ldr	r3, [pc, #280]	; (8000a2c <main+0x28c>)
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
		  }

		  /* Receive data from android */
		  if (hdma_usart1_rx.State == HAL_DMA_STATE_READY) {
 8000916:	4b47      	ldr	r3, [pc, #284]	; (8000a34 <main+0x294>)
 8000918:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b01      	cmp	r3, #1
 8000920:	f040 812e 	bne.w	8000b80 <main+0x3e0>
			  HAL_UART_Receive_DMA(&huart1, btCommand, sizeCommand);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2214      	movs	r2, #20
 800092a:	4619      	mov	r1, r3
 800092c:	4840      	ldr	r0, [pc, #256]	; (8000a30 <main+0x290>)
 800092e:	f007 fe11 	bl	8008554 <HAL_UART_Receive_DMA>
			  if (btCommand[0] == '<' && btCommand[2] == '>') {
 8000932:	7b3b      	ldrb	r3, [r7, #12]
 8000934:	2b3c      	cmp	r3, #60	; 0x3c
 8000936:	f040 8123 	bne.w	8000b80 <main+0x3e0>
 800093a:	7bbb      	ldrb	r3, [r7, #14]
 800093c:	2b3e      	cmp	r3, #62	; 0x3e
 800093e:	f040 811f 	bne.w	8000b80 <main+0x3e0>
				  uint16_t CS = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				  for (int i = 0; i < 18; i++) {
 8000948:	2300      	movs	r3, #0
 800094a:	647b      	str	r3, [r7, #68]	; 0x44
 800094c:	e00d      	b.n	800096a <main+0x1ca>
					  CS = CS + btCommand[i];
 800094e:	f107 020c 	add.w	r2, r7, #12
 8000952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b29a      	uxth	r2, r3
 800095a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800095e:	4413      	add	r3, r2
 8000960:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				  for (int i = 0; i < 18; i++) {
 8000964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000966:	3301      	adds	r3, #1
 8000968:	647b      	str	r3, [r7, #68]	; 0x44
 800096a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800096c:	2b11      	cmp	r3, #17
 800096e:	ddee      	ble.n	800094e <main+0x1ae>
				  }
				  if (((CS & 0xFF) == btCommand[18]) && (((CS >> 8) & 0xFF) == btCommand[19])) {
 8000970:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000974:	b2db      	uxtb	r3, r3
 8000976:	7fba      	ldrb	r2, [r7, #30]
 8000978:	4293      	cmp	r3, r2
 800097a:	f040 8101 	bne.w	8000b80 <main+0x3e0>
 800097e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000982:	0a1b      	lsrs	r3, r3, #8
 8000984:	b29b      	uxth	r3, r3
 8000986:	b2db      	uxtb	r3, r3
 8000988:	7ffa      	ldrb	r2, [r7, #31]
 800098a:	4293      	cmp	r3, r2
 800098c:	f040 80f8 	bne.w	8000b80 <main+0x3e0>
					  //HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
					  //HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
					  if (btCommand[1] == '1')  { // Clear statistics
 8000990:	7b7b      	ldrb	r3, [r7, #13]
 8000992:	2b31      	cmp	r3, #49	; 0x31
 8000994:	d158      	bne.n	8000a48 <main+0x2a8>
						  for (int i = 0; i < 2050; i++) {
 8000996:	2300      	movs	r3, #0
 8000998:	643b      	str	r3, [r7, #64]	; 0x40
 800099a:	e019      	b.n	80009d0 <main+0x230>
							  spectrData[i][specterHistory] = 0;
 800099c:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <main+0x298>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	4a1f      	ldr	r2, [pc, #124]	; (8000a20 <main+0x280>)
 80009a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	440b      	add	r3, r1
 80009aa:	2100      	movs	r1, #0
 80009ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							  batteryInterval = 0;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <main+0x25c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
							  if (specterHistory == 1) {
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <main+0x298>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d105      	bne.n	80009ca <main+0x22a>
								  counterCCAlarm = 0;
 80009be:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <main+0x29c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
								  alarmTime = 0;
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <main+0x2a0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
						  for (int i = 0; i < 2050; i++) {
 80009ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009cc:	3301      	adds	r3, #1
 80009ce:	643b      	str	r3, [r7, #64]	; 0x40
 80009d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009d2:	f640 0201 	movw	r2, #2049	; 0x801
 80009d6:	4293      	cmp	r3, r2
 80009d8:	dde0      	ble.n	800099c <main+0x1fc>
							  }
						  }
						  oldTimeAll = HAL_GetTick();
 80009da:	f001 fdad 	bl	8002538 <HAL_GetTick>
 80009de:	4603      	mov	r3, r0
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <main+0x254>)
 80009e2:	6013      	str	r3, [r2, #0]
						  counterALL = 0;
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <main+0x2a4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	e0c9      	b.n	8000b80 <main+0x3e0>
 80009ec:	200042e8 	.word	0x200042e8
 80009f0:	0800909c 	.word	0x0800909c
 80009f4:	20004d9c 	.word	0x20004d9c
 80009f8:	20000003 	.word	0x20000003
 80009fc:	20004da4 	.word	0x20004da4
 8000a00:	20000054 	.word	0x20000054
 8000a04:	48000400 	.word	0x48000400
 8000a08:	200041d4 	.word	0x200041d4
 8000a0c:	20004da8 	.word	0x20004da8
 8000a10:	20004e00 	.word	0x20004e00
 8000a14:	20004220 	.word	0x20004220
 8000a18:	20004df4 	.word	0x20004df4
 8000a1c:	20004d50 	.word	0x20004d50
 8000a20:	20000074 	.word	0x20000074
 8000a24:	20000002 	.word	0x20000002
 8000a28:	20004170 	.word	0x20004170
 8000a2c:	20000004 	.word	0x20000004
 8000a30:	20004324 	.word	0x20004324
 8000a34:	200042a0 	.word	0x200042a0
 8000a38:	20004155 	.word	0x20004155
 8000a3c:	20000050 	.word	0x20000050
 8000a40:	2000005c 	.word	0x2000005c
 8000a44:	20000058 	.word	0x20000058
					  } else if (btCommand[1] == '2') { // Write config data
 8000a48:	7b7b      	ldrb	r3, [r7, #13]
 8000a4a:	2b32      	cmp	r3, #50	; 0x32
 8000a4c:	f040 8084 	bne.w	8000b58 <main+0x3b8>
						  cfgData = ((btCommand[4] << 8) & 0xFF00) | btCommand[3];
 8000a50:	7c3b      	ldrb	r3, [r7, #16]
 8000a52:	021b      	lsls	r3, r3, #8
 8000a54:	b21a      	sxth	r2, r3
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	b21b      	sxth	r3, r3
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	4baa      	ldr	r3, [pc, #680]	; (8000d0c <main+0x56c>)
 8000a62:	801a      	strh	r2, [r3, #0]
						  resolution = (uint8_t) (cfgData >> 8 & 0x3);
 8000a64:	4ba9      	ldr	r3, [pc, #676]	; (8000d0c <main+0x56c>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	f003 0303 	and.w	r3, r3, #3
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	4ba6      	ldr	r3, [pc, #664]	; (8000d10 <main+0x570>)
 8000a76:	701a      	strb	r2, [r3, #0]
						  cfgLevel1 = ((btCommand[6] << 8) & 0xFF00) | btCommand[5];
 8000a78:	7cbb      	ldrb	r3, [r7, #18]
 8000a7a:	021b      	lsls	r3, r3, #8
 8000a7c:	b21a      	sxth	r2, r3
 8000a7e:	7c7b      	ldrb	r3, [r7, #17]
 8000a80:	b21b      	sxth	r3, r3
 8000a82:	4313      	orrs	r3, r2
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	4ba2      	ldr	r3, [pc, #648]	; (8000d14 <main+0x574>)
 8000a8a:	801a      	strh	r2, [r3, #0]
						  cfgLevel2 = ((btCommand[8] << 8) & 0xFF00) | btCommand[7];
 8000a8c:	7d3b      	ldrb	r3, [r7, #20]
 8000a8e:	021b      	lsls	r3, r3, #8
 8000a90:	b21a      	sxth	r2, r3
 8000a92:	7cfb      	ldrb	r3, [r7, #19]
 8000a94:	b21b      	sxth	r3, r3
 8000a96:	4313      	orrs	r3, r2
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	4b9e      	ldr	r3, [pc, #632]	; (8000d18 <main+0x578>)
 8000a9e:	801a      	strh	r2, [r3, #0]
						  cfgLevel3 = ((btCommand[10] << 8) & 0xFF00) | btCommand[9];
 8000aa0:	7dbb      	ldrb	r3, [r7, #22]
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	b21a      	sxth	r2, r3
 8000aa6:	7d7b      	ldrb	r3, [r7, #21]
 8000aa8:	b21b      	sxth	r3, r3
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	4b9a      	ldr	r3, [pc, #616]	; (8000d1c <main+0x57c>)
 8000ab2:	801a      	strh	r2, [r3, #0]
						  //cfgKoefRh = *(float *) &btCommand[11];
						  cfgKoef.uint = (uint32_t) (btCommand[11] | (uint32_t) btCommand[12] << 8 | (uint32_t) btCommand[13] << 16 | (uint32_t) btCommand[14] << 24);
 8000ab4:	7dfb      	ldrb	r3, [r7, #23]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	7e3b      	ldrb	r3, [r7, #24]
 8000aba:	021b      	lsls	r3, r3, #8
 8000abc:	431a      	orrs	r2, r3
 8000abe:	7e7b      	ldrb	r3, [r7, #25]
 8000ac0:	041b      	lsls	r3, r3, #16
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	7ebb      	ldrb	r3, [r7, #26]
 8000ac6:	061b      	lsls	r3, r3, #24
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	4a95      	ldr	r2, [pc, #596]	; (8000d20 <main+0x580>)
 8000acc:	6013      	str	r3, [r2, #0]
						  if (cfgKoef.flt > 0) {
 8000ace:	4b94      	ldr	r3, [pc, #592]	; (8000d20 <main+0x580>)
 8000ad0:	edd3 7a00 	vldr	s15, [r3]
 8000ad4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000adc:	dd38      	ble.n	8000b50 <main+0x3b0>
							  //float tmpVal = cfgKoefRh * 1000;
							  float tmpVal = cfgKoef.flt * 1000;
 8000ade:	4b90      	ldr	r3, [pc, #576]	; (8000d20 <main+0x580>)
 8000ae0:	edd3 7a00 	vldr	s15, [r3]
 8000ae4:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8000d24 <main+0x584>
 8000ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aec:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
							  Thr1 = (uint32_t) (tmpVal / (float)cfgLevel1);
 8000af0:	4b88      	ldr	r3, [pc, #544]	; (8000d14 <main+0x574>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	ee07 3a90 	vmov	s15, r3
 8000af8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000afc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b08:	ee17 2a90 	vmov	r2, s15
 8000b0c:	4b86      	ldr	r3, [pc, #536]	; (8000d28 <main+0x588>)
 8000b0e:	601a      	str	r2, [r3, #0]
							  Thr2 = (uint32_t) (tmpVal / (float)cfgLevel2);
 8000b10:	4b81      	ldr	r3, [pc, #516]	; (8000d18 <main+0x578>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	ee07 3a90 	vmov	s15, r3
 8000b18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b1c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b28:	ee17 2a90 	vmov	r2, s15
 8000b2c:	4b7f      	ldr	r3, [pc, #508]	; (8000d2c <main+0x58c>)
 8000b2e:	601a      	str	r2, [r3, #0]
							  Thr3 = (uint32_t) (tmpVal / (float)cfgLevel3);
 8000b30:	4b7a      	ldr	r3, [pc, #488]	; (8000d1c <main+0x57c>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	ee07 3a90 	vmov	s15, r3
 8000b38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b3c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b48:	ee17 2a90 	vmov	r2, s15
 8000b4c:	4b78      	ldr	r3, [pc, #480]	; (8000d30 <main+0x590>)
 8000b4e:	601a      	str	r2, [r3, #0]
						  }
						  rwFlash(1); // Write to flash
 8000b50:	2001      	movs	r0, #1
 8000b52:	f7ff fcd7 	bl	8000504 <rwFlash>
 8000b56:	e013      	b.n	8000b80 <main+0x3e0>
					  } else if (btCommand[1] == '3') {  // Request log data.
 8000b58:	7b7b      	ldrb	r3, [r7, #13]
 8000b5a:	2b33      	cmp	r3, #51	; 0x33
 8000b5c:	d103      	bne.n	8000b66 <main+0x3c6>
						  logDataFlag = 1;
 8000b5e:	4b75      	ldr	r3, [pc, #468]	; (8000d34 <main+0x594>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	e00c      	b.n	8000b80 <main+0x3e0>
					  } else if (btCommand[1] == '4') {  // Toggle to alarm specter array
 8000b66:	7b7b      	ldrb	r3, [r7, #13]
 8000b68:	2b34      	cmp	r3, #52	; 0x34
 8000b6a:	d103      	bne.n	8000b74 <main+0x3d4>
						  specterHistory = 1;
 8000b6c:	4b72      	ldr	r3, [pc, #456]	; (8000d38 <main+0x598>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	e005      	b.n	8000b80 <main+0x3e0>
					  } else if (btCommand[1] == '5') {  // Toggle to normal specter array
 8000b74:	7b7b      	ldrb	r3, [r7, #13]
 8000b76:	2b35      	cmp	r3, #53	; 0x35
 8000b78:	d102      	bne.n	8000b80 <main+0x3e0>
						  specterHistory = 0;
 8000b7a:	4b6f      	ldr	r3, [pc, #444]	; (8000d38 <main+0x598>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
		  }

		  /*
		   *  Transmit data over BT.
		   */
		  if (logDataFlag == 0) {  // Spectert data
 8000b80:	4b6c      	ldr	r3, [pc, #432]	; (8000d34 <main+0x594>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	f083 0301 	eor.w	r3, r3, #1
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f000 80e6 	beq.w	8000d5c <main+0x5bc>
			  if (specterHistory == 0) {
 8000b90:	4b69      	ldr	r3, [pc, #420]	; (8000d38 <main+0x598>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d138      	bne.n	8000c0a <main+0x46a>
				  prefix[1] = 'B';		// Normal specter
 8000b98:	2342      	movs	r3, #66	; 0x42
 8000b9a:	727b      	strb	r3, [r7, #9]
				  spectrData[0][specterHistory] = (uint16_t) ((HAL_GetTick() - oldTimeAll) / 1000); // Specter collection time.
 8000b9c:	f001 fccc 	bl	8002538 <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	4b66      	ldr	r3, [pc, #408]	; (8000d3c <main+0x59c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	4a65      	ldr	r2, [pc, #404]	; (8000d40 <main+0x5a0>)
 8000baa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bae:	0999      	lsrs	r1, r3, #6
 8000bb0:	4b61      	ldr	r3, [pc, #388]	; (8000d38 <main+0x598>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	b289      	uxth	r1, r1
 8000bb8:	4b62      	ldr	r3, [pc, #392]	; (8000d44 <main+0x5a4>)
 8000bba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				  spectrData[1][specterHistory] = (uint16_t) (((HAL_GetTick() - oldTimeAll) / 1000) >> 16);
 8000bbe:	f001 fcbb 	bl	8002538 <HAL_GetTick>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	4b5d      	ldr	r3, [pc, #372]	; (8000d3c <main+0x59c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	4a5d      	ldr	r2, [pc, #372]	; (8000d40 <main+0x5a0>)
 8000bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd0:	099b      	lsrs	r3, r3, #6
 8000bd2:	0c1a      	lsrs	r2, r3, #16
 8000bd4:	4b58      	ldr	r3, [pc, #352]	; (8000d38 <main+0x598>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b291      	uxth	r1, r2
 8000bda:	4a5a      	ldr	r2, [pc, #360]	; (8000d44 <main+0x5a4>)
 8000bdc:	3302      	adds	r3, #2
 8000bde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  spectrData[2][specterHistory] = (uint16_t) (counterALL & 0xFFFF);
 8000be2:	4b59      	ldr	r3, [pc, #356]	; (8000d48 <main+0x5a8>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4b54      	ldr	r3, [pc, #336]	; (8000d38 <main+0x598>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b291      	uxth	r1, r2
 8000bec:	4a55      	ldr	r2, [pc, #340]	; (8000d44 <main+0x5a4>)
 8000bee:	3304      	adds	r3, #4
 8000bf0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  spectrData[3][specterHistory] = (uint16_t) (counterALL >> 16);
 8000bf4:	4b54      	ldr	r3, [pc, #336]	; (8000d48 <main+0x5a8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	0c1a      	lsrs	r2, r3, #16
 8000bfa:	4b4f      	ldr	r3, [pc, #316]	; (8000d38 <main+0x598>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b291      	uxth	r1, r2
 8000c00:	4a50      	ldr	r2, [pc, #320]	; (8000d44 <main+0x5a4>)
 8000c02:	3306      	adds	r3, #6
 8000c04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c08:	e027      	b.n	8000c5a <main+0x4ba>
			  } else {
				  prefix[1] = 'b';		// Alarm specter
 8000c0a:	2362      	movs	r3, #98	; 0x62
 8000c0c:	727b      	strb	r3, [r7, #9]
				  spectrData[0][specterHistory] = (uint16_t) (alarmTime & 0xFFFF); // Specter collection time.
 8000c0e:	4b4f      	ldr	r3, [pc, #316]	; (8000d4c <main+0x5ac>)
 8000c10:	6819      	ldr	r1, [r3, #0]
 8000c12:	4b49      	ldr	r3, [pc, #292]	; (8000d38 <main+0x598>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	b289      	uxth	r1, r1
 8000c1a:	4b4a      	ldr	r3, [pc, #296]	; (8000d44 <main+0x5a4>)
 8000c1c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				  spectrData[1][specterHistory] = (uint16_t) (alarmTime >> 16);
 8000c20:	4b4a      	ldr	r3, [pc, #296]	; (8000d4c <main+0x5ac>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	0c1a      	lsrs	r2, r3, #16
 8000c26:	4b44      	ldr	r3, [pc, #272]	; (8000d38 <main+0x598>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b291      	uxth	r1, r2
 8000c2c:	4a45      	ldr	r2, [pc, #276]	; (8000d44 <main+0x5a4>)
 8000c2e:	3302      	adds	r3, #2
 8000c30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  spectrData[2][specterHistory] = (uint16_t) (counterCCAlarm & 0xFFFF);
 8000c34:	4b46      	ldr	r3, [pc, #280]	; (8000d50 <main+0x5b0>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b3f      	ldr	r3, [pc, #252]	; (8000d38 <main+0x598>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b291      	uxth	r1, r2
 8000c3e:	4a41      	ldr	r2, [pc, #260]	; (8000d44 <main+0x5a4>)
 8000c40:	3304      	adds	r3, #4
 8000c42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  spectrData[3][specterHistory] = (uint16_t) (counterCCAlarm >> 16);
 8000c46:	4b42      	ldr	r3, [pc, #264]	; (8000d50 <main+0x5b0>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	0c1a      	lsrs	r2, r3, #16
 8000c4c:	4b3a      	ldr	r3, [pc, #232]	; (8000d38 <main+0x598>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b291      	uxth	r1, r2
 8000c52:	4a3c      	ldr	r2, [pc, #240]	; (8000d44 <main+0x5a4>)
 8000c54:	3306      	adds	r3, #6
 8000c56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  }
			  HAL_UART_Transmit(&huart1, prefix, 3, 1000); // Start sequence.
 8000c5a:	f107 0108 	add.w	r1, r7, #8
 8000c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c62:	2203      	movs	r2, #3
 8000c64:	483b      	ldr	r0, [pc, #236]	; (8000d54 <main+0x5b4>)
 8000c66:	f007 fbe0 	bl	800842a <HAL_UART_Transmit>
			  //spectrData[2] = 0;
			  //spectrData[3] = 1;
			  spectrCRC = 0;
 8000c6a:	4b3b      	ldr	r3, [pc, #236]	; (8000d58 <main+0x5b8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	801a      	strh	r2, [r3, #0]
			  HAL_Delay(TRANSMIT_DALAY);  // Increase time delay if transmit error.
 8000c70:	2014      	movs	r0, #20
 8000c72:	f001 fc6d 	bl	8002550 <HAL_Delay>
			  j = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	657b      	str	r3, [r7, #84]	; 0x54
			  for ( int i = 0; i < 1042; i++) {
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c7e:	e03e      	b.n	8000cfe <main+0x55e>
				  lowSpectr = spectrData[i][specterHistory] & 0xFF;
 8000c80:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <main+0x598>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	4a2f      	ldr	r2, [pc, #188]	; (8000d44 <main+0x5a4>)
 8000c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	440b      	add	r3, r1
 8000c8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	71fb      	strb	r3, [r7, #7]
				  highSpectr = (spectrData[i][specterHistory] & 0xFF00) >> 8;
 8000c96:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <main+0x598>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4a29      	ldr	r2, [pc, #164]	; (8000d44 <main+0x5a4>)
 8000c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	440b      	add	r3, r1
 8000ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	71bb      	strb	r3, [r7, #6]
				  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <main+0x5b8>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	4413      	add	r3, r2
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	4413      	add	r3, r2
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <main+0x5b8>)
 8000cc6:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8000cc8:	1db9      	adds	r1, r7, #6
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4820      	ldr	r0, [pc, #128]	; (8000d54 <main+0x5b4>)
 8000cd2:	f007 fbaa 	bl	800842a <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8000cd6:	1df9      	adds	r1, r7, #7
 8000cd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cdc:	2201      	movs	r2, #1
 8000cde:	481d      	ldr	r0, [pc, #116]	; (8000d54 <main+0x5b4>)
 8000ce0:	f007 fba3 	bl	800842a <HAL_UART_Transmit>
				  if ( j++ >= 9) {
 8000ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	657a      	str	r2, [r7, #84]	; 0x54
 8000cea:	2b08      	cmp	r3, #8
 8000cec:	dd04      	ble.n	8000cf8 <main+0x558>
					  HAL_Delay(TRANSMIT_DALAY);  // Increase time delay if transmit error.
 8000cee:	2014      	movs	r0, #20
 8000cf0:	f001 fc2e 	bl	8002550 <HAL_Delay>
					  j = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	657b      	str	r3, [r7, #84]	; 0x54
			  for ( int i = 0; i < 1042; i++) {
 8000cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d00:	f240 4211 	movw	r2, #1041	; 0x411
 8000d04:	4293      	cmp	r3, r2
 8000d06:	ddbb      	ble.n	8000c80 <main+0x4e0>
 8000d08:	e197      	b.n	800103a <main+0x89a>
 8000d0a:	bf00      	nop
 8000d0c:	20004df6 	.word	0x20004df6
 8000d10:	20004154 	.word	0x20004154
 8000d14:	20004dfc 	.word	0x20004dfc
 8000d18:	20004dfa 	.word	0x20004dfa
 8000d1c:	20004222 	.word	0x20004222
 8000d20:	2000415c 	.word	0x2000415c
 8000d24:	447a0000 	.word	0x447a0000
 8000d28:	20000064 	.word	0x20000064
 8000d2c:	20000068 	.word	0x20000068
 8000d30:	2000006c 	.word	0x2000006c
 8000d34:	20004158 	.word	0x20004158
 8000d38:	20004155 	.word	0x20004155
 8000d3c:	20004d9c 	.word	0x20004d9c
 8000d40:	10624dd3 	.word	0x10624dd3
 8000d44:	20000074 	.word	0x20000074
 8000d48:	20000058 	.word	0x20000058
 8000d4c:	2000005c 	.word	0x2000005c
 8000d50:	20000050 	.word	0x20000050
 8000d54:	20004324 	.word	0x20004324
 8000d58:	20004df8 	.word	0x20004df8
				  }
			  }
		  } else {  // Log data
			  uint32_t logTime = HAL_GetTick() / 1000;
 8000d5c:	f001 fbec 	bl	8002538 <HAL_GetTick>
 8000d60:	4603      	mov	r3, r0
 8000d62:	4a3a      	ldr	r2, [pc, #232]	; (8000e4c <main+0x6ac>)
 8000d64:	fba2 2303 	umull	r2, r3, r2, r3
 8000d68:	099b      	lsrs	r3, r3, #6
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
			  uint8_t emptyBuff[5] = {0};
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	2300      	movs	r3, #0
 8000d72:	713b      	strb	r3, [r7, #4]
			  logDataFlag = 0;	// Reset log data flag
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <main+0x6b0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
			  prefix[1] = 'L';
 8000d7a:	234c      	movs	r3, #76	; 0x4c
 8000d7c:	727b      	strb	r3, [r7, #9]
			  HAL_UART_Transmit(&huart1, prefix, 3, 1000); // Start sequence.
 8000d7e:	f107 0108 	add.w	r1, r7, #8
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	2203      	movs	r2, #3
 8000d88:	4832      	ldr	r0, [pc, #200]	; (8000e54 <main+0x6b4>)
 8000d8a:	f007 fb4e 	bl	800842a <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, &logRecords, 1, 1000); // Records count
 8000d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d92:	2201      	movs	r2, #1
 8000d94:	4930      	ldr	r1, [pc, #192]	; (8000e58 <main+0x6b8>)
 8000d96:	482f      	ldr	r0, [pc, #188]	; (8000e54 <main+0x6b4>)
 8000d98:	f007 fb47 	bl	800842a <HAL_UART_Transmit>
			  spectrCRC = logRecords;
 8000d9c:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <main+0x6b8>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	4b2e      	ldr	r3, [pc, #184]	; (8000e5c <main+0x6bc>)
 8000da4:	801a      	strh	r2, [r3, #0]
			  /* Send current time */
			  lowSpectr = logTime & 0xFF;
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	71fb      	strb	r3, [r7, #7]
			  highSpectr = (logTime & 0xFF00) >> 8;
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	0a1b      	lsrs	r3, r3, #8
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	71bb      	strb	r3, [r7, #6]
			  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <main+0x6bc>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <main+0x6bc>)
 8000dca:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8000dcc:	1db9      	adds	r1, r7, #6
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	481f      	ldr	r0, [pc, #124]	; (8000e54 <main+0x6b4>)
 8000dd6:	f007 fb28 	bl	800842a <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8000dda:	1df9      	adds	r1, r7, #7
 8000ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de0:	2201      	movs	r2, #1
 8000de2:	481c      	ldr	r0, [pc, #112]	; (8000e54 <main+0x6b4>)
 8000de4:	f007 fb21 	bl	800842a <HAL_UART_Transmit>
			  lowSpectr = (logTime & 0xFF0000) >> 16;
 8000de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dea:	0c1b      	lsrs	r3, r3, #16
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	71fb      	strb	r3, [r7, #7]
			  highSpectr = (logTime & 0xFF000000) >> 24;
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	0e1b      	lsrs	r3, r3, #24
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	71bb      	strb	r3, [r7, #6]
			  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <main+0x6bc>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	4413      	add	r3, r2
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4413      	add	r3, r2
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <main+0x6bc>)
 8000e0e:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8000e10:	1db9      	adds	r1, r7, #6
 8000e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e16:	2201      	movs	r2, #1
 8000e18:	480e      	ldr	r0, [pc, #56]	; (8000e54 <main+0x6b4>)
 8000e1a:	f007 fb06 	bl	800842a <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8000e1e:	1df9      	adds	r1, r7, #7
 8000e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e24:	2201      	movs	r2, #1
 8000e26:	480b      	ldr	r0, [pc, #44]	; (8000e54 <main+0x6b4>)
 8000e28:	f007 faff 	bl	800842a <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, emptyBuff, 5, 1000);
 8000e2c:	4639      	mov	r1, r7
 8000e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e32:	2205      	movs	r2, #5
 8000e34:	4807      	ldr	r0, [pc, #28]	; (8000e54 <main+0x6b4>)
 8000e36:	f007 faf8 	bl	800842a <HAL_UART_Transmit>
			  HAL_Delay(TRANSMIT_DALAY);  // Increase time delay if transmit error.
 8000e3a:	2014      	movs	r0, #20
 8000e3c:	f001 fb88 	bl	8002550 <HAL_Delay>
			  j = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	657b      	str	r3, [r7, #84]	; 0x54
			  for (int i = 0; i < logRecords; i++) {
 8000e44:	2300      	movs	r3, #0
 8000e46:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e48:	e0f0      	b.n	800102c <main+0x88c>
 8000e4a:	bf00      	nop
 8000e4c:	10624dd3 	.word	0x10624dd3
 8000e50:	20004158 	.word	0x20004158
 8000e54:	20004324 	.word	0x20004324
 8000e58:	20004157 	.word	0x20004157
 8000e5c:	20004df8 	.word	0x20004df8
				  lowSpectr = logDat[i].timeData & 0xFF;
 8000e60:	4988      	ldr	r1, [pc, #544]	; (8001084 <main+0x8e4>)
 8000e62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e64:	4613      	mov	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	71fb      	strb	r3, [r7, #7]
				  highSpectr = (logDat[i].timeData & 0xFF00) >> 8;
 8000e74:	4983      	ldr	r1, [pc, #524]	; (8001084 <main+0x8e4>)
 8000e76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e78:	4613      	mov	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	440b      	add	r3, r1
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	71bb      	strb	r3, [r7, #6]
				  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	4b7e      	ldr	r3, [pc, #504]	; (8001088 <main+0x8e8>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	79bb      	ldrb	r3, [r7, #6]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	4b7a      	ldr	r3, [pc, #488]	; (8001088 <main+0x8e8>)
 8000ea0:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8000ea2:	1db9      	adds	r1, r7, #6
 8000ea4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4878      	ldr	r0, [pc, #480]	; (800108c <main+0x8ec>)
 8000eac:	f007 fabd 	bl	800842a <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8000eb0:	1df9      	adds	r1, r7, #7
 8000eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4874      	ldr	r0, [pc, #464]	; (800108c <main+0x8ec>)
 8000eba:	f007 fab6 	bl	800842a <HAL_UART_Transmit>
				  lowSpectr = (logDat[i].timeData & 0xFF0000) >> 16;
 8000ebe:	4971      	ldr	r1, [pc, #452]	; (8001084 <main+0x8e4>)
 8000ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	4413      	add	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	440b      	add	r3, r1
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	0c1b      	lsrs	r3, r3, #16
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	71fb      	strb	r3, [r7, #7]
				  highSpectr = (logDat[i].timeData & 0xFF000000) >> 24;
 8000ed4:	496b      	ldr	r1, [pc, #428]	; (8001084 <main+0x8e4>)
 8000ed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ed8:	4613      	mov	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	0e1b      	lsrs	r3, r3, #24
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	71bb      	strb	r3, [r7, #6]
				  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	4b66      	ldr	r3, [pc, #408]	; (8001088 <main+0x8e8>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	79bb      	ldrb	r3, [r7, #6]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4413      	add	r3, r2
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	4b62      	ldr	r3, [pc, #392]	; (8001088 <main+0x8e8>)
 8000f00:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8000f02:	1db9      	adds	r1, r7, #6
 8000f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4860      	ldr	r0, [pc, #384]	; (800108c <main+0x8ec>)
 8000f0c:	f007 fa8d 	bl	800842a <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8000f10:	1df9      	adds	r1, r7, #7
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	2201      	movs	r2, #1
 8000f18:	485c      	ldr	r0, [pc, #368]	; (800108c <main+0x8ec>)
 8000f1a:	f007 fa86 	bl	800842a <HAL_UART_Transmit>
				  spectrCRC = spectrCRC + logDat[i].eventType;
 8000f1e:	4959      	ldr	r1, [pc, #356]	; (8001084 <main+0x8e4>)
 8000f20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f22:	4613      	mov	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4413      	add	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b55      	ldr	r3, [pc, #340]	; (8001088 <main+0x8e8>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	4b53      	ldr	r3, [pc, #332]	; (8001088 <main+0x8e8>)
 8000f3c:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, &logDat[i].eventType, 1, 1000);
 8000f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f40:	4613      	mov	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4a4e      	ldr	r2, [pc, #312]	; (8001084 <main+0x8e4>)
 8000f4a:	4413      	add	r3, r2
 8000f4c:	1d19      	adds	r1, r3, #4
 8000f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f52:	2201      	movs	r2, #1
 8000f54:	484d      	ldr	r0, [pc, #308]	; (800108c <main+0x8ec>)
 8000f56:	f007 fa68 	bl	800842a <HAL_UART_Transmit>
				  lowSpectr = logDat[i].event_data & 0xFF;
 8000f5a:	494a      	ldr	r1, [pc, #296]	; (8001084 <main+0x8e4>)
 8000f5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	3308      	adds	r3, #8
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	71fb      	strb	r3, [r7, #7]
				  highSpectr = (logDat[i].event_data & 0xFF00) >> 8;
 8000f70:	4944      	ldr	r1, [pc, #272]	; (8001084 <main+0x8e4>)
 8000f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f74:	4613      	mov	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	3308      	adds	r3, #8
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	0a1b      	lsrs	r3, r3, #8
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	71bb      	strb	r3, [r7, #6]
				  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	4b3e      	ldr	r3, [pc, #248]	; (8001088 <main+0x8e8>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	4413      	add	r3, r2
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	4413      	add	r3, r2
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	4b3a      	ldr	r3, [pc, #232]	; (8001088 <main+0x8e8>)
 8000f9e:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8000fa0:	1db9      	adds	r1, r7, #6
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4838      	ldr	r0, [pc, #224]	; (800108c <main+0x8ec>)
 8000faa:	f007 fa3e 	bl	800842a <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8000fae:	1df9      	adds	r1, r7, #7
 8000fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4835      	ldr	r0, [pc, #212]	; (800108c <main+0x8ec>)
 8000fb8:	f007 fa37 	bl	800842a <HAL_UART_Transmit>
				  lowSpectr = (logDat[i].event_data & 0xFF0000) >> 16;
 8000fbc:	4931      	ldr	r1, [pc, #196]	; (8001084 <main+0x8e4>)
 8000fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	440b      	add	r3, r1
 8000fca:	3308      	adds	r3, #8
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	0c1b      	lsrs	r3, r3, #16
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	71fb      	strb	r3, [r7, #7]
				  highSpectr = (logDat[i].event_data & 0xFF000000) >> 24;
 8000fd4:	492b      	ldr	r1, [pc, #172]	; (8001084 <main+0x8e4>)
 8000fd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	3308      	adds	r3, #8
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	0e1b      	lsrs	r3, r3, #24
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	71bb      	strb	r3, [r7, #6]
				  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	4b25      	ldr	r3, [pc, #148]	; (8001088 <main+0x8e8>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4b21      	ldr	r3, [pc, #132]	; (8001088 <main+0x8e8>)
 8001002:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8001004:	1db9      	adds	r1, r7, #6
 8001006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100a:	2201      	movs	r2, #1
 800100c:	481f      	ldr	r0, [pc, #124]	; (800108c <main+0x8ec>)
 800100e:	f007 fa0c 	bl	800842a <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8001012:	1df9      	adds	r1, r7, #7
 8001014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001018:	2201      	movs	r2, #1
 800101a:	481c      	ldr	r0, [pc, #112]	; (800108c <main+0x8ec>)
 800101c:	f007 fa05 	bl	800842a <HAL_UART_Transmit>
				  HAL_Delay(TRANSMIT_DALAY);  // Increase time delay if transmit error.
 8001020:	2014      	movs	r0, #20
 8001022:	f001 fa95 	bl	8002550 <HAL_Delay>
			  for (int i = 0; i < logRecords; i++) {
 8001026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001028:	3301      	adds	r3, #1
 800102a:	63bb      	str	r3, [r7, #56]	; 0x38
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <main+0x8f0>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001034:	4293      	cmp	r3, r2
 8001036:	f6ff af13 	blt.w	8000e60 <main+0x6c0>
			  }
		  }
		  /* Transmit CRC */
		  HAL_Delay(TRANSMIT_DALAY);
 800103a:	2014      	movs	r0, #20
 800103c:	f001 fa88 	bl	8002550 <HAL_Delay>
		  lowSpectr = spectrCRC & 0xFF;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <main+0x8e8>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	71fb      	strb	r3, [r7, #7]
		  highSpectr = (spectrCRC & 0xFF00) >> 8;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <main+0x8e8>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	b29b      	uxth	r3, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	71bb      	strb	r3, [r7, #6]
		  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8001054:	1db9      	adds	r1, r7, #6
 8001056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105a:	2201      	movs	r2, #1
 800105c:	480b      	ldr	r0, [pc, #44]	; (800108c <main+0x8ec>)
 800105e:	f007 f9e4 	bl	800842a <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8001062:	1df9      	adds	r1, r7, #7
 8001064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001068:	2201      	movs	r2, #1
 800106a:	4808      	ldr	r0, [pc, #32]	; (800108c <main+0x8ec>)
 800106c:	f007 f9dd 	bl	800842a <HAL_UART_Transmit>
		  sleepDelay = HAL_GetTick();
 8001070:	f001 fa62 	bl	8002538 <HAL_GetTick>
 8001074:	4603      	mov	r3, r0
 8001076:	4a07      	ldr	r2, [pc, #28]	; (8001094 <main+0x8f4>)
 8001078:	6013      	str	r3, [r2, #0]
		  sleepFlag = 1;
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <main+0x8f8>)
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
 8001080:	e03b      	b.n	80010fa <main+0x95a>
 8001082:	bf00      	nop
 8001084:	200043a8 	.word	0x200043a8
 8001088:	20004df8 	.word	0x20004df8
 800108c:	20004324 	.word	0x20004324
 8001090:	20004157 	.word	0x20004157
 8001094:	20004238 	.word	0x20004238
 8001098:	20000003 	.word	0x20000003
	#ifdef DISPLAY_ENABLE
		  HAL_Delay(500);
		  ssd1306_WriteString("BT: disconnect", Font_6x8, 0x01);
	#endif
		  // BT sleep control
		  if (sleepFlag && (HAL_GetTick() - sleepDelay > SLEEPDALAY)) {
 800109c:	4b53      	ldr	r3, [pc, #332]	; (80011ec <main+0xa4c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d02a      	beq.n	80010fa <main+0x95a>
 80010a4:	f001 fa48 	bl	8002538 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	4b51      	ldr	r3, [pc, #324]	; (80011f0 <main+0xa50>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010b4:	d921      	bls.n	80010fa <main+0x95a>
			  sleepFlag = 0;
 80010b6:	4b4d      	ldr	r3, [pc, #308]	; (80011ec <main+0xa4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, (uint8_t*) "AT+SLEEP\n", 9, 1000);    //For JDY-10
 80010bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c0:	2209      	movs	r2, #9
 80010c2:	494c      	ldr	r1, [pc, #304]	; (80011f4 <main+0xa54>)
 80010c4:	484c      	ldr	r0, [pc, #304]	; (80011f8 <main+0xa58>)
 80010c6:	f007 f9b0 	bl	800842a <HAL_UART_Transmit>
			  HAL_Delay(200);
 80010ca:	20c8      	movs	r0, #200	; 0xc8
 80010cc:	f001 fa40 	bl	8002550 <HAL_Delay>
			  HAL_UART_Transmit(&huart1, (uint8_t*) "AT+SLEEP\r\n", 10, 1000); //For JDY-19
 80010d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d4:	220a      	movs	r2, #10
 80010d6:	4949      	ldr	r1, [pc, #292]	; (80011fc <main+0xa5c>)
 80010d8:	4847      	ldr	r0, [pc, #284]	; (80011f8 <main+0xa58>)
 80010da:	f007 f9a6 	bl	800842a <HAL_UART_Transmit>
			  HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_SET); // LED on.
 80010de:	2201      	movs	r2, #1
 80010e0:	2108      	movs	r1, #8
 80010e2:	4847      	ldr	r0, [pc, #284]	; (8001200 <main+0xa60>)
 80010e4:	f004 fad8 	bl	8005698 <HAL_GPIO_WritePin>
			  HAL_TIM_Base_Start_IT(&htim15); // Start timer for turn off LED.
 80010e8:	4846      	ldr	r0, [pc, #280]	; (8001204 <main+0xa64>)
 80010ea:	f005 ffbf 	bl	800706c <HAL_TIM_Base_Start_IT>
			  HAL_UART_DeInit(&huart1);
 80010ee:	4842      	ldr	r0, [pc, #264]	; (80011f8 <main+0xa58>)
 80010f0:	f007 f962 	bl	80083b8 <HAL_UART_DeInit>
			  initUART = 1;
 80010f4:	4b44      	ldr	r3, [pc, #272]	; (8001208 <main+0xa68>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  /*
	   * Measure battery voltage and temperature
	   */
	  if ((HAL_GetTick() - batteryInterval > batteryMeasureInterval) || batteryInterval == 0) {
 80010fa:	f001 fa1d 	bl	8002538 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	4b42      	ldr	r3, [pc, #264]	; (800120c <main+0xa6c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	f644 6220 	movw	r2, #20000	; 0x4e20
 800110a:	4293      	cmp	r3, r2
 800110c:	d803      	bhi.n	8001116 <main+0x976>
 800110e:	4b3f      	ldr	r3, [pc, #252]	; (800120c <main+0xa6c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d163      	bne.n	80011de <main+0xa3e>
		  HAL_GPIO_WritePin(GPIOA, COM_PIN, GPIO_PIN_RESET); // Enable common pin
 8001116:	2200      	movs	r2, #0
 8001118:	2140      	movs	r1, #64	; 0x40
 800111a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111e:	f004 fabb 	bl	8005698 <HAL_GPIO_WritePin>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &adc1Result, 2);
 8001122:	2202      	movs	r2, #2
 8001124:	493a      	ldr	r1, [pc, #232]	; (8001210 <main+0xa70>)
 8001126:	483b      	ldr	r0, [pc, #236]	; (8001214 <main+0xa74>)
 8001128:	f001 ff10 	bl	8002f4c <HAL_ADC_Start_DMA>
		  batteryInterval = HAL_GetTick();
 800112c:	f001 fa04 	bl	8002538 <HAL_GetTick>
 8001130:	4603      	mov	r3, r0
 8001132:	4a36      	ldr	r2, [pc, #216]	; (800120c <main+0xa6c>)
 8001134:	6013      	str	r3, [r2, #0]

		  /* DAC LTC1662 control */
		  //dacValue = 0xa20f;  // Constant for test
		  dacValue = 0x400;  // Constant for test
 8001136:	4b38      	ldr	r3, [pc, #224]	; (8001218 <main+0xa78>)
 8001138:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800113c:	801a      	strh	r2, [r3, #0]
		  uint16_t transmitData = 0xA000 | dacValue;
 800113e:	4b36      	ldr	r3, [pc, #216]	; (8001218 <main+0xa78>)
 8001140:	881a      	ldrh	r2, [r3, #0]
 8001142:	4b36      	ldr	r3, [pc, #216]	; (800121c <main+0xa7c>)
 8001144:	4313      	orrs	r3, r2
 8001146:	847b      	strh	r3, [r7, #34]	; 0x22
		  HAL_GPIO_WritePin(GPIOA, CS_DAC, GPIO_PIN_SET);		// Disable CS pin
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800114e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001152:	f004 faa1 	bl	8005698 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SCK_DAC, GPIO_PIN_SET);		// Pulse on SCK pin
 8001156:	2201      	movs	r2, #1
 8001158:	2110      	movs	r1, #16
 800115a:	4829      	ldr	r0, [pc, #164]	; (8001200 <main+0xa60>)
 800115c:	f004 fa9c 	bl	8005698 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SCK_DAC, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	2110      	movs	r1, #16
 8001164:	4826      	ldr	r0, [pc, #152]	; (8001200 <main+0xa60>)
 8001166:	f004 fa97 	bl	8005698 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, CS_DAC, GPIO_PIN_RESET);		// Enable CS pin
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001174:	f004 fa90 	bl	8005698 <HAL_GPIO_WritePin>
		  for (int i = 0; i < 16; i++) {
 8001178:	2300      	movs	r3, #0
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
 800117c:	e025      	b.n	80011ca <main+0xa2a>
			  if ((transmitData & (1 << (15 - i))) == 0) {
 800117e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001182:	f1c3 030f 	rsb	r3, r3, #15
 8001186:	fa42 f303 	asr.w	r3, r2, r3
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d107      	bne.n	80011a2 <main+0xa02>
				  HAL_GPIO_WritePin(GPIOA, SDI_DAC, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119c:	f004 fa7c 	bl	8005698 <HAL_GPIO_WritePin>
 80011a0:	e006      	b.n	80011b0 <main+0xa10>
			  } else {
				  HAL_GPIO_WritePin(GPIOA, SDI_DAC, GPIO_PIN_SET);
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ac:	f004 fa74 	bl	8005698 <HAL_GPIO_WritePin>
			  }
			  HAL_GPIO_WritePin(GPIOB, SCK_DAC, GPIO_PIN_SET);		// Pulse on SCK pin
 80011b0:	2201      	movs	r2, #1
 80011b2:	2110      	movs	r1, #16
 80011b4:	4812      	ldr	r0, [pc, #72]	; (8001200 <main+0xa60>)
 80011b6:	f004 fa6f 	bl	8005698 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, SCK_DAC, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2110      	movs	r1, #16
 80011be:	4810      	ldr	r0, [pc, #64]	; (8001200 <main+0xa60>)
 80011c0:	f004 fa6a 	bl	8005698 <HAL_GPIO_WritePin>
		  for (int i = 0; i < 16; i++) {
 80011c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c6:	3301      	adds	r3, #1
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34
 80011ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	ddd6      	ble.n	800117e <main+0x9de>
		  }
		  HAL_GPIO_WritePin(GPIOA, CS_DAC, GPIO_PIN_SET);		// Disable CS pin and execute command
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011da:	f004 fa5d 	bl	8005698 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(500);
 80011de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011e2:	f001 f9b5 	bl	8002550 <HAL_Delay>
  {
 80011e6:	f7ff bb45 	b.w	8000874 <main+0xd4>
 80011ea:	bf00      	nop
 80011ec:	20000003 	.word	0x20000003
 80011f0:	20004238 	.word	0x20004238
 80011f4:	08009084 	.word	0x08009084
 80011f8:	20004324 	.word	0x20004324
 80011fc:	08009090 	.word	0x08009090
 8001200:	48000400 	.word	0x48000400
 8001204:	200041d4 	.word	0x200041d4
 8001208:	20000004 	.word	0x20000004
 800120c:	20004da4 	.word	0x20004da4
 8001210:	20004164 	.word	0x20004164
 8001214:	2000423c 	.word	0x2000423c
 8001218:	20004168 	.word	0x20004168
 800121c:	ffffa000 	.word	0xffffa000

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b0a4      	sub	sp, #144	; 0x90
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800122a:	2244      	movs	r2, #68	; 0x44
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f007 ff14 	bl	800905c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2234      	movs	r2, #52	; 0x34
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f007 ff06 	bl	800905c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001250:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001254:	f004 fe6a 	bl	8005f2c <HAL_PWREx_ControlVoltageScaling>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x42>
  {
    Error_Handler();
 800125e:	f000 fb8d 	bl	800197c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001262:	2318      	movs	r3, #24
 8001264:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001266:	2301      	movs	r3, #1
 8001268:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800126a:	2301      	movs	r3, #1
 800126c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001272:	2360      	movs	r3, #96	; 0x60
 8001274:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001276:	2300      	movs	r3, #0
 8001278:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800127e:	4618      	mov	r0, r3
 8001280:	f004 feaa 	bl	8005fd8 <HAL_RCC_OscConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800128a:	f000 fb77 	bl	800197c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128e:	230f      	movs	r3, #15
 8001290:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001292:	2300      	movs	r3, #0
 8001294:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001296:	23a0      	movs	r3, #160	; 0xa0
 8001298:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f005 fafb 	bl	80068a4 <HAL_RCC_ClockConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012b4:	f000 fb62 	bl	800197c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPTIM2
 80012b8:	f244 4301 	movw	r3, #17409	; 0x4401
 80012bc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80012be:	2301      	movs	r3, #1
 80012c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_LSI;
 80012c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	4618      	mov	r0, r3
 80012cc:	f005 fcf0 	bl	8006cb0 <HAL_RCCEx_PeriphCLKConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0xba>
  {
    Error_Handler();
 80012d6:	f000 fb51 	bl	800197c <Error_Handler>
  }
}
 80012da:	bf00      	nop
 80012dc:	3790      	adds	r7, #144	; 0x90
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
 8001304:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001306:	4b3c      	ldr	r3, [pc, #240]	; (80013f8 <MX_ADC1_Init+0x114>)
 8001308:	4a3c      	ldr	r2, [pc, #240]	; (80013fc <MX_ADC1_Init+0x118>)
 800130a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800130c:	4b3a      	ldr	r3, [pc, #232]	; (80013f8 <MX_ADC1_Init+0x114>)
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001312:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <MX_ADC1_Init+0x114>)
 8001314:	2208      	movs	r2, #8
 8001316:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001318:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <MX_ADC1_Init+0x114>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800131e:	4b36      	ldr	r3, [pc, #216]	; (80013f8 <MX_ADC1_Init+0x114>)
 8001320:	2201      	movs	r2, #1
 8001322:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001324:	4b34      	ldr	r3, [pc, #208]	; (80013f8 <MX_ADC1_Init+0x114>)
 8001326:	2204      	movs	r2, #4
 8001328:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 800132a:	4b33      	ldr	r3, [pc, #204]	; (80013f8 <MX_ADC1_Init+0x114>)
 800132c:	2201      	movs	r2, #1
 800132e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001330:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <MX_ADC1_Init+0x114>)
 8001332:	2200      	movs	r2, #0
 8001334:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001336:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <MX_ADC1_Init+0x114>)
 8001338:	2202      	movs	r2, #2
 800133a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800133c:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <MX_ADC1_Init+0x114>)
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001344:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <MX_ADC1_Init+0x114>)
 8001346:	2200      	movs	r2, #0
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800134a:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <MX_ADC1_Init+0x114>)
 800134c:	2200      	movs	r2, #0
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001350:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <MX_ADC1_Init+0x114>)
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <MX_ADC1_Init+0x114>)
 800135a:	2200      	movs	r2, #0
 800135c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800135e:	4b26      	ldr	r3, [pc, #152]	; (80013f8 <MX_ADC1_Init+0x114>)
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001366:	4824      	ldr	r0, [pc, #144]	; (80013f8 <MX_ADC1_Init+0x114>)
 8001368:	f001 fb6e 	bl	8002a48 <HAL_ADC_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001372:	f000 fb03 	bl	800197c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	481d      	ldr	r0, [pc, #116]	; (80013f8 <MX_ADC1_Init+0x114>)
 8001382:	f003 f839 	bl	80043f8 <HAL_ADCEx_MultiModeConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800138c:	f000 faf6 	bl	800197c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <MX_ADC1_Init+0x11c>)
 8001392:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001394:	2306      	movs	r3, #6
 8001396:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8001398:	2303      	movs	r3, #3
 800139a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800139c:	237f      	movs	r3, #127	; 0x7f
 800139e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013a0:	2304      	movs	r3, #4
 80013a2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	4619      	mov	r1, r3
 80013ac:	4812      	ldr	r0, [pc, #72]	; (80013f8 <MX_ADC1_Init+0x114>)
 80013ae:	f002 f931 	bl	8003614 <HAL_ADC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80013b8:	f000 fae0 	bl	800197c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_ADC1_Init+0x120>)
 80013be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013c0:	230c      	movs	r3, #12
 80013c2:	60bb      	str	r3, [r7, #8]
  sConfig.Offset = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	4619      	mov	r1, r3
 80013cc:	480a      	ldr	r0, [pc, #40]	; (80013f8 <MX_ADC1_Init+0x114>)
 80013ce:	f002 f921 	bl	8003614 <HAL_ADC_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80013d8:	f000 fad0 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  while (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK);
 80013dc:	bf00      	nop
 80013de:	217f      	movs	r1, #127	; 0x7f
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_ADC1_Init+0x114>)
 80013e2:	f002 ff77 	bl	80042d4 <HAL_ADCEx_Calibration_Start>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f8      	bne.n	80013de <MX_ADC1_Init+0xfa>

  /* USER CODE END ADC1_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	; 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000423c 	.word	0x2000423c
 80013fc:	50040000 	.word	0x50040000
 8001400:	32601000 	.word	0x32601000
 8001404:	c7520000 	.word	0xc7520000

08001408 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800140e:	463b      	mov	r3, r7
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
 800141c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800141e:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <MX_ADC2_Init+0xd4>)
 8001420:	4a2f      	ldr	r2, [pc, #188]	; (80014e0 <MX_ADC2_Init+0xd8>)
 8001422:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001424:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <MX_ADC2_Init+0xd4>)
 8001426:	2200      	movs	r2, #0
 8001428:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800142a:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <MX_ADC2_Init+0xd4>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001430:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <MX_ADC2_Init+0xd4>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001436:	4b29      	ldr	r3, [pc, #164]	; (80014dc <MX_ADC2_Init+0xd4>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <MX_ADC2_Init+0xd4>)
 800143e:	2204      	movs	r2, #4
 8001440:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = ENABLE;
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <MX_ADC2_Init+0xd4>)
 8001444:	2201      	movs	r2, #1
 8001446:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001448:	4b24      	ldr	r3, [pc, #144]	; (80014dc <MX_ADC2_Init+0xd4>)
 800144a:	2200      	movs	r2, #0
 800144c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800144e:	4b23      	ldr	r3, [pc, #140]	; (80014dc <MX_ADC2_Init+0xd4>)
 8001450:	2201      	movs	r2, #1
 8001452:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001454:	4b21      	ldr	r3, [pc, #132]	; (80014dc <MX_ADC2_Init+0xd4>)
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 800145c:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <MX_ADC2_Init+0xd4>)
 800145e:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <MX_ADC2_Init+0xd4>)
 8001466:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <MX_ADC2_Init+0xd4>)
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <MX_ADC2_Init+0xd4>)
 8001476:	2200      	movs	r2, #0
 8001478:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <MX_ADC2_Init+0xd4>)
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001482:	4816      	ldr	r0, [pc, #88]	; (80014dc <MX_ADC2_Init+0xd4>)
 8001484:	f001 fae0 	bl	8002a48 <HAL_ADC_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800148e:	f000 fa75 	bl	800197c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_ADC2_Init+0xdc>)
 8001494:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001496:	2306      	movs	r3, #6
 8001498:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES_5;
 800149a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800149e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014a0:	237f      	movs	r3, #127	; 0x7f
 80014a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 1;
 80014a8:	2301      	movs	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014ac:	463b      	mov	r3, r7
 80014ae:	4619      	mov	r1, r3
 80014b0:	480a      	ldr	r0, [pc, #40]	; (80014dc <MX_ADC2_Init+0xd4>)
 80014b2:	f002 f8af 	bl	8003614 <HAL_ADC_ConfigChannel>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 80014bc:	f000 fa5e 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  while(HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK);
 80014c0:	bf00      	nop
 80014c2:	217f      	movs	r1, #127	; 0x7f
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_ADC2_Init+0xd4>)
 80014c6:	f002 ff05 	bl	80042d4 <HAL_ADCEx_Calibration_Start>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1f8      	bne.n	80014c2 <MX_ADC2_Init+0xba>
  //HAL_ADCEx_Calibration_SetValue(&hadc2, ADC_SINGLE_ENDED, cal_dat);

  //while(HAL_ADCEx_Calibration_Start(&hadc2, ADC_DIFFERENTIAL_ENDED) != HAL_OK);
  /* USER CODE END ADC2_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20004170 	.word	0x20004170
 80014e0:	50040100 	.word	0x50040100
 80014e4:	43210000 	.word	0x43210000

080014e8 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_LPTIM2_Init+0x58>)
 80014ee:	4a15      	ldr	r2, [pc, #84]	; (8001544 <MX_LPTIM2_Init+0x5c>)
 80014f0:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <MX_LPTIM2_Init+0x58>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_LPTIM2_Init+0x58>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <MX_LPTIM2_Init+0x58>)
 8001500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001504:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_LPTIM2_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_LPTIM2_Init+0x58>)
 800150e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001512:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MX_LPTIM2_Init+0x58>)
 8001516:	2200      	movs	r2, #0
 8001518:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_LPTIM2_Init+0x58>)
 800151c:	2200      	movs	r2, #0
 800151e:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <MX_LPTIM2_Init+0x58>)
 8001522:	2200      	movs	r2, #0
 8001524:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim2.Init.RepetitionCounter = 0;
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_LPTIM2_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 800152c:	4804      	ldr	r0, [pc, #16]	; (8001540 <MX_LPTIM2_Init+0x58>)
 800152e:	f004 f8cb 	bl	80056c8 <HAL_LPTIM_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_LPTIM2_Init+0x54>
  {
    Error_Handler();
 8001538:	f000 fa20 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200042e8 	.word	0x200042e8
 8001544:	40009400 	.word	0x40009400

08001548 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08e      	sub	sp, #56	; 0x38
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001568:	463b      	mov	r3, r7
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]
 8001576:	615a      	str	r2, [r3, #20]
 8001578:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800157a:	4b31      	ldr	r3, [pc, #196]	; (8001640 <MX_TIM2_Init+0xf8>)
 800157c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001580:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001582:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <MX_TIM2_Init+0xf8>)
 8001584:	2200      	movs	r2, #0
 8001586:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001588:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <MX_TIM2_Init+0xf8>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48;
 800158e:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <MX_TIM2_Init+0xf8>)
 8001590:	2230      	movs	r2, #48	; 0x30
 8001592:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001594:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <MX_TIM2_Init+0xf8>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800159a:	4b29      	ldr	r3, [pc, #164]	; (8001640 <MX_TIM2_Init+0xf8>)
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015a0:	4827      	ldr	r0, [pc, #156]	; (8001640 <MX_TIM2_Init+0xf8>)
 80015a2:	f005 fd0b 	bl	8006fbc <HAL_TIM_Base_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80015ac:	f000 f9e6 	bl	800197c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ba:	4619      	mov	r1, r3
 80015bc:	4820      	ldr	r0, [pc, #128]	; (8001640 <MX_TIM2_Init+0xf8>)
 80015be:	f006 f98f 	bl	80078e0 <HAL_TIM_ConfigClockSource>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80015c8:	f000 f9d8 	bl	800197c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80015cc:	481c      	ldr	r0, [pc, #112]	; (8001640 <MX_TIM2_Init+0xf8>)
 80015ce:	f005 fdd0 	bl	8007172 <HAL_TIM_OC_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80015d8:	f000 f9d0 	bl	800197c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015dc:	2320      	movs	r3, #32
 80015de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	4815      	ldr	r0, [pc, #84]	; (8001640 <MX_TIM2_Init+0xf8>)
 80015ec:	f006 fe12 	bl	8008214 <HAL_TIMEx_MasterConfigSynchronization>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80015f6:	f000 f9c1 	bl	800197c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80015fa:	2330      	movs	r3, #48	; 0x30
 80015fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800160a:	463b      	mov	r3, r7
 800160c:	220c      	movs	r2, #12
 800160e:	4619      	mov	r1, r3
 8001610:	480b      	ldr	r0, [pc, #44]	; (8001640 <MX_TIM2_Init+0xf8>)
 8001612:	f006 f8ef 	bl	80077f4 <HAL_TIM_OC_ConfigChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800161c:	f000 f9ae 	bl	800197c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_4);
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <MX_TIM2_Init+0xf8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	69da      	ldr	r2, [r3, #28]
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_TIM2_Init+0xf8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800162e:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <MX_TIM2_Init+0xf8>)
 8001632:	f000 fb25 	bl	8001c80 <HAL_TIM_MspPostInit>

}
 8001636:	bf00      	nop
 8001638:	3738      	adds	r7, #56	; 0x38
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20004da8 	.word	0x20004da8

08001644 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <MX_TIM6_Init+0x64>)
 8001656:	4a15      	ldr	r2, [pc, #84]	; (80016ac <MX_TIM6_Init+0x68>)
 8001658:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <MX_TIM6_Init+0x64>)
 800165c:	2202      	movs	r2, #2
 800165e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <MX_TIM6_Init+0x64>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <MX_TIM6_Init+0x64>)
 8001668:	f644 6220 	movw	r2, #20000	; 0x4e20
 800166c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <MX_TIM6_Init+0x64>)
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <MX_TIM6_Init+0x64>)
 8001676:	f005 fca1 	bl	8006fbc <HAL_TIM_Base_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001680:	f000 f97c 	bl	800197c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_TIM6_Init+0x64>)
 8001692:	f006 fdbf 	bl	8008214 <HAL_TIMEx_MasterConfigSynchronization>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800169c:	f000 f96e 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20004d50 	.word	0x20004d50
 80016ac:	40001000 	.word	0x40001000

080016b0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80016ce:	4b23      	ldr	r3, [pc, #140]	; (800175c <MX_TIM15_Init+0xac>)
 80016d0:	4a23      	ldr	r2, [pc, #140]	; (8001760 <MX_TIM15_Init+0xb0>)
 80016d2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80016d4:	4b21      	ldr	r3, [pc, #132]	; (800175c <MX_TIM15_Init+0xac>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016da:	4b20      	ldr	r3, [pc, #128]	; (800175c <MX_TIM15_Init+0xac>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100;
 80016e0:	4b1e      	ldr	r3, [pc, #120]	; (800175c <MX_TIM15_Init+0xac>)
 80016e2:	2264      	movs	r2, #100	; 0x64
 80016e4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <MX_TIM15_Init+0xac>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <MX_TIM15_Init+0xac>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_TIM15_Init+0xac>)
 80016f4:	2280      	movs	r2, #128	; 0x80
 80016f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80016f8:	4818      	ldr	r0, [pc, #96]	; (800175c <MX_TIM15_Init+0xac>)
 80016fa:	f005 fc5f 	bl	8006fbc <HAL_TIM_Base_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8001704:	f000 f93a 	bl	800197c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800170e:	f107 0310 	add.w	r3, r7, #16
 8001712:	4619      	mov	r1, r3
 8001714:	4811      	ldr	r0, [pc, #68]	; (800175c <MX_TIM15_Init+0xac>)
 8001716:	f006 f8e3 	bl	80078e0 <HAL_TIM_ConfigClockSource>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8001720:	f000 f92c 	bl	800197c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim15, TIM_OPMODE_SINGLE) != HAL_OK)
 8001724:	2108      	movs	r1, #8
 8001726:	480d      	ldr	r0, [pc, #52]	; (800175c <MX_TIM15_Init+0xac>)
 8001728:	f005 feea 	bl	8007500 <HAL_TIM_OnePulse_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM15_Init+0x86>
  {
    Error_Handler();
 8001732:	f000 f923 	bl	800197c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001736:	2320      	movs	r3, #32
 8001738:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	4619      	mov	r1, r3
 8001742:	4806      	ldr	r0, [pc, #24]	; (800175c <MX_TIM15_Init+0xac>)
 8001744:	f006 fd66 	bl	8008214 <HAL_TIMEx_MasterConfigSynchronization>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM15_Init+0xa2>
  {
    Error_Handler();
 800174e:	f000 f915 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */
  /* USER CODE END TIM15_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	3720      	adds	r7, #32
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200041d4 	.word	0x200041d4
 8001760:	40014000 	.word	0x40014000

08001764 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_TIM16_Init+0x58>)
 800176a:	4a15      	ldr	r2, [pc, #84]	; (80017c0 <MX_TIM16_Init+0x5c>)
 800176c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <MX_TIM16_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_TIM16_Init+0x58>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 30000;
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <MX_TIM16_Init+0x58>)
 800177c:	f247 5230 	movw	r2, #30000	; 0x7530
 8001780:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_TIM16_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_TIM16_Init+0x58>)
 800178a:	2200      	movs	r2, #0
 800178c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <MX_TIM16_Init+0x58>)
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001794:	4809      	ldr	r0, [pc, #36]	; (80017bc <MX_TIM16_Init+0x58>)
 8001796:	f005 fc11 	bl	8006fbc <HAL_TIM_Base_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80017a0:	f000 f8ec 	bl	800197c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80017a4:	2108      	movs	r1, #8
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_TIM16_Init+0x58>)
 80017a8:	f005 feaa 	bl	8007500 <HAL_TIM_OnePulse_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 80017b2:	f000 f8e3 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20004e00 	.word	0x20004e00
 80017c0:	40014400 	.word	0x40014400

080017c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <MX_USART1_UART_Init+0x60>)
 80017ca:	4a17      	ldr	r2, [pc, #92]	; (8001828 <MX_USART1_UART_Init+0x64>)
 80017cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <MX_USART1_UART_Init+0x60>)
 80017d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <MX_USART1_UART_Init+0x60>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_USART1_UART_Init+0x60>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <MX_USART1_UART_Init+0x60>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <MX_USART1_UART_Init+0x60>)
 80017ea:	220c      	movs	r2, #12
 80017ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <MX_USART1_UART_Init+0x60>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <MX_USART1_UART_Init+0x60>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <MX_USART1_UART_Init+0x60>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <MX_USART1_UART_Init+0x60>)
 8001802:	2220      	movs	r2, #32
 8001804:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <MX_USART1_UART_Init+0x60>)
 8001808:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800180c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_USART1_UART_Init+0x60>)
 8001810:	f006 fd84 	bl	800831c <HAL_UART_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800181a:	f000 f8af 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20004324 	.word	0x20004324
 8001828:	40013800 	.word	0x40013800

0800182c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <MX_DMA_Init+0x48>)
 8001834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001836:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <MX_DMA_Init+0x48>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6493      	str	r3, [r2, #72]	; 0x48
 800183e:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <MX_DMA_Init+0x48>)
 8001840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	200b      	movs	r0, #11
 8001850:	f002 ff51 	bl	80046f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001854:	200b      	movs	r0, #11
 8001856:	f002 ff6a 	bl	800472e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	200f      	movs	r0, #15
 8001860:	f002 ff49 	bl	80046f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001864:	200f      	movs	r0, #15
 8001866:	f002 ff62 	bl	800472e <HAL_NVIC_EnableIRQ>

}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000

08001878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	4b38      	ldr	r3, [pc, #224]	; (8001970 <MX_GPIO_Init+0xf8>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	4a37      	ldr	r2, [pc, #220]	; (8001970 <MX_GPIO_Init+0xf8>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189a:	4b35      	ldr	r3, [pc, #212]	; (8001970 <MX_GPIO_Init+0xf8>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	4b32      	ldr	r3, [pc, #200]	; (8001970 <MX_GPIO_Init+0xf8>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	4a31      	ldr	r2, [pc, #196]	; (8001970 <MX_GPIO_Init+0xf8>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b2:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <MX_GPIO_Init+0xf8>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COM_Pin|DI_Pin|CS_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	f44f 518a 	mov.w	r1, #4416	; 0x1140
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c8:	f003 fee6 	bl	8005698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SC_Pin, GPIO_PIN_RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2118      	movs	r1, #24
 80018d0:	4828      	ldr	r0, [pc, #160]	; (8001974 <MX_GPIO_Init+0xfc>)
 80018d2:	f003 fee1 	bl	8005698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : COM_Pin */
  GPIO_InitStruct.Pin = COM_Pin;
 80018d6:	2340      	movs	r3, #64	; 0x40
 80018d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018da:	2311      	movs	r3, #17
 80018dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(COM_GPIO_Port, &GPIO_InitStruct);
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	4619      	mov	r1, r3
 80018ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f0:	f003 fc76 	bl	80051e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_Pin CS_Pin */
  GPIO_InitStruct.Pin = DI_Pin|CS_Pin;
 80018f4:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80018f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	4619      	mov	r1, r3
 800190c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001910:	f003 fc66 	bl	80051e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : StartADC_Pin */
  GPIO_InitStruct.Pin = StartADC_Pin;
 8001914:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001918:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <MX_GPIO_Init+0x100>)
 800191c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(StartADC_GPIO_Port, &GPIO_InitStruct);
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	4619      	mov	r1, r3
 8001928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192c:	f003 fc58 	bl	80051e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_Status_Pin */
  GPIO_InitStruct.Pin = BT_Status_Pin;
 8001930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001934:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BT_Status_GPIO_Port, &GPIO_InitStruct);
 800193e:	f107 030c 	add.w	r3, r7, #12
 8001942:	4619      	mov	r1, r3
 8001944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001948:	f003 fc4a 	bl	80051e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin SC_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SC_Pin;
 800194c:	2318      	movs	r3, #24
 800194e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001950:	2301      	movs	r3, #1
 8001952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	4619      	mov	r1, r3
 8001962:	4804      	ldr	r0, [pc, #16]	; (8001974 <MX_GPIO_Init+0xfc>)
 8001964:	f003 fc3c 	bl	80051e0 <HAL_GPIO_Init>

}
 8001968:	bf00      	nop
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000
 8001974:	48000400 	.word	0x48000400
 8001978:	10110000 	.word	0x10110000

0800197c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_MspInit+0x44>)
 8001994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001996:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <HAL_MspInit+0x44>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6613      	str	r3, [r2, #96]	; 0x60
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <HAL_MspInit+0x44>)
 80019a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_MspInit+0x44>)
 80019ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ae:	4a08      	ldr	r2, [pc, #32]	; (80019d0 <HAL_MspInit+0x44>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b4:	6593      	str	r3, [r2, #88]	; 0x58
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_MspInit+0x44>)
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000

080019d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	; 0x30
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a51      	ldr	r2, [pc, #324]	; (8001b38 <HAL_ADC_MspInit+0x164>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d161      	bne.n	8001aba <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80019f6:	4b51      	ldr	r3, [pc, #324]	; (8001b3c <HAL_ADC_MspInit+0x168>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	3301      	adds	r3, #1
 80019fc:	4a4f      	ldr	r2, [pc, #316]	; (8001b3c <HAL_ADC_MspInit+0x168>)
 80019fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001a00:	4b4e      	ldr	r3, [pc, #312]	; (8001b3c <HAL_ADC_MspInit+0x168>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d10b      	bne.n	8001a20 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001a08:	4b4d      	ldr	r3, [pc, #308]	; (8001b40 <HAL_ADC_MspInit+0x16c>)
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0c:	4a4c      	ldr	r2, [pc, #304]	; (8001b40 <HAL_ADC_MspInit+0x16c>)
 8001a0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a14:	4b4a      	ldr	r3, [pc, #296]	; (8001b40 <HAL_ADC_MspInit+0x16c>)
 8001a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a20:	4b47      	ldr	r3, [pc, #284]	; (8001b40 <HAL_ADC_MspInit+0x16c>)
 8001a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a24:	4a46      	ldr	r2, [pc, #280]	; (8001b40 <HAL_ADC_MspInit+0x16c>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2c:	4b44      	ldr	r3, [pc, #272]	; (8001b40 <HAL_ADC_MspInit+0x16c>)
 8001a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = BAT_LEVEL_Pin;
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a3c:	230b      	movs	r3, #11
 8001a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4e:	f003 fbc7 	bl	80051e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a52:	4b3c      	ldr	r3, [pc, #240]	; (8001b44 <HAL_ADC_MspInit+0x170>)
 8001a54:	4a3c      	ldr	r2, [pc, #240]	; (8001b48 <HAL_ADC_MspInit+0x174>)
 8001a56:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001a58:	4b3a      	ldr	r3, [pc, #232]	; (8001b44 <HAL_ADC_MspInit+0x170>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a5e:	4b39      	ldr	r3, [pc, #228]	; (8001b44 <HAL_ADC_MspInit+0x170>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a64:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <HAL_ADC_MspInit+0x170>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a6a:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <HAL_ADC_MspInit+0x170>)
 8001a6c:	2280      	movs	r2, #128	; 0x80
 8001a6e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a70:	4b34      	ldr	r3, [pc, #208]	; (8001b44 <HAL_ADC_MspInit+0x170>)
 8001a72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a76:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a78:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <HAL_ADC_MspInit+0x170>)
 8001a7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a7e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001a80:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <HAL_ADC_MspInit+0x170>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a86:	4b2f      	ldr	r3, [pc, #188]	; (8001b44 <HAL_ADC_MspInit+0x170>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a8c:	482d      	ldr	r0, [pc, #180]	; (8001b44 <HAL_ADC_MspInit+0x170>)
 8001a8e:	f002 fe69 	bl	8004764 <HAL_DMA_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001a98:	f7ff ff70 	bl	800197c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a29      	ldr	r2, [pc, #164]	; (8001b44 <HAL_ADC_MspInit+0x170>)
 8001aa0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001aa2:	4a28      	ldr	r2, [pc, #160]	; (8001b44 <HAL_ADC_MspInit+0x170>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	2012      	movs	r0, #18
 8001aae:	f002 fe22 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001ab2:	2012      	movs	r0, #18
 8001ab4:	f002 fe3b 	bl	800472e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ab8:	e039      	b.n	8001b2e <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a23      	ldr	r2, [pc, #140]	; (8001b4c <HAL_ADC_MspInit+0x178>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d134      	bne.n	8001b2e <HAL_ADC_MspInit+0x15a>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_ADC_MspInit+0x168>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <HAL_ADC_MspInit+0x168>)
 8001acc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_ADC_MspInit+0x168>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d10b      	bne.n	8001aee <HAL_ADC_MspInit+0x11a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <HAL_ADC_MspInit+0x16c>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	4a19      	ldr	r2, [pc, #100]	; (8001b40 <HAL_ADC_MspInit+0x16c>)
 8001adc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <HAL_ADC_MspInit+0x16c>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <HAL_ADC_MspInit+0x16c>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	4a13      	ldr	r2, [pc, #76]	; (8001b40 <HAL_ADC_MspInit+0x16c>)
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <HAL_ADC_MspInit+0x16c>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SiPM_Pin;
 8001b06:	2302      	movs	r3, #2
 8001b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b0a:	230b      	movs	r3, #11
 8001b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SiPM_GPIO_Port, &GPIO_InitStruct);
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4619      	mov	r1, r3
 8001b18:	480d      	ldr	r0, [pc, #52]	; (8001b50 <HAL_ADC_MspInit+0x17c>)
 8001b1a:	f003 fb61 	bl	80051e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	2012      	movs	r0, #18
 8001b24:	f002 fde7 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b28:	2012      	movs	r0, #18
 8001b2a:	f002 fe00 	bl	800472e <HAL_NVIC_EnableIRQ>
}
 8001b2e:	bf00      	nop
 8001b30:	3730      	adds	r7, #48	; 0x30
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	50040000 	.word	0x50040000
 8001b3c:	20004160 	.word	0x20004160
 8001b40:	40021000 	.word	0x40021000
 8001b44:	20004d08 	.word	0x20004d08
 8001b48:	40020008 	.word	0x40020008
 8001b4c:	50040100 	.word	0x50040100
 8001b50:	48000400 	.word	0x48000400

08001b54 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <HAL_LPTIM_MspInit+0x44>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d113      	bne.n	8001b8e <HAL_LPTIM_MspInit+0x3a>
  {
  /* USER CODE BEGIN LPTIM2_MspInit 0 */

  /* USER CODE END LPTIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_LPTIM_MspInit+0x48>)
 8001b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6a:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <HAL_LPTIM_MspInit+0x48>)
 8001b6c:	f043 0320 	orr.w	r3, r3, #32
 8001b70:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_LPTIM_MspInit+0x48>)
 8001b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM2 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2100      	movs	r1, #0
 8001b82:	2042      	movs	r0, #66	; 0x42
 8001b84:	f002 fdb7 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 8001b88:	2042      	movs	r0, #66	; 0x42
 8001b8a:	f002 fdd0 	bl	800472e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40009400 	.word	0x40009400
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb0:	d10c      	bne.n	8001bcc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bb2:	4b2f      	ldr	r3, [pc, #188]	; (8001c70 <HAL_TIM_Base_MspInit+0xd0>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	4a2e      	ldr	r2, [pc, #184]	; (8001c70 <HAL_TIM_Base_MspInit+0xd0>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bbe:	4b2c      	ldr	r3, [pc, #176]	; (8001c70 <HAL_TIM_Base_MspInit+0xd0>)
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001bca:	e04c      	b.n	8001c66 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a28      	ldr	r2, [pc, #160]	; (8001c74 <HAL_TIM_Base_MspInit+0xd4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d114      	bne.n	8001c00 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <HAL_TIM_Base_MspInit+0xd0>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	4a25      	ldr	r2, [pc, #148]	; (8001c70 <HAL_TIM_Base_MspInit+0xd0>)
 8001bdc:	f043 0310 	orr.w	r3, r3, #16
 8001be0:	6593      	str	r3, [r2, #88]	; 0x58
 8001be2:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <HAL_TIM_Base_MspInit+0xd0>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	2036      	movs	r0, #54	; 0x36
 8001bf4:	f002 fd7f 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001bf8:	2036      	movs	r0, #54	; 0x36
 8001bfa:	f002 fd98 	bl	800472e <HAL_NVIC_EnableIRQ>
}
 8001bfe:	e032      	b.n	8001c66 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM15)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <HAL_TIM_Base_MspInit+0xd8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d114      	bne.n	8001c34 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_TIM_Base_MspInit+0xd0>)
 8001c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0e:	4a18      	ldr	r2, [pc, #96]	; (8001c70 <HAL_TIM_Base_MspInit+0xd0>)
 8001c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c14:	6613      	str	r3, [r2, #96]	; 0x60
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <HAL_TIM_Base_MspInit+0xd0>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	2018      	movs	r0, #24
 8001c28:	f002 fd65 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001c2c:	2018      	movs	r0, #24
 8001c2e:	f002 fd7e 	bl	800472e <HAL_NVIC_EnableIRQ>
}
 8001c32:	e018      	b.n	8001c66 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM16)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a10      	ldr	r2, [pc, #64]	; (8001c7c <HAL_TIM_Base_MspInit+0xdc>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d113      	bne.n	8001c66 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_TIM_Base_MspInit+0xd0>)
 8001c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c42:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <HAL_TIM_Base_MspInit+0xd0>)
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c48:	6613      	str	r3, [r2, #96]	; 0x60
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_TIM_Base_MspInit+0xd0>)
 8001c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2019      	movs	r0, #25
 8001c5c:	f002 fd4b 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c60:	2019      	movs	r0, #25
 8001c62:	f002 fd64 	bl	800472e <HAL_NVIC_EnableIRQ>
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40001000 	.word	0x40001000
 8001c78:	40014000 	.word	0x40014000
 8001c7c:	40014400 	.word	0x40014400

08001c80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca0:	d11c      	bne.n	8001cdc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_TIM_MspPostInit+0x64>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <HAL_TIM_MspPostInit+0x64>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <HAL_TIM_MspPostInit+0x64>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8001cba:	2308      	movs	r3, #8
 8001cbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd8:	f003 fa82 	bl	80051e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001cdc:	bf00      	nop
 8001cde:	3720      	adds	r7, #32
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a2c      	ldr	r2, [pc, #176]	; (8001db8 <HAL_UART_MspInit+0xd0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d152      	bne.n	8001db0 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d0a:	4b2c      	ldr	r3, [pc, #176]	; (8001dbc <HAL_UART_MspInit+0xd4>)
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0e:	4a2b      	ldr	r2, [pc, #172]	; (8001dbc <HAL_UART_MspInit+0xd4>)
 8001d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d14:	6613      	str	r3, [r2, #96]	; 0x60
 8001d16:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <HAL_UART_MspInit+0xd4>)
 8001d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <HAL_UART_MspInit+0xd4>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	4a25      	ldr	r2, [pc, #148]	; (8001dbc <HAL_UART_MspInit+0xd4>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2e:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <HAL_UART_MspInit+0xd4>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BT_TX_Pin|BT_RX_Pin;
 8001d3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d4c:	2307      	movs	r3, #7
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	4619      	mov	r1, r3
 8001d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d5a:	f003 fa41 	bl	80051e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001d5e:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <HAL_UART_MspInit+0xd8>)
 8001d60:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <HAL_UART_MspInit+0xdc>)
 8001d62:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001d64:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <HAL_UART_MspInit+0xd8>)
 8001d66:	2202      	movs	r2, #2
 8001d68:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_UART_MspInit+0xd8>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <HAL_UART_MspInit+0xd8>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_UART_MspInit+0xd8>)
 8001d78:	2280      	movs	r2, #128	; 0x80
 8001d7a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d7c:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <HAL_UART_MspInit+0xd8>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d82:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <HAL_UART_MspInit+0xd8>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d88:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_UART_MspInit+0xd8>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_UART_MspInit+0xd8>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d94:	480a      	ldr	r0, [pc, #40]	; (8001dc0 <HAL_UART_MspInit+0xd8>)
 8001d96:	f002 fce5 	bl	8004764 <HAL_DMA_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8001da0:	f7ff fdec 	bl	800197c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a06      	ldr	r2, [pc, #24]	; (8001dc0 <HAL_UART_MspInit+0xd8>)
 8001da8:	671a      	str	r2, [r3, #112]	; 0x70
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <HAL_UART_MspInit+0xd8>)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001db0:	bf00      	nop
 8001db2:	3728      	adds	r7, #40	; 0x28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40013800 	.word	0x40013800
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	200042a0 	.word	0x200042a0
 8001dc4:	40020058 	.word	0x40020058

08001dc8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <HAL_UART_MspDeInit+0x3c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d110      	bne.n	8001dfc <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_UART_MspDeInit+0x40>)
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dde:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <HAL_UART_MspDeInit+0x40>)
 8001de0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001de4:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, BT_TX_Pin|BT_RX_Pin);
 8001de6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dee:	f003 fb69 	bl	80054c4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fd6c 	bl	80048d4 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40013800 	.word	0x40013800
 8001e08:	40021000 	.word	0x40021000

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <HardFault_Handler+0x4>

08001e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <MemManage_Handler+0x4>

08001e26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <BusFault_Handler+0x4>

08001e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <UsageFault_Handler+0x4>

08001e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e60:	f000 fb56 	bl	8002510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	// Battery voltage.
	HAL_ADC_Stop_DMA(&hadc1);
 8001e6e:	481c      	ldr	r0, [pc, #112]	; (8001ee0 <DMA1_Channel1_IRQHandler+0x78>)
 8001e70:	f001 f920 	bl	80030b4 <HAL_ADC_Stop_DMA>
	HAL_GPIO_WritePin(GPIOA, COM_PIN, GPIO_PIN_SET);  // Disable common pin
 8001e74:	2201      	movs	r2, #1
 8001e76:	2140      	movs	r1, #64	; 0x40
 8001e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7c:	f003 fc0c 	bl	8005698 <HAL_GPIO_WritePin>

	/* Battery level */
	uint16_t batv;
	if (adc1Result[0] < 785) {
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <DMA1_Channel1_IRQHandler+0x7c>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8001e88:	d802      	bhi.n	8001e90 <DMA1_Channel1_IRQHandler+0x28>
		batv = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	80fb      	strh	r3, [r7, #6]
 8001e8e:	e004      	b.n	8001e9a <DMA1_Channel1_IRQHandler+0x32>
	} else {
		batv = adc1Result[0] - 785; // 3.2v -- 4.2v
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <DMA1_Channel1_IRQHandler+0x7c>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8001e98:	80fb      	strh	r3, [r7, #6]
	}

	/* Temperature*/
	uint16_t temper = adc1Result[1] - 100;
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <DMA1_Channel1_IRQHandler+0x7c>)
 8001e9c:	885b      	ldrh	r3, [r3, #2]
 8001e9e:	3b64      	subs	r3, #100	; 0x64
 8001ea0:	80bb      	strh	r3, [r7, #4]

	spectrData[4][0] = (temper << 8) | (batv & 0x00FF); // Main specter
 8001ea2:	88bb      	ldrh	r3, [r7, #4]
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	b21a      	sxth	r2, r3
 8001ea8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	b21b      	sxth	r3, r3
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <DMA1_Channel1_IRQHandler+0x80>)
 8001eb8:	821a      	strh	r2, [r3, #16]
	spectrData[4][1] = (temper << 8) | (batv & 0x00FF); // History specter
 8001eba:	88bb      	ldrh	r3, [r7, #4]
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	b21a      	sxth	r2, r3
 8001ec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	b21b      	sxth	r3, r3
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	b21b      	sxth	r3, r3
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <DMA1_Channel1_IRQHandler+0x80>)
 8001ed0:	825a      	strh	r2, [r3, #18]
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ed2:	4806      	ldr	r0, [pc, #24]	; (8001eec <DMA1_Channel1_IRQHandler+0x84>)
 8001ed4:	f002 fe2e 	bl	8004b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	2000423c 	.word	0x2000423c
 8001ee4:	20004164 	.word	0x20004164
 8001ee8:	20000074 	.word	0x20000074
 8001eec:	20004d08 	.word	0x20004d08

08001ef0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <DMA1_Channel5_IRQHandler+0x10>)
 8001ef6:	f002 fe1d 	bl	8004b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200042a0 	.word	0x200042a0

08001f04 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	uint32_t nowInterval;
	if( __HAL_ADC_GET_FLAG(&hadc2, ADC_ISR_EOC) != RESET) {
 8001f0a:	4b56      	ldr	r3, [pc, #344]	; (8002064 <ADC1_2_IRQHandler+0x160>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	f040 809a 	bne.w	800204e <ADC1_2_IRQHandler+0x14a>
	  adc2Result = HAL_ADC_GetValue(&hadc2);
 8001f1a:	4852      	ldr	r0, [pc, #328]	; (8002064 <ADC1_2_IRQHandler+0x160>)
 8001f1c:	f001 f92b 	bl	8003176 <HAL_ADC_GetValue>
 8001f20:	4603      	mov	r3, r0
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	4b50      	ldr	r3, [pc, #320]	; (8002068 <ADC1_2_IRQHandler+0x164>)
 8001f26:	801a      	strh	r2, [r3, #0]
	  if (adc2Result > 0) {
 8001f28:	4b4f      	ldr	r3, [pc, #316]	; (8002068 <ADC1_2_IRQHandler+0x164>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 808e 	beq.w	800204e <ADC1_2_IRQHandler+0x14a>
		  adc2Result = adc2Result & 0x0FFF;
 8001f32:	4b4d      	ldr	r3, [pc, #308]	; (8002068 <ADC1_2_IRQHandler+0x164>)
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <ADC1_2_IRQHandler+0x164>)
 8001f3e:	801a      	strh	r2, [r3, #0]
		  if (resolution == 1) {
 8001f40:	4b4a      	ldr	r3, [pc, #296]	; (800206c <ADC1_2_IRQHandler+0x168>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d106      	bne.n	8001f56 <ADC1_2_IRQHandler+0x52>
			  adc2Result = adc2Result >> 2;			// 1024 channels
 8001f48:	4b47      	ldr	r3, [pc, #284]	; (8002068 <ADC1_2_IRQHandler+0x164>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	4b45      	ldr	r3, [pc, #276]	; (8002068 <ADC1_2_IRQHandler+0x164>)
 8001f52:	801a      	strh	r2, [r3, #0]
 8001f54:	e009      	b.n	8001f6a <ADC1_2_IRQHandler+0x66>
		  } else {
			  if (resolution == 2) {
 8001f56:	4b45      	ldr	r3, [pc, #276]	; (800206c <ADC1_2_IRQHandler+0x168>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d105      	bne.n	8001f6a <ADC1_2_IRQHandler+0x66>
				  adc2Result = adc2Result >> 1;		// 2048 channels
 8001f5e:	4b42      	ldr	r3, [pc, #264]	; (8002068 <ADC1_2_IRQHandler+0x164>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	4b40      	ldr	r3, [pc, #256]	; (8002068 <ADC1_2_IRQHandler+0x164>)
 8001f68:	801a      	strh	r2, [r3, #0]
			  }										// else 4096 channels
		  }
		  adc2Result = adc2Result + reservDataSize;	// Reserved additional parameter in send buffer ( 12 bytes )
 8001f6a:	4b3f      	ldr	r3, [pc, #252]	; (8002068 <ADC1_2_IRQHandler+0x164>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	3306      	adds	r3, #6
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <ADC1_2_IRQHandler+0x164>)
 8001f74:	801a      	strh	r2, [r3, #0]
		  if (spectrData[adc2Result][0] < 0xFFFF)		// Check overflow in channel.
 8001f76:	4b3c      	ldr	r3, [pc, #240]	; (8002068 <ADC1_2_IRQHandler+0x164>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b3c      	ldr	r3, [pc, #240]	; (8002070 <ADC1_2_IRQHandler+0x16c>)
 8001f7e:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8001f82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d009      	beq.n	8001f9e <ADC1_2_IRQHandler+0x9a>
			  spectrData[adc2Result][0]++;
 8001f8a:	4b37      	ldr	r3, [pc, #220]	; (8002068 <ADC1_2_IRQHandler+0x164>)
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	4a38      	ldr	r2, [pc, #224]	; (8002070 <ADC1_2_IRQHandler+0x16c>)
 8001f90:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8001f94:	3201      	adds	r2, #1
 8001f96:	b291      	uxth	r1, r2
 8001f98:	4a35      	ldr	r2, [pc, #212]	; (8002070 <ADC1_2_IRQHandler+0x16c>)
 8001f9a:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		  if (alarmLevel != 0) {		// Record to alarm specter array
 8001f9e:	4b35      	ldr	r3, [pc, #212]	; (8002074 <ADC1_2_IRQHandler+0x170>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d01c      	beq.n	8001fe0 <ADC1_2_IRQHandler+0xdc>
			  if (spectrData[adc2Result][1] < 0xFFFF)		// Check overflow in alarm channel.
 8001fa6:	4b30      	ldr	r3, [pc, #192]	; (8002068 <ADC1_2_IRQHandler+0x164>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	4a31      	ldr	r2, [pc, #196]	; (8002070 <ADC1_2_IRQHandler+0x16c>)
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	885b      	ldrh	r3, [r3, #2]
 8001fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00d      	beq.n	8001fd6 <ADC1_2_IRQHandler+0xd2>
				  spectrData[adc2Result][1]++;
 8001fba:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <ADC1_2_IRQHandler+0x164>)
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	492b      	ldr	r1, [pc, #172]	; (8002070 <ADC1_2_IRQHandler+0x16c>)
 8001fc2:	0093      	lsls	r3, r2, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	885b      	ldrh	r3, [r3, #2]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	b298      	uxth	r0, r3
 8001fcc:	4928      	ldr	r1, [pc, #160]	; (8002070 <ADC1_2_IRQHandler+0x16c>)
 8001fce:	0093      	lsls	r3, r2, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	805a      	strh	r2, [r3, #2]
			  counterCCAlarm++;
 8001fd6:	4b28      	ldr	r3, [pc, #160]	; (8002078 <ADC1_2_IRQHandler+0x174>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	4a26      	ldr	r2, [pc, #152]	; (8002078 <ADC1_2_IRQHandler+0x174>)
 8001fde:	6013      	str	r3, [r2, #0]
		  }
		  counterCC++;
 8001fe0:	4b26      	ldr	r3, [pc, #152]	; (800207c <ADC1_2_IRQHandler+0x178>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	4a25      	ldr	r2, [pc, #148]	; (800207c <ADC1_2_IRQHandler+0x178>)
 8001fe8:	6013      	str	r3, [r2, #0]
		  counterALL++;
 8001fea:	4b25      	ldr	r3, [pc, #148]	; (8002080 <ADC1_2_IRQHandler+0x17c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	4a23      	ldr	r2, [pc, #140]	; (8002080 <ADC1_2_IRQHandler+0x17c>)
 8001ff2:	6013      	str	r3, [r2, #0]

		  /* intervals for radiation levels */
		  nowInterval = HAL_GetTick();
 8001ff4:	f000 faa0 	bl	8002538 <HAL_GetTick>
 8001ff8:	6078      	str	r0, [r7, #4]
		  if (oldInterval > 0) {
 8001ffa:	4b22      	ldr	r3, [pc, #136]	; (8002084 <ADC1_2_IRQHandler+0x180>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d014      	beq.n	800202c <ADC1_2_IRQHandler+0x128>
			  radBuffer[indexBuffer++] = nowInterval - oldInterval;
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <ADC1_2_IRQHandler+0x180>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <ADC1_2_IRQHandler+0x184>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	1c59      	adds	r1, r3, #1
 800200c:	b2c8      	uxtb	r0, r1
 800200e:	491e      	ldr	r1, [pc, #120]	; (8002088 <ADC1_2_IRQHandler+0x184>)
 8002010:	7008      	strb	r0, [r1, #0]
 8002012:	4619      	mov	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	4a1c      	ldr	r2, [pc, #112]	; (800208c <ADC1_2_IRQHandler+0x188>)
 800201a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			  if (indexBuffer > radBufferSize - 1) { // Buffer size = radBufferSize.
 800201e:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <ADC1_2_IRQHandler+0x184>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b31      	cmp	r3, #49	; 0x31
 8002024:	d902      	bls.n	800202c <ADC1_2_IRQHandler+0x128>
				  indexBuffer = 0;
 8002026:	4b18      	ldr	r3, [pc, #96]	; (8002088 <ADC1_2_IRQHandler+0x184>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  oldInterval = nowInterval;
 800202c:	4a15      	ldr	r2, [pc, #84]	; (8002084 <ADC1_2_IRQHandler+0x180>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6013      	str	r3, [r2, #0]

		  if ((cfgData & 64) > 0) {					// Check config data for LED activity
 8002032:	4b17      	ldr	r3, [pc, #92]	; (8002090 <ADC1_2_IRQHandler+0x18c>)
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	dd07      	ble.n	800204e <ADC1_2_IRQHandler+0x14a>
			  HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_SET); // LED on.
 800203e:	2201      	movs	r2, #1
 8002040:	2108      	movs	r1, #8
 8002042:	4814      	ldr	r0, [pc, #80]	; (8002094 <ADC1_2_IRQHandler+0x190>)
 8002044:	f003 fb28 	bl	8005698 <HAL_GPIO_WritePin>
			  HAL_TIM_Base_Start_IT(&htim15);		// Start timer for turn off LED.
 8002048:	4813      	ldr	r0, [pc, #76]	; (8002098 <ADC1_2_IRQHandler+0x194>)
 800204a:	f005 f80f 	bl	800706c <HAL_TIM_Base_Start_IT>
		  }
	  }
	}
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800204e:	4813      	ldr	r0, [pc, #76]	; (800209c <ADC1_2_IRQHandler+0x198>)
 8002050:	f001 f89e 	bl	8003190 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002054:	4803      	ldr	r0, [pc, #12]	; (8002064 <ADC1_2_IRQHandler+0x160>)
 8002056:	f001 f89b 	bl	8003190 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20004170 	.word	0x20004170
 8002068:	20000070 	.word	0x20000070
 800206c:	20004154 	.word	0x20004154
 8002070:	20000074 	.word	0x20000074
 8002074:	20004220 	.word	0x20004220
 8002078:	20000050 	.word	0x20000050
 800207c:	20000054 	.word	0x20000054
 8002080:	20000058 	.word	0x20000058
 8002084:	20000060 	.word	0x20000060
 8002088:	20004da0 	.word	0x20004da0
 800208c:	2000408c 	.word	0x2000408c
 8002090:	20004df6 	.word	0x20004df6
 8002094:	48000400 	.word	0x48000400
 8002098:	200041d4 	.word	0x200041d4
 800209c:	2000423c 	.word	0x2000423c

080020a0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_RESET); // LED off.
 80020a4:	2200      	movs	r2, #0
 80020a6:	2108      	movs	r1, #8
 80020a8:	4805      	ldr	r0, [pc, #20]	; (80020c0 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 80020aa:	f003 faf5 	bl	8005698 <HAL_GPIO_WritePin>
	//HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80020ae:	4805      	ldr	r0, [pc, #20]	; (80020c4 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80020b0:	f005 fa80 	bl	80075b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim15);
 80020b4:	4803      	ldr	r0, [pc, #12]	; (80020c4 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80020b6:	f005 f82d 	bl	8007114 <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	48000400 	.word	0x48000400
 80020c4:	200041d4 	.word	0x200041d4

080020c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);
 80020cc:	210c      	movs	r1, #12
 80020ce:	4805      	ldr	r0, [pc, #20]	; (80020e4 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 80020d0:	f005 f98e 	bl	80073f0 <HAL_TIM_OC_Stop>

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80020d4:	4804      	ldr	r0, [pc, #16]	; (80020e8 <TIM1_UP_TIM16_IRQHandler+0x20>)
 80020d6:	f005 fa6d 	bl	80075b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim16);
 80020da:	4803      	ldr	r0, [pc, #12]	; (80020e8 <TIM1_UP_TIM16_IRQHandler+0x20>)
 80020dc:	f005 f81a 	bl	8007114 <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20004da8 	.word	0x20004da8
 80020e8:	20004e00 	.word	0x20004e00

080020ec <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020f0:	483f      	ldr	r0, [pc, #252]	; (80021f0 <TIM6_IRQHandler+0x104>)
 80020f2:	f005 fa5f 	bl	80075b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  if ((cfgData & 0x15) > 0 ){  // Sound on.
 80020f6:	4b3f      	ldr	r3, [pc, #252]	; (80021f4 <TIM6_IRQHandler+0x108>)
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	f003 0315 	and.w	r3, r3, #21
 80020fe:	2b00      	cmp	r3, #0
 8002100:	dd6c      	ble.n	80021dc <TIM6_IRQHandler+0xf0>
	  switch (alarmLevel) {
 8002102:	4b3d      	ldr	r3, [pc, #244]	; (80021f8 <TIM6_IRQHandler+0x10c>)
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	2b03      	cmp	r3, #3
 8002108:	d86f      	bhi.n	80021ea <TIM6_IRQHandler+0xfe>
 800210a:	a201      	add	r2, pc, #4	; (adr r2, 8002110 <TIM6_IRQHandler+0x24>)
 800210c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002110:	08002121 	.word	0x08002121
 8002114:	08002129 	.word	0x08002129
 8002118:	08002165 	.word	0x08002165
 800211c:	080021a1 	.word	0x080021a1
	  case 0:
		  alarmCount = 0;
 8002120:	4b36      	ldr	r3, [pc, #216]	; (80021fc <TIM6_IRQHandler+0x110>)
 8002122:	2200      	movs	r2, #0
 8002124:	801a      	strh	r2, [r3, #0]
		  break;
 8002126:	e060      	b.n	80021ea <TIM6_IRQHandler+0xfe>
	  case 1:
		  if (alarmCount-- <= 0) {
 8002128:	4b34      	ldr	r3, [pc, #208]	; (80021fc <TIM6_IRQHandler+0x110>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	1e5a      	subs	r2, r3, #1
 800212e:	b291      	uxth	r1, r2
 8002130:	4a32      	ldr	r2, [pc, #200]	; (80021fc <TIM6_IRQHandler+0x110>)
 8002132:	8011      	strh	r1, [r2, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d103      	bne.n	8002140 <TIM6_IRQHandler+0x54>
			  alarmCount = 4;
 8002138:	4b30      	ldr	r3, [pc, #192]	; (80021fc <TIM6_IRQHandler+0x110>)
 800213a:	2204      	movs	r2, #4
 800213c:	801a      	strh	r2, [r3, #0]
					  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
					  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
				  }
			  }
		  }
		  break;
 800213e:	e04f      	b.n	80021e0 <TIM6_IRQHandler+0xf4>
			  if (alarmCount > 2) {
 8002140:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <TIM6_IRQHandler+0x110>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	2b02      	cmp	r3, #2
 8002146:	d94b      	bls.n	80021e0 <TIM6_IRQHandler+0xf4>
				  if ((cfgData & 0x1) != 0) { // Check enabled flag sound level 1
 8002148:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <TIM6_IRQHandler+0x108>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d045      	beq.n	80021e0 <TIM6_IRQHandler+0xf4>
					  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
 8002154:	210c      	movs	r1, #12
 8002156:	482a      	ldr	r0, [pc, #168]	; (8002200 <TIM6_IRQHandler+0x114>)
 8002158:	f005 f86c 	bl	8007234 <HAL_TIM_OC_Start>
					  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 800215c:	4829      	ldr	r0, [pc, #164]	; (8002204 <TIM6_IRQHandler+0x118>)
 800215e:	f004 ff85 	bl	800706c <HAL_TIM_Base_Start_IT>
		  break;
 8002162:	e03d      	b.n	80021e0 <TIM6_IRQHandler+0xf4>
	  case 2:
			  if (alarmCount-- <= 0) {
 8002164:	4b25      	ldr	r3, [pc, #148]	; (80021fc <TIM6_IRQHandler+0x110>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	1e5a      	subs	r2, r3, #1
 800216a:	b291      	uxth	r1, r2
 800216c:	4a23      	ldr	r2, [pc, #140]	; (80021fc <TIM6_IRQHandler+0x110>)
 800216e:	8011      	strh	r1, [r2, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d103      	bne.n	800217c <TIM6_IRQHandler+0x90>
				  alarmCount = 5;
 8002174:	4b21      	ldr	r3, [pc, #132]	; (80021fc <TIM6_IRQHandler+0x110>)
 8002176:	2205      	movs	r2, #5
 8002178:	801a      	strh	r2, [r3, #0]
						  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
					  }
				  }
			  }
		  break;
 800217a:	e033      	b.n	80021e4 <TIM6_IRQHandler+0xf8>
				  if (alarmCount > 2) {
 800217c:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <TIM6_IRQHandler+0x110>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d92f      	bls.n	80021e4 <TIM6_IRQHandler+0xf8>
					  if ((cfgData & 0x4) != 0) {  // Check enabled flag sound level 2
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <TIM6_IRQHandler+0x108>)
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d029      	beq.n	80021e4 <TIM6_IRQHandler+0xf8>
						  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
 8002190:	210c      	movs	r1, #12
 8002192:	481b      	ldr	r0, [pc, #108]	; (8002200 <TIM6_IRQHandler+0x114>)
 8002194:	f005 f84e 	bl	8007234 <HAL_TIM_OC_Start>
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 8002198:	481a      	ldr	r0, [pc, #104]	; (8002204 <TIM6_IRQHandler+0x118>)
 800219a:	f004 ff67 	bl	800706c <HAL_TIM_Base_Start_IT>
		  break;
 800219e:	e021      	b.n	80021e4 <TIM6_IRQHandler+0xf8>
	  case 3:
			  if (alarmCount-- <= 0) {
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <TIM6_IRQHandler+0x110>)
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	1e5a      	subs	r2, r3, #1
 80021a6:	b291      	uxth	r1, r2
 80021a8:	4a14      	ldr	r2, [pc, #80]	; (80021fc <TIM6_IRQHandler+0x110>)
 80021aa:	8011      	strh	r1, [r2, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d103      	bne.n	80021b8 <TIM6_IRQHandler+0xcc>
				  alarmCount = 6;
 80021b0:	4b12      	ldr	r3, [pc, #72]	; (80021fc <TIM6_IRQHandler+0x110>)
 80021b2:	2206      	movs	r2, #6
 80021b4:	801a      	strh	r2, [r3, #0]
						  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
					  }
				  }
			  }
		  break;
 80021b6:	e017      	b.n	80021e8 <TIM6_IRQHandler+0xfc>
				  if (alarmCount > 2) {
 80021b8:	4b10      	ldr	r3, [pc, #64]	; (80021fc <TIM6_IRQHandler+0x110>)
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d913      	bls.n	80021e8 <TIM6_IRQHandler+0xfc>
					  if ((cfgData & 0x10) != 0) { // Check enabled flag sound level 3
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <TIM6_IRQHandler+0x108>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00d      	beq.n	80021e8 <TIM6_IRQHandler+0xfc>
						  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
 80021cc:	210c      	movs	r1, #12
 80021ce:	480c      	ldr	r0, [pc, #48]	; (8002200 <TIM6_IRQHandler+0x114>)
 80021d0:	f005 f830 	bl	8007234 <HAL_TIM_OC_Start>
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 80021d4:	480b      	ldr	r0, [pc, #44]	; (8002204 <TIM6_IRQHandler+0x118>)
 80021d6:	f004 ff49 	bl	800706c <HAL_TIM_Base_Start_IT>
		  break;
 80021da:	e005      	b.n	80021e8 <TIM6_IRQHandler+0xfc>
	  }
  }
 80021dc:	bf00      	nop
 80021de:	e004      	b.n	80021ea <TIM6_IRQHandler+0xfe>
		  break;
 80021e0:	bf00      	nop
 80021e2:	e002      	b.n	80021ea <TIM6_IRQHandler+0xfe>
		  break;
 80021e4:	bf00      	nop
 80021e6:	e000      	b.n	80021ea <TIM6_IRQHandler+0xfe>
		  break;
 80021e8:	bf00      	nop

  /* USER CODE END TIM6_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20004d50 	.word	0x20004d50
 80021f4:	20004df6 	.word	0x20004df6
 80021f8:	20004220 	.word	0x20004220
 80021fc:	20004df4 	.word	0x20004df4
 8002200:	20004da8 	.word	0x20004da8
 8002204:	20004e00 	.word	0x20004e00

08002208 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */
  uint32_t realCount;

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 800220e:	4859      	ldr	r0, [pc, #356]	; (8002374 <LPTIM2_IRQHandler+0x16c>)
 8002210:	f003 fc02 	bl	8005a18 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */
  avgRadInterval = 0;	// Average interval
 8002214:	4b58      	ldr	r3, [pc, #352]	; (8002378 <LPTIM2_IRQHandler+0x170>)
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
  realCount = 0;		// Counter real data interval
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]
  for ( int i = 0; i < radBufferSize; i++) {
 800221e:	2300      	movs	r3, #0
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	e014      	b.n	800224e <LPTIM2_IRQHandler+0x46>
	  if (radBuffer[i] > 0) {	// Calculate only positive interval
 8002224:	4a55      	ldr	r2, [pc, #340]	; (800237c <LPTIM2_IRQHandler+0x174>)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00b      	beq.n	8002248 <LPTIM2_IRQHandler+0x40>
		  realCount++;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3301      	adds	r3, #1
 8002234:	607b      	str	r3, [r7, #4]
		  avgRadInterval = avgRadInterval + radBuffer[i];
 8002236:	4a51      	ldr	r2, [pc, #324]	; (800237c <LPTIM2_IRQHandler+0x174>)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800223e:	4b4e      	ldr	r3, [pc, #312]	; (8002378 <LPTIM2_IRQHandler+0x170>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4413      	add	r3, r2
 8002244:	4a4c      	ldr	r2, [pc, #304]	; (8002378 <LPTIM2_IRQHandler+0x170>)
 8002246:	6013      	str	r3, [r2, #0]
  for ( int i = 0; i < radBufferSize; i++) {
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b31      	cmp	r3, #49	; 0x31
 8002252:	dde7      	ble.n	8002224 <LPTIM2_IRQHandler+0x1c>
	  }
  }
  if (realCount > 0) {
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d036      	beq.n	80022c8 <LPTIM2_IRQHandler+0xc0>
	  avgRadInterval = avgRadInterval / realCount;
 800225a:	4b47      	ldr	r3, [pc, #284]	; (8002378 <LPTIM2_IRQHandler+0x170>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	fbb2 f3f3 	udiv	r3, r2, r3
 8002264:	4a44      	ldr	r2, [pc, #272]	; (8002378 <LPTIM2_IRQHandler+0x170>)
 8002266:	6013      	str	r3, [r2, #0]
	  if (avgRadInterval < Thr3) {
 8002268:	4b43      	ldr	r3, [pc, #268]	; (8002378 <LPTIM2_IRQHandler+0x170>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b44      	ldr	r3, [pc, #272]	; (8002380 <LPTIM2_IRQHandler+0x178>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d208      	bcs.n	8002286 <LPTIM2_IRQHandler+0x7e>
			  alarmLevel = 3;			// Activate 3 alarm level
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <LPTIM2_IRQHandler+0x17c>)
 8002276:	2203      	movs	r2, #3
 8002278:	801a      	strh	r2, [r3, #0]
			  alarmTime++;
 800227a:	4b43      	ldr	r3, [pc, #268]	; (8002388 <LPTIM2_IRQHandler+0x180>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3301      	adds	r3, #1
 8002280:	4a41      	ldr	r2, [pc, #260]	; (8002388 <LPTIM2_IRQHandler+0x180>)
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	e020      	b.n	80022c8 <LPTIM2_IRQHandler+0xc0>
	  } else {
		  if (avgRadInterval < Thr2) {
 8002286:	4b3c      	ldr	r3, [pc, #240]	; (8002378 <LPTIM2_IRQHandler+0x170>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4b40      	ldr	r3, [pc, #256]	; (800238c <LPTIM2_IRQHandler+0x184>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d208      	bcs.n	80022a4 <LPTIM2_IRQHandler+0x9c>
				  alarmLevel = 2;		// Activate 2 alarm level
 8002292:	4b3c      	ldr	r3, [pc, #240]	; (8002384 <LPTIM2_IRQHandler+0x17c>)
 8002294:	2202      	movs	r2, #2
 8002296:	801a      	strh	r2, [r3, #0]
				  alarmTime++;
 8002298:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <LPTIM2_IRQHandler+0x180>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	4a3a      	ldr	r2, [pc, #232]	; (8002388 <LPTIM2_IRQHandler+0x180>)
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e011      	b.n	80022c8 <LPTIM2_IRQHandler+0xc0>
		  } else {
			  if (avgRadInterval < Thr1) {
 80022a4:	4b34      	ldr	r3, [pc, #208]	; (8002378 <LPTIM2_IRQHandler+0x170>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b39      	ldr	r3, [pc, #228]	; (8002390 <LPTIM2_IRQHandler+0x188>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d208      	bcs.n	80022c2 <LPTIM2_IRQHandler+0xba>
					  alarmLevel = 1;	// Activate 1 alarm level
 80022b0:	4b34      	ldr	r3, [pc, #208]	; (8002384 <LPTIM2_IRQHandler+0x17c>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	801a      	strh	r2, [r3, #0]
					  alarmTime++;
 80022b6:	4b34      	ldr	r3, [pc, #208]	; (8002388 <LPTIM2_IRQHandler+0x180>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	3301      	adds	r3, #1
 80022bc:	4a32      	ldr	r2, [pc, #200]	; (8002388 <LPTIM2_IRQHandler+0x180>)
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	e002      	b.n	80022c8 <LPTIM2_IRQHandler+0xc0>
			  } else {
				  alarmLevel = 0;		// Disable alarm sound
 80022c2:	4b30      	ldr	r3, [pc, #192]	; (8002384 <LPTIM2_IRQHandler+0x17c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	801a      	strh	r2, [r3, #0]
			  }
		  }
	  }
  }
  /* Record log data */
  if (oldAlarmLevel != alarmLevel) {
 80022c8:	4b32      	ldr	r3, [pc, #200]	; (8002394 <LPTIM2_IRQHandler+0x18c>)
 80022ca:	881a      	ldrh	r2, [r3, #0]
 80022cc:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <LPTIM2_IRQHandler+0x17c>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d04b      	beq.n	800236c <LPTIM2_IRQHandler+0x164>
	  logDat[logIndex].timeData = HAL_GetTick() / 1000;
 80022d4:	f000 f930 	bl	8002538 <HAL_GetTick>
 80022d8:	4603      	mov	r3, r0
 80022da:	4a2f      	ldr	r2, [pc, #188]	; (8002398 <LPTIM2_IRQHandler+0x190>)
 80022dc:	7812      	ldrb	r2, [r2, #0]
 80022de:	4610      	mov	r0, r2
 80022e0:	4a2e      	ldr	r2, [pc, #184]	; (800239c <LPTIM2_IRQHandler+0x194>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	099a      	lsrs	r2, r3, #6
 80022e8:	492d      	ldr	r1, [pc, #180]	; (80023a0 <LPTIM2_IRQHandler+0x198>)
 80022ea:	4603      	mov	r3, r0
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4403      	add	r3, r0
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	601a      	str	r2, [r3, #0]
	  logDat[logIndex].eventType = alarmLevel;
 80022f6:	4b23      	ldr	r3, [pc, #140]	; (8002384 <LPTIM2_IRQHandler+0x17c>)
 80022f8:	881a      	ldrh	r2, [r3, #0]
 80022fa:	4b27      	ldr	r3, [pc, #156]	; (8002398 <LPTIM2_IRQHandler+0x190>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	4619      	mov	r1, r3
 8002300:	b2d0      	uxtb	r0, r2
 8002302:	4a27      	ldr	r2, [pc, #156]	; (80023a0 <LPTIM2_IRQHandler+0x198>)
 8002304:	460b      	mov	r3, r1
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	440b      	add	r3, r1
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	3304      	adds	r3, #4
 8002310:	4602      	mov	r2, r0
 8002312:	701a      	strb	r2, [r3, #0]
	  logDat[logIndex].event_data = avgRadInterval;
 8002314:	4b20      	ldr	r3, [pc, #128]	; (8002398 <LPTIM2_IRQHandler+0x190>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	4b17      	ldr	r3, [pc, #92]	; (8002378 <LPTIM2_IRQHandler+0x170>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4920      	ldr	r1, [pc, #128]	; (80023a0 <LPTIM2_IRQHandler+0x198>)
 8002320:	4603      	mov	r3, r0
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4403      	add	r3, r0
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	3308      	adds	r3, #8
 800232c:	601a      	str	r2, [r3, #0]
	  if (logIndex < logSize - 1) {
 800232e:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <LPTIM2_IRQHandler+0x190>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2bc6      	cmp	r3, #198	; 0xc6
 8002334:	d806      	bhi.n	8002344 <LPTIM2_IRQHandler+0x13c>
		  logIndex++;
 8002336:	4b18      	ldr	r3, [pc, #96]	; (8002398 <LPTIM2_IRQHandler+0x190>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	3301      	adds	r3, #1
 800233c:	b2da      	uxtb	r2, r3
 800233e:	4b16      	ldr	r3, [pc, #88]	; (8002398 <LPTIM2_IRQHandler+0x190>)
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	e002      	b.n	800234a <LPTIM2_IRQHandler+0x142>
	  } else {
		  logIndex = 0;
 8002344:	4b14      	ldr	r3, [pc, #80]	; (8002398 <LPTIM2_IRQHandler+0x190>)
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
	  }
	  if (++logRecords > logSize) {
 800234a:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <LPTIM2_IRQHandler+0x19c>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	3301      	adds	r3, #1
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <LPTIM2_IRQHandler+0x19c>)
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <LPTIM2_IRQHandler+0x19c>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2bc8      	cmp	r3, #200	; 0xc8
 800235c:	d902      	bls.n	8002364 <LPTIM2_IRQHandler+0x15c>
		  logRecords = logSize;
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <LPTIM2_IRQHandler+0x19c>)
 8002360:	22c8      	movs	r2, #200	; 0xc8
 8002362:	701a      	strb	r2, [r3, #0]
	  }
	  oldAlarmLevel = alarmLevel;
 8002364:	4b07      	ldr	r3, [pc, #28]	; (8002384 <LPTIM2_IRQHandler+0x17c>)
 8002366:	881a      	ldrh	r2, [r3, #0]
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <LPTIM2_IRQHandler+0x18c>)
 800236a:	801a      	strh	r2, [r3, #0]
  }
  //uint8_t s[100];
  //sprintf(s, "Avg: %d, Cnt: %d, alarm: %d\r\n", avgRadInterval, realCount, alarmLevel);
  //HAL_UART_Transmit(&huart1, s, strlen((char *)s), 1000);
  /* USER CODE END LPTIM2_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200042e8 	.word	0x200042e8
 8002378:	2000416c 	.word	0x2000416c
 800237c:	2000408c 	.word	0x2000408c
 8002380:	2000006c 	.word	0x2000006c
 8002384:	20004220 	.word	0x20004220
 8002388:	2000005c 	.word	0x2000005c
 800238c:	20000068 	.word	0x20000068
 8002390:	20000064 	.word	0x20000064
 8002394:	20000000 	.word	0x20000000
 8002398:	20004156 	.word	0x20004156
 800239c:	10624dd3 	.word	0x10624dd3
 80023a0:	200043a8 	.word	0x200043a8
 80023a4:	20004157 	.word	0x20004157

080023a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <SystemInit+0x64>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b2:	4a16      	ldr	r2, [pc, #88]	; (800240c <SystemInit+0x64>)
 80023b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80023bc:	4b14      	ldr	r3, [pc, #80]	; (8002410 <SystemInit+0x68>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a13      	ldr	r2, [pc, #76]	; (8002410 <SystemInit+0x68>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <SystemInit+0x68>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <SystemInit+0x68>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a0f      	ldr	r2, [pc, #60]	; (8002410 <SystemInit+0x68>)
 80023d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80023d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80023dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <SystemInit+0x68>)
 80023e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023e6:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <SystemInit+0x68>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a09      	ldr	r2, [pc, #36]	; (8002410 <SystemInit+0x68>)
 80023ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <SystemInit+0x68>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <SystemInit+0x64>)
 80023fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023fe:	609a      	str	r2, [r3, #8]
#endif
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000ed00 	.word	0xe000ed00
 8002410:	40021000 	.word	0x40021000

08002414 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800244c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002418:	f7ff ffc6 	bl	80023a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800241c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800241e:	e003      	b.n	8002428 <LoopCopyDataInit>

08002420 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002422:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002424:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002426:	3104      	adds	r1, #4

08002428 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002428:	480a      	ldr	r0, [pc, #40]	; (8002454 <LoopForever+0xa>)
	ldr	r3, =_edata
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <LoopForever+0xe>)
	adds	r2, r0, r1
 800242c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800242e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002430:	d3f6      	bcc.n	8002420 <CopyDataInit>
	ldr	r2, =_sbss
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002434:	e002      	b.n	800243c <LoopFillZerobss>

08002436 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002436:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002438:	f842 3b04 	str.w	r3, [r2], #4

0800243c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <LoopForever+0x16>)
	cmp	r2, r3
 800243e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002440:	d3f9      	bcc.n	8002436 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002442:	f006 fde7 	bl	8009014 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002446:	f7fe f9ab 	bl	80007a0 <main>

0800244a <LoopForever>:

LoopForever:
    b LoopForever
 800244a:	e7fe      	b.n	800244a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800244c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002450:	080090f8 	.word	0x080090f8
	ldr	r0, =_sdata
 8002454:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002458:	20000034 	.word	0x20000034
	ldr	r2, =_sbss
 800245c:	20000034 	.word	0x20000034
	ldr	r3, = _ebss
 8002460:	20004e68 	.word	0x20004e68

08002464 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002464:	e7fe      	b.n	8002464 <COMP_IRQHandler>

08002466 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002470:	2003      	movs	r0, #3
 8002472:	f002 f935 	bl	80046e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002476:	2000      	movs	r0, #0
 8002478:	f000 f80e 	bl	8002498 <HAL_InitTick>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	71fb      	strb	r3, [r7, #7]
 8002486:	e001      	b.n	800248c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002488:	f7ff fa80 	bl	800198c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800248c:	79fb      	ldrb	r3, [r7, #7]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024a4:	4b17      	ldr	r3, [pc, #92]	; (8002504 <HAL_InitTick+0x6c>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d023      	beq.n	80024f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024ac:	4b16      	ldr	r3, [pc, #88]	; (8002508 <HAL_InitTick+0x70>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <HAL_InitTick+0x6c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80024be:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c2:	4618      	mov	r0, r3
 80024c4:	f002 f941 	bl	800474a <HAL_SYSTICK_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10f      	bne.n	80024ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b0f      	cmp	r3, #15
 80024d2:	d809      	bhi.n	80024e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d4:	2200      	movs	r2, #0
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024dc:	f002 f90b 	bl	80046f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024e0:	4a0a      	ldr	r2, [pc, #40]	; (800250c <HAL_InitTick+0x74>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e007      	b.n	80024f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	e004      	b.n	80024f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	e001      	b.n	80024f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000010 	.word	0x20000010
 8002508:	20000008 	.word	0x20000008
 800250c:	2000000c 	.word	0x2000000c

08002510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_IncTick+0x20>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_IncTick+0x24>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4413      	add	r3, r2
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <HAL_IncTick+0x24>)
 8002522:	6013      	str	r3, [r2, #0]
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000010 	.word	0x20000010
 8002534:	20004e64 	.word	0x20004e64

08002538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return uwTick;
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_GetTick+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20004e64 	.word	0x20004e64

08002550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002558:	f7ff ffee 	bl	8002538 <HAL_GetTick>
 800255c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002568:	d005      	beq.n	8002576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <HAL_Delay+0x44>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4413      	add	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002576:	bf00      	nop
 8002578:	f7ff ffde 	bl	8002538 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	429a      	cmp	r2, r3
 8002586:	d8f7      	bhi.n	8002578 <HAL_Delay+0x28>
  {
  }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000010 	.word	0x20000010

08002598 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	609a      	str	r2, [r3, #8]
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	609a      	str	r2, [r3, #8]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	3360      	adds	r3, #96	; 0x60
 8002612:	461a      	mov	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <LL_ADC_SetOffset+0x44>)
 8002622:	4013      	ands	r3, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	4313      	orrs	r3, r2
 8002630:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002638:	bf00      	nop
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	03fff000 	.word	0x03fff000

08002648 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3360      	adds	r3, #96	; 0x60
 8002656:	461a      	mov	r2, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3360      	adds	r3, #96	; 0x60
 8002684:	461a      	mov	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	431a      	orrs	r2, r3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800269e:	bf00      	nop
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	615a      	str	r2, [r3, #20]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b087      	sub	sp, #28
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3330      	adds	r3, #48	; 0x30
 8002706:	461a      	mov	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	4413      	add	r3, r2
 8002714:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	f003 031f 	and.w	r3, r3, #31
 8002720:	211f      	movs	r1, #31
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	401a      	ands	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	0e9b      	lsrs	r3, r3, #26
 800272e:	f003 011f 	and.w	r1, r3, #31
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	431a      	orrs	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002742:	bf00      	nop
 8002744:	371c      	adds	r7, #28
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3314      	adds	r3, #20
 8002784:	461a      	mov	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	0e5b      	lsrs	r3, r3, #25
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	4413      	add	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	0d1b      	lsrs	r3, r3, #20
 800279c:	f003 031f 	and.w	r3, r3, #31
 80027a0:	2107      	movs	r1, #7
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	401a      	ands	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	0d1b      	lsrs	r3, r3, #20
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	fa01 f303 	lsl.w	r3, r1, r3
 80027b8:	431a      	orrs	r2, r3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027be:	bf00      	nop
 80027c0:	371c      	adds	r7, #28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e4:	43db      	mvns	r3, r3
 80027e6:	401a      	ands	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f003 0318 	and.w	r3, r3, #24
 80027ee:	4908      	ldr	r1, [pc, #32]	; (8002810 <LL_ADC_SetChannelSingleDiff+0x44>)
 80027f0:	40d9      	lsrs	r1, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	400b      	ands	r3, r1
 80027f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fa:	431a      	orrs	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	0007ffff 	.word	0x0007ffff

08002814 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 031f 	and.w	r3, r3, #31
}
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800285c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6093      	str	r3, [r2, #8]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002884:	d101      	bne.n	800288a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80028a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028d4:	d101      	bne.n	80028da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002920:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002924:	f043 0202 	orr.w	r2, r3, #2
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <LL_ADC_IsEnabled+0x18>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <LL_ADC_IsEnabled+0x1a>
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b02      	cmp	r3, #2
 8002970:	d101      	bne.n	8002976 <LL_ADC_IsDisableOngoing+0x18>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <LL_ADC_IsDisableOngoing+0x1a>
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002994:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002998:	f043 0204 	orr.w	r2, r3, #4
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029c0:	f043 0210 	orr.w	r2, r3, #16
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d101      	bne.n	80029ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a0e:	f043 0220 	orr.w	r2, r3, #32
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d101      	bne.n	8002a3a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a48:	b590      	push	{r4, r7, lr}
 8002a4a:	b089      	sub	sp, #36	; 0x24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e131      	b.n	8002cc6 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d109      	bne.n	8002a84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7fe ffaf 	bl	80019d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fef1 	bl	8002870 <LL_ADC_IsDeepPowerDownEnabled>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d004      	beq.n	8002a9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fed7 	bl	800284c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ff0c 	bl	80028c0 <LL_ADC_IsInternalRegulatorEnabled>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d115      	bne.n	8002ada <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fef0 	bl	8002898 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ab8:	4b85      	ldr	r3, [pc, #532]	; (8002cd0 <HAL_ADC_Init+0x288>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	099b      	lsrs	r3, r3, #6
 8002abe:	4a85      	ldr	r2, [pc, #532]	; (8002cd4 <HAL_ADC_Init+0x28c>)
 8002ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac4:	099b      	lsrs	r3, r3, #6
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002acc:	e002      	b.n	8002ad4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f9      	bne.n	8002ace <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff feee 	bl	80028c0 <LL_ADC_IsInternalRegulatorEnabled>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10d      	bne.n	8002b06 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	f043 0210 	orr.w	r2, r3, #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afa:	f043 0201 	orr.w	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff ff62 	bl	80029d4 <LL_ADC_REG_IsConversionOngoing>
 8002b10:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f040 80ca 	bne.w	8002cb4 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f040 80c6 	bne.w	8002cb4 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b30:	f043 0202 	orr.w	r2, r3, #2
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fefb 	bl	8002938 <LL_ADC_IsEnabled>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d110      	bne.n	8002b6a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b48:	4863      	ldr	r0, [pc, #396]	; (8002cd8 <HAL_ADC_Init+0x290>)
 8002b4a:	f7ff fef5 	bl	8002938 <LL_ADC_IsEnabled>
 8002b4e:	4604      	mov	r4, r0
 8002b50:	4862      	ldr	r0, [pc, #392]	; (8002cdc <HAL_ADC_Init+0x294>)
 8002b52:	f7ff fef1 	bl	8002938 <LL_ADC_IsEnabled>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4323      	orrs	r3, r4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4619      	mov	r1, r3
 8002b64:	485e      	ldr	r0, [pc, #376]	; (8002ce0 <HAL_ADC_Init+0x298>)
 8002b66:	f7ff fd17 	bl	8002598 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	7e5b      	ldrb	r3, [r3, #25]
 8002b6e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b74:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002b7a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002b80:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b88:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d106      	bne.n	8002ba6 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	045b      	lsls	r3, r3, #17
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	4b46      	ldr	r3, [pc, #280]	; (8002ce4 <HAL_ADC_Init+0x29c>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	69b9      	ldr	r1, [r7, #24]
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fefa 	bl	80029d4 <LL_ADC_REG_IsConversionOngoing>
 8002be0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff ff1b 	bl	8002a22 <LL_ADC_INJ_IsConversionOngoing>
 8002bec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d13d      	bne.n	8002c70 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d13a      	bne.n	8002c70 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bfe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c06:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c16:	f023 0302 	bic.w	r3, r3, #2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	69b9      	ldr	r1, [r7, #24]
 8002c20:	430b      	orrs	r3, r1
 8002c22:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d118      	bne.n	8002c60 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002c38:	f023 0304 	bic.w	r3, r3, #4
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c44:	4311      	orrs	r1, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c4a:	4311      	orrs	r1, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c50:	430a      	orrs	r2, r1
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0201 	orr.w	r2, r2, #1
 8002c5c:	611a      	str	r2, [r3, #16]
 8002c5e:	e007      	b.n	8002c70 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d10c      	bne.n	8002c92 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f023 010f 	bic.w	r1, r3, #15
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	1e5a      	subs	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c90:	e007      	b.n	8002ca2 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 020f 	bic.w	r2, r2, #15
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	f023 0303 	bic.w	r3, r3, #3
 8002caa:	f043 0201 	orr.w	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54
 8002cb2:	e007      	b.n	8002cc4 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb8:	f043 0210 	orr.w	r2, r3, #16
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3724      	adds	r7, #36	; 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd90      	pop	{r4, r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000008 	.word	0x20000008
 8002cd4:	053e2d63 	.word	0x053e2d63
 8002cd8:	50040000 	.word	0x50040000
 8002cdc:	50040100 	.word	0x50040100
 8002ce0:	50040300 	.word	0x50040300
 8002ce4:	fff0c007 	.word	0xfff0c007

08002ce8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cf0:	4893      	ldr	r0, [pc, #588]	; (8002f40 <HAL_ADC_Start_IT+0x258>)
 8002cf2:	f7ff fd8f 	bl	8002814 <LL_ADC_GetMultimode>
 8002cf6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fe69 	bl	80029d4 <LL_ADC_REG_IsConversionOngoing>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f040 8111 	bne.w	8002f2c <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_ADC_Start_IT+0x30>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e10e      	b.n	8002f36 <HAL_ADC_Start_IT+0x24e>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f001 f92f 	bl	8003f84 <ADC_Enable>
 8002d26:	4603      	mov	r3, r0
 8002d28:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f040 80f8 	bne.w	8002f22 <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d36:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d3a:	f023 0301 	bic.w	r3, r3, #1
 8002d3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a7e      	ldr	r2, [pc, #504]	; (8002f44 <HAL_ADC_Start_IT+0x25c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d002      	beq.n	8002d56 <HAL_ADC_Start_IT+0x6e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	e000      	b.n	8002d58 <HAL_ADC_Start_IT+0x70>
 8002d56:	4b7c      	ldr	r3, [pc, #496]	; (8002f48 <HAL_ADC_Start_IT+0x260>)
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d002      	beq.n	8002d66 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d105      	bne.n	8002d72 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d006      	beq.n	8002d8c <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d82:	f023 0206 	bic.w	r2, r3, #6
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	659a      	str	r2, [r3, #88]	; 0x58
 8002d8a:	e002      	b.n	8002d92 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	221c      	movs	r2, #28
 8002d98:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 021c 	bic.w	r2, r2, #28
 8002db0:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d108      	bne.n	8002dcc <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0208 	orr.w	r2, r2, #8
 8002dc8:	605a      	str	r2, [r3, #4]
          break;
 8002dca:	e008      	b.n	8002dde <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0204 	orr.w	r2, r2, #4
 8002dda:	605a      	str	r2, [r3, #4]
          break;
 8002ddc:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d107      	bne.n	8002df6 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0210 	orr.w	r2, r2, #16
 8002df4:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a52      	ldr	r2, [pc, #328]	; (8002f44 <HAL_ADC_Start_IT+0x25c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d002      	beq.n	8002e06 <HAL_ADC_Start_IT+0x11e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	e000      	b.n	8002e08 <HAL_ADC_Start_IT+0x120>
 8002e06:	4b50      	ldr	r3, [pc, #320]	; (8002f48 <HAL_ADC_Start_IT+0x260>)
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d008      	beq.n	8002e22 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b05      	cmp	r3, #5
 8002e1a:	d002      	beq.n	8002e22 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	2b09      	cmp	r3, #9
 8002e20:	d13b      	bne.n	8002e9a <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d02d      	beq.n	8002e8c <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d110      	bne.n	8002e6a <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0220 	bic.w	r2, r2, #32
 8002e56:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e66:	605a      	str	r2, [r3, #4]
              break;
 8002e68:	e011      	b.n	8002e8e <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e78:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0220 	orr.w	r2, r2, #32
 8002e88:	605a      	str	r2, [r3, #4]
              break;
 8002e8a:	e000      	b.n	8002e8e <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8002e8c:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fd76 	bl	8002984 <LL_ADC_REG_StartConversion>
 8002e98:	e04c      	b.n	8002f34 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a26      	ldr	r2, [pc, #152]	; (8002f44 <HAL_ADC_Start_IT+0x25c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d002      	beq.n	8002eb6 <HAL_ADC_Start_IT+0x1ce>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	e000      	b.n	8002eb8 <HAL_ADC_Start_IT+0x1d0>
 8002eb6:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <HAL_ADC_Start_IT+0x260>)
 8002eb8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d035      	beq.n	8002f32 <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ece:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d110      	bne.n	8002f00 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0220 	bic.w	r2, r2, #32
 8002eec:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002efc:	605a      	str	r2, [r3, #4]
              break;
 8002efe:	e019      	b.n	8002f34 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f0e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0220 	orr.w	r2, r2, #32
 8002f1e:	605a      	str	r2, [r3, #4]
              break;
 8002f20:	e008      	b.n	8002f34 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002f2a:	e003      	b.n	8002f34 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	75fb      	strb	r3, [r7, #23]
 8002f30:	e000      	b.n	8002f34 <HAL_ADC_Start_IT+0x24c>
        }
 8002f32:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	50040300 	.word	0x50040300
 8002f44:	50040100 	.word	0x50040100
 8002f48:	50040000 	.word	0x50040000

08002f4c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f58:	4850      	ldr	r0, [pc, #320]	; (800309c <HAL_ADC_Start_DMA+0x150>)
 8002f5a:	f7ff fc5b 	bl	8002814 <LL_ADC_GetMultimode>
 8002f5e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fd35 	bl	80029d4 <LL_ADC_REG_IsConversionOngoing>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f040 808e 	bne.w	800308e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_ADC_Start_DMA+0x34>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e089      	b.n	8003094 <HAL_ADC_Start_DMA+0x148>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b05      	cmp	r3, #5
 8002f92:	d002      	beq.n	8002f9a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b09      	cmp	r3, #9
 8002f98:	d172      	bne.n	8003080 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fff2 	bl	8003f84 <ADC_Enable>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002fa4:	7dfb      	ldrb	r3, [r7, #23]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d165      	bne.n	8003076 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a37      	ldr	r2, [pc, #220]	; (80030a0 <HAL_ADC_Start_DMA+0x154>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d002      	beq.n	8002fce <HAL_ADC_Start_DMA+0x82>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	e000      	b.n	8002fd0 <HAL_ADC_Start_DMA+0x84>
 8002fce:	4b35      	ldr	r3, [pc, #212]	; (80030a4 <HAL_ADC_Start_DMA+0x158>)
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d002      	beq.n	8002fde <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d105      	bne.n	8002fea <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d006      	beq.n	8003004 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffa:	f023 0206 	bic.w	r2, r3, #6
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	659a      	str	r2, [r3, #88]	; 0x58
 8003002:	e002      	b.n	800300a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300e:	4a26      	ldr	r2, [pc, #152]	; (80030a8 <HAL_ADC_Start_DMA+0x15c>)
 8003010:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003016:	4a25      	ldr	r2, [pc, #148]	; (80030ac <HAL_ADC_Start_DMA+0x160>)
 8003018:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301e:	4a24      	ldr	r2, [pc, #144]	; (80030b0 <HAL_ADC_Start_DMA+0x164>)
 8003020:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	221c      	movs	r2, #28
 8003028:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0210 	orr.w	r2, r2, #16
 8003040:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0201 	orr.w	r2, r2, #1
 8003050:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3340      	adds	r3, #64	; 0x40
 800305c:	4619      	mov	r1, r3
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f001 fcc9 	bl	80049f8 <HAL_DMA_Start_IT>
 8003066:	4603      	mov	r3, r0
 8003068:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fc88 	bl	8002984 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003074:	e00d      	b.n	8003092 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800307e:	e008      	b.n	8003092 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800308c:	e001      	b.n	8003092 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800308e:	2302      	movs	r3, #2
 8003090:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003092:	7dfb      	ldrb	r3, [r7, #23]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	50040300 	.word	0x50040300
 80030a0:	50040100 	.word	0x50040100
 80030a4:	50040000 	.word	0x50040000
 80030a8:	08004107 	.word	0x08004107
 80030ac:	080041df 	.word	0x080041df
 80030b0:	080041fb 	.word	0x080041fb

080030b4 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_Stop_DMA+0x16>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e051      	b.n	800316e <HAL_ADC_Stop_DMA+0xba>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80030d2:	2103      	movs	r1, #3
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fe99 	bl	8003e0c <ADC_ConversionStop>
 80030da:	4603      	mov	r3, r0
 80030dc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d13f      	bne.n	8003164 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0201 	bic.w	r2, r2, #1
 80030f2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d10f      	bne.n	8003122 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003106:	4618      	mov	r0, r3
 8003108:	f001 fcd6 	bl	8004ab8 <HAL_DMA_Abort>
 800310c:	4603      	mov	r3, r0
 800310e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0210 	bic.w	r2, r2, #16
 8003130:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d105      	bne.n	8003144 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 ff85 	bl	8004048 <ADC_Disable>
 800313e:	4603      	mov	r3, r0
 8003140:	73fb      	strb	r3, [r7, #15]
 8003142:	e002      	b.n	800314a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 ff7f 	bl	8004048 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d109      	bne.n	8003164 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003154:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003158:	f023 0301 	bic.w	r3, r3, #1
 800315c:	f043 0201 	orr.w	r2, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800316c:	7bfb      	ldrb	r3, [r7, #15]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003184:	4618      	mov	r0, r3
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08a      	sub	sp, #40	; 0x28
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003198:	2300      	movs	r3, #0
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031ac:	4882      	ldr	r0, [pc, #520]	; (80033b8 <HAL_ADC_IRQHandler+0x228>)
 80031ae:	f7ff fb31 	bl	8002814 <LL_ADC_GetMultimode>
 80031b2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d017      	beq.n	80031ee <HAL_ADC_IRQHandler+0x5e>
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d012      	beq.n	80031ee <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d105      	bne.n	80031e0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f001 f8ff 	bl	80043e4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2202      	movs	r2, #2
 80031ec:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d004      	beq.n	8003202 <HAL_ADC_IRQHandler+0x72>
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 8083 	beq.w	8003314 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d07d      	beq.n	8003314 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b00      	cmp	r3, #0
 8003222:	d105      	bne.n	8003230 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003228:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fa4b 	bl	80026d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d062      	beq.n	8003306 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a5d      	ldr	r2, [pc, #372]	; (80033bc <HAL_ADC_IRQHandler+0x22c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d002      	beq.n	8003250 <HAL_ADC_IRQHandler+0xc0>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	e000      	b.n	8003252 <HAL_ADC_IRQHandler+0xc2>
 8003250:	4b5b      	ldr	r3, [pc, #364]	; (80033c0 <HAL_ADC_IRQHandler+0x230>)
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	4293      	cmp	r3, r2
 8003258:	d008      	beq.n	800326c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b05      	cmp	r3, #5
 8003264:	d002      	beq.n	800326c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b09      	cmp	r3, #9
 800326a:	d104      	bne.n	8003276 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	623b      	str	r3, [r7, #32]
 8003274:	e00c      	b.n	8003290 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a50      	ldr	r2, [pc, #320]	; (80033bc <HAL_ADC_IRQHandler+0x22c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d002      	beq.n	8003286 <HAL_ADC_IRQHandler+0xf6>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	e000      	b.n	8003288 <HAL_ADC_IRQHandler+0xf8>
 8003286:	4b4e      	ldr	r3, [pc, #312]	; (80033c0 <HAL_ADC_IRQHandler+0x230>)
 8003288:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d135      	bne.n	8003306 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0308 	and.w	r3, r3, #8
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d12e      	bne.n	8003306 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fb91 	bl	80029d4 <LL_ADC_REG_IsConversionOngoing>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d11a      	bne.n	80032ee <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 020c 	bic.w	r2, r2, #12
 80032c6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d112      	bne.n	8003306 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	f043 0201 	orr.w	r2, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54
 80032ec:	e00b      	b.n	8003306 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f2:	f043 0210 	orr.w	r2, r3, #16
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fe:	f043 0201 	orr.w	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f95c 	bl	80035c4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	220c      	movs	r2, #12
 8003312:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 0320 	and.w	r3, r3, #32
 800331a:	2b00      	cmp	r3, #0
 800331c:	d004      	beq.n	8003328 <HAL_ADC_IRQHandler+0x198>
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10b      	bne.n	8003340 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 809f 	beq.w	8003472 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 8099 	beq.w	8003472 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b00      	cmp	r3, #0
 800334a:	d105      	bne.n	8003358 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003350:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff f9f6 	bl	800274e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003362:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff f9b1 	bl	80026d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800336e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a11      	ldr	r2, [pc, #68]	; (80033bc <HAL_ADC_IRQHandler+0x22c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d002      	beq.n	8003380 <HAL_ADC_IRQHandler+0x1f0>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	e000      	b.n	8003382 <HAL_ADC_IRQHandler+0x1f2>
 8003380:	4b0f      	ldr	r3, [pc, #60]	; (80033c0 <HAL_ADC_IRQHandler+0x230>)
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6812      	ldr	r2, [r2, #0]
 8003386:	4293      	cmp	r3, r2
 8003388:	d008      	beq.n	800339c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2b06      	cmp	r3, #6
 8003394:	d002      	beq.n	800339c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2b07      	cmp	r3, #7
 800339a:	d104      	bne.n	80033a6 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	623b      	str	r3, [r7, #32]
 80033a4:	e013      	b.n	80033ce <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a04      	ldr	r2, [pc, #16]	; (80033bc <HAL_ADC_IRQHandler+0x22c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d009      	beq.n	80033c4 <HAL_ADC_IRQHandler+0x234>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	e007      	b.n	80033c6 <HAL_ADC_IRQHandler+0x236>
 80033b6:	bf00      	nop
 80033b8:	50040300 	.word	0x50040300
 80033bc:	50040100 	.word	0x50040100
 80033c0:	50040000 	.word	0x50040000
 80033c4:	4b7d      	ldr	r3, [pc, #500]	; (80035bc <HAL_ADC_IRQHandler+0x42c>)
 80033c6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d047      	beq.n	8003464 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d007      	beq.n	80033ee <HAL_ADC_IRQHandler+0x25e>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d03f      	beq.n	8003464 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d13a      	bne.n	8003464 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d133      	bne.n	8003464 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d12e      	bne.n	8003464 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fb09 	bl	8002a22 <LL_ADC_INJ_IsConversionOngoing>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d11a      	bne.n	800344c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003424:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d112      	bne.n	8003464 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003442:	f043 0201 	orr.w	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	655a      	str	r2, [r3, #84]	; 0x54
 800344a:	e00b      	b.n	8003464 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003450:	f043 0210 	orr.w	r2, r3, #16
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	f043 0201 	orr.w	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 ff95 	bl	8004394 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2260      	movs	r2, #96	; 0x60
 8003470:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003478:	2b00      	cmp	r3, #0
 800347a:	d011      	beq.n	80034a0 <HAL_ADC_IRQHandler+0x310>
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00c      	beq.n	80034a0 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f8aa 	bl	80035ec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2280      	movs	r2, #128	; 0x80
 800349e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d012      	beq.n	80034d0 <HAL_ADC_IRQHandler+0x340>
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00d      	beq.n	80034d0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 ff7b 	bl	80043bc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d012      	beq.n	8003500 <HAL_ADC_IRQHandler+0x370>
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00d      	beq.n	8003500 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 ff6d 	bl	80043d0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	2b00      	cmp	r3, #0
 8003508:	d036      	beq.n	8003578 <HAL_ADC_IRQHandler+0x3e8>
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b00      	cmp	r3, #0
 8003512:	d031      	beq.n	8003578 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003518:	2b00      	cmp	r3, #0
 800351a:	d102      	bne.n	8003522 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800351c:	2301      	movs	r3, #1
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
 8003520:	e014      	b.n	800354c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003528:	4825      	ldr	r0, [pc, #148]	; (80035c0 <HAL_ADC_IRQHandler+0x430>)
 800352a:	f7ff f981 	bl	8002830 <LL_ADC_GetMultiDMATransfer>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00b      	beq.n	800354c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003534:	2301      	movs	r3, #1
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
 8003538:	e008      	b.n	800354c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003548:	2301      	movs	r3, #1
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	2b01      	cmp	r3, #1
 8003550:	d10e      	bne.n	8003570 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003562:	f043 0202 	orr.w	r2, r3, #2
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f848 	bl	8003600 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2210      	movs	r2, #16
 8003576:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357e:	2b00      	cmp	r3, #0
 8003580:	d018      	beq.n	80035b4 <HAL_ADC_IRQHandler+0x424>
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003588:	2b00      	cmp	r3, #0
 800358a:	d013      	beq.n	80035b4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003590:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359c:	f043 0208 	orr.w	r2, r3, #8
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035ac:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fefa 	bl	80043a8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80035b4:	bf00      	nop
 80035b6:	3728      	adds	r7, #40	; 0x28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	50040000 	.word	0x50040000
 80035c0:	50040300 	.word	0x50040300

080035c4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b0b6      	sub	sp, #216	; 0xd8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x22>
 8003632:	2302      	movs	r3, #2
 8003634:	e3d5      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x7ce>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff f9c6 	bl	80029d4 <LL_ADC_REG_IsConversionOngoing>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	f040 83ba 	bne.w	8003dc4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b05      	cmp	r3, #5
 8003656:	d824      	bhi.n	80036a2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	3b02      	subs	r3, #2
 800365e:	2b03      	cmp	r3, #3
 8003660:	d81b      	bhi.n	800369a <HAL_ADC_ConfigChannel+0x86>
 8003662:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <HAL_ADC_ConfigChannel+0x54>)
 8003664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003668:	08003679 	.word	0x08003679
 800366c:	08003681 	.word	0x08003681
 8003670:	08003689 	.word	0x08003689
 8003674:	08003691 	.word	0x08003691
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	220c      	movs	r2, #12
 800367c:	605a      	str	r2, [r3, #4]
          break;
 800367e:	e011      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2212      	movs	r2, #18
 8003684:	605a      	str	r2, [r3, #4]
          break;
 8003686:	e00d      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2218      	movs	r2, #24
 800368c:	605a      	str	r2, [r3, #4]
          break;
 800368e:	e009      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003696:	605a      	str	r2, [r3, #4]
          break;
 8003698:	e004      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2206      	movs	r2, #6
 800369e:	605a      	str	r2, [r3, #4]
          break;
 80036a0:	e000      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80036a2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6818      	ldr	r0, [r3, #0]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	f7ff f820 	bl	80026f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff f98a 	bl	80029d4 <LL_ADC_REG_IsConversionOngoing>
 80036c0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff f9aa 	bl	8002a22 <LL_ADC_INJ_IsConversionOngoing>
 80036ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f040 81c1 	bne.w	8003a5e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f040 81bc 	bne.w	8003a5e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036ee:	d10f      	bne.n	8003710 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2200      	movs	r2, #0
 80036fa:	4619      	mov	r1, r3
 80036fc:	f7ff f83a 	bl	8002774 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003708:	4618      	mov	r0, r3
 800370a:	f7fe ffce 	bl	80026aa <LL_ADC_SetSamplingTimeCommonConfig>
 800370e:	e00e      	b.n	800372e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	6819      	ldr	r1, [r3, #0]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	461a      	mov	r2, r3
 800371e:	f7ff f829 	bl	8002774 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2100      	movs	r1, #0
 8003728:	4618      	mov	r0, r3
 800372a:	f7fe ffbe 	bl	80026aa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	08db      	lsrs	r3, r3, #3
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	2b04      	cmp	r3, #4
 800374e:	d00a      	beq.n	8003766 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6919      	ldr	r1, [r3, #16]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003760:	f7fe ff4e 	bl	8002600 <LL_ADC_SetOffset>
 8003764:	e17b      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2100      	movs	r1, #0
 800376c:	4618      	mov	r0, r3
 800376e:	f7fe ff6b 	bl	8002648 <LL_ADC_GetOffsetChannel>
 8003772:	4603      	mov	r3, r0
 8003774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10a      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x17e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2100      	movs	r1, #0
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe ff60 	bl	8002648 <LL_ADC_GetOffsetChannel>
 8003788:	4603      	mov	r3, r0
 800378a:	0e9b      	lsrs	r3, r3, #26
 800378c:	f003 021f 	and.w	r2, r3, #31
 8003790:	e01e      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x1bc>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f7fe ff55 	bl	8002648 <LL_ADC_GetOffsetChannel>
 800379e:	4603      	mov	r3, r0
 80037a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80037b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80037b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80037c0:	2320      	movs	r3, #32
 80037c2:	e004      	b.n	80037ce <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80037c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d105      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x1d4>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	0e9b      	lsrs	r3, r3, #26
 80037e2:	f003 031f 	and.w	r3, r3, #31
 80037e6:	e018      	b.n	800381a <HAL_ADC_ConfigChannel+0x206>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80037fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003804:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800380c:	2320      	movs	r3, #32
 800380e:	e004      	b.n	800381a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003810:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800381a:	429a      	cmp	r2, r3
 800381c:	d106      	bne.n	800382c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2200      	movs	r2, #0
 8003824:	2100      	movs	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe ff24 	bl	8002674 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2101      	movs	r1, #1
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe ff08 	bl	8002648 <LL_ADC_GetOffsetChannel>
 8003838:	4603      	mov	r3, r0
 800383a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x244>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2101      	movs	r1, #1
 8003848:	4618      	mov	r0, r3
 800384a:	f7fe fefd 	bl	8002648 <LL_ADC_GetOffsetChannel>
 800384e:	4603      	mov	r3, r0
 8003850:	0e9b      	lsrs	r3, r3, #26
 8003852:	f003 021f 	and.w	r2, r3, #31
 8003856:	e01e      	b.n	8003896 <HAL_ADC_ConfigChannel+0x282>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2101      	movs	r1, #1
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe fef2 	bl	8002648 <LL_ADC_GetOffsetChannel>
 8003864:	4603      	mov	r3, r0
 8003866:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800387a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800387e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003886:	2320      	movs	r3, #32
 8003888:	e004      	b.n	8003894 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800388a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800388e:	fab3 f383 	clz	r3, r3
 8003892:	b2db      	uxtb	r3, r3
 8003894:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d105      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x29a>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	0e9b      	lsrs	r3, r3, #26
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	e018      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x2cc>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038ba:	fa93 f3a3 	rbit	r3, r3
 80038be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80038c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80038c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80038ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80038d2:	2320      	movs	r3, #32
 80038d4:	e004      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80038d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038da:	fab3 f383 	clz	r3, r3
 80038de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d106      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2200      	movs	r2, #0
 80038ea:	2101      	movs	r1, #1
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fe fec1 	bl	8002674 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2102      	movs	r1, #2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe fea5 	bl	8002648 <LL_ADC_GetOffsetChannel>
 80038fe:	4603      	mov	r3, r0
 8003900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <HAL_ADC_ConfigChannel+0x30a>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2102      	movs	r1, #2
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe fe9a 	bl	8002648 <LL_ADC_GetOffsetChannel>
 8003914:	4603      	mov	r3, r0
 8003916:	0e9b      	lsrs	r3, r3, #26
 8003918:	f003 021f 	and.w	r2, r3, #31
 800391c:	e01e      	b.n	800395c <HAL_ADC_ConfigChannel+0x348>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2102      	movs	r1, #2
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe fe8f 	bl	8002648 <LL_ADC_GetOffsetChannel>
 800392a:	4603      	mov	r3, r0
 800392c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003930:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003934:	fa93 f3a3 	rbit	r3, r3
 8003938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800393c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003940:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003944:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800394c:	2320      	movs	r3, #32
 800394e:	e004      	b.n	800395a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003950:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003954:	fab3 f383 	clz	r3, r3
 8003958:	b2db      	uxtb	r3, r3
 800395a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003964:	2b00      	cmp	r3, #0
 8003966:	d105      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x360>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	0e9b      	lsrs	r3, r3, #26
 800396e:	f003 031f 	and.w	r3, r3, #31
 8003972:	e016      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x38e>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003980:	fa93 f3a3 	rbit	r3, r3
 8003984:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003986:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800398c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003994:	2320      	movs	r3, #32
 8003996:	e004      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003998:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800399c:	fab3 f383 	clz	r3, r3
 80039a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d106      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2200      	movs	r2, #0
 80039ac:	2102      	movs	r1, #2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe fe60 	bl	8002674 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2103      	movs	r1, #3
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe fe44 	bl	8002648 <LL_ADC_GetOffsetChannel>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10a      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x3cc>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2103      	movs	r1, #3
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fe fe39 	bl	8002648 <LL_ADC_GetOffsetChannel>
 80039d6:	4603      	mov	r3, r0
 80039d8:	0e9b      	lsrs	r3, r3, #26
 80039da:	f003 021f 	and.w	r2, r3, #31
 80039de:	e017      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x3fc>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2103      	movs	r1, #3
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe fe2e 	bl	8002648 <LL_ADC_GetOffsetChannel>
 80039ec:	4603      	mov	r3, r0
 80039ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80039f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039fa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80039fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003a02:	2320      	movs	r3, #32
 8003a04:	e003      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003a06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a08:	fab3 f383 	clz	r3, r3
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d105      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x414>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	0e9b      	lsrs	r3, r3, #26
 8003a22:	f003 031f 	and.w	r3, r3, #31
 8003a26:	e011      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x438>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a30:	fa93 f3a3 	rbit	r3, r3
 8003a34:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003a36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a38:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003a40:	2320      	movs	r3, #32
 8003a42:	e003      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a46:	fab3 f383 	clz	r3, r3
 8003a4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d106      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2200      	movs	r2, #0
 8003a56:	2103      	movs	r1, #3
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fe fe0b 	bl	8002674 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe ff68 	bl	8002938 <LL_ADC_IsEnabled>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f040 8140 	bne.w	8003cf0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	6819      	ldr	r1, [r3, #0]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f7fe fea5 	bl	80027cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	4a8f      	ldr	r2, [pc, #572]	; (8003cc4 <HAL_ADC_ConfigChannel+0x6b0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	f040 8131 	bne.w	8003cf0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10b      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x4a2>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	0e9b      	lsrs	r3, r3, #26
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	f003 031f 	and.w	r3, r3, #31
 8003aaa:	2b09      	cmp	r3, #9
 8003aac:	bf94      	ite	ls
 8003aae:	2301      	movls	r3, #1
 8003ab0:	2300      	movhi	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	e019      	b.n	8003aea <HAL_ADC_ConfigChannel+0x4d6>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003abe:	fa93 f3a3 	rbit	r3, r3
 8003ac2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003ac4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ac6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003ac8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003ace:	2320      	movs	r3, #32
 8003ad0:	e003      	b.n	8003ada <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ad4:	fab3 f383 	clz	r3, r3
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	3301      	adds	r3, #1
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	2b09      	cmp	r3, #9
 8003ae2:	bf94      	ite	ls
 8003ae4:	2301      	movls	r3, #1
 8003ae6:	2300      	movhi	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d079      	beq.n	8003be2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d107      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x4f6>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	0e9b      	lsrs	r3, r3, #26
 8003b00:	3301      	adds	r3, #1
 8003b02:	069b      	lsls	r3, r3, #26
 8003b04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b08:	e015      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x522>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b12:	fa93 f3a3 	rbit	r3, r3
 8003b16:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b1a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003b22:	2320      	movs	r3, #32
 8003b24:	e003      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b28:	fab3 f383 	clz	r3, r3
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	3301      	adds	r3, #1
 8003b30:	069b      	lsls	r3, r3, #26
 8003b32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d109      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x542>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	0e9b      	lsrs	r3, r3, #26
 8003b48:	3301      	adds	r3, #1
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	2101      	movs	r1, #1
 8003b50:	fa01 f303 	lsl.w	r3, r1, r3
 8003b54:	e017      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x572>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b5e:	fa93 f3a3 	rbit	r3, r3
 8003b62:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b66:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003b6e:	2320      	movs	r3, #32
 8003b70:	e003      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b74:	fab3 f383 	clz	r3, r3
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	2101      	movs	r1, #1
 8003b82:	fa01 f303 	lsl.w	r3, r1, r3
 8003b86:	ea42 0103 	orr.w	r1, r2, r3
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10a      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x598>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	0e9b      	lsrs	r3, r3, #26
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	f003 021f 	and.w	r2, r3, #31
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	4413      	add	r3, r2
 8003ba8:	051b      	lsls	r3, r3, #20
 8003baa:	e018      	b.n	8003bde <HAL_ADC_ConfigChannel+0x5ca>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb4:	fa93 f3a3 	rbit	r3, r3
 8003bb8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003bc4:	2320      	movs	r3, #32
 8003bc6:	e003      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bca:	fab3 f383 	clz	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	f003 021f 	and.w	r2, r3, #31
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	4413      	add	r3, r2
 8003bdc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bde:	430b      	orrs	r3, r1
 8003be0:	e081      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d107      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x5ea>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	0e9b      	lsrs	r3, r3, #26
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	069b      	lsls	r3, r3, #26
 8003bf8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bfc:	e015      	b.n	8003c2a <HAL_ADC_ConfigChannel+0x616>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003c16:	2320      	movs	r3, #32
 8003c18:	e003      	b.n	8003c22 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	fab3 f383 	clz	r3, r3
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	3301      	adds	r3, #1
 8003c24:	069b      	lsls	r3, r3, #26
 8003c26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d109      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x636>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	0e9b      	lsrs	r3, r3, #26
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	2101      	movs	r1, #1
 8003c44:	fa01 f303 	lsl.w	r3, r1, r3
 8003c48:	e017      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x666>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	fa93 f3a3 	rbit	r3, r3
 8003c56:	61fb      	str	r3, [r7, #28]
  return result;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003c62:	2320      	movs	r3, #32
 8003c64:	e003      	b.n	8003c6e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	fab3 f383 	clz	r3, r3
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	f003 031f 	and.w	r3, r3, #31
 8003c74:	2101      	movs	r1, #1
 8003c76:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7a:	ea42 0103 	orr.w	r1, r2, r3
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10d      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x692>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	0e9b      	lsrs	r3, r3, #26
 8003c90:	3301      	adds	r3, #1
 8003c92:	f003 021f 	and.w	r2, r3, #31
 8003c96:	4613      	mov	r3, r2
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3b1e      	subs	r3, #30
 8003c9e:	051b      	lsls	r3, r3, #20
 8003ca0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ca4:	e01e      	b.n	8003ce4 <HAL_ADC_ConfigChannel+0x6d0>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	613b      	str	r3, [r7, #16]
  return result;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d104      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003cbe:	2320      	movs	r3, #32
 8003cc0:	e006      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x6bc>
 8003cc2:	bf00      	nop
 8003cc4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	fab3 f383 	clz	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	f003 021f 	and.w	r2, r3, #31
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	4413      	add	r3, r2
 8003cdc:	3b1e      	subs	r3, #30
 8003cde:	051b      	lsls	r3, r3, #20
 8003ce0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	6892      	ldr	r2, [r2, #8]
 8003cea:	4619      	mov	r1, r3
 8003cec:	f7fe fd42 	bl	8002774 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	4b3d      	ldr	r3, [pc, #244]	; (8003dec <HAL_ADC_ConfigChannel+0x7d8>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d06c      	beq.n	8003dd6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cfc:	483c      	ldr	r0, [pc, #240]	; (8003df0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003cfe:	f7fe fc71 	bl	80025e4 <LL_ADC_GetCommonPathInternalCh>
 8003d02:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a3a      	ldr	r2, [pc, #232]	; (8003df4 <HAL_ADC_ConfigChannel+0x7e0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d127      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d121      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a35      	ldr	r2, [pc, #212]	; (8003df8 <HAL_ADC_ConfigChannel+0x7e4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d157      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d2e:	4619      	mov	r1, r3
 8003d30:	482f      	ldr	r0, [pc, #188]	; (8003df0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003d32:	f7fe fc44 	bl	80025be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d36:	4b31      	ldr	r3, [pc, #196]	; (8003dfc <HAL_ADC_ConfigChannel+0x7e8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	099b      	lsrs	r3, r3, #6
 8003d3c:	4a30      	ldr	r2, [pc, #192]	; (8003e00 <HAL_ADC_ConfigChannel+0x7ec>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	099b      	lsrs	r3, r3, #6
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	4613      	mov	r3, r2
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	4413      	add	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d50:	e002      	b.n	8003d58 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f9      	bne.n	8003d52 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d5e:	e03a      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a27      	ldr	r2, [pc, #156]	; (8003e04 <HAL_ADC_ConfigChannel+0x7f0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d113      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x77e>
 8003d6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10d      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1f      	ldr	r2, [pc, #124]	; (8003df8 <HAL_ADC_ConfigChannel+0x7e4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d12a      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4819      	ldr	r0, [pc, #100]	; (8003df0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003d8c:	f7fe fc17 	bl	80025be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d90:	e021      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a1c      	ldr	r2, [pc, #112]	; (8003e08 <HAL_ADC_ConfigChannel+0x7f4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d11c      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d116      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a12      	ldr	r2, [pc, #72]	; (8003df8 <HAL_ADC_ConfigChannel+0x7e4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d111      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003db2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003db6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dba:	4619      	mov	r1, r3
 8003dbc:	480c      	ldr	r0, [pc, #48]	; (8003df0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003dbe:	f7fe fbfe 	bl	80025be <LL_ADC_SetCommonPathInternalCh>
 8003dc2:	e008      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	f043 0220 	orr.w	r2, r3, #32
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003dde:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	37d8      	adds	r7, #216	; 0xd8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	80080000 	.word	0x80080000
 8003df0:	50040300 	.word	0x50040300
 8003df4:	c7520000 	.word	0xc7520000
 8003df8:	50040000 	.word	0x50040000
 8003dfc:	20000008 	.word	0x20000008
 8003e00:	053e2d63 	.word	0x053e2d63
 8003e04:	cb840000 	.word	0xcb840000
 8003e08:	80000001 	.word	0x80000001

08003e0c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe fdd6 	bl	80029d4 <LL_ADC_REG_IsConversionOngoing>
 8003e28:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe fdf7 	bl	8002a22 <LL_ADC_INJ_IsConversionOngoing>
 8003e34:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d103      	bne.n	8003e44 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 8098 	beq.w	8003f74 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d02a      	beq.n	8003ea8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	7e5b      	ldrb	r3, [r3, #25]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d126      	bne.n	8003ea8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	7e1b      	ldrb	r3, [r3, #24]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d122      	bne.n	8003ea8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003e62:	2301      	movs	r3, #1
 8003e64:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003e66:	e014      	b.n	8003e92 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	4a45      	ldr	r2, [pc, #276]	; (8003f80 <ADC_ConversionStop+0x174>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d90d      	bls.n	8003e8c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	f043 0210 	orr.w	r2, r3, #16
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e80:	f043 0201 	orr.w	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e074      	b.n	8003f76 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9c:	2b40      	cmp	r3, #64	; 0x40
 8003e9e:	d1e3      	bne.n	8003e68 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2240      	movs	r2, #64	; 0x40
 8003ea6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d014      	beq.n	8003ed8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe fd8e 	bl	80029d4 <LL_ADC_REG_IsConversionOngoing>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00c      	beq.n	8003ed8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe fd4b 	bl	800295e <LL_ADC_IsDisableOngoing>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d104      	bne.n	8003ed8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe fd6a 	bl	80029ac <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d014      	beq.n	8003f08 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe fd9d 	bl	8002a22 <LL_ADC_INJ_IsConversionOngoing>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00c      	beq.n	8003f08 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fd33 	bl	800295e <LL_ADC_IsDisableOngoing>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d104      	bne.n	8003f08 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe fd79 	bl	80029fa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d005      	beq.n	8003f1a <ADC_ConversionStop+0x10e>
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d105      	bne.n	8003f20 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003f14:	230c      	movs	r3, #12
 8003f16:	617b      	str	r3, [r7, #20]
        break;
 8003f18:	e005      	b.n	8003f26 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	617b      	str	r3, [r7, #20]
        break;
 8003f1e:	e002      	b.n	8003f26 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003f20:	2304      	movs	r3, #4
 8003f22:	617b      	str	r3, [r7, #20]
        break;
 8003f24:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003f26:	f7fe fb07 	bl	8002538 <HAL_GetTick>
 8003f2a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003f2c:	e01b      	b.n	8003f66 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003f2e:	f7fe fb03 	bl	8002538 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b05      	cmp	r3, #5
 8003f3a:	d914      	bls.n	8003f66 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00d      	beq.n	8003f66 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4e:	f043 0210 	orr.w	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5a:	f043 0201 	orr.w	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e007      	b.n	8003f76 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1dc      	bne.n	8003f2e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3720      	adds	r7, #32
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	a33fffff 	.word	0xa33fffff

08003f84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe fcd1 	bl	8002938 <LL_ADC_IsEnabled>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d14d      	bne.n	8004038 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	4b28      	ldr	r3, [pc, #160]	; (8004044 <ADC_Enable+0xc0>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00d      	beq.n	8003fc6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	f043 0210 	orr.w	r2, r3, #16
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fba:	f043 0201 	orr.w	r2, r3, #1
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e039      	b.n	800403a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe fc8c 	bl	80028e8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003fd0:	f7fe fab2 	bl	8002538 <HAL_GetTick>
 8003fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fd6:	e028      	b.n	800402a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fe fcab 	bl	8002938 <LL_ADC_IsEnabled>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d104      	bne.n	8003ff2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fe fc7b 	bl	80028e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ff2:	f7fe faa1 	bl	8002538 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d914      	bls.n	800402a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b01      	cmp	r3, #1
 800400c:	d00d      	beq.n	800402a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004012:	f043 0210 	orr.w	r2, r3, #16
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401e:	f043 0201 	orr.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e007      	b.n	800403a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b01      	cmp	r3, #1
 8004036:	d1cf      	bne.n	8003fd8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	8000003f 	.word	0x8000003f

08004048 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7fe fc82 	bl	800295e <LL_ADC_IsDisableOngoing>
 800405a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f7fe fc69 	bl	8002938 <LL_ADC_IsEnabled>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d047      	beq.n	80040fc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d144      	bne.n	80040fc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 030d 	and.w	r3, r3, #13
 800407c:	2b01      	cmp	r3, #1
 800407e:	d10c      	bne.n	800409a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f7fe fc43 	bl	8002910 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2203      	movs	r2, #3
 8004090:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004092:	f7fe fa51 	bl	8002538 <HAL_GetTick>
 8004096:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004098:	e029      	b.n	80040ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	f043 0210 	orr.w	r2, r3, #16
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	f043 0201 	orr.w	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e023      	b.n	80040fe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040b6:	f7fe fa3f 	bl	8002538 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d914      	bls.n	80040ee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00d      	beq.n	80040ee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d6:	f043 0210 	orr.w	r2, r3, #16
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e2:	f043 0201 	orr.w	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e007      	b.n	80040fe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1dc      	bne.n	80040b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004118:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800411c:	2b00      	cmp	r3, #0
 800411e:	d14b      	bne.n	80041b8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004124:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d021      	beq.n	800417e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7fe fac6 	bl	80026d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d032      	beq.n	80041b0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d12b      	bne.n	80041b0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d11f      	bne.n	80041b0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004174:	f043 0201 	orr.w	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	655a      	str	r2, [r3, #84]	; 0x54
 800417c:	e018      	b.n	80041b0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d111      	bne.n	80041b0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004190:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d105      	bne.n	80041b0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a8:	f043 0201 	orr.w	r2, r3, #1
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f7ff fa07 	bl	80035c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041b6:	e00e      	b.n	80041d6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f7ff fa1b 	bl	8003600 <HAL_ADC_ErrorCallback>
}
 80041ca:	e004      	b.n	80041d6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	4798      	blx	r3
}
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f7ff f9f3 	bl	80035d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004218:	f043 0204 	orr.w	r2, r3, #4
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7ff f9ed 	bl	8003600 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004226:	bf00      	nop
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <LL_ADC_IsEnabled>:
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <LL_ADC_IsEnabled+0x18>
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <LL_ADC_IsEnabled+0x1a>
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <LL_ADC_StartCalibration>:
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004266:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004270:	4313      	orrs	r3, r2
 8004272:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	609a      	str	r2, [r3, #8]
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <LL_ADC_IsCalibrationOnGoing>:
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800429a:	d101      	bne.n	80042a0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <LL_ADC_REG_IsConversionOngoing>:
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d101      	bne.n	80042c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80042de:	2300      	movs	r3, #0
 80042e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_ADCEx_Calibration_Start+0x1c>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e04d      	b.n	800438c <HAL_ADCEx_Calibration_Start+0xb8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff fea5 	bl	8004048 <ADC_Disable>
 80042fe:	4603      	mov	r3, r0
 8004300:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d136      	bne.n	8004376 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004310:	f023 0302 	bic.w	r3, r3, #2
 8004314:	f043 0202 	orr.w	r2, r3, #2
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6839      	ldr	r1, [r7, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff ff96 	bl	8004254 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004328:	e014      	b.n	8004354 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	3301      	adds	r3, #1
 800432e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8004336:	d30d      	bcc.n	8004354 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433c:	f023 0312 	bic.w	r3, r3, #18
 8004340:	f043 0210 	orr.w	r2, r3, #16
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e01b      	b.n	800438c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff ff94 	bl	8004286 <LL_ADC_IsCalibrationOnGoing>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e2      	bne.n	800432a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004368:	f023 0303 	bic.w	r3, r3, #3
 800436c:	f043 0201 	orr.w	r2, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	655a      	str	r2, [r3, #84]	; 0x54
 8004374:	e005      	b.n	8004382 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437a:	f043 0210 	orr.w	r2, r3, #16
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800438a:	7bfb      	ldrb	r3, [r7, #15]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80043f8:	b590      	push	{r4, r7, lr}
 80043fa:	b09f      	sub	sp, #124	; 0x7c
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004412:	2302      	movs	r3, #2
 8004414:	e089      	b.n	800452a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800441e:	2300      	movs	r3, #0
 8004420:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004422:	2300      	movs	r3, #0
 8004424:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a42      	ldr	r2, [pc, #264]	; (8004534 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d102      	bne.n	8004436 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004430:	4b41      	ldr	r3, [pc, #260]	; (8004538 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	e001      	b.n	800443a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004436:	2300      	movs	r3, #0
 8004438:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10b      	bne.n	8004458 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004444:	f043 0220 	orr.w	r2, r3, #32
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e068      	b.n	800452a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff ff27 	bl	80042ae <LL_ADC_REG_IsConversionOngoing>
 8004460:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff ff21 	bl	80042ae <LL_ADC_REG_IsConversionOngoing>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d14a      	bne.n	8004508 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004474:	2b00      	cmp	r3, #0
 8004476:	d147      	bne.n	8004508 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004478:	4b30      	ldr	r3, [pc, #192]	; (800453c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800447a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d027      	beq.n	80044d4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	6859      	ldr	r1, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004496:	035b      	lsls	r3, r3, #13
 8004498:	430b      	orrs	r3, r1
 800449a:	431a      	orrs	r2, r3
 800449c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044a0:	4824      	ldr	r0, [pc, #144]	; (8004534 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80044a2:	f7ff fec4 	bl	800422e <LL_ADC_IsEnabled>
 80044a6:	4604      	mov	r4, r0
 80044a8:	4823      	ldr	r0, [pc, #140]	; (8004538 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80044aa:	f7ff fec0 	bl	800422e <LL_ADC_IsEnabled>
 80044ae:	4603      	mov	r3, r0
 80044b0:	4323      	orrs	r3, r4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d132      	bne.n	800451c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80044b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80044be:	f023 030f 	bic.w	r3, r3, #15
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	6811      	ldr	r1, [r2, #0]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	6892      	ldr	r2, [r2, #8]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	431a      	orrs	r2, r3
 80044ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044d2:	e023      	b.n	800451c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80044d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044de:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044e0:	4814      	ldr	r0, [pc, #80]	; (8004534 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80044e2:	f7ff fea4 	bl	800422e <LL_ADC_IsEnabled>
 80044e6:	4604      	mov	r4, r0
 80044e8:	4813      	ldr	r0, [pc, #76]	; (8004538 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80044ea:	f7ff fea0 	bl	800422e <LL_ADC_IsEnabled>
 80044ee:	4603      	mov	r3, r0
 80044f0:	4323      	orrs	r3, r4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d112      	bne.n	800451c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80044f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80044fe:	f023 030f 	bic.w	r3, r3, #15
 8004502:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004504:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004506:	e009      	b.n	800451c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450c:	f043 0220 	orr.w	r2, r3, #32
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800451a:	e000      	b.n	800451e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800451c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004526:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800452a:	4618      	mov	r0, r3
 800452c:	377c      	adds	r7, #124	; 0x7c
 800452e:	46bd      	mov	sp, r7
 8004530:	bd90      	pop	{r4, r7, pc}
 8004532:	bf00      	nop
 8004534:	50040000 	.word	0x50040000
 8004538:	50040100 	.word	0x50040100
 800453c:	50040300 	.word	0x50040300

08004540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <__NVIC_SetPriorityGrouping+0x44>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800455c:	4013      	ands	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800456c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004572:	4a04      	ldr	r2, [pc, #16]	; (8004584 <__NVIC_SetPriorityGrouping+0x44>)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	60d3      	str	r3, [r2, #12]
}
 8004578:	bf00      	nop
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	e000ed00 	.word	0xe000ed00

08004588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800458c:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <__NVIC_GetPriorityGrouping+0x18>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	0a1b      	lsrs	r3, r3, #8
 8004592:	f003 0307 	and.w	r3, r3, #7
}
 8004596:	4618      	mov	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	e000ed00 	.word	0xe000ed00

080045a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	4603      	mov	r3, r0
 80045ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	db0b      	blt.n	80045ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	f003 021f 	and.w	r2, r3, #31
 80045bc:	4907      	ldr	r1, [pc, #28]	; (80045dc <__NVIC_EnableIRQ+0x38>)
 80045be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	2001      	movs	r0, #1
 80045c6:	fa00 f202 	lsl.w	r2, r0, r2
 80045ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	e000e100 	.word	0xe000e100

080045e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	6039      	str	r1, [r7, #0]
 80045ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	db0a      	blt.n	800460a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	490c      	ldr	r1, [pc, #48]	; (800462c <__NVIC_SetPriority+0x4c>)
 80045fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fe:	0112      	lsls	r2, r2, #4
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	440b      	add	r3, r1
 8004604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004608:	e00a      	b.n	8004620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	4908      	ldr	r1, [pc, #32]	; (8004630 <__NVIC_SetPriority+0x50>)
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	3b04      	subs	r3, #4
 8004618:	0112      	lsls	r2, r2, #4
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	440b      	add	r3, r1
 800461e:	761a      	strb	r2, [r3, #24]
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	e000e100 	.word	0xe000e100
 8004630:	e000ed00 	.word	0xe000ed00

08004634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004634:	b480      	push	{r7}
 8004636:	b089      	sub	sp, #36	; 0x24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f1c3 0307 	rsb	r3, r3, #7
 800464e:	2b04      	cmp	r3, #4
 8004650:	bf28      	it	cs
 8004652:	2304      	movcs	r3, #4
 8004654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	3304      	adds	r3, #4
 800465a:	2b06      	cmp	r3, #6
 800465c:	d902      	bls.n	8004664 <NVIC_EncodePriority+0x30>
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	3b03      	subs	r3, #3
 8004662:	e000      	b.n	8004666 <NVIC_EncodePriority+0x32>
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	43da      	mvns	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	401a      	ands	r2, r3
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800467c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	fa01 f303 	lsl.w	r3, r1, r3
 8004686:	43d9      	mvns	r1, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800468c:	4313      	orrs	r3, r2
         );
}
 800468e:	4618      	mov	r0, r3
 8004690:	3724      	adds	r7, #36	; 0x24
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046ac:	d301      	bcc.n	80046b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046ae:	2301      	movs	r3, #1
 80046b0:	e00f      	b.n	80046d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046b2:	4a0a      	ldr	r2, [pc, #40]	; (80046dc <SysTick_Config+0x40>)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046ba:	210f      	movs	r1, #15
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046c0:	f7ff ff8e 	bl	80045e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <SysTick_Config+0x40>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046ca:	4b04      	ldr	r3, [pc, #16]	; (80046dc <SysTick_Config+0x40>)
 80046cc:	2207      	movs	r2, #7
 80046ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	e000e010 	.word	0xe000e010

080046e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff ff29 	bl	8004540 <__NVIC_SetPriorityGrouping>
}
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b086      	sub	sp, #24
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	4603      	mov	r3, r0
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
 8004702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004708:	f7ff ff3e 	bl	8004588 <__NVIC_GetPriorityGrouping>
 800470c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	6978      	ldr	r0, [r7, #20]
 8004714:	f7ff ff8e 	bl	8004634 <NVIC_EncodePriority>
 8004718:	4602      	mov	r2, r0
 800471a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800471e:	4611      	mov	r1, r2
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff ff5d 	bl	80045e0 <__NVIC_SetPriority>
}
 8004726:	bf00      	nop
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b082      	sub	sp, #8
 8004732:	af00      	add	r7, sp, #0
 8004734:	4603      	mov	r3, r0
 8004736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff ff31 	bl	80045a4 <__NVIC_EnableIRQ>
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff ffa2 	bl	800469c <SysTick_Config>
 8004758:	4603      	mov	r3, r0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e098      	b.n	80048a8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	4b4d      	ldr	r3, [pc, #308]	; (80048b4 <HAL_DMA_Init+0x150>)
 800477e:	429a      	cmp	r2, r3
 8004780:	d80f      	bhi.n	80047a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	4b4b      	ldr	r3, [pc, #300]	; (80048b8 <HAL_DMA_Init+0x154>)
 800478a:	4413      	add	r3, r2
 800478c:	4a4b      	ldr	r2, [pc, #300]	; (80048bc <HAL_DMA_Init+0x158>)
 800478e:	fba2 2303 	umull	r2, r3, r2, r3
 8004792:	091b      	lsrs	r3, r3, #4
 8004794:	009a      	lsls	r2, r3, #2
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a48      	ldr	r2, [pc, #288]	; (80048c0 <HAL_DMA_Init+0x15c>)
 800479e:	641a      	str	r2, [r3, #64]	; 0x40
 80047a0:	e00e      	b.n	80047c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	4b46      	ldr	r3, [pc, #280]	; (80048c4 <HAL_DMA_Init+0x160>)
 80047aa:	4413      	add	r3, r2
 80047ac:	4a43      	ldr	r2, [pc, #268]	; (80048bc <HAL_DMA_Init+0x158>)
 80047ae:	fba2 2303 	umull	r2, r3, r2, r3
 80047b2:	091b      	lsrs	r3, r3, #4
 80047b4:	009a      	lsls	r2, r3, #2
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a42      	ldr	r2, [pc, #264]	; (80048c8 <HAL_DMA_Init+0x164>)
 80047be:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80047e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800481a:	d039      	beq.n	8004890 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	4a27      	ldr	r2, [pc, #156]	; (80048c0 <HAL_DMA_Init+0x15c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d11a      	bne.n	800485c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004826:	4b29      	ldr	r3, [pc, #164]	; (80048cc <HAL_DMA_Init+0x168>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	f003 031c 	and.w	r3, r3, #28
 8004832:	210f      	movs	r1, #15
 8004834:	fa01 f303 	lsl.w	r3, r1, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	4924      	ldr	r1, [pc, #144]	; (80048cc <HAL_DMA_Init+0x168>)
 800483c:	4013      	ands	r3, r2
 800483e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004840:	4b22      	ldr	r3, [pc, #136]	; (80048cc <HAL_DMA_Init+0x168>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6859      	ldr	r1, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484c:	f003 031c 	and.w	r3, r3, #28
 8004850:	fa01 f303 	lsl.w	r3, r1, r3
 8004854:	491d      	ldr	r1, [pc, #116]	; (80048cc <HAL_DMA_Init+0x168>)
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]
 800485a:	e019      	b.n	8004890 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800485c:	4b1c      	ldr	r3, [pc, #112]	; (80048d0 <HAL_DMA_Init+0x16c>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004864:	f003 031c 	and.w	r3, r3, #28
 8004868:	210f      	movs	r1, #15
 800486a:	fa01 f303 	lsl.w	r3, r1, r3
 800486e:	43db      	mvns	r3, r3
 8004870:	4917      	ldr	r1, [pc, #92]	; (80048d0 <HAL_DMA_Init+0x16c>)
 8004872:	4013      	ands	r3, r2
 8004874:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004876:	4b16      	ldr	r3, [pc, #88]	; (80048d0 <HAL_DMA_Init+0x16c>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6859      	ldr	r1, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	f003 031c 	and.w	r3, r3, #28
 8004886:	fa01 f303 	lsl.w	r3, r1, r3
 800488a:	4911      	ldr	r1, [pc, #68]	; (80048d0 <HAL_DMA_Init+0x16c>)
 800488c:	4313      	orrs	r3, r2
 800488e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	40020407 	.word	0x40020407
 80048b8:	bffdfff8 	.word	0xbffdfff8
 80048bc:	cccccccd 	.word	0xcccccccd
 80048c0:	40020000 	.word	0x40020000
 80048c4:	bffdfbf8 	.word	0xbffdfbf8
 80048c8:	40020400 	.word	0x40020400
 80048cc:	400200a8 	.word	0x400200a8
 80048d0:	400204a8 	.word	0x400204a8

080048d4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e072      	b.n	80049cc <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0201 	bic.w	r2, r2, #1
 80048f4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <HAL_DMA_DeInit+0x104>)
 80048fe:	429a      	cmp	r2, r3
 8004900:	d80f      	bhi.n	8004922 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	4b34      	ldr	r3, [pc, #208]	; (80049dc <HAL_DMA_DeInit+0x108>)
 800490a:	4413      	add	r3, r2
 800490c:	4a34      	ldr	r2, [pc, #208]	; (80049e0 <HAL_DMA_DeInit+0x10c>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	091b      	lsrs	r3, r3, #4
 8004914:	009a      	lsls	r2, r3, #2
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a31      	ldr	r2, [pc, #196]	; (80049e4 <HAL_DMA_DeInit+0x110>)
 800491e:	641a      	str	r2, [r3, #64]	; 0x40
 8004920:	e00e      	b.n	8004940 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	4b2f      	ldr	r3, [pc, #188]	; (80049e8 <HAL_DMA_DeInit+0x114>)
 800492a:	4413      	add	r3, r2
 800492c:	4a2c      	ldr	r2, [pc, #176]	; (80049e0 <HAL_DMA_DeInit+0x10c>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	091b      	lsrs	r3, r3, #4
 8004934:	009a      	lsls	r2, r3, #2
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a2b      	ldr	r2, [pc, #172]	; (80049ec <HAL_DMA_DeInit+0x118>)
 800493e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494c:	f003 021c 	and.w	r2, r3, #28
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	2101      	movs	r1, #1
 8004956:	fa01 f202 	lsl.w	r2, r1, r2
 800495a:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <HAL_DMA_DeInit+0x110>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d10d      	bne.n	8004982 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004966:	4b22      	ldr	r3, [pc, #136]	; (80049f0 <HAL_DMA_DeInit+0x11c>)
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496e:	f003 031c 	and.w	r3, r3, #28
 8004972:	210f      	movs	r1, #15
 8004974:	fa01 f303 	lsl.w	r3, r1, r3
 8004978:	43db      	mvns	r3, r3
 800497a:	491d      	ldr	r1, [pc, #116]	; (80049f0 <HAL_DMA_DeInit+0x11c>)
 800497c:	4013      	ands	r3, r2
 800497e:	600b      	str	r3, [r1, #0]
 8004980:	e00c      	b.n	800499c <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004982:	4b1c      	ldr	r3, [pc, #112]	; (80049f4 <HAL_DMA_DeInit+0x120>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498a:	f003 031c 	and.w	r3, r3, #28
 800498e:	210f      	movs	r1, #15
 8004990:	fa01 f303 	lsl.w	r3, r1, r3
 8004994:	43db      	mvns	r3, r3
 8004996:	4917      	ldr	r1, [pc, #92]	; (80049f4 <HAL_DMA_DeInit+0x120>)
 8004998:	4013      	ands	r3, r2
 800499a:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	40020407 	.word	0x40020407
 80049dc:	bffdfff8 	.word	0xbffdfff8
 80049e0:	cccccccd 	.word	0xcccccccd
 80049e4:	40020000 	.word	0x40020000
 80049e8:	bffdfbf8 	.word	0xbffdfbf8
 80049ec:	40020400 	.word	0x40020400
 80049f0:	400200a8 	.word	0x400200a8
 80049f4:	400204a8 	.word	0x400204a8

080049f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_DMA_Start_IT+0x20>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e04b      	b.n	8004ab0 <HAL_DMA_Start_IT+0xb8>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d13a      	bne.n	8004aa2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0201 	bic.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f91e 	bl	8004c92 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d008      	beq.n	8004a70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 020e 	orr.w	r2, r2, #14
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	e00f      	b.n	8004a90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0204 	bic.w	r2, r2, #4
 8004a7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 020a 	orr.w	r2, r2, #10
 8004a8e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	e005      	b.n	8004aae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004aaa:	2302      	movs	r3, #2
 8004aac:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d008      	beq.n	8004ae2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2204      	movs	r2, #4
 8004ad4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e022      	b.n	8004b28 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 020e 	bic.w	r2, r2, #14
 8004af0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0201 	bic.w	r2, r2, #1
 8004b00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	f003 021c 	and.w	r2, r3, #28
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	2101      	movs	r1, #1
 8004b10:	fa01 f202 	lsl.w	r2, r1, r2
 8004b14:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b50:	f003 031c 	and.w	r3, r3, #28
 8004b54:	2204      	movs	r2, #4
 8004b56:	409a      	lsls	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d026      	beq.n	8004bae <HAL_DMA_IRQHandler+0x7a>
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d021      	beq.n	8004bae <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d107      	bne.n	8004b88 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0204 	bic.w	r2, r2, #4
 8004b86:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8c:	f003 021c 	and.w	r2, r3, #28
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	2104      	movs	r1, #4
 8004b96:	fa01 f202 	lsl.w	r2, r1, r2
 8004b9a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d071      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004bac:	e06c      	b.n	8004c88 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	f003 031c 	and.w	r3, r3, #28
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	409a      	lsls	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d02e      	beq.n	8004c20 <HAL_DMA_IRQHandler+0xec>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d029      	beq.n	8004c20 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 020a 	bic.w	r2, r2, #10
 8004be8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	f003 021c 	and.w	r2, r3, #28
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	2102      	movs	r1, #2
 8004c00:	fa01 f202 	lsl.w	r2, r1, r2
 8004c04:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d038      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004c1e:	e033      	b.n	8004c88 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c24:	f003 031c 	and.w	r3, r3, #28
 8004c28:	2208      	movs	r2, #8
 8004c2a:	409a      	lsls	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d02a      	beq.n	8004c8a <HAL_DMA_IRQHandler+0x156>
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d025      	beq.n	8004c8a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 020e 	bic.w	r2, r2, #14
 8004c4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	f003 021c 	and.w	r2, r3, #28
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c60:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d004      	beq.n	8004c8a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
}
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b085      	sub	sp, #20
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	607a      	str	r2, [r7, #4]
 8004c9e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca4:	f003 021c 	and.w	r2, r3, #28
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	2101      	movs	r1, #1
 8004cae:	fa01 f202 	lsl.w	r2, r1, r2
 8004cb2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b10      	cmp	r3, #16
 8004cc2:	d108      	bne.n	8004cd6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004cd4:	e007      	b.n	8004ce6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	60da      	str	r2, [r3, #12]
}
 8004ce6:	bf00      	nop
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004d06:	4b2f      	ldr	r3, [pc, #188]	; (8004dc4 <HAL_FLASH_Program+0xd0>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_FLASH_Program+0x1e>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e053      	b.n	8004dba <HAL_FLASH_Program+0xc6>
 8004d12:	4b2c      	ldr	r3, [pc, #176]	; (8004dc4 <HAL_FLASH_Program+0xd0>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d1c:	f000 f888 	bl	8004e30 <FLASH_WaitForLastOperation>
 8004d20:	4603      	mov	r3, r0
 8004d22:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8004d24:	7dfb      	ldrb	r3, [r7, #23]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d143      	bne.n	8004db2 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d2a:	4b26      	ldr	r3, [pc, #152]	; (8004dc4 <HAL_FLASH_Program+0xd0>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004d30:	4b25      	ldr	r3, [pc, #148]	; (8004dc8 <HAL_FLASH_Program+0xd4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d009      	beq.n	8004d50 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004d3c:	4b22      	ldr	r3, [pc, #136]	; (8004dc8 <HAL_FLASH_Program+0xd4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a21      	ldr	r2, [pc, #132]	; (8004dc8 <HAL_FLASH_Program+0xd4>)
 8004d42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d46:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004d48:	4b1e      	ldr	r3, [pc, #120]	; (8004dc4 <HAL_FLASH_Program+0xd0>)
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	771a      	strb	r2, [r3, #28]
 8004d4e:	e002      	b.n	8004d56 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004d50:	4b1c      	ldr	r3, [pc, #112]	; (8004dc4 <HAL_FLASH_Program+0xd0>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d107      	bne.n	8004d6c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d60:	68b8      	ldr	r0, [r7, #8]
 8004d62:	f000 f8bd 	bl	8004ee0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8004d66:	2301      	movs	r3, #1
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	e010      	b.n	8004d8e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d002      	beq.n	8004d78 <HAL_FLASH_Program+0x84>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d10a      	bne.n	8004d8e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	68b8      	ldr	r0, [r7, #8]
 8004d7e:	f000 f8d5 	bl	8004f2c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d102      	bne.n	8004d8e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8004d88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d8c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d8e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d92:	f000 f84d 	bl	8004e30 <FLASH_WaitForLastOperation>
 8004d96:	4603      	mov	r3, r0
 8004d98:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d006      	beq.n	8004dae <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8004da0:	4b09      	ldr	r3, [pc, #36]	; (8004dc8 <HAL_FLASH_Program+0xd4>)
 8004da2:	695a      	ldr	r2, [r3, #20]
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	43db      	mvns	r3, r3
 8004da8:	4907      	ldr	r1, [pc, #28]	; (8004dc8 <HAL_FLASH_Program+0xd4>)
 8004daa:	4013      	ands	r3, r2
 8004dac:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004dae:	f000 f9d3 	bl	8005158 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004db2:	4b04      	ldr	r3, [pc, #16]	; (8004dc4 <HAL_FLASH_Program+0xd0>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	701a      	strb	r2, [r3, #0]

  return status;
 8004db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000014 	.word	0x20000014
 8004dc8:	40022000 	.word	0x40022000

08004dcc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <HAL_FLASH_Unlock+0x38>)
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	da0b      	bge.n	8004df6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004dde:	4b09      	ldr	r3, [pc, #36]	; (8004e04 <HAL_FLASH_Unlock+0x38>)
 8004de0:	4a09      	ldr	r2, [pc, #36]	; (8004e08 <HAL_FLASH_Unlock+0x3c>)
 8004de2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004de4:	4b07      	ldr	r3, [pc, #28]	; (8004e04 <HAL_FLASH_Unlock+0x38>)
 8004de6:	4a09      	ldr	r2, [pc, #36]	; (8004e0c <HAL_FLASH_Unlock+0x40>)
 8004de8:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004dea:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <HAL_FLASH_Unlock+0x38>)
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	da01      	bge.n	8004df6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004df6:	79fb      	ldrb	r3, [r7, #7]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	40022000 	.word	0x40022000
 8004e08:	45670123 	.word	0x45670123
 8004e0c:	cdef89ab 	.word	0xcdef89ab

08004e10 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004e14:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <HAL_FLASH_Lock+0x1c>)
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <HAL_FLASH_Lock+0x1c>)
 8004e1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e1e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	40022000 	.word	0x40022000

08004e30 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8004e38:	f7fd fb7e 	bl	8002538 <HAL_GetTick>
 8004e3c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004e3e:	e00d      	b.n	8004e5c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e46:	d009      	beq.n	8004e5c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8004e48:	f7fd fb76 	bl	8002538 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d801      	bhi.n	8004e5c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e036      	b.n	8004eca <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004e5c:	4b1d      	ldr	r3, [pc, #116]	; (8004ed4 <FLASH_WaitForLastOperation+0xa4>)
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1eb      	bne.n	8004e40 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8004e68:	4b1a      	ldr	r3, [pc, #104]	; (8004ed4 <FLASH_WaitForLastOperation+0xa4>)
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	4b1a      	ldr	r3, [pc, #104]	; (8004ed8 <FLASH_WaitForLastOperation+0xa8>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01e      	beq.n	8004eb6 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8004e78:	4b18      	ldr	r3, [pc, #96]	; (8004edc <FLASH_WaitForLastOperation+0xac>)
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	4a16      	ldr	r2, [pc, #88]	; (8004edc <FLASH_WaitForLastOperation+0xac>)
 8004e82:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <FLASH_WaitForLastOperation+0x6e>
 8004e8e:	4b11      	ldr	r3, [pc, #68]	; (8004ed4 <FLASH_WaitForLastOperation+0xa4>)
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004e98:	490e      	ldr	r1, [pc, #56]	; (8004ed4 <FLASH_WaitForLastOperation+0xa4>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	618b      	str	r3, [r1, #24]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d004      	beq.n	8004eb2 <FLASH_WaitForLastOperation+0x82>
 8004ea8:	4a0a      	ldr	r2, [pc, #40]	; (8004ed4 <FLASH_WaitForLastOperation+0xa4>)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004eb0:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e009      	b.n	8004eca <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004eb6:	4b07      	ldr	r3, [pc, #28]	; (8004ed4 <FLASH_WaitForLastOperation+0xa4>)
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004ec2:	4b04      	ldr	r3, [pc, #16]	; (8004ed4 <FLASH_WaitForLastOperation+0xa4>)
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40022000 	.word	0x40022000
 8004ed8:	0002c3fa 	.word	0x0002c3fa
 8004edc:	20000014 	.word	0x20000014

08004ee0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004eec:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <FLASH_Program_DoubleWord+0x48>)
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	4a0d      	ldr	r2, [pc, #52]	; (8004f28 <FLASH_Program_DoubleWord+0x48>)
 8004ef2:	f043 0301 	orr.w	r3, r3, #1
 8004ef6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004efe:	f3bf 8f6f 	isb	sy
}
 8004f02:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8004f04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	000a      	movs	r2, r1
 8004f12:	2300      	movs	r3, #0
 8004f14:	68f9      	ldr	r1, [r7, #12]
 8004f16:	3104      	adds	r1, #4
 8004f18:	4613      	mov	r3, r2
 8004f1a:	600b      	str	r3, [r1, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	40022000 	.word	0x40022000

08004f2c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b089      	sub	sp, #36	; 0x24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004f36:	2340      	movs	r3, #64	; 0x40
 8004f38:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004f42:	4b14      	ldr	r3, [pc, #80]	; (8004f94 <FLASH_Program_Fast+0x68>)
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <FLASH_Program_Fast+0x68>)
 8004f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f4c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f52:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f54:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8004f56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f58:	b672      	cpsid	i
}
 8004f5a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	3304      	adds	r3, #4
 8004f68:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	617b      	str	r3, [r7, #20]
    row_index--;
 8004f70:	7ffb      	ldrb	r3, [r7, #31]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8004f76:	7ffb      	ldrb	r3, [r7, #31]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1ef      	bne.n	8004f5c <FLASH_Program_Fast+0x30>
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f383 8810 	msr	PRIMASK, r3
}
 8004f86:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8004f88:	bf00      	nop
 8004f8a:	3724      	adds	r7, #36	; 0x24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	40022000 	.word	0x40022000

08004f98 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004fa2:	4b4a      	ldr	r3, [pc, #296]	; (80050cc <HAL_FLASHEx_Erase+0x134>)
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_FLASHEx_Erase+0x16>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e089      	b.n	80050c2 <HAL_FLASHEx_Erase+0x12a>
 8004fae:	4b47      	ldr	r3, [pc, #284]	; (80050cc <HAL_FLASHEx_Erase+0x134>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004fb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004fb8:	f7ff ff3a 	bl	8004e30 <FLASH_WaitForLastOperation>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d179      	bne.n	80050ba <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004fc6:	4b41      	ldr	r3, [pc, #260]	; (80050cc <HAL_FLASHEx_Erase+0x134>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8004fcc:	4b40      	ldr	r3, [pc, #256]	; (80050d0 <HAL_FLASHEx_Erase+0x138>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d019      	beq.n	800500c <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004fd8:	4b3d      	ldr	r3, [pc, #244]	; (80050d0 <HAL_FLASHEx_Erase+0x138>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a3c      	ldr	r2, [pc, #240]	; (80050d0 <HAL_FLASHEx_Erase+0x138>)
 8004fde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fe2:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004fe4:	4b3a      	ldr	r3, [pc, #232]	; (80050d0 <HAL_FLASHEx_Erase+0x138>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d009      	beq.n	8005004 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8004ff0:	4b37      	ldr	r3, [pc, #220]	; (80050d0 <HAL_FLASHEx_Erase+0x138>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a36      	ldr	r2, [pc, #216]	; (80050d0 <HAL_FLASHEx_Erase+0x138>)
 8004ff6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ffa:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8004ffc:	4b33      	ldr	r3, [pc, #204]	; (80050cc <HAL_FLASHEx_Erase+0x134>)
 8004ffe:	2203      	movs	r2, #3
 8005000:	771a      	strb	r2, [r3, #28]
 8005002:	e016      	b.n	8005032 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005004:	4b31      	ldr	r3, [pc, #196]	; (80050cc <HAL_FLASHEx_Erase+0x134>)
 8005006:	2201      	movs	r2, #1
 8005008:	771a      	strb	r2, [r3, #28]
 800500a:	e012      	b.n	8005032 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800500c:	4b30      	ldr	r3, [pc, #192]	; (80050d0 <HAL_FLASHEx_Erase+0x138>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005014:	2b00      	cmp	r3, #0
 8005016:	d009      	beq.n	800502c <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005018:	4b2d      	ldr	r3, [pc, #180]	; (80050d0 <HAL_FLASHEx_Erase+0x138>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a2c      	ldr	r2, [pc, #176]	; (80050d0 <HAL_FLASHEx_Erase+0x138>)
 800501e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005022:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005024:	4b29      	ldr	r3, [pc, #164]	; (80050cc <HAL_FLASHEx_Erase+0x134>)
 8005026:	2202      	movs	r2, #2
 8005028:	771a      	strb	r2, [r3, #28]
 800502a:	e002      	b.n	8005032 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800502c:	4b27      	ldr	r3, [pc, #156]	; (80050cc <HAL_FLASHEx_Erase+0x134>)
 800502e:	2200      	movs	r2, #0
 8005030:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d111      	bne.n	800505e <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	4618      	mov	r0, r3
 8005040:	f000 f848 	bl	80050d4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005044:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005048:	f7ff fef2 	bl	8004e30 <FLASH_WaitForLastOperation>
 800504c:	4603      	mov	r3, r0
 800504e:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8005050:	4b1f      	ldr	r3, [pc, #124]	; (80050d0 <HAL_FLASHEx_Erase+0x138>)
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	4a1e      	ldr	r2, [pc, #120]	; (80050d0 <HAL_FLASHEx_Erase+0x138>)
 8005056:	f023 0304 	bic.w	r3, r3, #4
 800505a:	6153      	str	r3, [r2, #20]
 800505c:	e02b      	b.n	80050b6 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005064:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	60bb      	str	r3, [r7, #8]
 800506c:	e01b      	b.n	80050a6 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	4619      	mov	r1, r3
 8005074:	68b8      	ldr	r0, [r7, #8]
 8005076:	f000 f84b 	bl	8005110 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800507a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800507e:	f7ff fed7 	bl	8004e30 <FLASH_WaitForLastOperation>
 8005082:	4603      	mov	r3, r0
 8005084:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005086:	4b12      	ldr	r3, [pc, #72]	; (80050d0 <HAL_FLASHEx_Erase+0x138>)
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	4a11      	ldr	r2, [pc, #68]	; (80050d0 <HAL_FLASHEx_Erase+0x138>)
 800508c:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8005090:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	601a      	str	r2, [r3, #0]
          break;
 800509e:	e00a      	b.n	80050b6 <HAL_FLASHEx_Erase+0x11e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	3301      	adds	r3, #1
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d3db      	bcc.n	800506e <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80050b6:	f000 f84f 	bl	8005158 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80050ba:	4b04      	ldr	r3, [pc, #16]	; (80050cc <HAL_FLASHEx_Erase+0x134>)
 80050bc:	2200      	movs	r2, #0
 80050be:	701a      	strb	r2, [r3, #0]

  return status;
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000014 	.word	0x20000014
 80050d0:	40022000 	.word	0x40022000

080050d4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80050e6:	4b09      	ldr	r3, [pc, #36]	; (800510c <FLASH_MassErase+0x38>)
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	4a08      	ldr	r2, [pc, #32]	; (800510c <FLASH_MassErase+0x38>)
 80050ec:	f043 0304 	orr.w	r3, r3, #4
 80050f0:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80050f2:	4b06      	ldr	r3, [pc, #24]	; (800510c <FLASH_MassErase+0x38>)
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	4a05      	ldr	r2, [pc, #20]	; (800510c <FLASH_MassErase+0x38>)
 80050f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050fc:	6153      	str	r3, [r2, #20]
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40022000 	.word	0x40022000

08005110 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800511a:	4b0e      	ldr	r3, [pc, #56]	; (8005154 <FLASH_PageErase+0x44>)
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800512a:	490a      	ldr	r1, [pc, #40]	; (8005154 <FLASH_PageErase+0x44>)
 800512c:	4313      	orrs	r3, r2
 800512e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005130:	4b08      	ldr	r3, [pc, #32]	; (8005154 <FLASH_PageErase+0x44>)
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	4a07      	ldr	r2, [pc, #28]	; (8005154 <FLASH_PageErase+0x44>)
 8005136:	f043 0302 	orr.w	r3, r3, #2
 800513a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800513c:	4b05      	ldr	r3, [pc, #20]	; (8005154 <FLASH_PageErase+0x44>)
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	4a04      	ldr	r2, [pc, #16]	; (8005154 <FLASH_PageErase+0x44>)
 8005142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005146:	6153      	str	r3, [r2, #20]
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	40022000 	.word	0x40022000

08005158 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800515e:	4b1e      	ldr	r3, [pc, #120]	; (80051d8 <FLASH_FlushCaches+0x80>)
 8005160:	7f1b      	ldrb	r3, [r3, #28]
 8005162:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005164:	79fb      	ldrb	r3, [r7, #7]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d002      	beq.n	8005170 <FLASH_FlushCaches+0x18>
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	2b03      	cmp	r3, #3
 800516e:	d111      	bne.n	8005194 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005170:	4b1a      	ldr	r3, [pc, #104]	; (80051dc <FLASH_FlushCaches+0x84>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a19      	ldr	r2, [pc, #100]	; (80051dc <FLASH_FlushCaches+0x84>)
 8005176:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800517a:	6013      	str	r3, [r2, #0]
 800517c:	4b17      	ldr	r3, [pc, #92]	; (80051dc <FLASH_FlushCaches+0x84>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a16      	ldr	r2, [pc, #88]	; (80051dc <FLASH_FlushCaches+0x84>)
 8005182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005186:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005188:	4b14      	ldr	r3, [pc, #80]	; (80051dc <FLASH_FlushCaches+0x84>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a13      	ldr	r2, [pc, #76]	; (80051dc <FLASH_FlushCaches+0x84>)
 800518e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005192:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d002      	beq.n	80051a0 <FLASH_FlushCaches+0x48>
 800519a:	79fb      	ldrb	r3, [r7, #7]
 800519c:	2b03      	cmp	r3, #3
 800519e:	d111      	bne.n	80051c4 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80051a0:	4b0e      	ldr	r3, [pc, #56]	; (80051dc <FLASH_FlushCaches+0x84>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a0d      	ldr	r2, [pc, #52]	; (80051dc <FLASH_FlushCaches+0x84>)
 80051a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <FLASH_FlushCaches+0x84>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a0a      	ldr	r2, [pc, #40]	; (80051dc <FLASH_FlushCaches+0x84>)
 80051b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051b6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80051b8:	4b08      	ldr	r3, [pc, #32]	; (80051dc <FLASH_FlushCaches+0x84>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a07      	ldr	r2, [pc, #28]	; (80051dc <FLASH_FlushCaches+0x84>)
 80051be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051c2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80051c4:	4b04      	ldr	r3, [pc, #16]	; (80051d8 <FLASH_FlushCaches+0x80>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	771a      	strb	r2, [r3, #28]
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	20000014 	.word	0x20000014
 80051dc:	40022000 	.word	0x40022000

080051e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051ee:	e14e      	b.n	800548e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	2101      	movs	r1, #1
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	fa01 f303 	lsl.w	r3, r1, r3
 80051fc:	4013      	ands	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 8140 	beq.w	8005488 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d00b      	beq.n	8005228 <HAL_GPIO_Init+0x48>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b02      	cmp	r3, #2
 8005216:	d007      	beq.n	8005228 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800521c:	2b11      	cmp	r3, #17
 800521e:	d003      	beq.n	8005228 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b12      	cmp	r3, #18
 8005226:	d130      	bne.n	800528a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	2203      	movs	r2, #3
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	43db      	mvns	r3, r3
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4013      	ands	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800525e:	2201      	movs	r2, #1
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	43db      	mvns	r3, r3
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4013      	ands	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	091b      	lsrs	r3, r3, #4
 8005274:	f003 0201 	and.w	r2, r3, #1
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	2203      	movs	r2, #3
 8005296:	fa02 f303 	lsl.w	r3, r2, r3
 800529a:	43db      	mvns	r3, r3
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4013      	ands	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d003      	beq.n	80052ca <HAL_GPIO_Init+0xea>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b12      	cmp	r3, #18
 80052c8:	d123      	bne.n	8005312 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	08da      	lsrs	r2, r3, #3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3208      	adds	r2, #8
 80052d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	220f      	movs	r2, #15
 80052e2:	fa02 f303 	lsl.w	r3, r2, r3
 80052e6:	43db      	mvns	r3, r3
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4013      	ands	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	08da      	lsrs	r2, r3, #3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3208      	adds	r2, #8
 800530c:	6939      	ldr	r1, [r7, #16]
 800530e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	2203      	movs	r2, #3
 800531e:	fa02 f303 	lsl.w	r3, r2, r3
 8005322:	43db      	mvns	r3, r3
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4013      	ands	r3, r2
 8005328:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f003 0203 	and.w	r2, r3, #3
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 809a 	beq.w	8005488 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005354:	4b55      	ldr	r3, [pc, #340]	; (80054ac <HAL_GPIO_Init+0x2cc>)
 8005356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005358:	4a54      	ldr	r2, [pc, #336]	; (80054ac <HAL_GPIO_Init+0x2cc>)
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	6613      	str	r3, [r2, #96]	; 0x60
 8005360:	4b52      	ldr	r3, [pc, #328]	; (80054ac <HAL_GPIO_Init+0x2cc>)
 8005362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	60bb      	str	r3, [r7, #8]
 800536a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800536c:	4a50      	ldr	r2, [pc, #320]	; (80054b0 <HAL_GPIO_Init+0x2d0>)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	089b      	lsrs	r3, r3, #2
 8005372:	3302      	adds	r3, #2
 8005374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005378:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f003 0303 	and.w	r3, r3, #3
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	220f      	movs	r2, #15
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	43db      	mvns	r3, r3
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4013      	ands	r3, r2
 800538e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005396:	d013      	beq.n	80053c0 <HAL_GPIO_Init+0x1e0>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a46      	ldr	r2, [pc, #280]	; (80054b4 <HAL_GPIO_Init+0x2d4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00d      	beq.n	80053bc <HAL_GPIO_Init+0x1dc>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a45      	ldr	r2, [pc, #276]	; (80054b8 <HAL_GPIO_Init+0x2d8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d007      	beq.n	80053b8 <HAL_GPIO_Init+0x1d8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a44      	ldr	r2, [pc, #272]	; (80054bc <HAL_GPIO_Init+0x2dc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d101      	bne.n	80053b4 <HAL_GPIO_Init+0x1d4>
 80053b0:	2303      	movs	r3, #3
 80053b2:	e006      	b.n	80053c2 <HAL_GPIO_Init+0x1e2>
 80053b4:	2307      	movs	r3, #7
 80053b6:	e004      	b.n	80053c2 <HAL_GPIO_Init+0x1e2>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e002      	b.n	80053c2 <HAL_GPIO_Init+0x1e2>
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <HAL_GPIO_Init+0x1e2>
 80053c0:	2300      	movs	r3, #0
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	f002 0203 	and.w	r2, r2, #3
 80053c8:	0092      	lsls	r2, r2, #2
 80053ca:	4093      	lsls	r3, r2
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80053d2:	4937      	ldr	r1, [pc, #220]	; (80054b0 <HAL_GPIO_Init+0x2d0>)
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	089b      	lsrs	r3, r3, #2
 80053d8:	3302      	adds	r3, #2
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80053e0:	4b37      	ldr	r3, [pc, #220]	; (80054c0 <HAL_GPIO_Init+0x2e0>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	43db      	mvns	r3, r3
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4013      	ands	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005404:	4a2e      	ldr	r2, [pc, #184]	; (80054c0 <HAL_GPIO_Init+0x2e0>)
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800540a:	4b2d      	ldr	r3, [pc, #180]	; (80054c0 <HAL_GPIO_Init+0x2e0>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	43db      	mvns	r3, r3
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4013      	ands	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800542e:	4a24      	ldr	r2, [pc, #144]	; (80054c0 <HAL_GPIO_Init+0x2e0>)
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005434:	4b22      	ldr	r3, [pc, #136]	; (80054c0 <HAL_GPIO_Init+0x2e0>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	43db      	mvns	r3, r3
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4013      	ands	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005458:	4a19      	ldr	r2, [pc, #100]	; (80054c0 <HAL_GPIO_Init+0x2e0>)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800545e:	4b18      	ldr	r3, [pc, #96]	; (80054c0 <HAL_GPIO_Init+0x2e0>)
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	43db      	mvns	r3, r3
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4013      	ands	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005482:	4a0f      	ldr	r2, [pc, #60]	; (80054c0 <HAL_GPIO_Init+0x2e0>)
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	3301      	adds	r3, #1
 800548c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	fa22 f303 	lsr.w	r3, r2, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	f47f aea9 	bne.w	80051f0 <HAL_GPIO_Init+0x10>
  }
}
 800549e:	bf00      	nop
 80054a0:	bf00      	nop
 80054a2:	371c      	adds	r7, #28
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	40021000 	.word	0x40021000
 80054b0:	40010000 	.word	0x40010000
 80054b4:	48000400 	.word	0x48000400
 80054b8:	48000800 	.word	0x48000800
 80054bc:	48000c00 	.word	0x48000c00
 80054c0:	40010400 	.word	0x40010400

080054c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80054d2:	e0b1      	b.n	8005638 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80054d4:	2201      	movs	r2, #1
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	4013      	ands	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 80a4 	beq.w	8005632 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80054ea:	4a5a      	ldr	r2, [pc, #360]	; (8005654 <HAL_GPIO_DeInit+0x190>)
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	089b      	lsrs	r3, r3, #2
 80054f0:	3302      	adds	r3, #2
 80054f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	220f      	movs	r2, #15
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	4013      	ands	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005512:	d013      	beq.n	800553c <HAL_GPIO_DeInit+0x78>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a50      	ldr	r2, [pc, #320]	; (8005658 <HAL_GPIO_DeInit+0x194>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00d      	beq.n	8005538 <HAL_GPIO_DeInit+0x74>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a4f      	ldr	r2, [pc, #316]	; (800565c <HAL_GPIO_DeInit+0x198>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d007      	beq.n	8005534 <HAL_GPIO_DeInit+0x70>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a4e      	ldr	r2, [pc, #312]	; (8005660 <HAL_GPIO_DeInit+0x19c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d101      	bne.n	8005530 <HAL_GPIO_DeInit+0x6c>
 800552c:	2303      	movs	r3, #3
 800552e:	e006      	b.n	800553e <HAL_GPIO_DeInit+0x7a>
 8005530:	2307      	movs	r3, #7
 8005532:	e004      	b.n	800553e <HAL_GPIO_DeInit+0x7a>
 8005534:	2302      	movs	r3, #2
 8005536:	e002      	b.n	800553e <HAL_GPIO_DeInit+0x7a>
 8005538:	2301      	movs	r3, #1
 800553a:	e000      	b.n	800553e <HAL_GPIO_DeInit+0x7a>
 800553c:	2300      	movs	r3, #0
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	f002 0203 	and.w	r2, r2, #3
 8005544:	0092      	lsls	r2, r2, #2
 8005546:	4093      	lsls	r3, r2
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	429a      	cmp	r2, r3
 800554c:	d132      	bne.n	80055b4 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800554e:	4b45      	ldr	r3, [pc, #276]	; (8005664 <HAL_GPIO_DeInit+0x1a0>)
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	43db      	mvns	r3, r3
 8005556:	4943      	ldr	r1, [pc, #268]	; (8005664 <HAL_GPIO_DeInit+0x1a0>)
 8005558:	4013      	ands	r3, r2
 800555a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800555c:	4b41      	ldr	r3, [pc, #260]	; (8005664 <HAL_GPIO_DeInit+0x1a0>)
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	43db      	mvns	r3, r3
 8005564:	493f      	ldr	r1, [pc, #252]	; (8005664 <HAL_GPIO_DeInit+0x1a0>)
 8005566:	4013      	ands	r3, r2
 8005568:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800556a:	4b3e      	ldr	r3, [pc, #248]	; (8005664 <HAL_GPIO_DeInit+0x1a0>)
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	43db      	mvns	r3, r3
 8005572:	493c      	ldr	r1, [pc, #240]	; (8005664 <HAL_GPIO_DeInit+0x1a0>)
 8005574:	4013      	ands	r3, r2
 8005576:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8005578:	4b3a      	ldr	r3, [pc, #232]	; (8005664 <HAL_GPIO_DeInit+0x1a0>)
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	43db      	mvns	r3, r3
 8005580:	4938      	ldr	r1, [pc, #224]	; (8005664 <HAL_GPIO_DeInit+0x1a0>)
 8005582:	4013      	ands	r3, r2
 8005584:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	220f      	movs	r2, #15
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005596:	4a2f      	ldr	r2, [pc, #188]	; (8005654 <HAL_GPIO_DeInit+0x190>)
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	089b      	lsrs	r3, r3, #2
 800559c:	3302      	adds	r3, #2
 800559e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	43da      	mvns	r2, r3
 80055a6:	482b      	ldr	r0, [pc, #172]	; (8005654 <HAL_GPIO_DeInit+0x190>)
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	089b      	lsrs	r3, r3, #2
 80055ac:	400a      	ands	r2, r1
 80055ae:	3302      	adds	r3, #2
 80055b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	2103      	movs	r1, #3
 80055be:	fa01 f303 	lsl.w	r3, r1, r3
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	08da      	lsrs	r2, r3, #3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3208      	adds	r2, #8
 80055d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	220f      	movs	r2, #15
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	43db      	mvns	r3, r3
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	08d2      	lsrs	r2, r2, #3
 80055e8:	4019      	ands	r1, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3208      	adds	r2, #8
 80055ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	2103      	movs	r1, #3
 80055fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005600:	43db      	mvns	r3, r3
 8005602:	401a      	ands	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	2101      	movs	r1, #1
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	fa01 f303 	lsl.w	r3, r1, r3
 8005614:	43db      	mvns	r3, r3
 8005616:	401a      	ands	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	2103      	movs	r1, #3
 8005626:	fa01 f303 	lsl.w	r3, r1, r3
 800562a:	43db      	mvns	r3, r3
 800562c:	401a      	ands	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	3301      	adds	r3, #1
 8005636:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	fa22 f303 	lsr.w	r3, r2, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	f47f af47 	bne.w	80054d4 <HAL_GPIO_DeInit+0x10>
  }
}
 8005646:	bf00      	nop
 8005648:	bf00      	nop
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	40010000 	.word	0x40010000
 8005658:	48000400 	.word	0x48000400
 800565c:	48000800 	.word	0x48000800
 8005660:	48000c00 	.word	0x48000c00
 8005664:	40010400 	.word	0x40010400

08005668 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691a      	ldr	r2, [r3, #16]
 8005678:	887b      	ldrh	r3, [r7, #2]
 800567a:	4013      	ands	r3, r2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005680:	2301      	movs	r3, #1
 8005682:	73fb      	strb	r3, [r7, #15]
 8005684:	e001      	b.n	800568a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005686:	2300      	movs	r3, #0
 8005688:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800568a:	7bfb      	ldrb	r3, [r7, #15]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	807b      	strh	r3, [r7, #2]
 80056a4:	4613      	mov	r3, r2
 80056a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056a8:	787b      	ldrb	r3, [r7, #1]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056ae:	887a      	ldrh	r2, [r7, #2]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80056b4:	e002      	b.n	80056bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056b6:	887a      	ldrh	r2, [r7, #2]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e0b6      	b.n	8005848 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d106      	bne.n	80056fa <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7fc fa2d 	bl	8001b54 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2202      	movs	r2, #2
 80056fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if defined(LPTIM_RCR_REP)

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f042 0201 	orr.w	r2, r2, #1
 8005710:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800571a:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005724:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8005726:	f44f 7180 	mov.w	r1, #256	; 0x100
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 faa4 	bl	8005c78 <LPTIM_WaitForFlag>
 8005730:	4603      	mov	r3, r0
 8005732:	2b03      	cmp	r3, #3
 8005734:	d101      	bne.n	800573a <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e086      	b.n	8005848 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 facc 	bl	8005cd8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fa8b 	bl	8005c5c <HAL_LPTIM_GetState>
 8005746:	4603      	mov	r3, r0
 8005748:	2b03      	cmp	r3, #3
 800574a:	d101      	bne.n	8005750 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e07b      	b.n	8005848 <HAL_LPTIM_Init+0x180>
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d004      	beq.n	800576a <HAL_LPTIM_Init+0xa2>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005764:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005768:	d103      	bne.n	8005772 <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f023 031e 	bic.w	r3, r3, #30
 8005770:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800577a:	4293      	cmp	r3, r2
 800577c:	d005      	beq.n	800578a <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005784:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005788:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	4b30      	ldr	r3, [pc, #192]	; (8005850 <HAL_LPTIM_Init+0x188>)
 800578e:	4013      	ands	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800579a:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80057a0:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80057a6:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80057ac:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d107      	bne.n	80057cc <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80057c4:	4313      	orrs	r3, r2
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d004      	beq.n	80057de <HAL_LPTIM_Init+0x116>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057dc:	d107      	bne.n	80057ee <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80057e6:	4313      	orrs	r3, r2
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00a      	beq.n	8005810 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005802:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8005808:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4313      	orrs	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a0d      	ldr	r2, [pc, #52]	; (8005854 <HAL_LPTIM_Init+0x18c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d108      	bne.n	8005834 <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	621a      	str	r2, [r3, #32]
 8005832:	e004      	b.n	800583e <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800583c:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	ff19f1fe 	.word	0xff19f1fe
 8005854:	40007c00 	.word	0x40007c00

08005858 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2202      	movs	r2, #2
 8005866:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a3f      	ldr	r2, [pc, #252]	; (800596c <HAL_LPTIM_Counter_Start_IT+0x114>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d106      	bne.n	8005882 <HAL_LPTIM_Counter_Start_IT+0x2a>
 8005874:	4b3e      	ldr	r3, [pc, #248]	; (8005970 <HAL_LPTIM_Counter_Start_IT+0x118>)
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	4a3d      	ldr	r2, [pc, #244]	; (8005970 <HAL_LPTIM_Counter_Start_IT+0x118>)
 800587a:	f043 0301 	orr.w	r3, r3, #1
 800587e:	6213      	str	r3, [r2, #32]
 8005880:	e005      	b.n	800588e <HAL_LPTIM_Counter_Start_IT+0x36>
 8005882:	4b3b      	ldr	r3, [pc, #236]	; (8005970 <HAL_LPTIM_Counter_Start_IT+0x118>)
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	4a3a      	ldr	r2, [pc, #232]	; (8005970 <HAL_LPTIM_Counter_Start_IT+0x118>)
 8005888:	f043 0302 	orr.w	r3, r3, #2
 800588c:	6213      	str	r3, [r2, #32]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d00c      	beq.n	80058b0 <HAL_LPTIM_Counter_Start_IT+0x58>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800589e:	d107      	bne.n	80058b0 <HAL_LPTIM_Counter_Start_IT+0x58>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68da      	ldr	r2, [r3, #12]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80058ae:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691a      	ldr	r2, [r3, #16]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2210      	movs	r2, #16
 80058c6:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80058d0:	2110      	movs	r1, #16
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f9d0 	bl	8005c78 <LPTIM_WaitForFlag>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b03      	cmp	r3, #3
 80058dc:	d101      	bne.n	80058e2 <HAL_LPTIM_Counter_Start_IT+0x8a>
  {
    return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e03f      	b.n	8005962 <HAL_LPTIM_Counter_Start_IT+0x10a>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f9f8 	bl	8005cd8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f9b7 	bl	8005c5c <HAL_LPTIM_GetState>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d101      	bne.n	80058f8 <HAL_LPTIM_Counter_Start_IT+0xa0>
  {
    return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e034      	b.n	8005962 <HAL_LPTIM_Counter_Start_IT+0x10a>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0210 	orr.w	r2, r2, #16
 8005906:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0202 	orr.w	r2, r2, #2
 8005916:	609a      	str	r2, [r3, #8]

#if defined(LPTIM_RCR_REP)
  /* Enable Rep Update Ok interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689a      	ldr	r2, [r3, #8]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005926:	609a      	str	r2, [r3, #8]

  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689a      	ldr	r2, [r3, #8]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005936:	609a      	str	r2, [r3, #8]

#endif
  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691a      	ldr	r2, [r3, #16]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691a      	ldr	r2, [r3, #16]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0204 	orr.w	r2, r2, #4
 8005956:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40007c00 	.word	0x40007c00
 8005970:	40010400 	.word	0x40010400

08005974 <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a21      	ldr	r2, [pc, #132]	; (8005a10 <HAL_LPTIM_Counter_Stop_IT+0x9c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d106      	bne.n	800599c <HAL_LPTIM_Counter_Stop_IT+0x28>
 800598e:	4b21      	ldr	r3, [pc, #132]	; (8005a14 <HAL_LPTIM_Counter_Stop_IT+0xa0>)
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	4a20      	ldr	r2, [pc, #128]	; (8005a14 <HAL_LPTIM_Counter_Stop_IT+0xa0>)
 8005994:	f023 0301 	bic.w	r3, r3, #1
 8005998:	6213      	str	r3, [r2, #32]
 800599a:	e005      	b.n	80059a8 <HAL_LPTIM_Counter_Stop_IT+0x34>
 800599c:	4b1d      	ldr	r3, [pc, #116]	; (8005a14 <HAL_LPTIM_Counter_Stop_IT+0xa0>)
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	4a1c      	ldr	r2, [pc, #112]	; (8005a14 <HAL_LPTIM_Counter_Stop_IT+0xa0>)
 80059a2:	f023 0302 	bic.w	r3, r3, #2
 80059a6:	6213      	str	r3, [r2, #32]

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f995 	bl	8005cd8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f954 	bl	8005c5c <HAL_LPTIM_GetState>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d101      	bne.n	80059be <HAL_LPTIM_Counter_Stop_IT+0x4a>
  {
    return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e024      	b.n	8005a08 <HAL_LPTIM_Counter_Stop_IT+0x94>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0210 	bic.w	r2, r2, #16
 80059cc:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0202 	bic.w	r2, r2, #2
 80059dc:	609a      	str	r2, [r3, #8]
#if defined(LPTIM_RCR_REP)

  /* Disable Rep Update Ok interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_REPOK);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059ec:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059fc:	609a      	str	r2, [r3, #8]
#endif
  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40007c00 	.word	0x40007c00
 8005a14:	40010400 	.word	0x40010400

08005a18 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d10d      	bne.n	8005a4a <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d106      	bne.n	8005a4a <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2201      	movs	r2, #1
 8005a42:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f8af 	bl	8005ba8 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d10d      	bne.n	8005a74 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d106      	bne.n	8005a74 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f8a4 	bl	8005bbc <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d10d      	bne.n	8005a9e <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b04      	cmp	r3, #4
 8005a8e:	d106      	bne.n	8005a9e <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2204      	movs	r2, #4
 8005a96:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f899 	bl	8005bd0 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0308 	and.w	r3, r3, #8
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d10d      	bne.n	8005ac8 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	d106      	bne.n	8005ac8 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2208      	movs	r2, #8
 8005ac0:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f88e 	bl	8005be4 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0310 	and.w	r3, r3, #16
 8005ad2:	2b10      	cmp	r3, #16
 8005ad4:	d10d      	bne.n	8005af2 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f003 0310 	and.w	r3, r3, #16
 8005ae0:	2b10      	cmp	r3, #16
 8005ae2:	d106      	bne.n	8005af2 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2210      	movs	r2, #16
 8005aea:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f883 	bl	8005bf8 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0320 	and.w	r3, r3, #32
 8005afc:	2b20      	cmp	r3, #32
 8005afe:	d10d      	bne.n	8005b1c <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b20      	cmp	r3, #32
 8005b0c:	d106      	bne.n	8005b1c <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2220      	movs	r2, #32
 8005b14:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f878 	bl	8005c0c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b26:	2b40      	cmp	r3, #64	; 0x40
 8005b28:	d10d      	bne.n	8005b46 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b34:	2b40      	cmp	r3, #64	; 0x40
 8005b36:	d106      	bne.n	8005b46 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2240      	movs	r2, #64	; 0x40
 8005b3e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f86d 	bl	8005c20 <HAL_LPTIM_DirectionDownCallback>
  }
#if defined(LPTIM_RCR_REP)

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b50:	2b80      	cmp	r3, #128	; 0x80
 8005b52:	d10d      	bne.n	8005b70 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5e:	2b80      	cmp	r3, #128	; 0x80
 8005b60:	d106      	bne.n	8005b70 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2280      	movs	r2, #128	; 0x80
 8005b68:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f862 	bl	8005c34 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b7e:	d10f      	bne.n	8005ba0 <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b8e:	d107      	bne.n	8005ba0 <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b98:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f854 	bl	8005c48 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c6a:	b2db      	uxtb	r3, r3
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8005c86:	4b12      	ldr	r3, [pc, #72]	; (8005cd0 <LPTIM_WaitForFlag+0x58>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a12      	ldr	r2, [pc, #72]	; (8005cd4 <LPTIM_WaitForFlag+0x5c>)
 8005c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c90:	0b9b      	lsrs	r3, r3, #14
 8005c92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c96:	fb02 f303 	mul.w	r3, r2, r3
 8005c9a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d002      	beq.n	8005cc2 <LPTIM_WaitForFlag+0x4a>
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1ec      	bne.n	8005c9c <LPTIM_WaitForFlag+0x24>

  return result;
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	20000008 	.word	0x20000008
 8005cd4:	d1b71759 	.word	0xd1b71759

08005cd8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08a      	sub	sp, #40	; 0x28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8005ce4:	b672      	cpsid	i
}
 8005ce6:	bf00      	nop

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a85      	ldr	r2, [pc, #532]	; (8005f04 <LPTIM_Disable+0x22c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d003      	beq.n	8005cfa <LPTIM_Disable+0x22>
 8005cf2:	4a85      	ldr	r2, [pc, #532]	; (8005f08 <LPTIM_Disable+0x230>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d007      	beq.n	8005d08 <LPTIM_Disable+0x30>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8005cf8:	e00d      	b.n	8005d16 <LPTIM_Disable+0x3e>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005cfa:	4b84      	ldr	r3, [pc, #528]	; (8005f0c <LPTIM_Disable+0x234>)
 8005cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d00:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005d06:	e006      	b.n	8005d16 <LPTIM_Disable+0x3e>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005d08:	4b80      	ldr	r3, [pc, #512]	; (8005f0c <LPTIM_Disable+0x234>)
 8005d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005d14:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	623b      	str	r3, [r7, #32]
  tmpCFGR = hlptim->Instance->CFGR;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	61fb      	str	r3, [r7, #28]
  tmpCMP = hlptim->Instance->CMP;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	61bb      	str	r3, [r7, #24]
  tmpARR = hlptim->Instance->ARR;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	617b      	str	r3, [r7, #20]
  tmpOR = hlptim->Instance->OR;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	613b      	str	r3, [r7, #16]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d44:	60fb      	str	r3, [r7, #12]
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a6e      	ldr	r2, [pc, #440]	; (8005f04 <LPTIM_Disable+0x22c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d003      	beq.n	8005d58 <LPTIM_Disable+0x80>
 8005d50:	4a6d      	ldr	r2, [pc, #436]	; (8005f08 <LPTIM_Disable+0x230>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00d      	beq.n	8005d72 <LPTIM_Disable+0x9a>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8005d56:	e019      	b.n	8005d8c <LPTIM_Disable+0xb4>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8005d58:	4b6c      	ldr	r3, [pc, #432]	; (8005f0c <LPTIM_Disable+0x234>)
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5c:	4a6b      	ldr	r2, [pc, #428]	; (8005f0c <LPTIM_Disable+0x234>)
 8005d5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d62:	6393      	str	r3, [r2, #56]	; 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8005d64:	4b69      	ldr	r3, [pc, #420]	; (8005f0c <LPTIM_Disable+0x234>)
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	4a68      	ldr	r2, [pc, #416]	; (8005f0c <LPTIM_Disable+0x234>)
 8005d6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d6e:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 8005d70:	e00c      	b.n	8005d8c <LPTIM_Disable+0xb4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8005d72:	4b66      	ldr	r3, [pc, #408]	; (8005f0c <LPTIM_Disable+0x234>)
 8005d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d76:	4a65      	ldr	r2, [pc, #404]	; (8005f0c <LPTIM_Disable+0x234>)
 8005d78:	f043 0320 	orr.w	r3, r3, #32
 8005d7c:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8005d7e:	4b63      	ldr	r3, [pc, #396]	; (8005f0c <LPTIM_Disable+0x234>)
 8005d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d82:	4a62      	ldr	r2, [pc, #392]	; (8005f0c <LPTIM_Disable+0x234>)
 8005d84:	f023 0320 	bic.w	r3, r3, #32
 8005d88:	63d3      	str	r3, [r2, #60]	; 0x3c
      break;
 8005d8a:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d106      	bne.n	8005da0 <LPTIM_Disable+0xc8>
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d103      	bne.n	8005da0 <LPTIM_Disable+0xc8>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 8096 	beq.w	8005ecc <LPTIM_Disable+0x1f4>
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a57      	ldr	r2, [pc, #348]	; (8005f04 <LPTIM_Disable+0x22c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d003      	beq.n	8005db2 <LPTIM_Disable+0xda>
 8005daa:	4a57      	ldr	r2, [pc, #348]	; (8005f08 <LPTIM_Disable+0x230>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d009      	beq.n	8005dc4 <LPTIM_Disable+0xec>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8005db0:	e011      	b.n	8005dd6 <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8005db2:	4b56      	ldr	r3, [pc, #344]	; (8005f0c <LPTIM_Disable+0x234>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db8:	4a54      	ldr	r2, [pc, #336]	; (8005f0c <LPTIM_Disable+0x234>)
 8005dba:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8005dbe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8005dc2:	e008      	b.n	8005dd6 <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8005dc4:	4b51      	ldr	r3, [pc, #324]	; (8005f0c <LPTIM_Disable+0x234>)
 8005dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dca:	4a50      	ldr	r2, [pc, #320]	; (8005f0c <LPTIM_Disable+0x234>)
 8005dcc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8005dd4:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d01a      	beq.n	8005e12 <LPTIM_Disable+0x13a>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691a      	ldr	r2, [r3, #16]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0201 	orr.w	r2, r2, #1
 8005dea:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005df4:	2108      	movs	r1, #8
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7ff ff3e 	bl	8005c78 <LPTIM_WaitForFlag>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d103      	bne.n	8005e0a <LPTIM_Disable+0x132>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2203      	movs	r2, #3
 8005e06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2208      	movs	r2, #8
 8005e10:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01a      	beq.n	8005e4e <LPTIM_Disable+0x176>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691a      	ldr	r2, [r3, #16]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005e30:	2110      	movs	r1, #16
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7ff ff20 	bl	8005c78 <LPTIM_WaitForFlag>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b03      	cmp	r3, #3
 8005e3c:	d103      	bne.n	8005e46 <LPTIM_Disable+0x16e>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2203      	movs	r2, #3
 8005e42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2210      	movs	r2, #16
 8005e4c:	605a      	str	r2, [r3, #4]
    }
#if defined(LPTIM_RCR_REP)

    if (tmpRCR != 0UL)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01c      	beq.n	8005e8e <LPTIM_Disable+0x1b6>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0201 	orr.w	r2, r2, #1
 8005e62:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8005e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff ff01 	bl	8005c78 <LPTIM_WaitForFlag>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d103      	bne.n	8005e84 <LPTIM_Disable+0x1ac>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2203      	movs	r2, #3
 8005e80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e8c:	605a      	str	r2, [r3, #4]
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1c      	ldr	r2, [pc, #112]	; (8005f04 <LPTIM_Disable+0x22c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d003      	beq.n	8005ea0 <LPTIM_Disable+0x1c8>
 8005e98:	4a1b      	ldr	r2, [pc, #108]	; (8005f08 <LPTIM_Disable+0x230>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00b      	beq.n	8005eb6 <LPTIM_Disable+0x1de>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8005e9e:	e016      	b.n	8005ece <LPTIM_Disable+0x1f6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8005ea0:	4b1a      	ldr	r3, [pc, #104]	; (8005f0c <LPTIM_Disable+0x234>)
 8005ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005eaa:	4918      	ldr	r1, [pc, #96]	; (8005f0c <LPTIM_Disable+0x234>)
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8005eb4:	e00b      	b.n	8005ece <LPTIM_Disable+0x1f6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8005eb6:	4b15      	ldr	r3, [pc, #84]	; (8005f0c <LPTIM_Disable+0x234>)
 8005eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ec0:	4912      	ldr	r1, [pc, #72]	; (8005f0c <LPTIM_Disable+0x234>)
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8005eca:	e000      	b.n	8005ece <LPTIM_Disable+0x1f6>
    }
  }
 8005ecc:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0201 	bic.w	r2, r2, #1
 8005edc:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6a3a      	ldr	r2, [r7, #32]
 8005ee4:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69fa      	ldr	r2, [r7, #28]
 8005eec:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 8005ef6:	b662      	cpsie	i
}
 8005ef8:	bf00      	nop

  __enable_irq();
}
 8005efa:	bf00      	nop
 8005efc:	3728      	adds	r7, #40	; 0x28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	40007c00 	.word	0x40007c00
 8005f08:	40009400 	.word	0x40009400
 8005f0c:	40021000 	.word	0x40021000

08005f10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005f14:	4b04      	ldr	r3, [pc, #16]	; (8005f28 <HAL_PWREx_GetVoltageRange+0x18>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40007000 	.word	0x40007000

08005f2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f3a:	d130      	bne.n	8005f9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f3c:	4b23      	ldr	r3, [pc, #140]	; (8005fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f48:	d038      	beq.n	8005fbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f4a:	4b20      	ldr	r3, [pc, #128]	; (8005fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f52:	4a1e      	ldr	r2, [pc, #120]	; (8005fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f5a:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2232      	movs	r2, #50	; 0x32
 8005f60:	fb02 f303 	mul.w	r3, r2, r3
 8005f64:	4a1b      	ldr	r2, [pc, #108]	; (8005fd4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005f66:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6a:	0c9b      	lsrs	r3, r3, #18
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f70:	e002      	b.n	8005f78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3b01      	subs	r3, #1
 8005f76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f78:	4b14      	ldr	r3, [pc, #80]	; (8005fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f84:	d102      	bne.n	8005f8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1f2      	bne.n	8005f72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f8c:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f98:	d110      	bne.n	8005fbc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e00f      	b.n	8005fbe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f9e:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005faa:	d007      	beq.n	8005fbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005fac:	4b07      	ldr	r3, [pc, #28]	; (8005fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005fb4:	4a05      	ldr	r2, [pc, #20]	; (8005fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40007000 	.word	0x40007000
 8005fd0:	20000008 	.word	0x20000008
 8005fd4:	431bde83 	.word	0x431bde83

08005fd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b08a      	sub	sp, #40	; 0x28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d102      	bne.n	8005fec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f000 bc56 	b.w	8006898 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fec:	4ba1      	ldr	r3, [pc, #644]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f003 030c 	and.w	r3, r3, #12
 8005ff4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ff6:	4b9f      	ldr	r3, [pc, #636]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 80e6 	beq.w	80061da <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <HAL_RCC_OscConfig+0x4c>
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	2b0c      	cmp	r3, #12
 8006018:	f040 808d 	bne.w	8006136 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	2b01      	cmp	r3, #1
 8006020:	f040 8089 	bne.w	8006136 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006024:	4b93      	ldr	r3, [pc, #588]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d006      	beq.n	800603e <HAL_RCC_OscConfig+0x66>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d102      	bne.n	800603e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	f000 bc2d 	b.w	8006898 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006042:	4b8c      	ldr	r3, [pc, #560]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	2b00      	cmp	r3, #0
 800604c:	d004      	beq.n	8006058 <HAL_RCC_OscConfig+0x80>
 800604e:	4b89      	ldr	r3, [pc, #548]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006056:	e005      	b.n	8006064 <HAL_RCC_OscConfig+0x8c>
 8006058:	4b86      	ldr	r3, [pc, #536]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 800605a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800605e:	091b      	lsrs	r3, r3, #4
 8006060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006064:	4293      	cmp	r3, r2
 8006066:	d224      	bcs.n	80060b2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fdbf 	bl	8006bf0 <RCC_SetFlashLatencyFromMSIRange>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	f000 bc0d 	b.w	8006898 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800607e:	4b7d      	ldr	r3, [pc, #500]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a7c      	ldr	r2, [pc, #496]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8006084:	f043 0308 	orr.w	r3, r3, #8
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	4b7a      	ldr	r3, [pc, #488]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	4977      	ldr	r1, [pc, #476]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8006098:	4313      	orrs	r3, r2
 800609a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800609c:	4b75      	ldr	r3, [pc, #468]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	021b      	lsls	r3, r3, #8
 80060aa:	4972      	ldr	r1, [pc, #456]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	604b      	str	r3, [r1, #4]
 80060b0:	e025      	b.n	80060fe <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060b2:	4b70      	ldr	r3, [pc, #448]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a6f      	ldr	r2, [pc, #444]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 80060b8:	f043 0308 	orr.w	r3, r3, #8
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	4b6d      	ldr	r3, [pc, #436]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	496a      	ldr	r1, [pc, #424]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060d0:	4b68      	ldr	r3, [pc, #416]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	021b      	lsls	r3, r3, #8
 80060de:	4965      	ldr	r1, [pc, #404]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d109      	bne.n	80060fe <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 fd7e 	bl	8006bf0 <RCC_SetFlashLatencyFromMSIRange>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e3cc      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060fe:	f000 fcb3 	bl	8006a68 <HAL_RCC_GetSysClockFreq>
 8006102:	4602      	mov	r2, r0
 8006104:	4b5b      	ldr	r3, [pc, #364]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	091b      	lsrs	r3, r3, #4
 800610a:	f003 030f 	and.w	r3, r3, #15
 800610e:	495a      	ldr	r1, [pc, #360]	; (8006278 <HAL_RCC_OscConfig+0x2a0>)
 8006110:	5ccb      	ldrb	r3, [r1, r3]
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	fa22 f303 	lsr.w	r3, r2, r3
 800611a:	4a58      	ldr	r2, [pc, #352]	; (800627c <HAL_RCC_OscConfig+0x2a4>)
 800611c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800611e:	4b58      	ldr	r3, [pc, #352]	; (8006280 <HAL_RCC_OscConfig+0x2a8>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f7fc f9b8 	bl	8002498 <HAL_InitTick>
 8006128:	4603      	mov	r3, r0
 800612a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800612c:	7dfb      	ldrb	r3, [r7, #23]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d052      	beq.n	80061d8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8006132:	7dfb      	ldrb	r3, [r7, #23]
 8006134:	e3b0      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d032      	beq.n	80061a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800613e:	4b4d      	ldr	r3, [pc, #308]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a4c      	ldr	r2, [pc, #304]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8006144:	f043 0301 	orr.w	r3, r3, #1
 8006148:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800614a:	f7fc f9f5 	bl	8002538 <HAL_GetTick>
 800614e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006150:	e008      	b.n	8006164 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006152:	f7fc f9f1 	bl	8002538 <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	2b02      	cmp	r3, #2
 800615e:	d901      	bls.n	8006164 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e399      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006164:	4b43      	ldr	r3, [pc, #268]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d0f0      	beq.n	8006152 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006170:	4b40      	ldr	r3, [pc, #256]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a3f      	ldr	r2, [pc, #252]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8006176:	f043 0308 	orr.w	r3, r3, #8
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	4b3d      	ldr	r3, [pc, #244]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	493a      	ldr	r1, [pc, #232]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 800618a:	4313      	orrs	r3, r2
 800618c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800618e:	4b39      	ldr	r3, [pc, #228]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	021b      	lsls	r3, r3, #8
 800619c:	4935      	ldr	r1, [pc, #212]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	604b      	str	r3, [r1, #4]
 80061a2:	e01a      	b.n	80061da <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80061a4:	4b33      	ldr	r3, [pc, #204]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a32      	ldr	r2, [pc, #200]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 80061aa:	f023 0301 	bic.w	r3, r3, #1
 80061ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061b0:	f7fc f9c2 	bl	8002538 <HAL_GetTick>
 80061b4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061b8:	f7fc f9be 	bl	8002538 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e366      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80061ca:	4b2a      	ldr	r3, [pc, #168]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f0      	bne.n	80061b8 <HAL_RCC_OscConfig+0x1e0>
 80061d6:	e000      	b.n	80061da <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80061d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d073      	beq.n	80062ce <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	d005      	beq.n	80061f8 <HAL_RCC_OscConfig+0x220>
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	2b0c      	cmp	r3, #12
 80061f0:	d10e      	bne.n	8006210 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	d10b      	bne.n	8006210 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061f8:	4b1e      	ldr	r3, [pc, #120]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d063      	beq.n	80062cc <HAL_RCC_OscConfig+0x2f4>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d15f      	bne.n	80062cc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e343      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006218:	d106      	bne.n	8006228 <HAL_RCC_OscConfig+0x250>
 800621a:	4b16      	ldr	r3, [pc, #88]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a15      	ldr	r2, [pc, #84]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8006220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	e01d      	b.n	8006264 <HAL_RCC_OscConfig+0x28c>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006230:	d10c      	bne.n	800624c <HAL_RCC_OscConfig+0x274>
 8006232:	4b10      	ldr	r3, [pc, #64]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a0f      	ldr	r2, [pc, #60]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8006238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	4b0d      	ldr	r3, [pc, #52]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a0c      	ldr	r2, [pc, #48]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8006244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	e00b      	b.n	8006264 <HAL_RCC_OscConfig+0x28c>
 800624c:	4b09      	ldr	r3, [pc, #36]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a08      	ldr	r2, [pc, #32]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 8006252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	4b06      	ldr	r3, [pc, #24]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a05      	ldr	r2, [pc, #20]	; (8006274 <HAL_RCC_OscConfig+0x29c>)
 800625e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01b      	beq.n	80062a4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626c:	f7fc f964 	bl	8002538 <HAL_GetTick>
 8006270:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006272:	e010      	b.n	8006296 <HAL_RCC_OscConfig+0x2be>
 8006274:	40021000 	.word	0x40021000
 8006278:	080090a0 	.word	0x080090a0
 800627c:	20000008 	.word	0x20000008
 8006280:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006284:	f7fc f958 	bl	8002538 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b64      	cmp	r3, #100	; 0x64
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e300      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006296:	4ba0      	ldr	r3, [pc, #640]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0f0      	beq.n	8006284 <HAL_RCC_OscConfig+0x2ac>
 80062a2:	e014      	b.n	80062ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a4:	f7fc f948 	bl	8002538 <HAL_GetTick>
 80062a8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062ac:	f7fc f944 	bl	8002538 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b64      	cmp	r3, #100	; 0x64
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e2ec      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062be:	4b96      	ldr	r3, [pc, #600]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1f0      	bne.n	80062ac <HAL_RCC_OscConfig+0x2d4>
 80062ca:	e000      	b.n	80062ce <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d060      	beq.n	800639c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	2b04      	cmp	r3, #4
 80062de:	d005      	beq.n	80062ec <HAL_RCC_OscConfig+0x314>
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	2b0c      	cmp	r3, #12
 80062e4:	d119      	bne.n	800631a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d116      	bne.n	800631a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062ec:	4b8a      	ldr	r3, [pc, #552]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <HAL_RCC_OscConfig+0x32c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e2c9      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006304:	4b84      	ldr	r3, [pc, #528]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	061b      	lsls	r3, r3, #24
 8006312:	4981      	ldr	r1, [pc, #516]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 8006314:	4313      	orrs	r3, r2
 8006316:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006318:	e040      	b.n	800639c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d023      	beq.n	800636a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006322:	4b7d      	ldr	r3, [pc, #500]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a7c      	ldr	r2, [pc, #496]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 8006328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800632c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632e:	f7fc f903 	bl	8002538 <HAL_GetTick>
 8006332:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006334:	e008      	b.n	8006348 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006336:	f7fc f8ff 	bl	8002538 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d901      	bls.n	8006348 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e2a7      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006348:	4b73      	ldr	r3, [pc, #460]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0f0      	beq.n	8006336 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006354:	4b70      	ldr	r3, [pc, #448]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	061b      	lsls	r3, r3, #24
 8006362:	496d      	ldr	r1, [pc, #436]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 8006364:	4313      	orrs	r3, r2
 8006366:	604b      	str	r3, [r1, #4]
 8006368:	e018      	b.n	800639c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800636a:	4b6b      	ldr	r3, [pc, #428]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a6a      	ldr	r2, [pc, #424]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 8006370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006376:	f7fc f8df 	bl	8002538 <HAL_GetTick>
 800637a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800637c:	e008      	b.n	8006390 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800637e:	f7fc f8db 	bl	8002538 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d901      	bls.n	8006390 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e283      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006390:	4b61      	ldr	r3, [pc, #388]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1f0      	bne.n	800637e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0308 	and.w	r3, r3, #8
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d07f      	beq.n	80064a8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d05f      	beq.n	8006470 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80063b0:	4b59      	ldr	r3, [pc, #356]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 80063b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063b6:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	699a      	ldr	r2, [r3, #24]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f003 0310 	and.w	r3, r3, #16
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d037      	beq.n	8006436 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d006      	beq.n	80063de <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e25c      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01b      	beq.n	8006420 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80063e8:	4b4b      	ldr	r3, [pc, #300]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 80063ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ee:	4a4a      	ldr	r2, [pc, #296]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 80063f0:	f023 0301 	bic.w	r3, r3, #1
 80063f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063f8:	f7fc f89e 	bl	8002538 <HAL_GetTick>
 80063fc:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006400:	f7fc f89a 	bl	8002538 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b11      	cmp	r3, #17
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e242      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006412:	4b41      	ldr	r3, [pc, #260]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 8006414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1ef      	bne.n	8006400 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8006420:	4b3d      	ldr	r3, [pc, #244]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 8006422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006426:	f023 0210 	bic.w	r2, r3, #16
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	493a      	ldr	r1, [pc, #232]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 8006430:	4313      	orrs	r3, r2
 8006432:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006436:	4b38      	ldr	r3, [pc, #224]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 8006438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800643c:	4a36      	ldr	r2, [pc, #216]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 800643e:	f043 0301 	orr.w	r3, r3, #1
 8006442:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006446:	f7fc f877 	bl	8002538 <HAL_GetTick>
 800644a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800644c:	e008      	b.n	8006460 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800644e:	f7fc f873 	bl	8002538 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	2b11      	cmp	r3, #17
 800645a:	d901      	bls.n	8006460 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e21b      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006460:	4b2d      	ldr	r3, [pc, #180]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 8006462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0ef      	beq.n	800644e <HAL_RCC_OscConfig+0x476>
 800646e:	e01b      	b.n	80064a8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006470:	4b29      	ldr	r3, [pc, #164]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 8006472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006476:	4a28      	ldr	r2, [pc, #160]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 8006478:	f023 0301 	bic.w	r3, r3, #1
 800647c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006480:	f7fc f85a 	bl	8002538 <HAL_GetTick>
 8006484:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006488:	f7fc f856 	bl	8002538 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b11      	cmp	r3, #17
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e1fe      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800649a:	4b1f      	ldr	r3, [pc, #124]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 800649c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1ef      	bne.n	8006488 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 80c1 	beq.w	8006638 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064b6:	2300      	movs	r3, #0
 80064b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80064bc:	4b16      	ldr	r3, [pc, #88]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 80064be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10e      	bne.n	80064e6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064c8:	4b13      	ldr	r3, [pc, #76]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 80064ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064cc:	4a12      	ldr	r2, [pc, #72]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 80064ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064d2:	6593      	str	r3, [r2, #88]	; 0x58
 80064d4:	4b10      	ldr	r3, [pc, #64]	; (8006518 <HAL_RCC_OscConfig+0x540>)
 80064d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80064e0:	2301      	movs	r3, #1
 80064e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064e6:	4b0d      	ldr	r3, [pc, #52]	; (800651c <HAL_RCC_OscConfig+0x544>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d11c      	bne.n	800652c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064f2:	4b0a      	ldr	r3, [pc, #40]	; (800651c <HAL_RCC_OscConfig+0x544>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a09      	ldr	r2, [pc, #36]	; (800651c <HAL_RCC_OscConfig+0x544>)
 80064f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064fe:	f7fc f81b 	bl	8002538 <HAL_GetTick>
 8006502:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006504:	e00c      	b.n	8006520 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006506:	f7fc f817 	bl	8002538 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d905      	bls.n	8006520 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e1bf      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
 8006518:	40021000 	.word	0x40021000
 800651c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006520:	4bb1      	ldr	r3, [pc, #708]	; (80067e8 <HAL_RCC_OscConfig+0x810>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0ec      	beq.n	8006506 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d02c      	beq.n	8006592 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8006538:	4bac      	ldr	r3, [pc, #688]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 800653a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654a:	49a8      	ldr	r1, [pc, #672]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 800654c:	4313      	orrs	r3, r2
 800654e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	2b00      	cmp	r3, #0
 800655c:	d010      	beq.n	8006580 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800655e:	4ba3      	ldr	r3, [pc, #652]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 8006560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006564:	4aa1      	ldr	r2, [pc, #644]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 8006566:	f043 0304 	orr.w	r3, r3, #4
 800656a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800656e:	4b9f      	ldr	r3, [pc, #636]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 8006570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006574:	4a9d      	ldr	r2, [pc, #628]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 8006576:	f043 0301 	orr.w	r3, r3, #1
 800657a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800657e:	e018      	b.n	80065b2 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006580:	4b9a      	ldr	r3, [pc, #616]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 8006582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006586:	4a99      	ldr	r2, [pc, #612]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 8006588:	f043 0301 	orr.w	r3, r3, #1
 800658c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006590:	e00f      	b.n	80065b2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006592:	4b96      	ldr	r3, [pc, #600]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 8006594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006598:	4a94      	ldr	r2, [pc, #592]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 800659a:	f023 0301 	bic.w	r3, r3, #1
 800659e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80065a2:	4b92      	ldr	r3, [pc, #584]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 80065a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a8:	4a90      	ldr	r2, [pc, #576]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 80065aa:	f023 0304 	bic.w	r3, r3, #4
 80065ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d016      	beq.n	80065e8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ba:	f7fb ffbd 	bl	8002538 <HAL_GetTick>
 80065be:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065c0:	e00a      	b.n	80065d8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065c2:	f7fb ffb9 	bl	8002538 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e15f      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065d8:	4b84      	ldr	r3, [pc, #528]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 80065da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0ed      	beq.n	80065c2 <HAL_RCC_OscConfig+0x5ea>
 80065e6:	e01d      	b.n	8006624 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e8:	f7fb ffa6 	bl	8002538 <HAL_GetTick>
 80065ec:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065ee:	e00a      	b.n	8006606 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065f0:	f7fb ffa2 	bl	8002538 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80065fe:	4293      	cmp	r3, r2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e148      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006606:	4b79      	ldr	r3, [pc, #484]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 8006608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1ed      	bne.n	80065f0 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8006614:	4b75      	ldr	r3, [pc, #468]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 8006616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661a:	4a74      	ldr	r2, [pc, #464]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 800661c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006628:	2b01      	cmp	r3, #1
 800662a:	d105      	bne.n	8006638 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800662c:	4b6f      	ldr	r3, [pc, #444]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 800662e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006630:	4a6e      	ldr	r2, [pc, #440]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 8006632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006636:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b00      	cmp	r3, #0
 8006642:	d03c      	beq.n	80066be <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01c      	beq.n	8006686 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800664c:	4b67      	ldr	r3, [pc, #412]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 800664e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006652:	4a66      	ldr	r2, [pc, #408]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 8006654:	f043 0301 	orr.w	r3, r3, #1
 8006658:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800665c:	f7fb ff6c 	bl	8002538 <HAL_GetTick>
 8006660:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006662:	e008      	b.n	8006676 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006664:	f7fb ff68 	bl	8002538 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b02      	cmp	r3, #2
 8006670:	d901      	bls.n	8006676 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e110      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006676:	4b5d      	ldr	r3, [pc, #372]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 8006678:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d0ef      	beq.n	8006664 <HAL_RCC_OscConfig+0x68c>
 8006684:	e01b      	b.n	80066be <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006686:	4b59      	ldr	r3, [pc, #356]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 8006688:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800668c:	4a57      	ldr	r2, [pc, #348]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 800668e:	f023 0301 	bic.w	r3, r3, #1
 8006692:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006696:	f7fb ff4f 	bl	8002538 <HAL_GetTick>
 800669a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800669c:	e008      	b.n	80066b0 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800669e:	f7fb ff4b 	bl	8002538 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d901      	bls.n	80066b0 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e0f3      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066b0:	4b4e      	ldr	r3, [pc, #312]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 80066b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1ef      	bne.n	800669e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 80e7 	beq.w	8006896 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	f040 80b7 	bne.w	8006840 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80066d2:	4b46      	ldr	r3, [pc, #280]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	f003 0203 	and.w	r2, r3, #3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d124      	bne.n	8006730 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f0:	3b01      	subs	r3, #1
 80066f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d11b      	bne.n	8006730 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006702:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006704:	429a      	cmp	r2, r3
 8006706:	d113      	bne.n	8006730 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006712:	085b      	lsrs	r3, r3, #1
 8006714:	3b01      	subs	r3, #1
 8006716:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006718:	429a      	cmp	r2, r3
 800671a:	d109      	bne.n	8006730 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	085b      	lsrs	r3, r3, #1
 8006728:	3b01      	subs	r3, #1
 800672a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800672c:	429a      	cmp	r2, r3
 800672e:	d061      	beq.n	80067f4 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	2b0c      	cmp	r3, #12
 8006734:	d056      	beq.n	80067e4 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006736:	4b2d      	ldr	r3, [pc, #180]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a2c      	ldr	r2, [pc, #176]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 800673c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006740:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006742:	f7fb fef9 	bl	8002538 <HAL_GetTick>
 8006746:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006748:	e008      	b.n	800675c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800674a:	f7fb fef5 	bl	8002538 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d901      	bls.n	800675c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e09d      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800675c:	4b23      	ldr	r3, [pc, #140]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1f0      	bne.n	800674a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006768:	4b20      	ldr	r3, [pc, #128]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	4b20      	ldr	r3, [pc, #128]	; (80067f0 <HAL_RCC_OscConfig+0x818>)
 800676e:	4013      	ands	r3, r2
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006778:	3a01      	subs	r2, #1
 800677a:	0112      	lsls	r2, r2, #4
 800677c:	4311      	orrs	r1, r2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006782:	0212      	lsls	r2, r2, #8
 8006784:	4311      	orrs	r1, r2
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800678a:	0852      	lsrs	r2, r2, #1
 800678c:	3a01      	subs	r2, #1
 800678e:	0552      	lsls	r2, r2, #21
 8006790:	4311      	orrs	r1, r2
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006796:	0852      	lsrs	r2, r2, #1
 8006798:	3a01      	subs	r2, #1
 800679a:	0652      	lsls	r2, r2, #25
 800679c:	430a      	orrs	r2, r1
 800679e:	4913      	ldr	r1, [pc, #76]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80067a4:	4b11      	ldr	r3, [pc, #68]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a10      	ldr	r2, [pc, #64]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 80067aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067b0:	4b0e      	ldr	r3, [pc, #56]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	4a0d      	ldr	r2, [pc, #52]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 80067b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80067bc:	f7fb febc 	bl	8002538 <HAL_GetTick>
 80067c0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067c2:	e008      	b.n	80067d6 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c4:	f7fb feb8 	bl	8002538 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d901      	bls.n	80067d6 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e060      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067d6:	4b05      	ldr	r3, [pc, #20]	; (80067ec <HAL_RCC_OscConfig+0x814>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d0f0      	beq.n	80067c4 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067e2:	e058      	b.n	8006896 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e057      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
 80067e8:	40007000 	.word	0x40007000
 80067ec:	40021000 	.word	0x40021000
 80067f0:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067f4:	4b2a      	ldr	r3, [pc, #168]	; (80068a0 <HAL_RCC_OscConfig+0x8c8>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d14a      	bne.n	8006896 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006800:	4b27      	ldr	r3, [pc, #156]	; (80068a0 <HAL_RCC_OscConfig+0x8c8>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a26      	ldr	r2, [pc, #152]	; (80068a0 <HAL_RCC_OscConfig+0x8c8>)
 8006806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800680a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800680c:	4b24      	ldr	r3, [pc, #144]	; (80068a0 <HAL_RCC_OscConfig+0x8c8>)
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	4a23      	ldr	r2, [pc, #140]	; (80068a0 <HAL_RCC_OscConfig+0x8c8>)
 8006812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006816:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006818:	f7fb fe8e 	bl	8002538 <HAL_GetTick>
 800681c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006820:	f7fb fe8a 	bl	8002538 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e032      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006832:	4b1b      	ldr	r3, [pc, #108]	; (80068a0 <HAL_RCC_OscConfig+0x8c8>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0f0      	beq.n	8006820 <HAL_RCC_OscConfig+0x848>
 800683e:	e02a      	b.n	8006896 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	2b0c      	cmp	r3, #12
 8006844:	d025      	beq.n	8006892 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006846:	4b16      	ldr	r3, [pc, #88]	; (80068a0 <HAL_RCC_OscConfig+0x8c8>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a15      	ldr	r2, [pc, #84]	; (80068a0 <HAL_RCC_OscConfig+0x8c8>)
 800684c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006850:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006852:	4b13      	ldr	r3, [pc, #76]	; (80068a0 <HAL_RCC_OscConfig+0x8c8>)
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	4a12      	ldr	r2, [pc, #72]	; (80068a0 <HAL_RCC_OscConfig+0x8c8>)
 8006858:	f023 0303 	bic.w	r3, r3, #3
 800685c:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800685e:	4b10      	ldr	r3, [pc, #64]	; (80068a0 <HAL_RCC_OscConfig+0x8c8>)
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	4a0f      	ldr	r2, [pc, #60]	; (80068a0 <HAL_RCC_OscConfig+0x8c8>)
 8006864:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006868:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800686a:	f7fb fe65 	bl	8002538 <HAL_GetTick>
 800686e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006870:	e008      	b.n	8006884 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006872:	f7fb fe61 	bl	8002538 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	2b02      	cmp	r3, #2
 800687e:	d901      	bls.n	8006884 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e009      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006884:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <HAL_RCC_OscConfig+0x8c8>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1f0      	bne.n	8006872 <HAL_RCC_OscConfig+0x89a>
 8006890:	e001      	b.n	8006896 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e000      	b.n	8006898 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3728      	adds	r7, #40	; 0x28
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40021000 	.word	0x40021000

080068a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e0c8      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068b8:	4b66      	ldr	r3, [pc, #408]	; (8006a54 <HAL_RCC_ClockConfig+0x1b0>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d910      	bls.n	80068e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068c6:	4b63      	ldr	r3, [pc, #396]	; (8006a54 <HAL_RCC_ClockConfig+0x1b0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f023 0207 	bic.w	r2, r3, #7
 80068ce:	4961      	ldr	r1, [pc, #388]	; (8006a54 <HAL_RCC_ClockConfig+0x1b0>)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068d6:	4b5f      	ldr	r3, [pc, #380]	; (8006a54 <HAL_RCC_ClockConfig+0x1b0>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0307 	and.w	r3, r3, #7
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d001      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e0b0      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d04c      	beq.n	800698e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d107      	bne.n	800690c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068fc:	4b56      	ldr	r3, [pc, #344]	; (8006a58 <HAL_RCC_ClockConfig+0x1b4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d121      	bne.n	800694c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e09e      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	2b02      	cmp	r3, #2
 8006912:	d107      	bne.n	8006924 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006914:	4b50      	ldr	r3, [pc, #320]	; (8006a58 <HAL_RCC_ClockConfig+0x1b4>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d115      	bne.n	800694c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e092      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d107      	bne.n	800693c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800692c:	4b4a      	ldr	r3, [pc, #296]	; (8006a58 <HAL_RCC_ClockConfig+0x1b4>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b00      	cmp	r3, #0
 8006936:	d109      	bne.n	800694c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e086      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800693c:	4b46      	ldr	r3, [pc, #280]	; (8006a58 <HAL_RCC_ClockConfig+0x1b4>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e07e      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800694c:	4b42      	ldr	r3, [pc, #264]	; (8006a58 <HAL_RCC_ClockConfig+0x1b4>)
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f023 0203 	bic.w	r2, r3, #3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	493f      	ldr	r1, [pc, #252]	; (8006a58 <HAL_RCC_ClockConfig+0x1b4>)
 800695a:	4313      	orrs	r3, r2
 800695c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800695e:	f7fb fdeb 	bl	8002538 <HAL_GetTick>
 8006962:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006964:	e00a      	b.n	800697c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006966:	f7fb fde7 	bl	8002538 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	f241 3288 	movw	r2, #5000	; 0x1388
 8006974:	4293      	cmp	r3, r2
 8006976:	d901      	bls.n	800697c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e066      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800697c:	4b36      	ldr	r3, [pc, #216]	; (8006a58 <HAL_RCC_ClockConfig+0x1b4>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f003 020c 	and.w	r2, r3, #12
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	429a      	cmp	r2, r3
 800698c:	d1eb      	bne.n	8006966 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d008      	beq.n	80069ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800699a:	4b2f      	ldr	r3, [pc, #188]	; (8006a58 <HAL_RCC_ClockConfig+0x1b4>)
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	492c      	ldr	r1, [pc, #176]	; (8006a58 <HAL_RCC_ClockConfig+0x1b4>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069ac:	4b29      	ldr	r3, [pc, #164]	; (8006a54 <HAL_RCC_ClockConfig+0x1b0>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d210      	bcs.n	80069dc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ba:	4b26      	ldr	r3, [pc, #152]	; (8006a54 <HAL_RCC_ClockConfig+0x1b0>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f023 0207 	bic.w	r2, r3, #7
 80069c2:	4924      	ldr	r1, [pc, #144]	; (8006a54 <HAL_RCC_ClockConfig+0x1b0>)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ca:	4b22      	ldr	r3, [pc, #136]	; (8006a54 <HAL_RCC_ClockConfig+0x1b0>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0307 	and.w	r3, r3, #7
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d001      	beq.n	80069dc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e036      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0304 	and.w	r3, r3, #4
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d008      	beq.n	80069fa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069e8:	4b1b      	ldr	r3, [pc, #108]	; (8006a58 <HAL_RCC_ClockConfig+0x1b4>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	4918      	ldr	r1, [pc, #96]	; (8006a58 <HAL_RCC_ClockConfig+0x1b4>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0308 	and.w	r3, r3, #8
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d009      	beq.n	8006a1a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a06:	4b14      	ldr	r3, [pc, #80]	; (8006a58 <HAL_RCC_ClockConfig+0x1b4>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	4910      	ldr	r1, [pc, #64]	; (8006a58 <HAL_RCC_ClockConfig+0x1b4>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a1a:	f000 f825 	bl	8006a68 <HAL_RCC_GetSysClockFreq>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	4b0d      	ldr	r3, [pc, #52]	; (8006a58 <HAL_RCC_ClockConfig+0x1b4>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	091b      	lsrs	r3, r3, #4
 8006a26:	f003 030f 	and.w	r3, r3, #15
 8006a2a:	490c      	ldr	r1, [pc, #48]	; (8006a5c <HAL_RCC_ClockConfig+0x1b8>)
 8006a2c:	5ccb      	ldrb	r3, [r1, r3]
 8006a2e:	f003 031f 	and.w	r3, r3, #31
 8006a32:	fa22 f303 	lsr.w	r3, r2, r3
 8006a36:	4a0a      	ldr	r2, [pc, #40]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006a3a:	4b0a      	ldr	r3, [pc, #40]	; (8006a64 <HAL_RCC_ClockConfig+0x1c0>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fb fd2a 	bl	8002498 <HAL_InitTick>
 8006a44:	4603      	mov	r3, r0
 8006a46:	72fb      	strb	r3, [r7, #11]

  return status;
 8006a48:	7afb      	ldrb	r3, [r7, #11]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	40022000 	.word	0x40022000
 8006a58:	40021000 	.word	0x40021000
 8006a5c:	080090a0 	.word	0x080090a0
 8006a60:	20000008 	.word	0x20000008
 8006a64:	2000000c 	.word	0x2000000c

08006a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b089      	sub	sp, #36	; 0x24
 8006a6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	61fb      	str	r3, [r7, #28]
 8006a72:	2300      	movs	r3, #0
 8006a74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a76:	4b3e      	ldr	r3, [pc, #248]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 030c 	and.w	r3, r3, #12
 8006a7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a80:	4b3b      	ldr	r3, [pc, #236]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f003 0303 	and.w	r3, r3, #3
 8006a88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d005      	beq.n	8006a9c <HAL_RCC_GetSysClockFreq+0x34>
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	2b0c      	cmp	r3, #12
 8006a94:	d121      	bne.n	8006ada <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d11e      	bne.n	8006ada <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006a9c:	4b34      	ldr	r3, [pc, #208]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0308 	and.w	r3, r3, #8
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d107      	bne.n	8006ab8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006aa8:	4b31      	ldr	r3, [pc, #196]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8006aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aae:	0a1b      	lsrs	r3, r3, #8
 8006ab0:	f003 030f 	and.w	r3, r3, #15
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	e005      	b.n	8006ac4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ab8:	4b2d      	ldr	r3, [pc, #180]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	091b      	lsrs	r3, r3, #4
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006ac4:	4a2b      	ldr	r2, [pc, #172]	; (8006b74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006acc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10d      	bne.n	8006af0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ad8:	e00a      	b.n	8006af0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	2b04      	cmp	r3, #4
 8006ade:	d102      	bne.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ae0:	4b25      	ldr	r3, [pc, #148]	; (8006b78 <HAL_RCC_GetSysClockFreq+0x110>)
 8006ae2:	61bb      	str	r3, [r7, #24]
 8006ae4:	e004      	b.n	8006af0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d101      	bne.n	8006af0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006aec:	4b23      	ldr	r3, [pc, #140]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x114>)
 8006aee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	2b0c      	cmp	r3, #12
 8006af4:	d134      	bne.n	8006b60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006af6:	4b1e      	ldr	r3, [pc, #120]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d003      	beq.n	8006b0e <HAL_RCC_GetSysClockFreq+0xa6>
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b03      	cmp	r3, #3
 8006b0a:	d003      	beq.n	8006b14 <HAL_RCC_GetSysClockFreq+0xac>
 8006b0c:	e005      	b.n	8006b1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006b0e:	4b1a      	ldr	r3, [pc, #104]	; (8006b78 <HAL_RCC_GetSysClockFreq+0x110>)
 8006b10:	617b      	str	r3, [r7, #20]
      break;
 8006b12:	e005      	b.n	8006b20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006b14:	4b19      	ldr	r3, [pc, #100]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x114>)
 8006b16:	617b      	str	r3, [r7, #20]
      break;
 8006b18:	e002      	b.n	8006b20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	617b      	str	r3, [r7, #20]
      break;
 8006b1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b20:	4b13      	ldr	r3, [pc, #76]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	091b      	lsrs	r3, r3, #4
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006b2e:	4b10      	ldr	r3, [pc, #64]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	0a1b      	lsrs	r3, r3, #8
 8006b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	fb02 f203 	mul.w	r2, r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b46:	4b0a      	ldr	r3, [pc, #40]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	0e5b      	lsrs	r3, r3, #25
 8006b4c:	f003 0303 	and.w	r3, r3, #3
 8006b50:	3301      	adds	r3, #1
 8006b52:	005b      	lsls	r3, r3, #1
 8006b54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006b60:	69bb      	ldr	r3, [r7, #24]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3724      	adds	r7, #36	; 0x24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40021000 	.word	0x40021000
 8006b74:	080090b8 	.word	0x080090b8
 8006b78:	00f42400 	.word	0x00f42400
 8006b7c:	007a1200 	.word	0x007a1200

08006b80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b84:	4b03      	ldr	r3, [pc, #12]	; (8006b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b86:	681b      	ldr	r3, [r3, #0]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	20000008 	.word	0x20000008

08006b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006b9c:	f7ff fff0 	bl	8006b80 <HAL_RCC_GetHCLKFreq>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	4b06      	ldr	r3, [pc, #24]	; (8006bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	0a1b      	lsrs	r3, r3, #8
 8006ba8:	f003 0307 	and.w	r3, r3, #7
 8006bac:	4904      	ldr	r1, [pc, #16]	; (8006bc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bae:	5ccb      	ldrb	r3, [r1, r3]
 8006bb0:	f003 031f 	and.w	r3, r3, #31
 8006bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	40021000 	.word	0x40021000
 8006bc0:	080090b0 	.word	0x080090b0

08006bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006bc8:	f7ff ffda 	bl	8006b80 <HAL_RCC_GetHCLKFreq>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	0adb      	lsrs	r3, r3, #11
 8006bd4:	f003 0307 	and.w	r3, r3, #7
 8006bd8:	4904      	ldr	r1, [pc, #16]	; (8006bec <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bda:	5ccb      	ldrb	r3, [r1, r3]
 8006bdc:	f003 031f 	and.w	r3, r3, #31
 8006be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	40021000 	.word	0x40021000
 8006bec:	080090b0 	.word	0x080090b0

08006bf0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006bfc:	4b2a      	ldr	r3, [pc, #168]	; (8006ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006c08:	f7ff f982 	bl	8005f10 <HAL_PWREx_GetVoltageRange>
 8006c0c:	6178      	str	r0, [r7, #20]
 8006c0e:	e014      	b.n	8006c3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c10:	4b25      	ldr	r3, [pc, #148]	; (8006ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c14:	4a24      	ldr	r2, [pc, #144]	; (8006ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8006c1c:	4b22      	ldr	r3, [pc, #136]	; (8006ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006c28:	f7ff f972 	bl	8005f10 <HAL_PWREx_GetVoltageRange>
 8006c2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006c2e:	4b1e      	ldr	r3, [pc, #120]	; (8006ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c32:	4a1d      	ldr	r2, [pc, #116]	; (8006ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c40:	d10b      	bne.n	8006c5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b80      	cmp	r3, #128	; 0x80
 8006c46:	d919      	bls.n	8006c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2ba0      	cmp	r3, #160	; 0xa0
 8006c4c:	d902      	bls.n	8006c54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c4e:	2302      	movs	r3, #2
 8006c50:	613b      	str	r3, [r7, #16]
 8006c52:	e013      	b.n	8006c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c54:	2301      	movs	r3, #1
 8006c56:	613b      	str	r3, [r7, #16]
 8006c58:	e010      	b.n	8006c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b80      	cmp	r3, #128	; 0x80
 8006c5e:	d902      	bls.n	8006c66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006c60:	2303      	movs	r3, #3
 8006c62:	613b      	str	r3, [r7, #16]
 8006c64:	e00a      	b.n	8006c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b80      	cmp	r3, #128	; 0x80
 8006c6a:	d102      	bne.n	8006c72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	613b      	str	r3, [r7, #16]
 8006c70:	e004      	b.n	8006c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b70      	cmp	r3, #112	; 0x70
 8006c76:	d101      	bne.n	8006c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c78:	2301      	movs	r3, #1
 8006c7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006c7c:	4b0b      	ldr	r3, [pc, #44]	; (8006cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f023 0207 	bic.w	r2, r3, #7
 8006c84:	4909      	ldr	r1, [pc, #36]	; (8006cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006c8c:	4b07      	ldr	r3, [pc, #28]	; (8006cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0307 	and.w	r3, r3, #7
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d001      	beq.n	8006c9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e000      	b.n	8006ca0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3718      	adds	r7, #24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	40021000 	.word	0x40021000
 8006cac:	40022000 	.word	0x40022000

08006cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006cb8:	2300      	movs	r3, #0
 8006cba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 809e 	beq.w	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006cd2:	4b46      	ldr	r3, [pc, #280]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e000      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00d      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ce8:	4b40      	ldr	r3, [pc, #256]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cec:	4a3f      	ldr	r2, [pc, #252]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8006cf4:	4b3d      	ldr	r3, [pc, #244]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cfc:	60bb      	str	r3, [r7, #8]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d00:	2301      	movs	r3, #1
 8006d02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d04:	4b3a      	ldr	r3, [pc, #232]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a39      	ldr	r2, [pc, #228]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d10:	f7fb fc12 	bl	8002538 <HAL_GetTick>
 8006d14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d16:	e009      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d18:	f7fb fc0e 	bl	8002538 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d902      	bls.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	74fb      	strb	r3, [r7, #19]
        break;
 8006d2a:	e005      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d2c:	4b30      	ldr	r3, [pc, #192]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0ef      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8006d38:	7cfb      	ldrb	r3, [r7, #19]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d15a      	bne.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d3e:	4b2b      	ldr	r3, [pc, #172]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d01e      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d019      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d5a:	4b24      	ldr	r3, [pc, #144]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d66:	4b21      	ldr	r3, [pc, #132]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6c:	4a1f      	ldr	r2, [pc, #124]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d76:	4b1d      	ldr	r3, [pc, #116]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d7c:	4a1b      	ldr	r2, [pc, #108]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d86:	4a19      	ldr	r2, [pc, #100]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d016      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d98:	f7fb fbce 	bl	8002538 <HAL_GetTick>
 8006d9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d9e:	e00b      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006da0:	f7fb fbca 	bl	8002538 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d902      	bls.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	74fb      	strb	r3, [r7, #19]
            break;
 8006db6:	e006      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006db8:	4b0c      	ldr	r3, [pc, #48]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0ec      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8006dc6:	7cfb      	ldrb	r3, [r7, #19]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10b      	bne.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dcc:	4b07      	ldr	r3, [pc, #28]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dda:	4904      	ldr	r1, [pc, #16]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006de2:	e009      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006de4:	7cfb      	ldrb	r3, [r7, #19]
 8006de6:	74bb      	strb	r3, [r7, #18]
 8006de8:	e006      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8006dea:	bf00      	nop
 8006dec:	40021000 	.word	0x40021000
 8006df0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df4:	7cfb      	ldrb	r3, [r7, #19]
 8006df6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006df8:	7c7b      	ldrb	r3, [r7, #17]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d105      	bne.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dfe:	4b6e      	ldr	r3, [pc, #440]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e02:	4a6d      	ldr	r2, [pc, #436]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e16:	4b68      	ldr	r3, [pc, #416]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e1c:	f023 0203 	bic.w	r2, r3, #3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	4964      	ldr	r1, [pc, #400]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00a      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e38:	4b5f      	ldr	r3, [pc, #380]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e3e:	f023 020c 	bic.w	r2, r3, #12
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	495c      	ldr	r1, [pc, #368]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0304 	and.w	r3, r3, #4
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e5a:	4b57      	ldr	r3, [pc, #348]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	4953      	ldr	r1, [pc, #332]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0320 	and.w	r3, r3, #32
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00a      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e7c:	4b4e      	ldr	r3, [pc, #312]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	494b      	ldr	r1, [pc, #300]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00a      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e9e:	4b46      	ldr	r3, [pc, #280]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	4942      	ldr	r1, [pc, #264]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00a      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ec0:	4b3d      	ldr	r3, [pc, #244]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	493a      	ldr	r1, [pc, #232]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00a      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ee2:	4b35      	ldr	r3, [pc, #212]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	4931      	ldr	r1, [pc, #196]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00a      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f04:	4b2c      	ldr	r3, [pc, #176]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	4929      	ldr	r1, [pc, #164]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f26:	4b24      	ldr	r3, [pc, #144]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	4920      	ldr	r1, [pc, #128]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d015      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f48:	4b1b      	ldr	r3, [pc, #108]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f56:	4918      	ldr	r1, [pc, #96]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f66:	d105      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f68:	4b13      	ldr	r3, [pc, #76]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	4a12      	ldr	r2, [pc, #72]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f72:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d015      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f80:	4b0d      	ldr	r3, [pc, #52]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8e:	490a      	ldr	r1, [pc, #40]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f9e:	d105      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fa0:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	4a04      	ldr	r2, [pc, #16]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006fa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006faa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006fac:	7cbb      	ldrb	r3, [r7, #18]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	40021000 	.word	0x40021000

08006fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e049      	b.n	8007062 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fa fddc 	bl	8001ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	f000 fd68 	bl	8007ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b01      	cmp	r3, #1
 800707e:	d001      	beq.n	8007084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e03b      	b.n	80070fc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0201 	orr.w	r2, r2, #1
 800709a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a19      	ldr	r2, [pc, #100]	; (8007108 <HAL_TIM_Base_Start_IT+0x9c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d009      	beq.n	80070ba <HAL_TIM_Base_Start_IT+0x4e>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ae:	d004      	beq.n	80070ba <HAL_TIM_Base_Start_IT+0x4e>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a15      	ldr	r2, [pc, #84]	; (800710c <HAL_TIM_Base_Start_IT+0xa0>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d115      	bne.n	80070e6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	4b13      	ldr	r3, [pc, #76]	; (8007110 <HAL_TIM_Base_Start_IT+0xa4>)
 80070c2:	4013      	ands	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2b06      	cmp	r3, #6
 80070ca:	d015      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0x8c>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d2:	d011      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0201 	orr.w	r2, r2, #1
 80070e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070e4:	e008      	b.n	80070f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f042 0201 	orr.w	r2, r2, #1
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	e000      	b.n	80070fa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	40012c00 	.word	0x40012c00
 800710c:	40014000 	.word	0x40014000
 8007110:	00010007 	.word	0x00010007

08007114 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68da      	ldr	r2, [r3, #12]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0201 	bic.w	r2, r2, #1
 800712a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6a1a      	ldr	r2, [r3, #32]
 8007132:	f241 1311 	movw	r3, #4369	; 0x1111
 8007136:	4013      	ands	r3, r2
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10f      	bne.n	800715c <HAL_TIM_Base_Stop_IT+0x48>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6a1a      	ldr	r2, [r3, #32]
 8007142:	f240 4344 	movw	r3, #1092	; 0x444
 8007146:	4013      	ands	r3, r2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d107      	bne.n	800715c <HAL_TIM_Base_Stop_IT+0x48>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0201 	bic.w	r2, r2, #1
 800715a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b082      	sub	sp, #8
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e049      	b.n	8007218 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d106      	bne.n	800719e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f841 	bl	8007220 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2202      	movs	r2, #2
 80071a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	3304      	adds	r3, #4
 80071ae:	4619      	mov	r1, r3
 80071b0:	4610      	mov	r0, r2
 80071b2:	f000 fc8d 	bl	8007ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d109      	bne.n	8007258 <HAL_TIM_OC_Start+0x24>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b01      	cmp	r3, #1
 800724e:	bf14      	ite	ne
 8007250:	2301      	movne	r3, #1
 8007252:	2300      	moveq	r3, #0
 8007254:	b2db      	uxtb	r3, r3
 8007256:	e03c      	b.n	80072d2 <HAL_TIM_OC_Start+0x9e>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2b04      	cmp	r3, #4
 800725c:	d109      	bne.n	8007272 <HAL_TIM_OC_Start+0x3e>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b01      	cmp	r3, #1
 8007268:	bf14      	ite	ne
 800726a:	2301      	movne	r3, #1
 800726c:	2300      	moveq	r3, #0
 800726e:	b2db      	uxtb	r3, r3
 8007270:	e02f      	b.n	80072d2 <HAL_TIM_OC_Start+0x9e>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b08      	cmp	r3, #8
 8007276:	d109      	bne.n	800728c <HAL_TIM_OC_Start+0x58>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b01      	cmp	r3, #1
 8007282:	bf14      	ite	ne
 8007284:	2301      	movne	r3, #1
 8007286:	2300      	moveq	r3, #0
 8007288:	b2db      	uxtb	r3, r3
 800728a:	e022      	b.n	80072d2 <HAL_TIM_OC_Start+0x9e>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b0c      	cmp	r3, #12
 8007290:	d109      	bne.n	80072a6 <HAL_TIM_OC_Start+0x72>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b01      	cmp	r3, #1
 800729c:	bf14      	ite	ne
 800729e:	2301      	movne	r3, #1
 80072a0:	2300      	moveq	r3, #0
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	e015      	b.n	80072d2 <HAL_TIM_OC_Start+0x9e>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b10      	cmp	r3, #16
 80072aa:	d109      	bne.n	80072c0 <HAL_TIM_OC_Start+0x8c>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	bf14      	ite	ne
 80072b8:	2301      	movne	r3, #1
 80072ba:	2300      	moveq	r3, #0
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	e008      	b.n	80072d2 <HAL_TIM_OC_Start+0x9e>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	bf14      	ite	ne
 80072cc:	2301      	movne	r3, #1
 80072ce:	2300      	moveq	r3, #0
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d001      	beq.n	80072da <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e07e      	b.n	80073d8 <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d104      	bne.n	80072ea <HAL_TIM_OC_Start+0xb6>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072e8:	e023      	b.n	8007332 <HAL_TIM_OC_Start+0xfe>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d104      	bne.n	80072fa <HAL_TIM_OC_Start+0xc6>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072f8:	e01b      	b.n	8007332 <HAL_TIM_OC_Start+0xfe>
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d104      	bne.n	800730a <HAL_TIM_OC_Start+0xd6>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007308:	e013      	b.n	8007332 <HAL_TIM_OC_Start+0xfe>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b0c      	cmp	r3, #12
 800730e:	d104      	bne.n	800731a <HAL_TIM_OC_Start+0xe6>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2202      	movs	r2, #2
 8007314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007318:	e00b      	b.n	8007332 <HAL_TIM_OC_Start+0xfe>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b10      	cmp	r3, #16
 800731e:	d104      	bne.n	800732a <HAL_TIM_OC_Start+0xf6>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2202      	movs	r2, #2
 8007324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007328:	e003      	b.n	8007332 <HAL_TIM_OC_Start+0xfe>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2202      	movs	r2, #2
 800732e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2201      	movs	r2, #1
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 ff44 	bl	80081c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a26      	ldr	r2, [pc, #152]	; (80073e0 <HAL_TIM_OC_Start+0x1ac>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d009      	beq.n	800735e <HAL_TIM_OC_Start+0x12a>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a25      	ldr	r2, [pc, #148]	; (80073e4 <HAL_TIM_OC_Start+0x1b0>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d004      	beq.n	800735e <HAL_TIM_OC_Start+0x12a>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a23      	ldr	r2, [pc, #140]	; (80073e8 <HAL_TIM_OC_Start+0x1b4>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d101      	bne.n	8007362 <HAL_TIM_OC_Start+0x12e>
 800735e:	2301      	movs	r3, #1
 8007360:	e000      	b.n	8007364 <HAL_TIM_OC_Start+0x130>
 8007362:	2300      	movs	r3, #0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d007      	beq.n	8007378 <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007376:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a18      	ldr	r2, [pc, #96]	; (80073e0 <HAL_TIM_OC_Start+0x1ac>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d009      	beq.n	8007396 <HAL_TIM_OC_Start+0x162>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800738a:	d004      	beq.n	8007396 <HAL_TIM_OC_Start+0x162>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a14      	ldr	r2, [pc, #80]	; (80073e4 <HAL_TIM_OC_Start+0x1b0>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d115      	bne.n	80073c2 <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	4b13      	ldr	r3, [pc, #76]	; (80073ec <HAL_TIM_OC_Start+0x1b8>)
 800739e:	4013      	ands	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2b06      	cmp	r3, #6
 80073a6:	d015      	beq.n	80073d4 <HAL_TIM_OC_Start+0x1a0>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ae:	d011      	beq.n	80073d4 <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f042 0201 	orr.w	r2, r2, #1
 80073be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073c0:	e008      	b.n	80073d4 <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f042 0201 	orr.w	r2, r2, #1
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	e000      	b.n	80073d6 <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	40012c00 	.word	0x40012c00
 80073e4:	40014000 	.word	0x40014000
 80073e8:	40014400 	.word	0x40014400
 80073ec:	00010007 	.word	0x00010007

080073f0 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2200      	movs	r2, #0
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fee0 	bl	80081c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a39      	ldr	r2, [pc, #228]	; (80074f4 <HAL_TIM_OC_Stop+0x104>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d009      	beq.n	8007426 <HAL_TIM_OC_Stop+0x36>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a38      	ldr	r2, [pc, #224]	; (80074f8 <HAL_TIM_OC_Stop+0x108>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d004      	beq.n	8007426 <HAL_TIM_OC_Stop+0x36>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a36      	ldr	r2, [pc, #216]	; (80074fc <HAL_TIM_OC_Stop+0x10c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d101      	bne.n	800742a <HAL_TIM_OC_Stop+0x3a>
 8007426:	2301      	movs	r3, #1
 8007428:	e000      	b.n	800742c <HAL_TIM_OC_Stop+0x3c>
 800742a:	2300      	movs	r3, #0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d017      	beq.n	8007460 <HAL_TIM_OC_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6a1a      	ldr	r2, [r3, #32]
 8007436:	f241 1311 	movw	r3, #4369	; 0x1111
 800743a:	4013      	ands	r3, r2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10f      	bne.n	8007460 <HAL_TIM_OC_Stop+0x70>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6a1a      	ldr	r2, [r3, #32]
 8007446:	f240 4344 	movw	r3, #1092	; 0x444
 800744a:	4013      	ands	r3, r2
 800744c:	2b00      	cmp	r3, #0
 800744e:	d107      	bne.n	8007460 <HAL_TIM_OC_Stop+0x70>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800745e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6a1a      	ldr	r2, [r3, #32]
 8007466:	f241 1311 	movw	r3, #4369	; 0x1111
 800746a:	4013      	ands	r3, r2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10f      	bne.n	8007490 <HAL_TIM_OC_Stop+0xa0>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6a1a      	ldr	r2, [r3, #32]
 8007476:	f240 4344 	movw	r3, #1092	; 0x444
 800747a:	4013      	ands	r3, r2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d107      	bne.n	8007490 <HAL_TIM_OC_Stop+0xa0>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 0201 	bic.w	r2, r2, #1
 800748e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d104      	bne.n	80074a0 <HAL_TIM_OC_Stop+0xb0>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800749e:	e023      	b.n	80074e8 <HAL_TIM_OC_Stop+0xf8>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d104      	bne.n	80074b0 <HAL_TIM_OC_Stop+0xc0>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074ae:	e01b      	b.n	80074e8 <HAL_TIM_OC_Stop+0xf8>
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	2b08      	cmp	r3, #8
 80074b4:	d104      	bne.n	80074c0 <HAL_TIM_OC_Stop+0xd0>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074be:	e013      	b.n	80074e8 <HAL_TIM_OC_Stop+0xf8>
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	2b0c      	cmp	r3, #12
 80074c4:	d104      	bne.n	80074d0 <HAL_TIM_OC_Stop+0xe0>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074ce:	e00b      	b.n	80074e8 <HAL_TIM_OC_Stop+0xf8>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2b10      	cmp	r3, #16
 80074d4:	d104      	bne.n	80074e0 <HAL_TIM_OC_Stop+0xf0>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074de:	e003      	b.n	80074e8 <HAL_TIM_OC_Stop+0xf8>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	40012c00 	.word	0x40012c00
 80074f8:	40014000 	.word	0x40014000
 80074fc:	40014400 	.word	0x40014400

08007500 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e041      	b.n	8007598 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d106      	bne.n	800752e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f839 	bl	80075a0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2202      	movs	r2, #2
 8007532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	3304      	adds	r3, #4
 800753e:	4619      	mov	r1, r3
 8007540:	4610      	mov	r0, r2
 8007542:	f000 fac5 	bl	8007ad0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0208 	bic.w	r2, r2, #8
 8007554:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6819      	ldr	r1, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	430a      	orrs	r2, r1
 8007564:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d122      	bne.n	8007610 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d11b      	bne.n	8007610 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f06f 0202 	mvn.w	r2, #2
 80075e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	f003 0303 	and.w	r3, r3, #3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fa4c 	bl	8007a94 <HAL_TIM_IC_CaptureCallback>
 80075fc:	e005      	b.n	800760a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fa3e 	bl	8007a80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fa4f 	bl	8007aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f003 0304 	and.w	r3, r3, #4
 800761a:	2b04      	cmp	r3, #4
 800761c:	d122      	bne.n	8007664 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f003 0304 	and.w	r3, r3, #4
 8007628:	2b04      	cmp	r3, #4
 800762a:	d11b      	bne.n	8007664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f06f 0204 	mvn.w	r2, #4
 8007634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2202      	movs	r2, #2
 800763a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fa22 	bl	8007a94 <HAL_TIM_IC_CaptureCallback>
 8007650:	e005      	b.n	800765e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fa14 	bl	8007a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fa25 	bl	8007aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	f003 0308 	and.w	r3, r3, #8
 800766e:	2b08      	cmp	r3, #8
 8007670:	d122      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f003 0308 	and.w	r3, r3, #8
 800767c:	2b08      	cmp	r3, #8
 800767e:	d11b      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f06f 0208 	mvn.w	r2, #8
 8007688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2204      	movs	r2, #4
 800768e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f9f8 	bl	8007a94 <HAL_TIM_IC_CaptureCallback>
 80076a4:	e005      	b.n	80076b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f9ea 	bl	8007a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f9fb 	bl	8007aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	f003 0310 	and.w	r3, r3, #16
 80076c2:	2b10      	cmp	r3, #16
 80076c4:	d122      	bne.n	800770c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f003 0310 	and.w	r3, r3, #16
 80076d0:	2b10      	cmp	r3, #16
 80076d2:	d11b      	bne.n	800770c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f06f 0210 	mvn.w	r2, #16
 80076dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2208      	movs	r2, #8
 80076e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f9ce 	bl	8007a94 <HAL_TIM_IC_CaptureCallback>
 80076f8:	e005      	b.n	8007706 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f9c0 	bl	8007a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f9d1 	bl	8007aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b01      	cmp	r3, #1
 8007718:	d10e      	bne.n	8007738 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b01      	cmp	r3, #1
 8007726:	d107      	bne.n	8007738 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f06f 0201 	mvn.w	r2, #1
 8007730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f99a 	bl	8007a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007742:	2b80      	cmp	r3, #128	; 0x80
 8007744:	d10e      	bne.n	8007764 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007750:	2b80      	cmp	r3, #128	; 0x80
 8007752:	d107      	bne.n	8007764 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800775c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fdc8 	bl	80082f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800776e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007772:	d10e      	bne.n	8007792 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777e:	2b80      	cmp	r3, #128	; 0x80
 8007780:	d107      	bne.n	8007792 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800778a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fdbb 	bl	8008308 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779c:	2b40      	cmp	r3, #64	; 0x40
 800779e:	d10e      	bne.n	80077be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077aa:	2b40      	cmp	r3, #64	; 0x40
 80077ac:	d107      	bne.n	80077be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f97f 	bl	8007abc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	f003 0320 	and.w	r3, r3, #32
 80077c8:	2b20      	cmp	r3, #32
 80077ca:	d10e      	bne.n	80077ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	f003 0320 	and.w	r3, r3, #32
 80077d6:	2b20      	cmp	r3, #32
 80077d8:	d107      	bne.n	80077ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f06f 0220 	mvn.w	r2, #32
 80077e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fd7b 	bl	80082e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077ea:	bf00      	nop
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007806:	2b01      	cmp	r3, #1
 8007808:	d101      	bne.n	800780e <HAL_TIM_OC_ConfigChannel+0x1a>
 800780a:	2302      	movs	r3, #2
 800780c:	e064      	b.n	80078d8 <HAL_TIM_OC_ConfigChannel+0xe4>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b14      	cmp	r3, #20
 800781a:	d857      	bhi.n	80078cc <HAL_TIM_OC_ConfigChannel+0xd8>
 800781c:	a201      	add	r2, pc, #4	; (adr r2, 8007824 <HAL_TIM_OC_ConfigChannel+0x30>)
 800781e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007822:	bf00      	nop
 8007824:	08007879 	.word	0x08007879
 8007828:	080078cd 	.word	0x080078cd
 800782c:	080078cd 	.word	0x080078cd
 8007830:	080078cd 	.word	0x080078cd
 8007834:	08007887 	.word	0x08007887
 8007838:	080078cd 	.word	0x080078cd
 800783c:	080078cd 	.word	0x080078cd
 8007840:	080078cd 	.word	0x080078cd
 8007844:	08007895 	.word	0x08007895
 8007848:	080078cd 	.word	0x080078cd
 800784c:	080078cd 	.word	0x080078cd
 8007850:	080078cd 	.word	0x080078cd
 8007854:	080078a3 	.word	0x080078a3
 8007858:	080078cd 	.word	0x080078cd
 800785c:	080078cd 	.word	0x080078cd
 8007860:	080078cd 	.word	0x080078cd
 8007864:	080078b1 	.word	0x080078b1
 8007868:	080078cd 	.word	0x080078cd
 800786c:	080078cd 	.word	0x080078cd
 8007870:	080078cd 	.word	0x080078cd
 8007874:	080078bf 	.word	0x080078bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68b9      	ldr	r1, [r7, #8]
 800787e:	4618      	mov	r0, r3
 8007880:	f000 f98a 	bl	8007b98 <TIM_OC1_SetConfig>
      break;
 8007884:	e023      	b.n	80078ce <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68b9      	ldr	r1, [r7, #8]
 800788c:	4618      	mov	r0, r3
 800788e:	f000 f9ff 	bl	8007c90 <TIM_OC2_SetConfig>
      break;
 8007892:	e01c      	b.n	80078ce <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68b9      	ldr	r1, [r7, #8]
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fa72 	bl	8007d84 <TIM_OC3_SetConfig>
      break;
 80078a0:	e015      	b.n	80078ce <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 fae3 	bl	8007e74 <TIM_OC4_SetConfig>
      break;
 80078ae:	e00e      	b.n	80078ce <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68b9      	ldr	r1, [r7, #8]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 fb3a 	bl	8007f30 <TIM_OC5_SetConfig>
      break;
 80078bc:	e007      	b.n	80078ce <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68b9      	ldr	r1, [r7, #8]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 fb8b 	bl	8007fe0 <TIM_OC6_SetConfig>
      break;
 80078ca:	e000      	b.n	80078ce <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 80078cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d101      	bne.n	80078f8 <HAL_TIM_ConfigClockSource+0x18>
 80078f4:	2302      	movs	r3, #2
 80078f6:	e0b5      	b.n	8007a64 <HAL_TIM_ConfigClockSource+0x184>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007916:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800791a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007922:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007934:	d03e      	beq.n	80079b4 <HAL_TIM_ConfigClockSource+0xd4>
 8007936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800793a:	f200 8087 	bhi.w	8007a4c <HAL_TIM_ConfigClockSource+0x16c>
 800793e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007942:	f000 8085 	beq.w	8007a50 <HAL_TIM_ConfigClockSource+0x170>
 8007946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794a:	d87f      	bhi.n	8007a4c <HAL_TIM_ConfigClockSource+0x16c>
 800794c:	2b70      	cmp	r3, #112	; 0x70
 800794e:	d01a      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0xa6>
 8007950:	2b70      	cmp	r3, #112	; 0x70
 8007952:	d87b      	bhi.n	8007a4c <HAL_TIM_ConfigClockSource+0x16c>
 8007954:	2b60      	cmp	r3, #96	; 0x60
 8007956:	d050      	beq.n	80079fa <HAL_TIM_ConfigClockSource+0x11a>
 8007958:	2b60      	cmp	r3, #96	; 0x60
 800795a:	d877      	bhi.n	8007a4c <HAL_TIM_ConfigClockSource+0x16c>
 800795c:	2b50      	cmp	r3, #80	; 0x50
 800795e:	d03c      	beq.n	80079da <HAL_TIM_ConfigClockSource+0xfa>
 8007960:	2b50      	cmp	r3, #80	; 0x50
 8007962:	d873      	bhi.n	8007a4c <HAL_TIM_ConfigClockSource+0x16c>
 8007964:	2b40      	cmp	r3, #64	; 0x40
 8007966:	d058      	beq.n	8007a1a <HAL_TIM_ConfigClockSource+0x13a>
 8007968:	2b40      	cmp	r3, #64	; 0x40
 800796a:	d86f      	bhi.n	8007a4c <HAL_TIM_ConfigClockSource+0x16c>
 800796c:	2b30      	cmp	r3, #48	; 0x30
 800796e:	d064      	beq.n	8007a3a <HAL_TIM_ConfigClockSource+0x15a>
 8007970:	2b30      	cmp	r3, #48	; 0x30
 8007972:	d86b      	bhi.n	8007a4c <HAL_TIM_ConfigClockSource+0x16c>
 8007974:	2b20      	cmp	r3, #32
 8007976:	d060      	beq.n	8007a3a <HAL_TIM_ConfigClockSource+0x15a>
 8007978:	2b20      	cmp	r3, #32
 800797a:	d867      	bhi.n	8007a4c <HAL_TIM_ConfigClockSource+0x16c>
 800797c:	2b00      	cmp	r3, #0
 800797e:	d05c      	beq.n	8007a3a <HAL_TIM_ConfigClockSource+0x15a>
 8007980:	2b10      	cmp	r3, #16
 8007982:	d05a      	beq.n	8007a3a <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007984:	e062      	b.n	8007a4c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6818      	ldr	r0, [r3, #0]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	6899      	ldr	r1, [r3, #8]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	f000 fbf7 	bl	8008188 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	609a      	str	r2, [r3, #8]
      break;
 80079b2:	e04e      	b.n	8007a52 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6818      	ldr	r0, [r3, #0]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	6899      	ldr	r1, [r3, #8]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	f000 fbe0 	bl	8008188 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689a      	ldr	r2, [r3, #8]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079d6:	609a      	str	r2, [r3, #8]
      break;
 80079d8:	e03b      	b.n	8007a52 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6818      	ldr	r0, [r3, #0]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	6859      	ldr	r1, [r3, #4]
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	461a      	mov	r2, r3
 80079e8:	f000 fb54 	bl	8008094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2150      	movs	r1, #80	; 0x50
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 fbad 	bl	8008152 <TIM_ITRx_SetConfig>
      break;
 80079f8:	e02b      	b.n	8007a52 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6818      	ldr	r0, [r3, #0]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	6859      	ldr	r1, [r3, #4]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	461a      	mov	r2, r3
 8007a08:	f000 fb73 	bl	80080f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2160      	movs	r1, #96	; 0x60
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 fb9d 	bl	8008152 <TIM_ITRx_SetConfig>
      break;
 8007a18:	e01b      	b.n	8007a52 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6818      	ldr	r0, [r3, #0]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	6859      	ldr	r1, [r3, #4]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	461a      	mov	r2, r3
 8007a28:	f000 fb34 	bl	8008094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2140      	movs	r1, #64	; 0x40
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 fb8d 	bl	8008152 <TIM_ITRx_SetConfig>
      break;
 8007a38:	e00b      	b.n	8007a52 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4619      	mov	r1, r3
 8007a44:	4610      	mov	r0, r2
 8007a46:	f000 fb84 	bl	8008152 <TIM_ITRx_SetConfig>
        break;
 8007a4a:	e002      	b.n	8007a52 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8007a4c:	bf00      	nop
 8007a4e:	e000      	b.n	8007a52 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8007a50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a2a      	ldr	r2, [pc, #168]	; (8007b8c <TIM_Base_SetConfig+0xbc>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d003      	beq.n	8007af0 <TIM_Base_SetConfig+0x20>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aee:	d108      	bne.n	8007b02 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a21      	ldr	r2, [pc, #132]	; (8007b8c <TIM_Base_SetConfig+0xbc>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00b      	beq.n	8007b22 <TIM_Base_SetConfig+0x52>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b10:	d007      	beq.n	8007b22 <TIM_Base_SetConfig+0x52>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a1e      	ldr	r2, [pc, #120]	; (8007b90 <TIM_Base_SetConfig+0xc0>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d003      	beq.n	8007b22 <TIM_Base_SetConfig+0x52>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a1d      	ldr	r2, [pc, #116]	; (8007b94 <TIM_Base_SetConfig+0xc4>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d108      	bne.n	8007b34 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	689a      	ldr	r2, [r3, #8]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a0c      	ldr	r2, [pc, #48]	; (8007b8c <TIM_Base_SetConfig+0xbc>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d007      	beq.n	8007b70 <TIM_Base_SetConfig+0xa0>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a0b      	ldr	r2, [pc, #44]	; (8007b90 <TIM_Base_SetConfig+0xc0>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d003      	beq.n	8007b70 <TIM_Base_SetConfig+0xa0>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a0a      	ldr	r2, [pc, #40]	; (8007b94 <TIM_Base_SetConfig+0xc4>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d103      	bne.n	8007b78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	691a      	ldr	r2, [r3, #16]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	615a      	str	r2, [r3, #20]
}
 8007b7e:	bf00      	nop
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	40012c00 	.word	0x40012c00
 8007b90:	40014000 	.word	0x40014000
 8007b94:	40014400 	.word	0x40014400

08007b98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b087      	sub	sp, #28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	f023 0201 	bic.w	r2, r3, #1
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f023 0303 	bic.w	r3, r3, #3
 8007bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f023 0302 	bic.w	r3, r3, #2
 8007be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a24      	ldr	r2, [pc, #144]	; (8007c84 <TIM_OC1_SetConfig+0xec>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d007      	beq.n	8007c08 <TIM_OC1_SetConfig+0x70>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a23      	ldr	r2, [pc, #140]	; (8007c88 <TIM_OC1_SetConfig+0xf0>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d003      	beq.n	8007c08 <TIM_OC1_SetConfig+0x70>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a22      	ldr	r2, [pc, #136]	; (8007c8c <TIM_OC1_SetConfig+0xf4>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d10c      	bne.n	8007c22 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f023 0308 	bic.w	r3, r3, #8
 8007c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f023 0304 	bic.w	r3, r3, #4
 8007c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a17      	ldr	r2, [pc, #92]	; (8007c84 <TIM_OC1_SetConfig+0xec>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d007      	beq.n	8007c3a <TIM_OC1_SetConfig+0xa2>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a16      	ldr	r2, [pc, #88]	; (8007c88 <TIM_OC1_SetConfig+0xf0>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d003      	beq.n	8007c3a <TIM_OC1_SetConfig+0xa2>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a15      	ldr	r2, [pc, #84]	; (8007c8c <TIM_OC1_SetConfig+0xf4>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d111      	bne.n	8007c5e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	621a      	str	r2, [r3, #32]
}
 8007c78:	bf00      	nop
 8007c7a:	371c      	adds	r7, #28
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	40012c00 	.word	0x40012c00
 8007c88:	40014000 	.word	0x40014000
 8007c8c:	40014400 	.word	0x40014400

08007c90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	f023 0210 	bic.w	r2, r3, #16
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	021b      	lsls	r3, r3, #8
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f023 0320 	bic.w	r3, r3, #32
 8007cde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	011b      	lsls	r3, r3, #4
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a22      	ldr	r2, [pc, #136]	; (8007d78 <TIM_OC2_SetConfig+0xe8>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d10d      	bne.n	8007d10 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	011b      	lsls	r3, r3, #4
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a19      	ldr	r2, [pc, #100]	; (8007d78 <TIM_OC2_SetConfig+0xe8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d007      	beq.n	8007d28 <TIM_OC2_SetConfig+0x98>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a18      	ldr	r2, [pc, #96]	; (8007d7c <TIM_OC2_SetConfig+0xec>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d003      	beq.n	8007d28 <TIM_OC2_SetConfig+0x98>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a17      	ldr	r2, [pc, #92]	; (8007d80 <TIM_OC2_SetConfig+0xf0>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d113      	bne.n	8007d50 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	695b      	ldr	r3, [r3, #20]
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	621a      	str	r2, [r3, #32]
}
 8007d6a:	bf00      	nop
 8007d6c:	371c      	adds	r7, #28
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	40012c00 	.word	0x40012c00
 8007d7c:	40014000 	.word	0x40014000
 8007d80:	40014400 	.word	0x40014400

08007d84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b087      	sub	sp, #28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
 8007d92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f023 0303 	bic.w	r3, r3, #3
 8007dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	021b      	lsls	r3, r3, #8
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a21      	ldr	r2, [pc, #132]	; (8007e68 <TIM_OC3_SetConfig+0xe4>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d10d      	bne.n	8007e02 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	021b      	lsls	r3, r3, #8
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a18      	ldr	r2, [pc, #96]	; (8007e68 <TIM_OC3_SetConfig+0xe4>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d007      	beq.n	8007e1a <TIM_OC3_SetConfig+0x96>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a17      	ldr	r2, [pc, #92]	; (8007e6c <TIM_OC3_SetConfig+0xe8>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d003      	beq.n	8007e1a <TIM_OC3_SetConfig+0x96>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a16      	ldr	r2, [pc, #88]	; (8007e70 <TIM_OC3_SetConfig+0xec>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d113      	bne.n	8007e42 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	011b      	lsls	r3, r3, #4
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	011b      	lsls	r3, r3, #4
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685a      	ldr	r2, [r3, #4]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	697a      	ldr	r2, [r7, #20]
 8007e5a:	621a      	str	r2, [r3, #32]
}
 8007e5c:	bf00      	nop
 8007e5e:	371c      	adds	r7, #28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	40012c00 	.word	0x40012c00
 8007e6c:	40014000 	.word	0x40014000
 8007e70:	40014400 	.word	0x40014400

08007e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	021b      	lsls	r3, r3, #8
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	031b      	lsls	r3, r3, #12
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a14      	ldr	r2, [pc, #80]	; (8007f24 <TIM_OC4_SetConfig+0xb0>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d007      	beq.n	8007ee8 <TIM_OC4_SetConfig+0x74>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a13      	ldr	r2, [pc, #76]	; (8007f28 <TIM_OC4_SetConfig+0xb4>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d003      	beq.n	8007ee8 <TIM_OC4_SetConfig+0x74>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a12      	ldr	r2, [pc, #72]	; (8007f2c <TIM_OC4_SetConfig+0xb8>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d109      	bne.n	8007efc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	019b      	lsls	r3, r3, #6
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	621a      	str	r2, [r3, #32]
}
 8007f16:	bf00      	nop
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	40012c00 	.word	0x40012c00
 8007f28:	40014000 	.word	0x40014000
 8007f2c:	40014400 	.word	0x40014400

08007f30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007f74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	041b      	lsls	r3, r3, #16
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a13      	ldr	r2, [pc, #76]	; (8007fd4 <TIM_OC5_SetConfig+0xa4>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d007      	beq.n	8007f9a <TIM_OC5_SetConfig+0x6a>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a12      	ldr	r2, [pc, #72]	; (8007fd8 <TIM_OC5_SetConfig+0xa8>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d003      	beq.n	8007f9a <TIM_OC5_SetConfig+0x6a>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a11      	ldr	r2, [pc, #68]	; (8007fdc <TIM_OC5_SetConfig+0xac>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d109      	bne.n	8007fae <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	695b      	ldr	r3, [r3, #20]
 8007fa6:	021b      	lsls	r3, r3, #8
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	621a      	str	r2, [r3, #32]
}
 8007fc8:	bf00      	nop
 8007fca:	371c      	adds	r7, #28
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	40012c00 	.word	0x40012c00
 8007fd8:	40014000 	.word	0x40014000
 8007fdc:	40014400 	.word	0x40014400

08007fe0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800800e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	021b      	lsls	r3, r3, #8
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	4313      	orrs	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	051b      	lsls	r3, r3, #20
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	4313      	orrs	r3, r2
 8008032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a14      	ldr	r2, [pc, #80]	; (8008088 <TIM_OC6_SetConfig+0xa8>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d007      	beq.n	800804c <TIM_OC6_SetConfig+0x6c>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a13      	ldr	r2, [pc, #76]	; (800808c <TIM_OC6_SetConfig+0xac>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d003      	beq.n	800804c <TIM_OC6_SetConfig+0x6c>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a12      	ldr	r2, [pc, #72]	; (8008090 <TIM_OC6_SetConfig+0xb0>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d109      	bne.n	8008060 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008052:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	029b      	lsls	r3, r3, #10
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	4313      	orrs	r3, r2
 800805e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	685a      	ldr	r2, [r3, #4]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	621a      	str	r2, [r3, #32]
}
 800807a:	bf00      	nop
 800807c:	371c      	adds	r7, #28
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	40012c00 	.word	0x40012c00
 800808c:	40014000 	.word	0x40014000
 8008090:	40014400 	.word	0x40014400

08008094 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008094:	b480      	push	{r7}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6a1b      	ldr	r3, [r3, #32]
 80080a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	f023 0201 	bic.w	r2, r3, #1
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	011b      	lsls	r3, r3, #4
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f023 030a 	bic.w	r3, r3, #10
 80080d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	621a      	str	r2, [r3, #32]
}
 80080e6:	bf00      	nop
 80080e8:	371c      	adds	r7, #28
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b087      	sub	sp, #28
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	f023 0210 	bic.w	r2, r3, #16
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800811c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	031b      	lsls	r3, r3, #12
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	4313      	orrs	r3, r2
 8008126:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800812e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	011b      	lsls	r3, r3, #4
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	4313      	orrs	r3, r2
 8008138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	621a      	str	r2, [r3, #32]
}
 8008146:	bf00      	nop
 8008148:	371c      	adds	r7, #28
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008152:	b480      	push	{r7}
 8008154:	b085      	sub	sp, #20
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008168:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4313      	orrs	r3, r2
 8008170:	f043 0307 	orr.w	r3, r3, #7
 8008174:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	609a      	str	r2, [r3, #8]
}
 800817c:	bf00      	nop
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
 8008194:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	021a      	lsls	r2, r3, #8
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	431a      	orrs	r2, r3
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	609a      	str	r2, [r3, #8]
}
 80081bc:	bf00      	nop
 80081be:	371c      	adds	r7, #28
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f003 031f 	and.w	r3, r3, #31
 80081da:	2201      	movs	r2, #1
 80081dc:	fa02 f303 	lsl.w	r3, r2, r3
 80081e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6a1a      	ldr	r2, [r3, #32]
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	43db      	mvns	r3, r3
 80081ea:	401a      	ands	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6a1a      	ldr	r2, [r3, #32]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f003 031f 	and.w	r3, r3, #31
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008200:	431a      	orrs	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	621a      	str	r2, [r3, #32]
}
 8008206:	bf00      	nop
 8008208:	371c      	adds	r7, #28
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
	...

08008214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008224:	2b01      	cmp	r3, #1
 8008226:	d101      	bne.n	800822c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008228:	2302      	movs	r3, #2
 800822a:	e04f      	b.n	80082cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a21      	ldr	r2, [pc, #132]	; (80082d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d108      	bne.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800825c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	4313      	orrs	r3, r2
 8008266:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	4313      	orrs	r3, r2
 8008278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a14      	ldr	r2, [pc, #80]	; (80082d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d009      	beq.n	80082a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008294:	d004      	beq.n	80082a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a10      	ldr	r2, [pc, #64]	; (80082dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d10c      	bne.n	80082ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	40012c00 	.word	0x40012c00
 80082dc:	40014000 	.word	0x40014000

080082e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d101      	bne.n	800832e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e040      	b.n	80083b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008332:	2b00      	cmp	r3, #0
 8008334:	d106      	bne.n	8008344 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7f9 fcd2 	bl	8001ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2224      	movs	r2, #36	; 0x24
 8008348:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0201 	bic.w	r2, r2, #1
 8008358:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f968 	bl	8008630 <UART_SetConfig>
 8008360:	4603      	mov	r3, r0
 8008362:	2b01      	cmp	r3, #1
 8008364:	d101      	bne.n	800836a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e022      	b.n	80083b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836e:	2b00      	cmp	r3, #0
 8008370:	d002      	beq.n	8008378 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fb90 	bl	8008a98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008386:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	689a      	ldr	r2, [r3, #8]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008396:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f042 0201 	orr.w	r2, r2, #1
 80083a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fc17 	bl	8008bdc <UART_CheckIdleState>
 80083ae:	4603      	mov	r3, r0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d101      	bne.n	80083ca <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e02b      	b.n	8008422 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2224      	movs	r2, #36	; 0x24
 80083ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f022 0201 	bic.w	r2, r2, #1
 80083de:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2200      	movs	r2, #0
 80083ee:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2200      	movs	r2, #0
 80083f6:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7f9 fce5 	bl	8001dc8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b08a      	sub	sp, #40	; 0x28
 800842e:	af02      	add	r7, sp, #8
 8008430:	60f8      	str	r0, [r7, #12]
 8008432:	60b9      	str	r1, [r7, #8]
 8008434:	603b      	str	r3, [r7, #0]
 8008436:	4613      	mov	r3, r2
 8008438:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800843e:	2b20      	cmp	r3, #32
 8008440:	f040 8082 	bne.w	8008548 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <HAL_UART_Transmit+0x26>
 800844a:	88fb      	ldrh	r3, [r7, #6]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e07a      	b.n	800854a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800845a:	2b01      	cmp	r3, #1
 800845c:	d101      	bne.n	8008462 <HAL_UART_Transmit+0x38>
 800845e:	2302      	movs	r3, #2
 8008460:	e073      	b.n	800854a <HAL_UART_Transmit+0x120>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2221      	movs	r2, #33	; 0x21
 8008476:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008478:	f7fa f85e 	bl	8002538 <HAL_GetTick>
 800847c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	88fa      	ldrh	r2, [r7, #6]
 8008482:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	88fa      	ldrh	r2, [r7, #6]
 800848a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008496:	d108      	bne.n	80084aa <HAL_UART_Transmit+0x80>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d104      	bne.n	80084aa <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80084a0:	2300      	movs	r3, #0
 80084a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	61bb      	str	r3, [r7, #24]
 80084a8:	e003      	b.n	80084b2 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80084ba:	e02d      	b.n	8008518 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	2200      	movs	r2, #0
 80084c4:	2180      	movs	r1, #128	; 0x80
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 fbd1 	bl	8008c6e <UART_WaitOnFlagUntilTimeout>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e039      	b.n	800854a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10b      	bne.n	80084f4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	881a      	ldrh	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084e8:	b292      	uxth	r2, r2
 80084ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	3302      	adds	r3, #2
 80084f0:	61bb      	str	r3, [r7, #24]
 80084f2:	e008      	b.n	8008506 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	781a      	ldrb	r2, [r3, #0]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	b292      	uxth	r2, r2
 80084fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	3301      	adds	r3, #1
 8008504:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800850c:	b29b      	uxth	r3, r3
 800850e:	3b01      	subs	r3, #1
 8008510:	b29a      	uxth	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800851e:	b29b      	uxth	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1cb      	bne.n	80084bc <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	2200      	movs	r2, #0
 800852c:	2140      	movs	r1, #64	; 0x40
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 fb9d 	bl	8008c6e <UART_WaitOnFlagUntilTimeout>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e005      	b.n	800854a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2220      	movs	r2, #32
 8008542:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	e000      	b.n	800854a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008548:	2302      	movs	r3, #2
  }
}
 800854a:	4618      	mov	r0, r3
 800854c:	3720      	adds	r7, #32
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
	...

08008554 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	4613      	mov	r3, r2
 8008560:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008566:	2b20      	cmp	r3, #32
 8008568:	d131      	bne.n	80085ce <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <HAL_UART_Receive_DMA+0x22>
 8008570:	88fb      	ldrh	r3, [r7, #6]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e02a      	b.n	80085d0 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008580:	2b01      	cmp	r3, #1
 8008582:	d101      	bne.n	8008588 <HAL_UART_Receive_DMA+0x34>
 8008584:	2302      	movs	r3, #2
 8008586:	e023      	b.n	80085d0 <HAL_UART_Receive_DMA+0x7c>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a0f      	ldr	r2, [pc, #60]	; (80085d8 <HAL_UART_Receive_DMA+0x84>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d00e      	beq.n	80085be <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d007      	beq.n	80085be <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80085bc:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80085be:	88fb      	ldrh	r3, [r7, #6]
 80085c0:	461a      	mov	r2, r3
 80085c2:	68b9      	ldr	r1, [r7, #8]
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f000 fbcf 	bl	8008d68 <UART_Start_Receive_DMA>
 80085ca:	4603      	mov	r3, r0
 80085cc:	e000      	b.n	80085d0 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80085ce:	2302      	movs	r3, #2
  }
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	40008000 	.word	0x40008000

080085dc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	460b      	mov	r3, r1
 8008622:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008630:	b5b0      	push	{r4, r5, r7, lr}
 8008632:	b088      	sub	sp, #32
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	689a      	ldr	r2, [r3, #8]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	431a      	orrs	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	431a      	orrs	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	69db      	ldr	r3, [r3, #28]
 8008650:	4313      	orrs	r3, r2
 8008652:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	4baa      	ldr	r3, [pc, #680]	; (8008904 <UART_SetConfig+0x2d4>)
 800865c:	4013      	ands	r3, r2
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	6812      	ldr	r2, [r2, #0]
 8008662:	69f9      	ldr	r1, [r7, #28]
 8008664:	430b      	orrs	r3, r1
 8008666:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	430a      	orrs	r2, r1
 800867c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a9f      	ldr	r2, [pc, #636]	; (8008908 <UART_SetConfig+0x2d8>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d004      	beq.n	8008698 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	69fa      	ldr	r2, [r7, #28]
 8008694:	4313      	orrs	r3, r2
 8008696:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	69fa      	ldr	r2, [r7, #28]
 80086a8:	430a      	orrs	r2, r1
 80086aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a96      	ldr	r2, [pc, #600]	; (800890c <UART_SetConfig+0x2dc>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d121      	bne.n	80086fa <UART_SetConfig+0xca>
 80086b6:	4b96      	ldr	r3, [pc, #600]	; (8008910 <UART_SetConfig+0x2e0>)
 80086b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086bc:	f003 0303 	and.w	r3, r3, #3
 80086c0:	2b03      	cmp	r3, #3
 80086c2:	d817      	bhi.n	80086f4 <UART_SetConfig+0xc4>
 80086c4:	a201      	add	r2, pc, #4	; (adr r2, 80086cc <UART_SetConfig+0x9c>)
 80086c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ca:	bf00      	nop
 80086cc:	080086dd 	.word	0x080086dd
 80086d0:	080086e9 	.word	0x080086e9
 80086d4:	080086e3 	.word	0x080086e3
 80086d8:	080086ef 	.word	0x080086ef
 80086dc:	2301      	movs	r3, #1
 80086de:	76fb      	strb	r3, [r7, #27]
 80086e0:	e096      	b.n	8008810 <UART_SetConfig+0x1e0>
 80086e2:	2302      	movs	r3, #2
 80086e4:	76fb      	strb	r3, [r7, #27]
 80086e6:	e093      	b.n	8008810 <UART_SetConfig+0x1e0>
 80086e8:	2304      	movs	r3, #4
 80086ea:	76fb      	strb	r3, [r7, #27]
 80086ec:	e090      	b.n	8008810 <UART_SetConfig+0x1e0>
 80086ee:	2308      	movs	r3, #8
 80086f0:	76fb      	strb	r3, [r7, #27]
 80086f2:	e08d      	b.n	8008810 <UART_SetConfig+0x1e0>
 80086f4:	2310      	movs	r3, #16
 80086f6:	76fb      	strb	r3, [r7, #27]
 80086f8:	e08a      	b.n	8008810 <UART_SetConfig+0x1e0>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a85      	ldr	r2, [pc, #532]	; (8008914 <UART_SetConfig+0x2e4>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d132      	bne.n	800876a <UART_SetConfig+0x13a>
 8008704:	4b82      	ldr	r3, [pc, #520]	; (8008910 <UART_SetConfig+0x2e0>)
 8008706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800870a:	f003 030c 	and.w	r3, r3, #12
 800870e:	2b0c      	cmp	r3, #12
 8008710:	d828      	bhi.n	8008764 <UART_SetConfig+0x134>
 8008712:	a201      	add	r2, pc, #4	; (adr r2, 8008718 <UART_SetConfig+0xe8>)
 8008714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008718:	0800874d 	.word	0x0800874d
 800871c:	08008765 	.word	0x08008765
 8008720:	08008765 	.word	0x08008765
 8008724:	08008765 	.word	0x08008765
 8008728:	08008759 	.word	0x08008759
 800872c:	08008765 	.word	0x08008765
 8008730:	08008765 	.word	0x08008765
 8008734:	08008765 	.word	0x08008765
 8008738:	08008753 	.word	0x08008753
 800873c:	08008765 	.word	0x08008765
 8008740:	08008765 	.word	0x08008765
 8008744:	08008765 	.word	0x08008765
 8008748:	0800875f 	.word	0x0800875f
 800874c:	2300      	movs	r3, #0
 800874e:	76fb      	strb	r3, [r7, #27]
 8008750:	e05e      	b.n	8008810 <UART_SetConfig+0x1e0>
 8008752:	2302      	movs	r3, #2
 8008754:	76fb      	strb	r3, [r7, #27]
 8008756:	e05b      	b.n	8008810 <UART_SetConfig+0x1e0>
 8008758:	2304      	movs	r3, #4
 800875a:	76fb      	strb	r3, [r7, #27]
 800875c:	e058      	b.n	8008810 <UART_SetConfig+0x1e0>
 800875e:	2308      	movs	r3, #8
 8008760:	76fb      	strb	r3, [r7, #27]
 8008762:	e055      	b.n	8008810 <UART_SetConfig+0x1e0>
 8008764:	2310      	movs	r3, #16
 8008766:	76fb      	strb	r3, [r7, #27]
 8008768:	e052      	b.n	8008810 <UART_SetConfig+0x1e0>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a6a      	ldr	r2, [pc, #424]	; (8008918 <UART_SetConfig+0x2e8>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d120      	bne.n	80087b6 <UART_SetConfig+0x186>
 8008774:	4b66      	ldr	r3, [pc, #408]	; (8008910 <UART_SetConfig+0x2e0>)
 8008776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800877a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800877e:	2b30      	cmp	r3, #48	; 0x30
 8008780:	d013      	beq.n	80087aa <UART_SetConfig+0x17a>
 8008782:	2b30      	cmp	r3, #48	; 0x30
 8008784:	d814      	bhi.n	80087b0 <UART_SetConfig+0x180>
 8008786:	2b20      	cmp	r3, #32
 8008788:	d009      	beq.n	800879e <UART_SetConfig+0x16e>
 800878a:	2b20      	cmp	r3, #32
 800878c:	d810      	bhi.n	80087b0 <UART_SetConfig+0x180>
 800878e:	2b00      	cmp	r3, #0
 8008790:	d002      	beq.n	8008798 <UART_SetConfig+0x168>
 8008792:	2b10      	cmp	r3, #16
 8008794:	d006      	beq.n	80087a4 <UART_SetConfig+0x174>
 8008796:	e00b      	b.n	80087b0 <UART_SetConfig+0x180>
 8008798:	2300      	movs	r3, #0
 800879a:	76fb      	strb	r3, [r7, #27]
 800879c:	e038      	b.n	8008810 <UART_SetConfig+0x1e0>
 800879e:	2302      	movs	r3, #2
 80087a0:	76fb      	strb	r3, [r7, #27]
 80087a2:	e035      	b.n	8008810 <UART_SetConfig+0x1e0>
 80087a4:	2304      	movs	r3, #4
 80087a6:	76fb      	strb	r3, [r7, #27]
 80087a8:	e032      	b.n	8008810 <UART_SetConfig+0x1e0>
 80087aa:	2308      	movs	r3, #8
 80087ac:	76fb      	strb	r3, [r7, #27]
 80087ae:	e02f      	b.n	8008810 <UART_SetConfig+0x1e0>
 80087b0:	2310      	movs	r3, #16
 80087b2:	76fb      	strb	r3, [r7, #27]
 80087b4:	e02c      	b.n	8008810 <UART_SetConfig+0x1e0>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a53      	ldr	r2, [pc, #332]	; (8008908 <UART_SetConfig+0x2d8>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d125      	bne.n	800880c <UART_SetConfig+0x1dc>
 80087c0:	4b53      	ldr	r3, [pc, #332]	; (8008910 <UART_SetConfig+0x2e0>)
 80087c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80087ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087ce:	d017      	beq.n	8008800 <UART_SetConfig+0x1d0>
 80087d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087d4:	d817      	bhi.n	8008806 <UART_SetConfig+0x1d6>
 80087d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087da:	d00b      	beq.n	80087f4 <UART_SetConfig+0x1c4>
 80087dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087e0:	d811      	bhi.n	8008806 <UART_SetConfig+0x1d6>
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <UART_SetConfig+0x1be>
 80087e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087ea:	d006      	beq.n	80087fa <UART_SetConfig+0x1ca>
 80087ec:	e00b      	b.n	8008806 <UART_SetConfig+0x1d6>
 80087ee:	2300      	movs	r3, #0
 80087f0:	76fb      	strb	r3, [r7, #27]
 80087f2:	e00d      	b.n	8008810 <UART_SetConfig+0x1e0>
 80087f4:	2302      	movs	r3, #2
 80087f6:	76fb      	strb	r3, [r7, #27]
 80087f8:	e00a      	b.n	8008810 <UART_SetConfig+0x1e0>
 80087fa:	2304      	movs	r3, #4
 80087fc:	76fb      	strb	r3, [r7, #27]
 80087fe:	e007      	b.n	8008810 <UART_SetConfig+0x1e0>
 8008800:	2308      	movs	r3, #8
 8008802:	76fb      	strb	r3, [r7, #27]
 8008804:	e004      	b.n	8008810 <UART_SetConfig+0x1e0>
 8008806:	2310      	movs	r3, #16
 8008808:	76fb      	strb	r3, [r7, #27]
 800880a:	e001      	b.n	8008810 <UART_SetConfig+0x1e0>
 800880c:	2310      	movs	r3, #16
 800880e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a3c      	ldr	r2, [pc, #240]	; (8008908 <UART_SetConfig+0x2d8>)
 8008816:	4293      	cmp	r3, r2
 8008818:	f040 8082 	bne.w	8008920 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800881c:	7efb      	ldrb	r3, [r7, #27]
 800881e:	2b08      	cmp	r3, #8
 8008820:	d823      	bhi.n	800886a <UART_SetConfig+0x23a>
 8008822:	a201      	add	r2, pc, #4	; (adr r2, 8008828 <UART_SetConfig+0x1f8>)
 8008824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008828:	0800884d 	.word	0x0800884d
 800882c:	0800886b 	.word	0x0800886b
 8008830:	08008855 	.word	0x08008855
 8008834:	0800886b 	.word	0x0800886b
 8008838:	0800885b 	.word	0x0800885b
 800883c:	0800886b 	.word	0x0800886b
 8008840:	0800886b 	.word	0x0800886b
 8008844:	0800886b 	.word	0x0800886b
 8008848:	08008863 	.word	0x08008863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800884c:	f7fe f9a4 	bl	8006b98 <HAL_RCC_GetPCLK1Freq>
 8008850:	6178      	str	r0, [r7, #20]
        break;
 8008852:	e00f      	b.n	8008874 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008854:	4b31      	ldr	r3, [pc, #196]	; (800891c <UART_SetConfig+0x2ec>)
 8008856:	617b      	str	r3, [r7, #20]
        break;
 8008858:	e00c      	b.n	8008874 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800885a:	f7fe f905 	bl	8006a68 <HAL_RCC_GetSysClockFreq>
 800885e:	6178      	str	r0, [r7, #20]
        break;
 8008860:	e008      	b.n	8008874 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008866:	617b      	str	r3, [r7, #20]
        break;
 8008868:	e004      	b.n	8008874 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 800886a:	2300      	movs	r3, #0
 800886c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	76bb      	strb	r3, [r7, #26]
        break;
 8008872:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 8100 	beq.w	8008a7c <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	4613      	mov	r3, r2
 8008882:	005b      	lsls	r3, r3, #1
 8008884:	4413      	add	r3, r2
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	429a      	cmp	r2, r3
 800888a:	d305      	bcc.n	8008898 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	429a      	cmp	r2, r3
 8008896:	d902      	bls.n	800889e <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	76bb      	strb	r3, [r7, #26]
 800889c:	e0ee      	b.n	8008a7c <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f04f 0100 	mov.w	r1, #0
 80088a6:	f04f 0200 	mov.w	r2, #0
 80088aa:	f04f 0300 	mov.w	r3, #0
 80088ae:	020b      	lsls	r3, r1, #8
 80088b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80088b4:	0202      	lsls	r2, r0, #8
 80088b6:	6879      	ldr	r1, [r7, #4]
 80088b8:	6849      	ldr	r1, [r1, #4]
 80088ba:	0849      	lsrs	r1, r1, #1
 80088bc:	4608      	mov	r0, r1
 80088be:	f04f 0100 	mov.w	r1, #0
 80088c2:	1814      	adds	r4, r2, r0
 80088c4:	eb43 0501 	adc.w	r5, r3, r1
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	461a      	mov	r2, r3
 80088ce:	f04f 0300 	mov.w	r3, #0
 80088d2:	4620      	mov	r0, r4
 80088d4:	4629      	mov	r1, r5
 80088d6:	f7f7 fc79 	bl	80001cc <__aeabi_uldivmod>
 80088da:	4602      	mov	r2, r0
 80088dc:	460b      	mov	r3, r1
 80088de:	4613      	mov	r3, r2
 80088e0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088e8:	d308      	bcc.n	80088fc <UART_SetConfig+0x2cc>
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088f0:	d204      	bcs.n	80088fc <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	60da      	str	r2, [r3, #12]
 80088fa:	e0bf      	b.n	8008a7c <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	76bb      	strb	r3, [r7, #26]
 8008900:	e0bc      	b.n	8008a7c <UART_SetConfig+0x44c>
 8008902:	bf00      	nop
 8008904:	efff69f3 	.word	0xefff69f3
 8008908:	40008000 	.word	0x40008000
 800890c:	40013800 	.word	0x40013800
 8008910:	40021000 	.word	0x40021000
 8008914:	40004400 	.word	0x40004400
 8008918:	40004800 	.word	0x40004800
 800891c:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008928:	d15c      	bne.n	80089e4 <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 800892a:	7efb      	ldrb	r3, [r7, #27]
 800892c:	2b08      	cmp	r3, #8
 800892e:	d828      	bhi.n	8008982 <UART_SetConfig+0x352>
 8008930:	a201      	add	r2, pc, #4	; (adr r2, 8008938 <UART_SetConfig+0x308>)
 8008932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008936:	bf00      	nop
 8008938:	0800895d 	.word	0x0800895d
 800893c:	08008965 	.word	0x08008965
 8008940:	0800896d 	.word	0x0800896d
 8008944:	08008983 	.word	0x08008983
 8008948:	08008973 	.word	0x08008973
 800894c:	08008983 	.word	0x08008983
 8008950:	08008983 	.word	0x08008983
 8008954:	08008983 	.word	0x08008983
 8008958:	0800897b 	.word	0x0800897b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800895c:	f7fe f91c 	bl	8006b98 <HAL_RCC_GetPCLK1Freq>
 8008960:	6178      	str	r0, [r7, #20]
        break;
 8008962:	e013      	b.n	800898c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008964:	f7fe f92e 	bl	8006bc4 <HAL_RCC_GetPCLK2Freq>
 8008968:	6178      	str	r0, [r7, #20]
        break;
 800896a:	e00f      	b.n	800898c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800896c:	4b49      	ldr	r3, [pc, #292]	; (8008a94 <UART_SetConfig+0x464>)
 800896e:	617b      	str	r3, [r7, #20]
        break;
 8008970:	e00c      	b.n	800898c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008972:	f7fe f879 	bl	8006a68 <HAL_RCC_GetSysClockFreq>
 8008976:	6178      	str	r0, [r7, #20]
        break;
 8008978:	e008      	b.n	800898c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800897a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800897e:	617b      	str	r3, [r7, #20]
        break;
 8008980:	e004      	b.n	800898c <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8008982:	2300      	movs	r3, #0
 8008984:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	76bb      	strb	r3, [r7, #26]
        break;
 800898a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d074      	beq.n	8008a7c <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	005a      	lsls	r2, r3, #1
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	085b      	lsrs	r3, r3, #1
 800899c:	441a      	add	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	2b0f      	cmp	r3, #15
 80089ae:	d916      	bls.n	80089de <UART_SetConfig+0x3ae>
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089b6:	d212      	bcs.n	80089de <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	f023 030f 	bic.w	r3, r3, #15
 80089c0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	085b      	lsrs	r3, r3, #1
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	f003 0307 	and.w	r3, r3, #7
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	89fb      	ldrh	r3, [r7, #14]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	89fa      	ldrh	r2, [r7, #14]
 80089da:	60da      	str	r2, [r3, #12]
 80089dc:	e04e      	b.n	8008a7c <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	76bb      	strb	r3, [r7, #26]
 80089e2:	e04b      	b.n	8008a7c <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089e4:	7efb      	ldrb	r3, [r7, #27]
 80089e6:	2b08      	cmp	r3, #8
 80089e8:	d827      	bhi.n	8008a3a <UART_SetConfig+0x40a>
 80089ea:	a201      	add	r2, pc, #4	; (adr r2, 80089f0 <UART_SetConfig+0x3c0>)
 80089ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f0:	08008a15 	.word	0x08008a15
 80089f4:	08008a1d 	.word	0x08008a1d
 80089f8:	08008a25 	.word	0x08008a25
 80089fc:	08008a3b 	.word	0x08008a3b
 8008a00:	08008a2b 	.word	0x08008a2b
 8008a04:	08008a3b 	.word	0x08008a3b
 8008a08:	08008a3b 	.word	0x08008a3b
 8008a0c:	08008a3b 	.word	0x08008a3b
 8008a10:	08008a33 	.word	0x08008a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a14:	f7fe f8c0 	bl	8006b98 <HAL_RCC_GetPCLK1Freq>
 8008a18:	6178      	str	r0, [r7, #20]
        break;
 8008a1a:	e013      	b.n	8008a44 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a1c:	f7fe f8d2 	bl	8006bc4 <HAL_RCC_GetPCLK2Freq>
 8008a20:	6178      	str	r0, [r7, #20]
        break;
 8008a22:	e00f      	b.n	8008a44 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a24:	4b1b      	ldr	r3, [pc, #108]	; (8008a94 <UART_SetConfig+0x464>)
 8008a26:	617b      	str	r3, [r7, #20]
        break;
 8008a28:	e00c      	b.n	8008a44 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a2a:	f7fe f81d 	bl	8006a68 <HAL_RCC_GetSysClockFreq>
 8008a2e:	6178      	str	r0, [r7, #20]
        break;
 8008a30:	e008      	b.n	8008a44 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a36:	617b      	str	r3, [r7, #20]
        break;
 8008a38:	e004      	b.n	8008a44 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	76bb      	strb	r3, [r7, #26]
        break;
 8008a42:	bf00      	nop
    }

    if (pclk != 0U)
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d018      	beq.n	8008a7c <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	085a      	lsrs	r2, r3, #1
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	441a      	add	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	2b0f      	cmp	r3, #15
 8008a64:	d908      	bls.n	8008a78 <UART_SetConfig+0x448>
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a6c:	d204      	bcs.n	8008a78 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	60da      	str	r2, [r3, #12]
 8008a76:	e001      	b.n	8008a7c <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008a88:	7ebb      	ldrb	r3, [r7, #26]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3720      	adds	r7, #32
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bdb0      	pop	{r4, r5, r7, pc}
 8008a92:	bf00      	nop
 8008a94:	00f42400 	.word	0x00f42400

08008a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	f003 0301 	and.w	r3, r3, #1
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00a      	beq.n	8008ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00a      	beq.n	8008ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00a      	beq.n	8008b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	430a      	orrs	r2, r1
 8008b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0a:	f003 0308 	and.w	r3, r3, #8
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00a      	beq.n	8008b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	430a      	orrs	r2, r1
 8008b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	f003 0310 	and.w	r3, r3, #16
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00a      	beq.n	8008b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	430a      	orrs	r2, r1
 8008b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	f003 0320 	and.w	r3, r3, #32
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00a      	beq.n	8008b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	430a      	orrs	r2, r1
 8008b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d01a      	beq.n	8008bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b96:	d10a      	bne.n	8008bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	430a      	orrs	r2, r1
 8008bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00a      	beq.n	8008bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	430a      	orrs	r2, r1
 8008bce:	605a      	str	r2, [r3, #4]
  }
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af02      	add	r7, sp, #8
 8008be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bec:	f7f9 fca4 	bl	8002538 <HAL_GetTick>
 8008bf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0308 	and.w	r3, r3, #8
 8008bfc:	2b08      	cmp	r3, #8
 8008bfe:	d10e      	bne.n	8008c1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f82d 	bl	8008c6e <UART_WaitOnFlagUntilTimeout>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e023      	b.n	8008c66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 0304 	and.w	r3, r3, #4
 8008c28:	2b04      	cmp	r3, #4
 8008c2a:	d10e      	bne.n	8008c4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f817 	bl	8008c6e <UART_WaitOnFlagUntilTimeout>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d001      	beq.n	8008c4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e00d      	b.n	8008c66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2220      	movs	r2, #32
 8008c4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2220      	movs	r2, #32
 8008c54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b084      	sub	sp, #16
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	60f8      	str	r0, [r7, #12]
 8008c76:	60b9      	str	r1, [r7, #8]
 8008c78:	603b      	str	r3, [r7, #0]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c7e:	e05e      	b.n	8008d3e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c86:	d05a      	beq.n	8008d3e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c88:	f7f9 fc56 	bl	8002538 <HAL_GetTick>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	69ba      	ldr	r2, [r7, #24]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d302      	bcc.n	8008c9e <UART_WaitOnFlagUntilTimeout+0x30>
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d11b      	bne.n	8008cd6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008cac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	689a      	ldr	r2, [r3, #8]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f022 0201 	bic.w	r2, r2, #1
 8008cbc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2220      	movs	r2, #32
 8008cc2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2220      	movs	r2, #32
 8008cc8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e043      	b.n	8008d5e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0304 	and.w	r3, r3, #4
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d02c      	beq.n	8008d3e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cf2:	d124      	bne.n	8008d3e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cfc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d0c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	689a      	ldr	r2, [r3, #8]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f022 0201 	bic.w	r2, r2, #1
 8008d1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2220      	movs	r2, #32
 8008d22:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2220      	movs	r2, #32
 8008d28:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2220      	movs	r2, #32
 8008d2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e00f      	b.n	8008d5e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	69da      	ldr	r2, [r3, #28]
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	4013      	ands	r3, r2
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	bf0c      	ite	eq
 8008d4e:	2301      	moveq	r3, #1
 8008d50:	2300      	movne	r3, #0
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	461a      	mov	r2, r3
 8008d56:	79fb      	ldrb	r3, [r7, #7]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d091      	beq.n	8008c80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
	...

08008d68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	4613      	mov	r3, r2
 8008d74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	88fa      	ldrh	r2, [r7, #6]
 8008d80:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2222      	movs	r2, #34	; 0x22
 8008d90:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d02b      	beq.n	8008df2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d9e:	4a25      	ldr	r2, [pc, #148]	; (8008e34 <UART_Start_Receive_DMA+0xcc>)
 8008da0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da6:	4a24      	ldr	r2, [pc, #144]	; (8008e38 <UART_Start_Receive_DMA+0xd0>)
 8008da8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dae:	4a23      	ldr	r2, [pc, #140]	; (8008e3c <UART_Start_Receive_DMA+0xd4>)
 8008db0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db6:	2200      	movs	r2, #0
 8008db8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3324      	adds	r3, #36	; 0x24
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dca:	461a      	mov	r2, r3
 8008dcc:	88fb      	ldrh	r3, [r7, #6]
 8008dce:	f7fb fe13 	bl	80049f8 <HAL_DMA_Start_IT>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00c      	beq.n	8008df2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2210      	movs	r2, #16
 8008ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2220      	movs	r2, #32
 8008dec:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e01c      	b.n	8008e2c <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e08:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689a      	ldr	r2, [r3, #8]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f042 0201 	orr.w	r2, r2, #1
 8008e18:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	689a      	ldr	r2, [r3, #8]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e28:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	08008ec9 	.word	0x08008ec9
 8008e38:	08008f61 	.word	0x08008f61
 8008e3c:	08008f99 	.word	0x08008f99

08008e40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008e56:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	679a      	str	r2, [r3, #120]	; 0x78
}
 8008e5e:	bf00      	nop
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b083      	sub	sp, #12
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e80:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	689a      	ldr	r2, [r3, #8]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f022 0201 	bic.w	r2, r2, #1
 8008e90:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d107      	bne.n	8008eaa <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f022 0210 	bic.w	r2, r2, #16
 8008ea8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2220      	movs	r2, #32
 8008eae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 0320 	and.w	r3, r3, #32
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d12a      	bne.n	8008f3a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008efa:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689a      	ldr	r2, [r3, #8]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f022 0201 	bic.w	r2, r2, #1
 8008f0a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	689a      	ldr	r2, [r3, #8]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f1a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2220      	movs	r2, #32
 8008f20:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d107      	bne.n	8008f3a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f022 0210 	bic.w	r2, r2, #16
 8008f38:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d107      	bne.n	8008f52 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f48:	4619      	mov	r1, r3
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f7ff fb64 	bl	8008618 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f50:	e002      	b.n	8008f58 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f7ff fb42 	bl	80085dc <HAL_UART_RxCpltCallback>
}
 8008f58:	bf00      	nop
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f6c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d109      	bne.n	8008f8a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f7c:	085b      	lsrs	r3, r3, #1
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	4619      	mov	r1, r3
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f7ff fb48 	bl	8008618 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f88:	e002      	b.n	8008f90 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f7ff fb30 	bl	80085f0 <HAL_UART_RxHalfCpltCallback>
}
 8008f90:	bf00      	nop
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008faa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fb0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fbc:	2b80      	cmp	r3, #128	; 0x80
 8008fbe:	d109      	bne.n	8008fd4 <UART_DMAError+0x3c>
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	2b21      	cmp	r3, #33	; 0x21
 8008fc4:	d106      	bne.n	8008fd4 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008fce:	6978      	ldr	r0, [r7, #20]
 8008fd0:	f7ff ff36 	bl	8008e40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fde:	2b40      	cmp	r3, #64	; 0x40
 8008fe0:	d109      	bne.n	8008ff6 <UART_DMAError+0x5e>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2b22      	cmp	r3, #34	; 0x22
 8008fe6:	d106      	bne.n	8008ff6 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008ff0:	6978      	ldr	r0, [r7, #20]
 8008ff2:	f7ff ff3a 	bl	8008e6a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ffc:	f043 0210 	orr.w	r2, r3, #16
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009006:	6978      	ldr	r0, [r7, #20]
 8009008:	f7ff fafc 	bl	8008604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800900c:	bf00      	nop
 800900e:	3718      	adds	r7, #24
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <__libc_init_array>:
 8009014:	b570      	push	{r4, r5, r6, lr}
 8009016:	4d0d      	ldr	r5, [pc, #52]	; (800904c <__libc_init_array+0x38>)
 8009018:	4c0d      	ldr	r4, [pc, #52]	; (8009050 <__libc_init_array+0x3c>)
 800901a:	1b64      	subs	r4, r4, r5
 800901c:	10a4      	asrs	r4, r4, #2
 800901e:	2600      	movs	r6, #0
 8009020:	42a6      	cmp	r6, r4
 8009022:	d109      	bne.n	8009038 <__libc_init_array+0x24>
 8009024:	4d0b      	ldr	r5, [pc, #44]	; (8009054 <__libc_init_array+0x40>)
 8009026:	4c0c      	ldr	r4, [pc, #48]	; (8009058 <__libc_init_array+0x44>)
 8009028:	f000 f820 	bl	800906c <_init>
 800902c:	1b64      	subs	r4, r4, r5
 800902e:	10a4      	asrs	r4, r4, #2
 8009030:	2600      	movs	r6, #0
 8009032:	42a6      	cmp	r6, r4
 8009034:	d105      	bne.n	8009042 <__libc_init_array+0x2e>
 8009036:	bd70      	pop	{r4, r5, r6, pc}
 8009038:	f855 3b04 	ldr.w	r3, [r5], #4
 800903c:	4798      	blx	r3
 800903e:	3601      	adds	r6, #1
 8009040:	e7ee      	b.n	8009020 <__libc_init_array+0xc>
 8009042:	f855 3b04 	ldr.w	r3, [r5], #4
 8009046:	4798      	blx	r3
 8009048:	3601      	adds	r6, #1
 800904a:	e7f2      	b.n	8009032 <__libc_init_array+0x1e>
 800904c:	080090f0 	.word	0x080090f0
 8009050:	080090f0 	.word	0x080090f0
 8009054:	080090f0 	.word	0x080090f0
 8009058:	080090f4 	.word	0x080090f4

0800905c <memset>:
 800905c:	4402      	add	r2, r0
 800905e:	4603      	mov	r3, r0
 8009060:	4293      	cmp	r3, r2
 8009062:	d100      	bne.n	8009066 <memset+0xa>
 8009064:	4770      	bx	lr
 8009066:	f803 1b01 	strb.w	r1, [r3], #1
 800906a:	e7f9      	b.n	8009060 <memset+0x4>

0800906c <_init>:
 800906c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906e:	bf00      	nop
 8009070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009072:	bc08      	pop	{r3}
 8009074:	469e      	mov	lr, r3
 8009076:	4770      	bx	lr

08009078 <_fini>:
 8009078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907a:	bf00      	nop
 800907c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800907e:	bc08      	pop	{r3}
 8009080:	469e      	mov	lr, r3
 8009082:	4770      	bx	lr
