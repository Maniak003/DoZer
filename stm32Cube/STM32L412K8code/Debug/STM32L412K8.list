
STM32L412K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fd4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08008160  08008160  00018160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081c4  080081c4  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  080081c4  080081c4  000181c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081cc  080081cc  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081cc  080081cc  000181cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081d0  080081d0  000181d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080081d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001458  20000030  08008204  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001488  08008204  00021488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168b7  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028ab  00000000  00000000  00036917  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001548  00000000  00000000  000391c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001410  00000000  00000000  0003a710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cf08  00000000  00000000  0003bb20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fe64  00000000  00000000  00058a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bfc93  00000000  00000000  0006888c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012851f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b74  00000000  00000000  0012859c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000030 	.word	0x20000030
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08008148 	.word	0x08008148

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000034 	.word	0x20000034
 80001c8:	08008148 	.word	0x08008148

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <bebe>:
uint16_t spectrCRC;
uint8_t indexBuffer;
uint32_t radBuffer[radBufferSize] = {0};
float cfgKoefRh;

void bebe(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4); // Start timer for turn off Buzzer
 80004d0:	210c      	movs	r1, #12
 80004d2:	480d      	ldr	r0, [pc, #52]	; (8000508 <bebe+0x3c>)
 80004d4:	f005 ffa0 	bl	8006418 <HAL_TIM_OC_Start>
	HAL_Delay(200);
 80004d8:	20c8      	movs	r0, #200	; 0xc8
 80004da:	f001 fbc3 	bl	8001c64 <HAL_Delay>
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);
 80004de:	210c      	movs	r1, #12
 80004e0:	4809      	ldr	r0, [pc, #36]	; (8000508 <bebe+0x3c>)
 80004e2:	f006 f877 	bl	80065d4 <HAL_TIM_OC_Stop>
	HAL_Delay(200);
 80004e6:	20c8      	movs	r0, #200	; 0xc8
 80004e8:	f001 fbbc 	bl	8001c64 <HAL_Delay>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4); // Start timer for turn off Buzzer
 80004ec:	210c      	movs	r1, #12
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <bebe+0x3c>)
 80004f0:	f005 ff92 	bl	8006418 <HAL_TIM_OC_Start>
	HAL_Delay(200);
 80004f4:	20c8      	movs	r0, #200	; 0xc8
 80004f6:	f001 fbb5 	bl	8001c64 <HAL_Delay>
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);
 80004fa:	210c      	movs	r1, #12
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <bebe+0x3c>)
 80004fe:	f006 f869 	bl	80065d4 <HAL_TIM_OC_Stop>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	200013c8 	.word	0x200013c8

0800050c <rwFlash>:

/*
 * read/write config data from/to flash
 */
void rwFlash(uint8_t rwFlag) {
 800050c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8000510:	b08e      	sub	sp, #56	; 0x38
 8000512:	af00      	add	r7, sp, #0
 8000514:	4603      	mov	r3, r0
 8000516:	71fb      	strb	r3, [r7, #7]
	uint32_t pageAdr = 0x800F800; // Begin of 31 page, last page flash for STM32L412K8.
 8000518:	4b70      	ldr	r3, [pc, #448]	; (80006dc <rwFlash+0x1d0>)
 800051a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t magicKey;
	uint64_t dataForSave;
	magicKey = *(__IO uint32_t*) pageAdr;
 800051c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	633b      	str	r3, [r7, #48]	; 0x30
	if ((magicKey != 0x1234) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 8000522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000524:	f241 2234 	movw	r2, #4660	; 0x1234
 8000528:	4293      	cmp	r3, r2
 800052a:	d103      	bne.n	8000534 <rwFlash+0x28>
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	2b01      	cmp	r3, #1
 8000530:	f040 80ae 	bne.w	8000690 <rwFlash+0x184>
		magicKey = 0x1234;
 8000534:	f241 2334 	movw	r3, #4660	; 0x1234
 8000538:	633b      	str	r3, [r7, #48]	; 0x30
		if (rwFlag == 0) { // For first init
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d10b      	bne.n	8000558 <rwFlash+0x4c>
			cfgData = 0;
 8000540:	4b67      	ldr	r3, [pc, #412]	; (80006e0 <rwFlash+0x1d4>)
 8000542:	2200      	movs	r2, #0
 8000544:	801a      	strh	r2, [r3, #0]
			cfgLevel1 = 0;
 8000546:	4b67      	ldr	r3, [pc, #412]	; (80006e4 <rwFlash+0x1d8>)
 8000548:	2200      	movs	r2, #0
 800054a:	801a      	strh	r2, [r3, #0]
			cfgLevel2 = 0;
 800054c:	4b66      	ldr	r3, [pc, #408]	; (80006e8 <rwFlash+0x1dc>)
 800054e:	2200      	movs	r2, #0
 8000550:	801a      	strh	r2, [r3, #0]
			cfgLevel3 = 0;
 8000552:	4b66      	ldr	r3, [pc, #408]	; (80006ec <rwFlash+0x1e0>)
 8000554:	2200      	movs	r2, #0
 8000556:	801a      	strh	r2, [r3, #0]
		}
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t PAGEError = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	613b      	str	r3, [r7, #16]
		EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
		EraseInitStruct.Page = 31; // Page size for STM32L412K8 is 2KB
 8000560:	231f      	movs	r3, #31
 8000562:	61fb      	str	r3, [r7, #28]
		EraseInitStruct.NbPages     = 1;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]

		flash_ok = HAL_ERROR;
 8000568:	4b61      	ldr	r3, [pc, #388]	; (80006f0 <rwFlash+0x1e4>)
 800056a:	2201      	movs	r2, #1
 800056c:	701a      	strb	r2, [r3, #0]
		// Unlock flash
		while(flash_ok != HAL_OK) {
 800056e:	e005      	b.n	800057c <rwFlash+0x70>
		  flash_ok = HAL_FLASH_Unlock();
 8000570:	f003 fd84 	bl	800407c <HAL_FLASH_Unlock>
 8000574:	4603      	mov	r3, r0
 8000576:	461a      	mov	r2, r3
 8000578:	4b5d      	ldr	r3, [pc, #372]	; (80006f0 <rwFlash+0x1e4>)
 800057a:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK) {
 800057c:	4b5c      	ldr	r3, [pc, #368]	; (80006f0 <rwFlash+0x1e4>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d1f5      	bne.n	8000570 <rwFlash+0x64>
		}
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) == HAL_OK) {
 8000584:	f107 0210 	add.w	r2, r7, #16
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4611      	mov	r1, r2
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fe56 	bl	8004240 <HAL_FLASHEx_Erase>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d169      	bne.n	800066e <rwFlash+0x162>
			dataForSave = (uint64_t) (magicKey | (((uint64_t) cfgData << 32) & 0xFFFFFFFF00000000) | (((uint64_t) cfgLevel1 << 48) & 0xFFFF000000000000));
 800059a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800059c:	469b      	mov	fp, r3
 800059e:	f04f 0c00 	mov.w	ip, #0
 80005a2:	4b4f      	ldr	r3, [pc, #316]	; (80006e0 <rwFlash+0x1d4>)
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	b29d      	uxth	r5, r3
 80005a8:	f04f 0600 	mov.w	r6, #0
 80005ac:	f04f 0300 	mov.w	r3, #0
 80005b0:	f04f 0400 	mov.w	r4, #0
 80005b4:	002c      	movs	r4, r5
 80005b6:	2300      	movs	r3, #0
 80005b8:	ea4b 0103 	orr.w	r1, fp, r3
 80005bc:	ea4c 0204 	orr.w	r2, ip, r4
 80005c0:	4b48      	ldr	r3, [pc, #288]	; (80006e4 <rwFlash+0x1d8>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	b29d      	uxth	r5, r3
 80005c6:	f04f 0600 	mov.w	r6, #0
 80005ca:	f04f 0b00 	mov.w	fp, #0
 80005ce:	f04f 0c00 	mov.w	ip, #0
 80005d2:	ea4f 4c05 	mov.w	ip, r5, lsl #16
 80005d6:	f04f 0b00 	mov.w	fp, #0
 80005da:	ea4b 0301 	orr.w	r3, fp, r1
 80005de:	ea4c 0402 	orr.w	r4, ip, r2
 80005e2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			flash_ok = HAL_ERROR;
 80005e6:	4b42      	ldr	r3, [pc, #264]	; (80006f0 <rwFlash+0x1e4>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80005ec:	e009      	b.n	8000602 <rwFlash+0xf6>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr, dataForSave); // Write  magic key into Flash
 80005ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80005f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80005f4:	2000      	movs	r0, #0
 80005f6:	f003 fcd5 	bl	8003fa4 <HAL_FLASH_Program>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b3c      	ldr	r3, [pc, #240]	; (80006f0 <rwFlash+0x1e4>)
 8000600:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8000602:	4b3b      	ldr	r3, [pc, #236]	; (80006f0 <rwFlash+0x1e4>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1f1      	bne.n	80005ee <rwFlash+0xe2>
			}
			uint32_t tmpInt = *((uint32_t *) &cfgKoefRh);
 800060a:	4b3a      	ldr	r3, [pc, #232]	; (80006f4 <rwFlash+0x1e8>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
			dataForSave = (uint64_t) (cfgLevel2 | (cfgLevel3 << 16) | (uint64_t) tmpInt << 32);
 8000610:	4b35      	ldr	r3, [pc, #212]	; (80006e8 <rwFlash+0x1dc>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	4b35      	ldr	r3, [pc, #212]	; (80006ec <rwFlash+0x1e0>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	041b      	lsls	r3, r3, #16
 800061c:	4313      	orrs	r3, r2
 800061e:	4619      	mov	r1, r3
 8000620:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000626:	461d      	mov	r5, r3
 8000628:	f04f 0600 	mov.w	r6, #0
 800062c:	f04f 0b00 	mov.w	fp, #0
 8000630:	f04f 0c00 	mov.w	ip, #0
 8000634:	46ac      	mov	ip, r5
 8000636:	f04f 0b00 	mov.w	fp, #0
 800063a:	ea4b 0301 	orr.w	r3, fp, r1
 800063e:	ea4c 0402 	orr.w	r4, ip, r2
 8000642:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			flash_ok = HAL_ERROR;
 8000646:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <rwFlash+0x1e4>)
 8000648:	2201      	movs	r2, #1
 800064a:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 800064c:	e00b      	b.n	8000666 <rwFlash+0x15a>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr + 8, dataForSave); // Write Level2, Level3
 800064e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000650:	f103 0108 	add.w	r1, r3, #8
 8000654:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000658:	2000      	movs	r0, #0
 800065a:	f003 fca3 	bl	8003fa4 <HAL_FLASH_Program>
 800065e:	4603      	mov	r3, r0
 8000660:	461a      	mov	r2, r3
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <rwFlash+0x1e4>)
 8000664:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8000666:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <rwFlash+0x1e4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d1ef      	bne.n	800064e <rwFlash+0x142>
			}
		}
		// Lock flash
		flash_ok = HAL_ERROR;
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <rwFlash+0x1e4>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 8000674:	e005      	b.n	8000682 <rwFlash+0x176>
			flash_ok = HAL_FLASH_Lock();
 8000676:	f003 fd23 	bl	80040c0 <HAL_FLASH_Lock>
 800067a:	4603      	mov	r3, r0
 800067c:	461a      	mov	r2, r3
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <rwFlash+0x1e4>)
 8000680:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <rwFlash+0x1e4>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1f5      	bne.n	8000676 <rwFlash+0x16a>
		}
		bebe();
 800068a:	f7ff ff1f 	bl	80004cc <bebe>
	if ((magicKey != 0x1234) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 800068e:	e01f      	b.n	80006d0 <rwFlash+0x1c4>
	} else {
		cfgData = *(__IO uint16_t*) (pageAdr + 4);
 8000690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000692:	3304      	adds	r3, #4
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <rwFlash+0x1d4>)
 800069a:	801a      	strh	r2, [r3, #0]
		cfgLevel1 = *(__IO uint16_t*) (pageAdr + 6);
 800069c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800069e:	3306      	adds	r3, #6
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <rwFlash+0x1d8>)
 80006a6:	801a      	strh	r2, [r3, #0]
		cfgLevel2 = *(__IO uint16_t*) (pageAdr + 8);
 80006a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006aa:	3308      	adds	r3, #8
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <rwFlash+0x1dc>)
 80006b2:	801a      	strh	r2, [r3, #0]
		cfgLevel3 = *(__IO uint16_t*) (pageAdr + 10);
 80006b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006b6:	330a      	adds	r3, #10
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <rwFlash+0x1e0>)
 80006be:	801a      	strh	r2, [r3, #0]
		uint32_t koefAddr = pageAdr + 12;
 80006c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006c2:	330c      	adds	r3, #12
 80006c4:	60fb      	str	r3, [r7, #12]
		cfgKoefRh = *(__IO float*) &koefAddr;
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <rwFlash+0x1e8>)
 80006ce:	6013      	str	r3, [r2, #0]
	}
}
 80006d0:	bf00      	nop
 80006d2:	3738      	adds	r7, #56	; 0x38
 80006d4:	46bd      	mov	sp, r7
 80006d6:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80006da:	bf00      	nop
 80006dc:	0800f800 	.word	0x0800f800
 80006e0:	20001416 	.word	0x20001416
 80006e4:	2000141c 	.word	0x2000141c
 80006e8:	2000141a 	.word	0x2000141a
 80006ec:	200011f2 	.word	0x200011f2
 80006f0:	20001480 	.word	0x20001480
 80006f4:	20001138 	.word	0x20001138

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b092      	sub	sp, #72	; 0x48
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fe:	f001 fa3c 	bl	8001b7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000702:	f000 fa5d 	bl	8000bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000706:	f000 fd5d 	bl	80011c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800070a:	f000 fd3d 	bl	8001188 <MX_DMA_Init>
  MX_ADC1_Init();
 800070e:	f000 fab9 	bl	8000c84 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000712:	f000 fd05 	bl	8001120 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 8000716:	f000 fc79 	bl	800100c <MX_TIM15_Init>
  MX_ADC2_Init();
 800071a:	f000 fb2f 	bl	8000d7c <MX_ADC2_Init>
  MX_TIM2_Init();
 800071e:	f000 fbc1 	bl	8000ea4 <MX_TIM2_Init>
  MX_TIM16_Init();
 8000722:	f000 fccd 	bl	80010c0 <MX_TIM16_Init>
  MX_TIM6_Init();
 8000726:	f000 fc3b 	bl	8000fa0 <MX_TIM6_Init>
  MX_LPTIM2_Init();
 800072a:	f000 fb8b 	bl	8000e44 <MX_LPTIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int j = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t btCommand[sizeCommand];
  uint8_t prefix[3] = {'<', 'B', '>'};
 8000732:	4a79      	ldr	r2, [pc, #484]	; (8000918 <main+0x220>)
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	6812      	ldr	r2, [r2, #0]
 800073a:	4611      	mov	r1, r2
 800073c:	8019      	strh	r1, [r3, #0]
 800073e:	3302      	adds	r3, #2
 8000740:	0c12      	lsrs	r2, r2, #16
 8000742:	701a      	strb	r2, [r3, #0]
  uint8_t lowSpectr, highSpectr;
  #ifdef DISPLAY_ENABLE
  ssd1306_Init();
  #endif
  //uint16_t tmpData;
  uint32_t initDelay, oldTime = HAL_GetTick();
 8000744:	f001 fa82 	bl	8001c4c <HAL_GetTick>
 8000748:	62b8      	str	r0, [r7, #40]	; 0x28
  initDelay = oldTime;
 800074a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  oldTimeAll = oldTime;
 800074e:	4a73      	ldr	r2, [pc, #460]	; (800091c <main+0x224>)
 8000750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000752:	6013      	str	r3, [r2, #0]
  sleepFlag = oldTime;
 8000754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000756:	2b00      	cmp	r3, #0
 8000758:	bf14      	ite	ne
 800075a:	2301      	movne	r3, #1
 800075c:	2300      	moveq	r3, #0
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b6f      	ldr	r3, [pc, #444]	; (8000920 <main+0x228>)
 8000762:	701a      	strb	r2, [r3, #0]
  counterCC = 0;
 8000764:	4b6f      	ldr	r3, [pc, #444]	; (8000924 <main+0x22c>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]

  rwFlash(0); // Read config from flash.
 800076a:	2000      	movs	r0, #0
 800076c:	f7ff fece 	bl	800050c <rwFlash>

  HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_SET); // LED on.
 8000770:	2201      	movs	r2, #1
 8000772:	2108      	movs	r1, #8
 8000774:	486c      	ldr	r0, [pc, #432]	; (8000928 <main+0x230>)
 8000776:	f004 f8e3 	bl	8004940 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, COM_PIN, GPIO_PIN_SET); // Com pin disable
 800077a:	2201      	movs	r2, #1
 800077c:	2140      	movs	r1, #64	; 0x40
 800077e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000782:	f004 f8dd 	bl	8004940 <HAL_GPIO_WritePin>
  __HAL_TIM_CLEAR_FLAG(&htim15, TIM_SR_UIF); // Clear flags
 8000786:	4b69      	ldr	r3, [pc, #420]	; (800092c <main+0x234>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f06f 0201 	mvn.w	r2, #1
 800078e:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim15); // Start timer for turn off LED
 8000790:	4866      	ldr	r0, [pc, #408]	; (800092c <main+0x234>)
 8000792:	f005 fd5d 	bl	8006250 <HAL_TIM_Base_Start_IT>
  //
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
 8000796:	210c      	movs	r1, #12
 8000798:	4865      	ldr	r0, [pc, #404]	; (8000930 <main+0x238>)
 800079a:	f005 fe3d 	bl	8006418 <HAL_TIM_OC_Start>
  __HAL_TIM_CLEAR_FLAG(&htim16, TIM_SR_UIF); // Clear flags
 800079e:	4b65      	ldr	r3, [pc, #404]	; (8000934 <main+0x23c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f06f 0201 	mvn.w	r2, #1
 80007a6:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 80007a8:	4862      	ldr	r0, [pc, #392]	; (8000934 <main+0x23c>)
 80007aa:	f005 fd51 	bl	8006250 <HAL_TIM_Base_Start_IT>

  /* Test alarm */
  alarmLevel = 1;
 80007ae:	4b62      	ldr	r3, [pc, #392]	; (8000938 <main+0x240>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	801a      	strh	r2, [r3, #0]
  alarmCount = 0;
 80007b4:	4b61      	ldr	r3, [pc, #388]	; (800093c <main+0x244>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim6); // Alarm timer.
 80007ba:	4861      	ldr	r0, [pc, #388]	; (8000940 <main+0x248>)
 80007bc:	f005 fd48 	bl	8006250 <HAL_TIM_Base_Start_IT>
	  counterCC = 0;
	  oldTime = HAL_GetTick();
	  ssd1306_SetCursor(0, 0);
	  ssd1306_WriteString(counterPP, Font_6x8, 0x01);
	#endif
	  int ttt, max = 1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	643b      	str	r3, [r7, #64]	; 0x40
	  for ( int i = 2; i < 2050; i++) {
 80007c4:	2302      	movs	r3, #2
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80007c8:	e018      	b.n	80007fc <main+0x104>
		  ttt = spectrData[i];
 80007ca:	4a5e      	ldr	r2, [pc, #376]	; (8000944 <main+0x24c>)
 80007cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007d2:	623b      	str	r3, [r7, #32]
		  if ((float) ttt > max)
 80007d4:	6a3b      	ldr	r3, [r7, #32]
 80007d6:	ee07 3a90 	vmov	s15, r3
 80007da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007e0:	ee07 3a90 	vmov	s15, r3
 80007e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f0:	dd01      	ble.n	80007f6 <main+0xfe>
			  max = ttt;
 80007f2:	6a3b      	ldr	r3, [r7, #32]
 80007f4:	643b      	str	r3, [r7, #64]	; 0x40
	  for ( int i = 2; i < 2050; i++) {
 80007f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007f8:	3301      	adds	r3, #1
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80007fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007fe:	f640 0201 	movw	r2, #2049	; 0x801
 8000802:	4293      	cmp	r3, r2
 8000804:	dde1      	ble.n	80007ca <main+0xd2>
	  */
	#ifdef DISPLAY_ENABLE
	  ssd1306_UpdateScreen();
	#endif
	  // Delay after on.
	  if (initFlag && (HAL_GetTick() - initDelay > INIT_TIME)) {
 8000806:	4b50      	ldr	r3, [pc, #320]	; (8000948 <main+0x250>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d017      	beq.n	800083e <main+0x146>
 800080e:	f001 fa1d 	bl	8001c4c <HAL_GetTick>
 8000812:	4602      	mov	r2, r0
 8000814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800081c:	d90f      	bls.n	800083e <main+0x146>
		  initFlag = 0;
 800081e:	4b4a      	ldr	r3, [pc, #296]	; (8000948 <main+0x250>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_IT(&hadc1);  // Init ADC.
 8000824:	4849      	ldr	r0, [pc, #292]	; (800094c <main+0x254>)
 8000826:	f001 fe77 	bl	8002518 <HAL_ADC_Start_IT>
		  oldTimeAll = HAL_GetTick();
 800082a:	f001 fa0f 	bl	8001c4c <HAL_GetTick>
 800082e:	4602      	mov	r2, r0
 8000830:	4b3a      	ldr	r3, [pc, #232]	; (800091c <main+0x224>)
 8000832:	601a      	str	r2, [r3, #0]
		  HAL_LPTIM_Counter_Start_IT(&hlptim2, 32000);
 8000834:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 8000838:	4845      	ldr	r0, [pc, #276]	; (8000950 <main+0x258>)
 800083a:	f004 f955 	bl	8004ae8 <HAL_LPTIM_Counter_Start_IT>
	  }
	#ifdef DISPLAY_ENABLE
	  ssd1306_SetCursor(0, 24);
	#endif
	  /* Status JDY-19, BT connected ? */
	  if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == 1 ) { // BT State active ?
 800083e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000846:	f004 f863 	bl	8004910 <HAL_GPIO_ReadPin>
 800084a:	4603      	mov	r3, r0
 800084c:	2b01      	cmp	r3, #1
 800084e:	f040 815d 	bne.w	8000b0c <main+0x414>
	#ifdef DISPLAY_ENABLE
		  ssd1306_WriteString("BT: connect   ", Font_6x8, 0x01);
	#endif
		  /* Init uart after sleep */
		  if (initUART) {
 8000852:	4b40      	ldr	r3, [pc, #256]	; (8000954 <main+0x25c>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00c      	beq.n	8000874 <main+0x17c>
			  HAL_UART_Init(&huart1);
 800085a:	483f      	ldr	r0, [pc, #252]	; (8000958 <main+0x260>)
 800085c:	f006 fe44 	bl	80074e8 <HAL_UART_Init>
			  HAL_UART_Receive_DMA(&huart1, btCommand, sizeCommand);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2214      	movs	r2, #20
 8000866:	4619      	mov	r1, r3
 8000868:	483b      	ldr	r0, [pc, #236]	; (8000958 <main+0x260>)
 800086a:	f006 ff53 	bl	8007714 <HAL_UART_Receive_DMA>
			  initUART = 0;
 800086e:	4b39      	ldr	r3, [pc, #228]	; (8000954 <main+0x25c>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
		  }

		  /* Receive data from android */
		  if (hdma_usart1_rx.State == HAL_DMA_STATE_READY) {
 8000874:	4b39      	ldr	r3, [pc, #228]	; (800095c <main+0x264>)
 8000876:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b01      	cmp	r3, #1
 800087e:	f040 80a5 	bne.w	80009cc <main+0x2d4>
			  HAL_UART_Receive_DMA(&huart1, btCommand, sizeCommand);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2214      	movs	r2, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4833      	ldr	r0, [pc, #204]	; (8000958 <main+0x260>)
 800088c:	f006 ff42 	bl	8007714 <HAL_UART_Receive_DMA>
			  if (btCommand[0] == '<' && btCommand[2] == '>') {
 8000890:	7b3b      	ldrb	r3, [r7, #12]
 8000892:	2b3c      	cmp	r3, #60	; 0x3c
 8000894:	f040 809a 	bne.w	80009cc <main+0x2d4>
 8000898:	7bbb      	ldrb	r3, [r7, #14]
 800089a:	2b3e      	cmp	r3, #62	; 0x3e
 800089c:	f040 8096 	bne.w	80009cc <main+0x2d4>
				  uint16_t CS = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	877b      	strh	r3, [r7, #58]	; 0x3a
				  for (int i = 0; i < 18; i++) {
 80008a4:	2300      	movs	r3, #0
 80008a6:	637b      	str	r3, [r7, #52]	; 0x34
 80008a8:	e00b      	b.n	80008c2 <main+0x1ca>
					  CS = CS + btCommand[i];
 80008aa:	f107 020c 	add.w	r2, r7, #12
 80008ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008b0:	4413      	add	r3, r2
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80008b8:	4413      	add	r3, r2
 80008ba:	877b      	strh	r3, [r7, #58]	; 0x3a
				  for (int i = 0; i < 18; i++) {
 80008bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008be:	3301      	adds	r3, #1
 80008c0:	637b      	str	r3, [r7, #52]	; 0x34
 80008c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008c4:	2b11      	cmp	r3, #17
 80008c6:	ddf0      	ble.n	80008aa <main+0x1b2>
				  }
				  if (((CS & 0xFF) == btCommand[18]) && (((CS >> 8) & 0xFF) == btCommand[19])) {
 80008c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	7fba      	ldrb	r2, [r7, #30]
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d17c      	bne.n	80009cc <main+0x2d4>
 80008d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80008d4:	0a1b      	lsrs	r3, r3, #8
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	7ffa      	ldrb	r2, [r7, #31]
 80008dc:	4293      	cmp	r3, r2
 80008de:	d175      	bne.n	80009cc <main+0x2d4>
					  //HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
					  //HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
					  if (btCommand[1] == '1')  { // Clear statistics
 80008e0:	7b7b      	ldrb	r3, [r7, #13]
 80008e2:	2b31      	cmp	r3, #49	; 0x31
 80008e4:	d13e      	bne.n	8000964 <main+0x26c>
						  for (int i = 0; i < 2050; i++) {
 80008e6:	2300      	movs	r3, #0
 80008e8:	633b      	str	r3, [r7, #48]	; 0x30
 80008ea:	e007      	b.n	80008fc <main+0x204>
							  spectrData[i] = 0;
 80008ec:	4a15      	ldr	r2, [pc, #84]	; (8000944 <main+0x24c>)
 80008ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008f0:	2100      	movs	r1, #0
 80008f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						  for (int i = 0; i < 2050; i++) {
 80008f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008f8:	3301      	adds	r3, #1
 80008fa:	633b      	str	r3, [r7, #48]	; 0x30
 80008fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008fe:	f640 0201 	movw	r2, #2049	; 0x801
 8000902:	4293      	cmp	r3, r2
 8000904:	ddf2      	ble.n	80008ec <main+0x1f4>
						  }
						  oldTimeAll = HAL_GetTick();
 8000906:	f001 f9a1 	bl	8001c4c <HAL_GetTick>
 800090a:	4602      	mov	r2, r0
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <main+0x224>)
 800090e:	601a      	str	r2, [r3, #0]
						  counterALL = 0;
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <main+0x268>)
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	e059      	b.n	80009cc <main+0x2d4>
 8000918:	08008178 	.word	0x08008178
 800091c:	200013c0 	.word	0x200013c0
 8000920:	20000001 	.word	0x20000001
 8000924:	2000004c 	.word	0x2000004c
 8000928:	48000400 	.word	0x48000400
 800092c:	200011a4 	.word	0x200011a4
 8000930:	200013c8 	.word	0x200013c8
 8000934:	20001420 	.word	0x20001420
 8000938:	200011f0 	.word	0x200011f0
 800093c:	20001414 	.word	0x20001414
 8000940:	20001374 	.word	0x20001374
 8000944:	20000068 	.word	0x20000068
 8000948:	20000000 	.word	0x20000000
 800094c:	2000120c 	.word	0x2000120c
 8000950:	200012b8 	.word	0x200012b8
 8000954:	20000002 	.word	0x20000002
 8000958:	200012f4 	.word	0x200012f4
 800095c:	20001270 	.word	0x20001270
 8000960:	20000050 	.word	0x20000050
					  } else if (btCommand[1] == '2') { // Write config data
 8000964:	7b7b      	ldrb	r3, [r7, #13]
 8000966:	2b32      	cmp	r3, #50	; 0x32
 8000968:	d130      	bne.n	80009cc <main+0x2d4>
						  cfgData = ((btCommand[4] << 8) & 0xFF00) | btCommand[3];
 800096a:	7c3b      	ldrb	r3, [r7, #16]
 800096c:	021b      	lsls	r3, r3, #8
 800096e:	b21a      	sxth	r2, r3
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	b21b      	sxth	r3, r3
 8000974:	4313      	orrs	r3, r2
 8000976:	b21b      	sxth	r3, r3
 8000978:	b29a      	uxth	r2, r3
 800097a:	4b7e      	ldr	r3, [pc, #504]	; (8000b74 <main+0x47c>)
 800097c:	801a      	strh	r2, [r3, #0]
						  cfgLevel1 = ((btCommand[6] << 8) & 0xFF00) | btCommand[5];
 800097e:	7cbb      	ldrb	r3, [r7, #18]
 8000980:	021b      	lsls	r3, r3, #8
 8000982:	b21a      	sxth	r2, r3
 8000984:	7c7b      	ldrb	r3, [r7, #17]
 8000986:	b21b      	sxth	r3, r3
 8000988:	4313      	orrs	r3, r2
 800098a:	b21b      	sxth	r3, r3
 800098c:	b29a      	uxth	r2, r3
 800098e:	4b7a      	ldr	r3, [pc, #488]	; (8000b78 <main+0x480>)
 8000990:	801a      	strh	r2, [r3, #0]
						  cfgLevel2 = ((btCommand[8] << 8) & 0xFF00) | btCommand[7];
 8000992:	7d3b      	ldrb	r3, [r7, #20]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	b21a      	sxth	r2, r3
 8000998:	7cfb      	ldrb	r3, [r7, #19]
 800099a:	b21b      	sxth	r3, r3
 800099c:	4313      	orrs	r3, r2
 800099e:	b21b      	sxth	r3, r3
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	4b76      	ldr	r3, [pc, #472]	; (8000b7c <main+0x484>)
 80009a4:	801a      	strh	r2, [r3, #0]
						  cfgLevel3 = ((btCommand[10] << 8) & 0xFF00) | btCommand[9];
 80009a6:	7dbb      	ldrb	r3, [r7, #22]
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	b21a      	sxth	r2, r3
 80009ac:	7d7b      	ldrb	r3, [r7, #21]
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b21b      	sxth	r3, r3
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	4b72      	ldr	r3, [pc, #456]	; (8000b80 <main+0x488>)
 80009b8:	801a      	strh	r2, [r3, #0]
						  cfgKoefRh = *(float *) &btCommand[11];
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	330b      	adds	r3, #11
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a70      	ldr	r2, [pc, #448]	; (8000b84 <main+0x48c>)
 80009c4:	6013      	str	r3, [r2, #0]
						  rwFlash(1); // Write to flash
 80009c6:	2001      	movs	r0, #1
 80009c8:	f7ff fda0 	bl	800050c <rwFlash>
					  }
				  }
			  }
		  }

		  j = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	647b      	str	r3, [r7, #68]	; 0x44
		  // Transmit data over BT.
		  HAL_UART_Transmit(&huart1, prefix, 3, 1000); // Start sequence.
 80009d0:	f107 0108 	add.w	r1, r7, #8
 80009d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d8:	2203      	movs	r2, #3
 80009da:	486b      	ldr	r0, [pc, #428]	; (8000b88 <main+0x490>)
 80009dc:	f006 fe07 	bl	80075ee <HAL_UART_Transmit>
		  spectrData[0] = (uint16_t) ((HAL_GetTick() - oldTimeAll) / 1000); // Specter collection time.
 80009e0:	f001 f934 	bl	8001c4c <HAL_GetTick>
 80009e4:	4602      	mov	r2, r0
 80009e6:	4b69      	ldr	r3, [pc, #420]	; (8000b8c <main+0x494>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	4a68      	ldr	r2, [pc, #416]	; (8000b90 <main+0x498>)
 80009ee:	fba2 2303 	umull	r2, r3, r2, r3
 80009f2:	099b      	lsrs	r3, r3, #6
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	4b67      	ldr	r3, [pc, #412]	; (8000b94 <main+0x49c>)
 80009f8:	801a      	strh	r2, [r3, #0]
		  spectrData[1] = (uint16_t) (((HAL_GetTick() - oldTimeAll) / 1000) >> 16);
 80009fa:	f001 f927 	bl	8001c4c <HAL_GetTick>
 80009fe:	4602      	mov	r2, r0
 8000a00:	4b62      	ldr	r3, [pc, #392]	; (8000b8c <main+0x494>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	4a62      	ldr	r2, [pc, #392]	; (8000b90 <main+0x498>)
 8000a08:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0c:	099b      	lsrs	r3, r3, #6
 8000a0e:	0c1b      	lsrs	r3, r3, #16
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	4b60      	ldr	r3, [pc, #384]	; (8000b94 <main+0x49c>)
 8000a14:	805a      	strh	r2, [r3, #2]
		  spectrData[2] = (uint16_t) (counterALL & 0xFFFF);
 8000a16:	4b60      	ldr	r3, [pc, #384]	; (8000b98 <main+0x4a0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	4b5d      	ldr	r3, [pc, #372]	; (8000b94 <main+0x49c>)
 8000a1e:	809a      	strh	r2, [r3, #4]
		  spectrData[3] = (uint16_t) (counterALL >> 16);
 8000a20:	4b5d      	ldr	r3, [pc, #372]	; (8000b98 <main+0x4a0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	0c1b      	lsrs	r3, r3, #16
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	4b5a      	ldr	r3, [pc, #360]	; (8000b94 <main+0x49c>)
 8000a2a:	80da      	strh	r2, [r3, #6]
		  spectrCRC = 0;
 8000a2c:	4b5b      	ldr	r3, [pc, #364]	; (8000b9c <main+0x4a4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	801a      	strh	r2, [r3, #0]
		  HAL_Delay(TRANSMIT_DALAY);  // Increase time delay if transmit error.
 8000a32:	2014      	movs	r0, #20
 8000a34:	f001 f916 	bl	8001c64 <HAL_Delay>
		  for ( int i = 0; i < 1042; i++) {
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a3c:	e034      	b.n	8000aa8 <main+0x3b0>
			  lowSpectr = spectrData[i] & 0xFF;
 8000a3e:	4a55      	ldr	r2, [pc, #340]	; (8000b94 <main+0x49c>)
 8000a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	71fb      	strb	r3, [r7, #7]
			  highSpectr = (spectrData[i] & 0xFF00) >> 8;
 8000a4a:	4a52      	ldr	r2, [pc, #328]	; (8000b94 <main+0x49c>)
 8000a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a52:	0a1b      	lsrs	r3, r3, #8
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	71bb      	strb	r3, [r7, #6]
			  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	4b4f      	ldr	r3, [pc, #316]	; (8000b9c <main+0x4a4>)
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	79bb      	ldrb	r3, [r7, #6]
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	4413      	add	r3, r2
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	4b4b      	ldr	r3, [pc, #300]	; (8000b9c <main+0x4a4>)
 8000a70:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8000a72:	1db9      	adds	r1, r7, #6
 8000a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4843      	ldr	r0, [pc, #268]	; (8000b88 <main+0x490>)
 8000a7c:	f006 fdb7 	bl	80075ee <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8000a80:	1df9      	adds	r1, r7, #7
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	2201      	movs	r2, #1
 8000a88:	483f      	ldr	r0, [pc, #252]	; (8000b88 <main+0x490>)
 8000a8a:	f006 fdb0 	bl	80075ee <HAL_UART_Transmit>
			  if ( j++ >= 9) {
 8000a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	647a      	str	r2, [r7, #68]	; 0x44
 8000a94:	2b08      	cmp	r3, #8
 8000a96:	dd04      	ble.n	8000aa2 <main+0x3aa>
				  HAL_Delay(TRANSMIT_DALAY);  // Increase time delay if transmit error.
 8000a98:	2014      	movs	r0, #20
 8000a9a:	f001 f8e3 	bl	8001c64 <HAL_Delay>
				  j = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	647b      	str	r3, [r7, #68]	; 0x44
		  for ( int i = 0; i < 1042; i++) {
 8000aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aaa:	f240 4211 	movw	r2, #1041	; 0x411
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	ddc5      	ble.n	8000a3e <main+0x346>
			  }
		  }
		  /* Transmit CRC */
		  HAL_Delay(TRANSMIT_DALAY);
 8000ab2:	2014      	movs	r0, #20
 8000ab4:	f001 f8d6 	bl	8001c64 <HAL_Delay>
		  lowSpectr = spectrCRC & 0xFF;
 8000ab8:	4b38      	ldr	r3, [pc, #224]	; (8000b9c <main+0x4a4>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	71fb      	strb	r3, [r7, #7]
		  highSpectr = (spectrCRC & 0xFF00) >> 8;
 8000ac0:	4b36      	ldr	r3, [pc, #216]	; (8000b9c <main+0x4a4>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	71bb      	strb	r3, [r7, #6]
		  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8000acc:	1db9      	adds	r1, r7, #6
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	482c      	ldr	r0, [pc, #176]	; (8000b88 <main+0x490>)
 8000ad6:	f006 fd8a 	bl	80075ee <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8000ada:	1df9      	adds	r1, r7, #7
 8000adc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4829      	ldr	r0, [pc, #164]	; (8000b88 <main+0x490>)
 8000ae4:	f006 fd83 	bl	80075ee <HAL_UART_Transmit>
		  sleepDelay = HAL_GetTick();
 8000ae8:	f001 f8b0 	bl	8001c4c <HAL_GetTick>
 8000aec:	4602      	mov	r2, r0
 8000aee:	4b2c      	ldr	r3, [pc, #176]	; (8000ba0 <main+0x4a8>)
 8000af0:	601a      	str	r2, [r3, #0]
		  sleepFlag = 1;
 8000af2:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <main+0x4ac>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
		  /* Measure battery voltage */
		  HAL_GPIO_WritePin(GPIOA, COM_PIN, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2140      	movs	r1, #64	; 0x40
 8000afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b00:	f003 ff1e 	bl	8004940 <HAL_GPIO_WritePin>
		  HAL_ADC_Start(&hadc2);
 8000b04:	4828      	ldr	r0, [pc, #160]	; (8000ba8 <main+0x4b0>)
 8000b06:	f001 fc4d 	bl	80023a4 <HAL_ADC_Start>
 8000b0a:	e02e      	b.n	8000b6a <main+0x472>
	#ifdef DISPLAY_ENABLE
		  HAL_Delay(500);
		  ssd1306_WriteString("BT: disconnect", Font_6x8, 0x01);
	#endif
		  // BT sleep control
		  if (sleepFlag && (HAL_GetTick() - sleepDelay > SLEEPDALAY)) {
 8000b0c:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <main+0x4ac>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d02a      	beq.n	8000b6a <main+0x472>
 8000b14:	f001 f89a 	bl	8001c4c <HAL_GetTick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <main+0x4a8>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b24:	d921      	bls.n	8000b6a <main+0x472>
			  sleepFlag = 0;
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <main+0x4ac>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, (uint8_t*) "AT+SLEEP\n", 9, 1000);    //For JDY-10
 8000b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b30:	2209      	movs	r2, #9
 8000b32:	491e      	ldr	r1, [pc, #120]	; (8000bac <main+0x4b4>)
 8000b34:	4814      	ldr	r0, [pc, #80]	; (8000b88 <main+0x490>)
 8000b36:	f006 fd5a 	bl	80075ee <HAL_UART_Transmit>
			  HAL_Delay(200);
 8000b3a:	20c8      	movs	r0, #200	; 0xc8
 8000b3c:	f001 f892 	bl	8001c64 <HAL_Delay>
			  HAL_UART_Transmit(&huart1, (uint8_t*) "AT+SLEEP\r\n", 10, 1000); //For JDY-19
 8000b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b44:	220a      	movs	r2, #10
 8000b46:	491a      	ldr	r1, [pc, #104]	; (8000bb0 <main+0x4b8>)
 8000b48:	480f      	ldr	r0, [pc, #60]	; (8000b88 <main+0x490>)
 8000b4a:	f006 fd50 	bl	80075ee <HAL_UART_Transmit>
			  HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_SET); // LED on.
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2108      	movs	r1, #8
 8000b52:	4818      	ldr	r0, [pc, #96]	; (8000bb4 <main+0x4bc>)
 8000b54:	f003 fef4 	bl	8004940 <HAL_GPIO_WritePin>
			  HAL_TIM_Base_Start_IT(&htim15); // Start timer for turn off LED.
 8000b58:	4817      	ldr	r0, [pc, #92]	; (8000bb8 <main+0x4c0>)
 8000b5a:	f005 fb79 	bl	8006250 <HAL_TIM_Base_Start_IT>
			  HAL_UART_DeInit(&huart1);
 8000b5e:	480a      	ldr	r0, [pc, #40]	; (8000b88 <main+0x490>)
 8000b60:	f006 fd10 	bl	8007584 <HAL_UART_DeInit>
			  initUART = 1;
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <main+0x4c4>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  HAL_Delay(500);
 8000b6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b6e:	f001 f879 	bl	8001c64 <HAL_Delay>
  {
 8000b72:	e625      	b.n	80007c0 <main+0xc8>
 8000b74:	20001416 	.word	0x20001416
 8000b78:	2000141c 	.word	0x2000141c
 8000b7c:	2000141a 	.word	0x2000141a
 8000b80:	200011f2 	.word	0x200011f2
 8000b84:	20001138 	.word	0x20001138
 8000b88:	200012f4 	.word	0x200012f4
 8000b8c:	200013c0 	.word	0x200013c0
 8000b90:	10624dd3 	.word	0x10624dd3
 8000b94:	20000068 	.word	0x20000068
 8000b98:	20000050 	.word	0x20000050
 8000b9c:	20001418 	.word	0x20001418
 8000ba0:	20001208 	.word	0x20001208
 8000ba4:	20000001 	.word	0x20000001
 8000ba8:	20001140 	.word	0x20001140
 8000bac:	08008160 	.word	0x08008160
 8000bb0:	0800816c 	.word	0x0800816c
 8000bb4:	48000400 	.word	0x48000400
 8000bb8:	200011a4 	.word	0x200011a4
 8000bbc:	20000002 	.word	0x20000002

08000bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b0a4      	sub	sp, #144	; 0x90
 8000bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bca:	2244      	movs	r2, #68	; 0x44
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f007 fab2 	bl	8008138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2234      	movs	r2, #52	; 0x34
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f007 faa4 	bl	8008138 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bf0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bf4:	f004 fa8e 	bl	8005114 <HAL_PWREx_ControlVoltageScaling>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000bfe:	f000 fb53 	bl	80012a8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000c02:	2318      	movs	r3, #24
 8000c04:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c06:	2301      	movs	r3, #1
 8000c08:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8000c12:	2370      	movs	r3, #112	; 0x70
 8000c14:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f004 face 	bl	80051c0 <HAL_RCC_OscConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c2a:	f000 fb3d 	bl	80012a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2e:	230f      	movs	r3, #15
 8000c30:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c32:	2300      	movs	r3, #0
 8000c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8000c36:	23b0      	movs	r3, #176	; 0xb0
 8000c38:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f004 ff1f 	bl	8005a8c <HAL_RCC_ClockConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c54:	f000 fb28 	bl	80012a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPTIM2
 8000c58:	f244 4301 	movw	r3, #17409	; 0x4401
 8000c5c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_LSI;
 8000c62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f005 f912 	bl	8005e94 <HAL_RCCEx_PeriphCLKConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000c76:	f000 fb17 	bl	80012a8 <Error_Handler>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3790      	adds	r7, #144	; 0x90
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
 8000ca4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ca6:	4b32      	ldr	r3, [pc, #200]	; (8000d70 <MX_ADC1_Init+0xec>)
 8000ca8:	4a32      	ldr	r2, [pc, #200]	; (8000d74 <MX_ADC1_Init+0xf0>)
 8000caa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cac:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <MX_ADC1_Init+0xec>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cb2:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <MX_ADC1_Init+0xec>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <MX_ADC1_Init+0xec>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cbe:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <MX_ADC1_Init+0xec>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc4:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <MX_ADC1_Init+0xec>)
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cca:	4b29      	ldr	r3, [pc, #164]	; (8000d70 <MX_ADC1_Init+0xec>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cd0:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <MX_ADC1_Init+0xec>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <MX_ADC1_Init+0xec>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cdc:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <MX_ADC1_Init+0xec>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <MX_ADC1_Init+0xec>)
 8000ce6:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000cec:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <MX_ADC1_Init+0xec>)
 8000cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <MX_ADC1_Init+0xec>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_ADC1_Init+0xec>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <MX_ADC1_Init+0xec>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d0a:	4819      	ldr	r0, [pc, #100]	; (8000d70 <MX_ADC1_Init+0xec>)
 8000d0c:	f001 f9fc 	bl	8002108 <HAL_ADC_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000d16:	f000 fac7 	bl	80012a8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	4812      	ldr	r0, [pc, #72]	; (8000d70 <MX_ADC1_Init+0xec>)
 8000d26:	f002 fd01 	bl	800372c <HAL_ADCEx_MultiModeConfigChannel>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000d30:	f000 faba 	bl	80012a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <MX_ADC1_Init+0xf4>)
 8000d36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d38:	2306      	movs	r3, #6
 8000d3a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d40:	237f      	movs	r3, #127	; 0x7f
 8000d42:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 1;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4807      	ldr	r0, [pc, #28]	; (8000d70 <MX_ADC1_Init+0xec>)
 8000d52:	f001 ff59 	bl	8002c08 <HAL_ADC_ConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000d5c:	f000 faa4 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d60:	217f      	movs	r1, #127	; 0x7f
 8000d62:	4803      	ldr	r0, [pc, #12]	; (8000d70 <MX_ADC1_Init+0xec>)
 8000d64:	f002 fc4f 	bl	8003606 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END ADC1_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	; 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2000120c 	.word	0x2000120c
 8000d74:	50040000 	.word	0x50040000
 8000d78:	43210000 	.word	0x43210000

08000d7c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d82:	463b      	mov	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
 8000d90:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d92:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <MX_ADC2_Init+0xbc>)
 8000d94:	4a29      	ldr	r2, [pc, #164]	; (8000e3c <MX_ADC2_Init+0xc0>)
 8000d96:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <MX_ADC2_Init+0xbc>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000d9e:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <MX_ADC2_Init+0xbc>)
 8000da0:	2210      	movs	r2, #16
 8000da2:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000da4:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <MX_ADC2_Init+0xbc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000daa:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <MX_ADC2_Init+0xbc>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000db0:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <MX_ADC2_Init+0xbc>)
 8000db2:	2204      	movs	r2, #4
 8000db4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <MX_ADC2_Init+0xbc>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_ADC2_Init+0xbc>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_ADC2_Init+0xbc>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_ADC2_Init+0xbc>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_ADC2_Init+0xbc>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_ADC2_Init+0xbc>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_ADC2_Init+0xbc>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_ADC2_Init+0xbc>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <MX_ADC2_Init+0xbc>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000df2:	4811      	ldr	r0, [pc, #68]	; (8000e38 <MX_ADC2_Init+0xbc>)
 8000df4:	f001 f988 	bl	8002108 <HAL_ADC_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000dfe:	f000 fa53 	bl	80012a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <MX_ADC2_Init+0xc4>)
 8000e04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e06:	2306      	movs	r3, #6
 8000e08:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000e0a:	2306      	movs	r3, #6
 8000e0c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e0e:	237f      	movs	r3, #127	; 0x7f
 8000e10:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e12:	2304      	movs	r3, #4
 8000e14:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 3;
 8000e16:	2303      	movs	r3, #3
 8000e18:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4806      	ldr	r0, [pc, #24]	; (8000e38 <MX_ADC2_Init+0xbc>)
 8000e20:	f001 fef2 	bl	8002c08 <HAL_ADC_ConfigChannel>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000e2a:	f000 fa3d 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20001140 	.word	0x20001140
 8000e3c:	50040100 	.word	0x50040100
 8000e40:	32601000 	.word	0x32601000

08000e44 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_LPTIM2_Init+0x58>)
 8000e4a:	4a15      	ldr	r2, [pc, #84]	; (8000ea0 <MX_LPTIM2_Init+0x5c>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <MX_LPTIM2_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_LPTIM2_Init+0x58>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <MX_LPTIM2_Init+0x58>)
 8000e5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e60:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_LPTIM2_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_LPTIM2_Init+0x58>)
 8000e6a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e6e:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <MX_LPTIM2_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_LPTIM2_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <MX_LPTIM2_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim2.Init.RepetitionCounter = 0;
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_LPTIM2_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_LPTIM2_Init+0x58>)
 8000e8a:	f003 fd71 	bl	8004970 <HAL_LPTIM_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_LPTIM2_Init+0x54>
  {
    Error_Handler();
 8000e94:	f000 fa08 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200012b8 	.word	0x200012b8
 8000ea0:	40009400 	.word	0x40009400

08000ea4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08e      	sub	sp, #56	; 0x38
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]
 8000ed2:	615a      	str	r2, [r3, #20]
 8000ed4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ed6:	4b31      	ldr	r3, [pc, #196]	; (8000f9c <MX_TIM2_Init+0xf8>)
 8000ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000edc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ede:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <MX_TIM2_Init+0xf8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <MX_TIM2_Init+0xf8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48;
 8000eea:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <MX_TIM2_Init+0xf8>)
 8000eec:	2230      	movs	r2, #48	; 0x30
 8000eee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef0:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <MX_TIM2_Init+0xf8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ef6:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <MX_TIM2_Init+0xf8>)
 8000ef8:	2280      	movs	r2, #128	; 0x80
 8000efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000efc:	4827      	ldr	r0, [pc, #156]	; (8000f9c <MX_TIM2_Init+0xf8>)
 8000efe:	f005 f94f 	bl	80061a0 <HAL_TIM_Base_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000f08:	f000 f9ce 	bl	80012a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f16:	4619      	mov	r1, r3
 8000f18:	4820      	ldr	r0, [pc, #128]	; (8000f9c <MX_TIM2_Init+0xf8>)
 8000f1a:	f005 fdd3 	bl	8006ac4 <HAL_TIM_ConfigClockSource>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000f24:	f000 f9c0 	bl	80012a8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000f28:	481c      	ldr	r0, [pc, #112]	; (8000f9c <MX_TIM2_Init+0xf8>)
 8000f2a:	f005 fa14 	bl	8006356 <HAL_TIM_OC_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f34:	f000 f9b8 	bl	80012a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f38:	2320      	movs	r3, #32
 8000f3a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	4815      	ldr	r0, [pc, #84]	; (8000f9c <MX_TIM2_Init+0xf8>)
 8000f48:	f006 fa4a 	bl	80073e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000f52:	f000 f9a9 	bl	80012a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000f56:	2330      	movs	r3, #48	; 0x30
 8000f58:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f66:	463b      	mov	r3, r7
 8000f68:	220c      	movs	r2, #12
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480b      	ldr	r0, [pc, #44]	; (8000f9c <MX_TIM2_Init+0xf8>)
 8000f6e:	f005 fd33 	bl	80069d8 <HAL_TIM_OC_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000f78:	f000 f996 	bl	80012a8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_4);
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <MX_TIM2_Init+0xf8>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	69da      	ldr	r2, [r3, #28]
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_TIM2_Init+0xf8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f8a:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f8c:	4803      	ldr	r0, [pc, #12]	; (8000f9c <MX_TIM2_Init+0xf8>)
 8000f8e:	f000 fadd 	bl	800154c <HAL_TIM_MspPostInit>

}
 8000f92:	bf00      	nop
 8000f94:	3738      	adds	r7, #56	; 0x38
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200013c8 	.word	0x200013c8

08000fa0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_TIM6_Init+0x64>)
 8000fb2:	4a15      	ldr	r2, [pc, #84]	; (8001008 <MX_TIM6_Init+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_TIM6_Init+0x64>)
 8000fb8:	2202      	movs	r2, #2
 8000fba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_TIM6_Init+0x64>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <MX_TIM6_Init+0x64>)
 8000fc4:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000fc8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_TIM6_Init+0x64>)
 8000fcc:	2280      	movs	r2, #128	; 0x80
 8000fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <MX_TIM6_Init+0x64>)
 8000fd2:	f005 f8e5 	bl	80061a0 <HAL_TIM_Base_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000fdc:	f000 f964 	bl	80012a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_TIM6_Init+0x64>)
 8000fee:	f006 f9f7 	bl	80073e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ff8:	f000 f956 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20001374 	.word	0x20001374
 8001008:	40001000 	.word	0x40001000

0800100c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800102a:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <MX_TIM15_Init+0xac>)
 800102c:	4a23      	ldr	r2, [pc, #140]	; (80010bc <MX_TIM15_Init+0xb0>)
 800102e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001030:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <MX_TIM15_Init+0xac>)
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <MX_TIM15_Init+0xac>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100;
 800103c:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <MX_TIM15_Init+0xac>)
 800103e:	2264      	movs	r2, #100	; 0x64
 8001040:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001042:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_TIM15_Init+0xac>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <MX_TIM15_Init+0xac>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <MX_TIM15_Init+0xac>)
 8001050:	2280      	movs	r2, #128	; 0x80
 8001052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001054:	4818      	ldr	r0, [pc, #96]	; (80010b8 <MX_TIM15_Init+0xac>)
 8001056:	f005 f8a3 	bl	80061a0 <HAL_TIM_Base_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8001060:	f000 f922 	bl	80012a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001068:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	4619      	mov	r1, r3
 8001070:	4811      	ldr	r0, [pc, #68]	; (80010b8 <MX_TIM15_Init+0xac>)
 8001072:	f005 fd27 	bl	8006ac4 <HAL_TIM_ConfigClockSource>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 800107c:	f000 f914 	bl	80012a8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim15, TIM_OPMODE_SINGLE) != HAL_OK)
 8001080:	2108      	movs	r1, #8
 8001082:	480d      	ldr	r0, [pc, #52]	; (80010b8 <MX_TIM15_Init+0xac>)
 8001084:	f005 fb2e 	bl	80066e4 <HAL_TIM_OnePulse_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM15_Init+0x86>
  {
    Error_Handler();
 800108e:	f000 f90b 	bl	80012a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001092:	2320      	movs	r3, #32
 8001094:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	4619      	mov	r1, r3
 800109e:	4806      	ldr	r0, [pc, #24]	; (80010b8 <MX_TIM15_Init+0xac>)
 80010a0:	f006 f99e 	bl	80073e0 <HAL_TIMEx_MasterConfigSynchronization>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM15_Init+0xa2>
  {
    Error_Handler();
 80010aa:	f000 f8fd 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */
  /* USER CODE END TIM15_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200011a4 	.word	0x200011a4
 80010bc:	40014000 	.word	0x40014000

080010c0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <MX_TIM16_Init+0x58>)
 80010c6:	4a15      	ldr	r2, [pc, #84]	; (800111c <MX_TIM16_Init+0x5c>)
 80010c8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_TIM16_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_TIM16_Init+0x58>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 30000;
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <MX_TIM16_Init+0x58>)
 80010d8:	f247 5230 	movw	r2, #30000	; 0x7530
 80010dc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_TIM16_Init+0x58>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_TIM16_Init+0x58>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <MX_TIM16_Init+0x58>)
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80010f0:	4809      	ldr	r0, [pc, #36]	; (8001118 <MX_TIM16_Init+0x58>)
 80010f2:	f005 f855 	bl	80061a0 <HAL_TIM_Base_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80010fc:	f000 f8d4 	bl	80012a8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001100:	2108      	movs	r1, #8
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_TIM16_Init+0x58>)
 8001104:	f005 faee 	bl	80066e4 <HAL_TIM_OnePulse_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800110e:	f000 f8cb 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20001420 	.word	0x20001420
 800111c:	40014400 	.word	0x40014400

08001120 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <MX_USART1_UART_Init+0x60>)
 8001126:	4a17      	ldr	r2, [pc, #92]	; (8001184 <MX_USART1_UART_Init+0x64>)
 8001128:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <MX_USART1_UART_Init+0x60>)
 800112c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001130:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <MX_USART1_UART_Init+0x60>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_USART1_UART_Init+0x60>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <MX_USART1_UART_Init+0x60>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_USART1_UART_Init+0x60>)
 8001146:	220c      	movs	r2, #12
 8001148:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <MX_USART1_UART_Init+0x60>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <MX_USART1_UART_Init+0x60>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <MX_USART1_UART_Init+0x60>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <MX_USART1_UART_Init+0x60>)
 800115e:	2220      	movs	r2, #32
 8001160:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <MX_USART1_UART_Init+0x60>)
 8001164:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001168:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_USART1_UART_Init+0x60>)
 800116c:	f006 f9bc 	bl	80074e8 <HAL_UART_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001176:	f000 f897 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200012f4 	.word	0x200012f4
 8001184:	40013800 	.word	0x40013800

08001188 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_DMA_Init+0x38>)
 8001190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <MX_DMA_Init+0x38>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6493      	str	r3, [r2, #72]	; 0x48
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_DMA_Init+0x38>)
 800119c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	200f      	movs	r0, #15
 80011ac:	f002 fc39 	bl	8003a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80011b0:	200f      	movs	r0, #15
 80011b2:	f002 fc52 	bl	8003a5a <HAL_NVIC_EnableIRQ>

}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000

080011c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b30      	ldr	r3, [pc, #192]	; (800129c <MX_GPIO_Init+0xd8>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a2f      	ldr	r2, [pc, #188]	; (800129c <MX_GPIO_Init+0xd8>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b2d      	ldr	r3, [pc, #180]	; (800129c <MX_GPIO_Init+0xd8>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b2a      	ldr	r3, [pc, #168]	; (800129c <MX_GPIO_Init+0xd8>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a29      	ldr	r2, [pc, #164]	; (800129c <MX_GPIO_Init+0xd8>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <MX_GPIO_Init+0xd8>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2140      	movs	r1, #64	; 0x40
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f003 fb95 	bl	8004940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2108      	movs	r1, #8
 800121a:	4821      	ldr	r0, [pc, #132]	; (80012a0 <MX_GPIO_Init+0xdc>)
 800121c:	f003 fb90 	bl	8004940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001220:	2340      	movs	r3, #64	; 0x40
 8001222:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001224:	2311      	movs	r3, #17
 8001226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	4619      	mov	r1, r3
 8001236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123a:	f003 f925 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800123e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_GPIO_Init+0xe0>)
 8001246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	4619      	mov	r1, r3
 8001252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001256:	f003 f917 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800125a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800125e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	4619      	mov	r1, r3
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f003 f909 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001276:	2308      	movs	r3, #8
 8001278:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	4619      	mov	r1, r3
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_GPIO_Init+0xdc>)
 800128e:	f003 f8fb 	bl	8004488 <HAL_GPIO_Init>

}
 8001292:	bf00      	nop
 8001294:	3720      	adds	r7, #32
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000
 80012a0:	48000400 	.word	0x48000400
 80012a4:	10120000 	.word	0x10120000

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_MspInit+0x44>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c2:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <HAL_MspInit+0x44>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6613      	str	r3, [r2, #96]	; 0x60
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_MspInit+0x44>)
 80012cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_MspInit+0x44>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012da:	4a08      	ldr	r2, [pc, #32]	; (80012fc <HAL_MspInit+0x44>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e0:	6593      	str	r3, [r2, #88]	; 0x58
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_MspInit+0x44>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000

08001300 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	; 0x30
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a3b      	ldr	r2, [pc, #236]	; (800140c <HAL_ADC_MspInit+0x10c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d135      	bne.n	800138e <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <HAL_ADC_MspInit+0x110>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	3301      	adds	r3, #1
 8001328:	4a39      	ldr	r2, [pc, #228]	; (8001410 <HAL_ADC_MspInit+0x110>)
 800132a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800132c:	4b38      	ldr	r3, [pc, #224]	; (8001410 <HAL_ADC_MspInit+0x110>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d10b      	bne.n	800134c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001334:	4b37      	ldr	r3, [pc, #220]	; (8001414 <HAL_ADC_MspInit+0x114>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	4a36      	ldr	r2, [pc, #216]	; (8001414 <HAL_ADC_MspInit+0x114>)
 800133a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800133e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001340:	4b34      	ldr	r3, [pc, #208]	; (8001414 <HAL_ADC_MspInit+0x114>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001348:	61bb      	str	r3, [r7, #24]
 800134a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134c:	4b31      	ldr	r3, [pc, #196]	; (8001414 <HAL_ADC_MspInit+0x114>)
 800134e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001350:	4a30      	ldr	r2, [pc, #192]	; (8001414 <HAL_ADC_MspInit+0x114>)
 8001352:	f043 0302 	orr.w	r3, r3, #2
 8001356:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001358:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <HAL_ADC_MspInit+0x114>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001364:	2302      	movs	r3, #2
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001368:	230b      	movs	r3, #11
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	4828      	ldr	r0, [pc, #160]	; (8001418 <HAL_ADC_MspInit+0x118>)
 8001378:	f003 f886 	bl	8004488 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2100      	movs	r1, #0
 8001380:	2012      	movs	r0, #18
 8001382:	f002 fb4e 	bl	8003a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001386:	2012      	movs	r0, #18
 8001388:	f002 fb67 	bl	8003a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800138c:	e03a      	b.n	8001404 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a22      	ldr	r2, [pc, #136]	; (800141c <HAL_ADC_MspInit+0x11c>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d135      	bne.n	8001404 <HAL_ADC_MspInit+0x104>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_ADC_MspInit+0x110>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	3301      	adds	r3, #1
 800139e:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <HAL_ADC_MspInit+0x110>)
 80013a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <HAL_ADC_MspInit+0x110>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d10b      	bne.n	80013c2 <HAL_ADC_MspInit+0xc2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <HAL_ADC_MspInit+0x114>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	4a19      	ldr	r2, [pc, #100]	; (8001414 <HAL_ADC_MspInit+0x114>)
 80013b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <HAL_ADC_MspInit+0x114>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <HAL_ADC_MspInit+0x114>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a13      	ldr	r2, [pc, #76]	; (8001414 <HAL_ADC_MspInit+0x114>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_ADC_MspInit+0x114>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013de:	230b      	movs	r3, #11
 80013e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	4619      	mov	r1, r3
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f0:	f003 f84a 	bl	8004488 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	2012      	movs	r0, #18
 80013fa:	f002 fb12 	bl	8003a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013fe:	2012      	movs	r0, #18
 8001400:	f002 fb2b 	bl	8003a5a <HAL_NVIC_EnableIRQ>
}
 8001404:	bf00      	nop
 8001406:	3730      	adds	r7, #48	; 0x30
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	50040000 	.word	0x50040000
 8001410:	20001134 	.word	0x20001134
 8001414:	40021000 	.word	0x40021000
 8001418:	48000400 	.word	0x48000400
 800141c:	50040100 	.word	0x50040100

08001420 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM2)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0d      	ldr	r2, [pc, #52]	; (8001464 <HAL_LPTIM_MspInit+0x44>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d113      	bne.n	800145a <HAL_LPTIM_MspInit+0x3a>
  {
  /* USER CODE BEGIN LPTIM2_MspInit 0 */

  /* USER CODE END LPTIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <HAL_LPTIM_MspInit+0x48>)
 8001434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001436:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <HAL_LPTIM_MspInit+0x48>)
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_LPTIM_MspInit+0x48>)
 8001440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001442:	f003 0320 	and.w	r3, r3, #32
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM2 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	2042      	movs	r0, #66	; 0x42
 8001450:	f002 fae7 	bl	8003a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 8001454:	2042      	movs	r0, #66	; 0x42
 8001456:	f002 fb00 	bl	8003a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40009400 	.word	0x40009400
 8001468:	40021000 	.word	0x40021000

0800146c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800147c:	d10c      	bne.n	8001498 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800147e:	4b2f      	ldr	r3, [pc, #188]	; (800153c <HAL_TIM_Base_MspInit+0xd0>)
 8001480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001482:	4a2e      	ldr	r2, [pc, #184]	; (800153c <HAL_TIM_Base_MspInit+0xd0>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6593      	str	r3, [r2, #88]	; 0x58
 800148a:	4b2c      	ldr	r3, [pc, #176]	; (800153c <HAL_TIM_Base_MspInit+0xd0>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001496:	e04c      	b.n	8001532 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a28      	ldr	r2, [pc, #160]	; (8001540 <HAL_TIM_Base_MspInit+0xd4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d114      	bne.n	80014cc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <HAL_TIM_Base_MspInit+0xd0>)
 80014a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a6:	4a25      	ldr	r2, [pc, #148]	; (800153c <HAL_TIM_Base_MspInit+0xd0>)
 80014a8:	f043 0310 	orr.w	r3, r3, #16
 80014ac:	6593      	str	r3, [r2, #88]	; 0x58
 80014ae:	4b23      	ldr	r3, [pc, #140]	; (800153c <HAL_TIM_Base_MspInit+0xd0>)
 80014b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	2036      	movs	r0, #54	; 0x36
 80014c0:	f002 faaf 	bl	8003a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80014c4:	2036      	movs	r0, #54	; 0x36
 80014c6:	f002 fac8 	bl	8003a5a <HAL_NVIC_EnableIRQ>
}
 80014ca:	e032      	b.n	8001532 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM15)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a1c      	ldr	r2, [pc, #112]	; (8001544 <HAL_TIM_Base_MspInit+0xd8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d114      	bne.n	8001500 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80014d6:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_TIM_Base_MspInit+0xd0>)
 80014d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014da:	4a18      	ldr	r2, [pc, #96]	; (800153c <HAL_TIM_Base_MspInit+0xd0>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e0:	6613      	str	r3, [r2, #96]	; 0x60
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <HAL_TIM_Base_MspInit+0xd0>)
 80014e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	2018      	movs	r0, #24
 80014f4:	f002 fa95 	bl	8003a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80014f8:	2018      	movs	r0, #24
 80014fa:	f002 faae 	bl	8003a5a <HAL_NVIC_EnableIRQ>
}
 80014fe:	e018      	b.n	8001532 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM16)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a10      	ldr	r2, [pc, #64]	; (8001548 <HAL_TIM_Base_MspInit+0xdc>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d113      	bne.n	8001532 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <HAL_TIM_Base_MspInit+0xd0>)
 800150c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <HAL_TIM_Base_MspInit+0xd0>)
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	6613      	str	r3, [r2, #96]	; 0x60
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_TIM_Base_MspInit+0xd0>)
 8001518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	2019      	movs	r0, #25
 8001528:	f002 fa7b 	bl	8003a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800152c:	2019      	movs	r0, #25
 800152e:	f002 fa94 	bl	8003a5a <HAL_NVIC_EnableIRQ>
}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	40001000 	.word	0x40001000
 8001544:	40014000 	.word	0x40014000
 8001548:	40014400 	.word	0x40014400

0800154c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800156c:	d11c      	bne.n	80015a8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <HAL_TIM_MspPostInit+0x64>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	4a0f      	ldr	r2, [pc, #60]	; (80015b0 <HAL_TIM_MspPostInit+0x64>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <HAL_TIM_MspPostInit+0x64>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001586:	2308      	movs	r3, #8
 8001588:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001596:	2301      	movs	r3, #1
 8001598:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	4619      	mov	r1, r3
 80015a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a4:	f002 ff70 	bl	8004488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015a8:	bf00      	nop
 80015aa:	3720      	adds	r7, #32
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021000 	.word	0x40021000

080015b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a2c      	ldr	r2, [pc, #176]	; (8001684 <HAL_UART_MspInit+0xd0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d152      	bne.n	800167c <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015d6:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <HAL_UART_MspInit+0xd4>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015da:	4a2b      	ldr	r2, [pc, #172]	; (8001688 <HAL_UART_MspInit+0xd4>)
 80015dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e0:	6613      	str	r3, [r2, #96]	; 0x60
 80015e2:	4b29      	ldr	r3, [pc, #164]	; (8001688 <HAL_UART_MspInit+0xd4>)
 80015e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b26      	ldr	r3, [pc, #152]	; (8001688 <HAL_UART_MspInit+0xd4>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	4a25      	ldr	r2, [pc, #148]	; (8001688 <HAL_UART_MspInit+0xd4>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <HAL_UART_MspInit+0xd4>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001606:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800160a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001618:	2307      	movs	r3, #7
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001626:	f002 ff2f 	bl	8004488 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_UART_MspInit+0xd8>)
 800162c:	4a18      	ldr	r2, [pc, #96]	; (8001690 <HAL_UART_MspInit+0xdc>)
 800162e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_UART_MspInit+0xd8>)
 8001632:	2202      	movs	r2, #2
 8001634:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_UART_MspInit+0xd8>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <HAL_UART_MspInit+0xd8>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_UART_MspInit+0xd8>)
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001648:	4b10      	ldr	r3, [pc, #64]	; (800168c <HAL_UART_MspInit+0xd8>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <HAL_UART_MspInit+0xd8>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001654:	4b0d      	ldr	r3, [pc, #52]	; (800168c <HAL_UART_MspInit+0xd8>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_UART_MspInit+0xd8>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001660:	480a      	ldr	r0, [pc, #40]	; (800168c <HAL_UART_MspInit+0xd8>)
 8001662:	f002 fa15 	bl	8003a90 <HAL_DMA_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 800166c:	f7ff fe1c 	bl	80012a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a06      	ldr	r2, [pc, #24]	; (800168c <HAL_UART_MspInit+0xd8>)
 8001674:	66da      	str	r2, [r3, #108]	; 0x6c
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <HAL_UART_MspInit+0xd8>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	; 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40013800 	.word	0x40013800
 8001688:	40021000 	.word	0x40021000
 800168c:	20001270 	.word	0x20001270
 8001690:	40020058 	.word	0x40020058

08001694 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <HAL_UART_MspDeInit+0x3c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d110      	bne.n	80016c8 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_UART_MspDeInit+0x40>)
 80016a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <HAL_UART_MspDeInit+0x40>)
 80016ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016b0:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80016b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80016b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ba:	f003 f857 	bl	800476c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016c2:	4618      	mov	r0, r3
 80016c4:	f002 fa9c 	bl	8003c00 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40013800 	.word	0x40013800
 80016d4:	40021000 	.word	0x40021000

080016d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <HardFault_Handler+0x4>

080016ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <MemManage_Handler+0x4>

080016f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <BusFault_Handler+0x4>

080016f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <UsageFault_Handler+0x4>

080016fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800172c:	f000 fa7a 	bl	8001c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <DMA1_Channel5_IRQHandler+0x10>)
 800173a:	f002 fb53 	bl	8003de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20001270 	.word	0x20001270

08001748 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	uint16_t batResult;
	uint32_t nowInterval;
	if( __HAL_ADC_GET_FLAG(&hadc1, ADC_ISR_EOC) != RESET) {
 800174e:	4b4f      	ldr	r3, [pc, #316]	; (800188c <ADC1_2_IRQHandler+0x144>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b04      	cmp	r3, #4
 800175a:	d168      	bne.n	800182e <ADC1_2_IRQHandler+0xe6>
	  adcResult = HAL_ADC_GetValue(&hadc1);
 800175c:	484b      	ldr	r0, [pc, #300]	; (800188c <ADC1_2_IRQHandler+0x144>)
 800175e:	f001 f80d 	bl	800277c <HAL_ADC_GetValue>
 8001762:	4603      	mov	r3, r0
 8001764:	b29a      	uxth	r2, r3
 8001766:	4b4a      	ldr	r3, [pc, #296]	; (8001890 <ADC1_2_IRQHandler+0x148>)
 8001768:	801a      	strh	r2, [r3, #0]
	  if (adcResult > 0) {
 800176a:	4b49      	ldr	r3, [pc, #292]	; (8001890 <ADC1_2_IRQHandler+0x148>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d05d      	beq.n	800182e <ADC1_2_IRQHandler+0xe6>
		  adcResult = adcResult & 0x0FFF;
 8001772:	4b47      	ldr	r3, [pc, #284]	; (8001890 <ADC1_2_IRQHandler+0x148>)
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800177a:	b29a      	uxth	r2, r3
 800177c:	4b44      	ldr	r3, [pc, #272]	; (8001890 <ADC1_2_IRQHandler+0x148>)
 800177e:	801a      	strh	r2, [r3, #0]
		  adcResult = adcResult >> 2;
 8001780:	4b43      	ldr	r3, [pc, #268]	; (8001890 <ADC1_2_IRQHandler+0x148>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	b29a      	uxth	r2, r3
 8001788:	4b41      	ldr	r3, [pc, #260]	; (8001890 <ADC1_2_IRQHandler+0x148>)
 800178a:	801a      	strh	r2, [r3, #0]
		  adcResult = adcResult + 6; // Reserved additional parameter in send buffer ( 12 bytes )
 800178c:	4b40      	ldr	r3, [pc, #256]	; (8001890 <ADC1_2_IRQHandler+0x148>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	3306      	adds	r3, #6
 8001792:	b29a      	uxth	r2, r3
 8001794:	4b3e      	ldr	r3, [pc, #248]	; (8001890 <ADC1_2_IRQHandler+0x148>)
 8001796:	801a      	strh	r2, [r3, #0]
		  if (spectrData[adcResult] < 0xFFFF) // Check overflow in channel.
 8001798:	4b3d      	ldr	r3, [pc, #244]	; (8001890 <ADC1_2_IRQHandler+0x148>)
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <ADC1_2_IRQHandler+0x14c>)
 80017a0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80017a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d009      	beq.n	80017c0 <ADC1_2_IRQHandler+0x78>
			  spectrData[adcResult]++;
 80017ac:	4b38      	ldr	r3, [pc, #224]	; (8001890 <ADC1_2_IRQHandler+0x148>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	4a38      	ldr	r2, [pc, #224]	; (8001894 <ADC1_2_IRQHandler+0x14c>)
 80017b2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80017b6:	3201      	adds	r2, #1
 80017b8:	b291      	uxth	r1, r2
 80017ba:	4a36      	ldr	r2, [pc, #216]	; (8001894 <ADC1_2_IRQHandler+0x14c>)
 80017bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  counterCC++;
 80017c0:	4b35      	ldr	r3, [pc, #212]	; (8001898 <ADC1_2_IRQHandler+0x150>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	4a34      	ldr	r2, [pc, #208]	; (8001898 <ADC1_2_IRQHandler+0x150>)
 80017c8:	6013      	str	r3, [r2, #0]
		  counterALL++;
 80017ca:	4b34      	ldr	r3, [pc, #208]	; (800189c <ADC1_2_IRQHandler+0x154>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	3301      	adds	r3, #1
 80017d0:	4a32      	ldr	r2, [pc, #200]	; (800189c <ADC1_2_IRQHandler+0x154>)
 80017d2:	6013      	str	r3, [r2, #0]

		  /* intervals for radiation level */
		  nowInterval = HAL_GetTick();
 80017d4:	f000 fa3a 	bl	8001c4c <HAL_GetTick>
 80017d8:	6078      	str	r0, [r7, #4]
		  if (oldInterval > 0) {
 80017da:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <ADC1_2_IRQHandler+0x158>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d014      	beq.n	800180c <ADC1_2_IRQHandler+0xc4>
			  radBuffer[indexBuffer++] = nowInterval - oldInterval;
 80017e2:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <ADC1_2_IRQHandler+0x158>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <ADC1_2_IRQHandler+0x15c>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	1c59      	adds	r1, r3, #1
 80017ec:	b2c8      	uxtb	r0, r1
 80017ee:	492d      	ldr	r1, [pc, #180]	; (80018a4 <ADC1_2_IRQHandler+0x15c>)
 80017f0:	7008      	strb	r0, [r1, #0]
 80017f2:	4619      	mov	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	1a9b      	subs	r3, r3, r2
 80017f8:	4a2b      	ldr	r2, [pc, #172]	; (80018a8 <ADC1_2_IRQHandler+0x160>)
 80017fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			  if (indexBuffer > radBufferSize - 1) { // Buffer size = radBufferSize.
 80017fe:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <ADC1_2_IRQHandler+0x15c>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b31      	cmp	r3, #49	; 0x31
 8001804:	d902      	bls.n	800180c <ADC1_2_IRQHandler+0xc4>
				  indexBuffer = 0;
 8001806:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <ADC1_2_IRQHandler+0x15c>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  oldInterval = nowInterval;
 800180c:	4a24      	ldr	r2, [pc, #144]	; (80018a0 <ADC1_2_IRQHandler+0x158>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6013      	str	r3, [r2, #0]

		  if ((cfgData & 64) > 0) { // Check config data for LED activity
 8001812:	4b26      	ldr	r3, [pc, #152]	; (80018ac <ADC1_2_IRQHandler+0x164>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181a:	2b00      	cmp	r3, #0
 800181c:	dd07      	ble.n	800182e <ADC1_2_IRQHandler+0xe6>
			  HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_SET); // LED on.
 800181e:	2201      	movs	r2, #1
 8001820:	2108      	movs	r1, #8
 8001822:	4823      	ldr	r0, [pc, #140]	; (80018b0 <ADC1_2_IRQHandler+0x168>)
 8001824:	f003 f88c 	bl	8004940 <HAL_GPIO_WritePin>
			  HAL_TIM_Base_Start_IT(&htim15); // Start timer for turn off LED.
 8001828:	4822      	ldr	r0, [pc, #136]	; (80018b4 <ADC1_2_IRQHandler+0x16c>)
 800182a:	f004 fd11 	bl	8006250 <HAL_TIM_Base_Start_IT>
		  }
	  }
	}
	// Battery voltage.
	if( __HAL_ADC_GET_FLAG(&hadc2, ADC_ISR_EOC) != RESET) {
 800182e:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <ADC1_2_IRQHandler+0x170>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b04      	cmp	r3, #4
 800183a:	d11c      	bne.n	8001876 <ADC1_2_IRQHandler+0x12e>
		HAL_GPIO_WritePin(GPIOA, COM_PIN, GPIO_PIN_SET);
 800183c:	2201      	movs	r2, #1
 800183e:	2140      	movs	r1, #64	; 0x40
 8001840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001844:	f003 f87c 	bl	8004940 <HAL_GPIO_WritePin>
		batResult = HAL_ADC_GetValue(&hadc2);
 8001848:	481b      	ldr	r0, [pc, #108]	; (80018b8 <ADC1_2_IRQHandler+0x170>)
 800184a:	f000 ff97 	bl	800277c <HAL_ADC_GetValue>
 800184e:	4603      	mov	r3, r0
 8001850:	807b      	strh	r3, [r7, #2]
		if ( batResult > 0 ) {
 8001852:	887b      	ldrh	r3, [r7, #2]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00e      	beq.n	8001876 <ADC1_2_IRQHandler+0x12e>
			spectrData[4] = (spectrData[4] & 0xFF00) | (batResult & 0x00FF);
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <ADC1_2_IRQHandler+0x14c>)
 800185a:	891b      	ldrh	r3, [r3, #8]
 800185c:	b21b      	sxth	r3, r3
 800185e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001862:	b21a      	sxth	r2, r3
 8001864:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	b21b      	sxth	r3, r3
 800186c:	4313      	orrs	r3, r2
 800186e:	b21b      	sxth	r3, r3
 8001870:	b29a      	uxth	r2, r3
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <ADC1_2_IRQHandler+0x14c>)
 8001874:	811a      	strh	r2, [r3, #8]
		}
	}
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <ADC1_2_IRQHandler+0x144>)
 8001878:	f000 ff8e 	bl	8002798 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800187c:	480e      	ldr	r0, [pc, #56]	; (80018b8 <ADC1_2_IRQHandler+0x170>)
 800187e:	f000 ff8b 	bl	8002798 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	2000120c 	.word	0x2000120c
 8001890:	20000064 	.word	0x20000064
 8001894:	20000068 	.word	0x20000068
 8001898:	2000004c 	.word	0x2000004c
 800189c:	20000050 	.word	0x20000050
 80018a0:	20000054 	.word	0x20000054
 80018a4:	200013c4 	.word	0x200013c4
 80018a8:	2000106c 	.word	0x2000106c
 80018ac:	20001416 	.word	0x20001416
 80018b0:	48000400 	.word	0x48000400
 80018b4:	200011a4 	.word	0x200011a4
 80018b8:	20001140 	.word	0x20001140

080018bc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_RESET); // LED off.
 80018c0:	2200      	movs	r2, #0
 80018c2:	2108      	movs	r1, #8
 80018c4:	4805      	ldr	r0, [pc, #20]	; (80018dc <TIM1_BRK_TIM15_IRQHandler+0x20>)
 80018c6:	f003 f83b 	bl	8004940 <HAL_GPIO_WritePin>
	//HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80018cc:	f004 ff64 	bl	8006798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim15);
 80018d0:	4803      	ldr	r0, [pc, #12]	; (80018e0 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80018d2:	f004 fd11 	bl	80062f8 <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	48000400 	.word	0x48000400
 80018e0:	200011a4 	.word	0x200011a4

080018e4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);
 80018e8:	210c      	movs	r1, #12
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 80018ec:	f004 fe72 	bl	80065d4 <HAL_TIM_OC_Stop>

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <TIM1_UP_TIM16_IRQHandler+0x20>)
 80018f2:	f004 ff51 	bl	8006798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim16);
 80018f6:	4803      	ldr	r0, [pc, #12]	; (8001904 <TIM1_UP_TIM16_IRQHandler+0x20>)
 80018f8:	f004 fcfe 	bl	80062f8 <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200013c8 	.word	0x200013c8
 8001904:	20001420 	.word	0x20001420

08001908 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800190c:	483e      	ldr	r0, [pc, #248]	; (8001a08 <TIM6_IRQHandler+0x100>)
 800190e:	f004 ff43 	bl	8006798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  if ((cfgData & 0x15) > 0 ){  // Sound on.
 8001912:	4b3e      	ldr	r3, [pc, #248]	; (8001a0c <TIM6_IRQHandler+0x104>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	f003 0315 	and.w	r3, r3, #21
 800191a:	2b00      	cmp	r3, #0
 800191c:	dd71      	ble.n	8001a02 <TIM6_IRQHandler+0xfa>
	  switch (alarmLevel) {
 800191e:	4b3c      	ldr	r3, [pc, #240]	; (8001a10 <TIM6_IRQHandler+0x108>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	2b03      	cmp	r3, #3
 8001924:	d86d      	bhi.n	8001a02 <TIM6_IRQHandler+0xfa>
 8001926:	a201      	add	r2, pc, #4	; (adr r2, 800192c <TIM6_IRQHandler+0x24>)
 8001928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192c:	0800193d 	.word	0x0800193d
 8001930:	08001945 	.word	0x08001945
 8001934:	08001981 	.word	0x08001981
 8001938:	080019bd 	.word	0x080019bd
	  case 0:
		  alarmCount = 0;
 800193c:	4b35      	ldr	r3, [pc, #212]	; (8001a14 <TIM6_IRQHandler+0x10c>)
 800193e:	2200      	movs	r2, #0
 8001940:	801a      	strh	r2, [r3, #0]
		  break;
 8001942:	e05e      	b.n	8001a02 <TIM6_IRQHandler+0xfa>
	  case 1:
		  if (alarmCount-- <= 0) {
 8001944:	4b33      	ldr	r3, [pc, #204]	; (8001a14 <TIM6_IRQHandler+0x10c>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	1e5a      	subs	r2, r3, #1
 800194a:	b291      	uxth	r1, r2
 800194c:	4a31      	ldr	r2, [pc, #196]	; (8001a14 <TIM6_IRQHandler+0x10c>)
 800194e:	8011      	strh	r1, [r2, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d103      	bne.n	800195c <TIM6_IRQHandler+0x54>
			  alarmCount = 4;
 8001954:	4b2f      	ldr	r3, [pc, #188]	; (8001a14 <TIM6_IRQHandler+0x10c>)
 8001956:	2204      	movs	r2, #4
 8001958:	801a      	strh	r2, [r3, #0]
					  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
					  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
				  }
			  }
		  }
		  break;
 800195a:	e04d      	b.n	80019f8 <TIM6_IRQHandler+0xf0>
			  if (alarmCount > 2) {
 800195c:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <TIM6_IRQHandler+0x10c>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d949      	bls.n	80019f8 <TIM6_IRQHandler+0xf0>
				  if ((cfgData & 0x1) != 0) { // Check enabled flag sound level 1
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <TIM6_IRQHandler+0x104>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d043      	beq.n	80019f8 <TIM6_IRQHandler+0xf0>
					  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
 8001970:	210c      	movs	r1, #12
 8001972:	4829      	ldr	r0, [pc, #164]	; (8001a18 <TIM6_IRQHandler+0x110>)
 8001974:	f004 fd50 	bl	8006418 <HAL_TIM_OC_Start>
					  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 8001978:	4828      	ldr	r0, [pc, #160]	; (8001a1c <TIM6_IRQHandler+0x114>)
 800197a:	f004 fc69 	bl	8006250 <HAL_TIM_Base_Start_IT>
		  break;
 800197e:	e03b      	b.n	80019f8 <TIM6_IRQHandler+0xf0>
	  case 2:
			  if (alarmCount-- <= 0) {
 8001980:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <TIM6_IRQHandler+0x10c>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	1e5a      	subs	r2, r3, #1
 8001986:	b291      	uxth	r1, r2
 8001988:	4a22      	ldr	r2, [pc, #136]	; (8001a14 <TIM6_IRQHandler+0x10c>)
 800198a:	8011      	strh	r1, [r2, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d103      	bne.n	8001998 <TIM6_IRQHandler+0x90>
				  alarmCount = 5;
 8001990:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <TIM6_IRQHandler+0x10c>)
 8001992:	2205      	movs	r2, #5
 8001994:	801a      	strh	r2, [r3, #0]
						  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
					  }
				  }
			  }
		  break;
 8001996:	e031      	b.n	80019fc <TIM6_IRQHandler+0xf4>
				  if (alarmCount > 2) {
 8001998:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <TIM6_IRQHandler+0x10c>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d92d      	bls.n	80019fc <TIM6_IRQHandler+0xf4>
					  if ((cfgData & 0x4) != 0) {  // Check enabled flag sound level 2
 80019a0:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <TIM6_IRQHandler+0x104>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d027      	beq.n	80019fc <TIM6_IRQHandler+0xf4>
						  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
 80019ac:	210c      	movs	r1, #12
 80019ae:	481a      	ldr	r0, [pc, #104]	; (8001a18 <TIM6_IRQHandler+0x110>)
 80019b0:	f004 fd32 	bl	8006418 <HAL_TIM_OC_Start>
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 80019b4:	4819      	ldr	r0, [pc, #100]	; (8001a1c <TIM6_IRQHandler+0x114>)
 80019b6:	f004 fc4b 	bl	8006250 <HAL_TIM_Base_Start_IT>
		  break;
 80019ba:	e01f      	b.n	80019fc <TIM6_IRQHandler+0xf4>
	  case 3:
			  if (alarmCount-- <= 0) {
 80019bc:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <TIM6_IRQHandler+0x10c>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	1e5a      	subs	r2, r3, #1
 80019c2:	b291      	uxth	r1, r2
 80019c4:	4a13      	ldr	r2, [pc, #76]	; (8001a14 <TIM6_IRQHandler+0x10c>)
 80019c6:	8011      	strh	r1, [r2, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d103      	bne.n	80019d4 <TIM6_IRQHandler+0xcc>
				  alarmCount = 6;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <TIM6_IRQHandler+0x10c>)
 80019ce:	2206      	movs	r2, #6
 80019d0:	801a      	strh	r2, [r3, #0]
						  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
					  }
				  }
			  }
		  break;
 80019d2:	e015      	b.n	8001a00 <TIM6_IRQHandler+0xf8>
				  if (alarmCount > 2) {
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <TIM6_IRQHandler+0x10c>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d911      	bls.n	8001a00 <TIM6_IRQHandler+0xf8>
					  if ((cfgData & 0x08) != 0) { // Check enabled flag sound level 3
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <TIM6_IRQHandler+0x104>)
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00b      	beq.n	8001a00 <TIM6_IRQHandler+0xf8>
						  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
 80019e8:	210c      	movs	r1, #12
 80019ea:	480b      	ldr	r0, [pc, #44]	; (8001a18 <TIM6_IRQHandler+0x110>)
 80019ec:	f004 fd14 	bl	8006418 <HAL_TIM_OC_Start>
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 80019f0:	480a      	ldr	r0, [pc, #40]	; (8001a1c <TIM6_IRQHandler+0x114>)
 80019f2:	f004 fc2d 	bl	8006250 <HAL_TIM_Base_Start_IT>
		  break;
 80019f6:	e003      	b.n	8001a00 <TIM6_IRQHandler+0xf8>
		  break;
 80019f8:	bf00      	nop
 80019fa:	e002      	b.n	8001a02 <TIM6_IRQHandler+0xfa>
		  break;
 80019fc:	bf00      	nop
 80019fe:	e000      	b.n	8001a02 <TIM6_IRQHandler+0xfa>
		  break;
 8001a00:	bf00      	nop
	  }
  }

  /* USER CODE END TIM6_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20001374 	.word	0x20001374
 8001a0c:	20001416 	.word	0x20001416
 8001a10:	200011f0 	.word	0x200011f0
 8001a14:	20001414 	.word	0x20001414
 8001a18:	200013c8 	.word	0x200013c8
 8001a1c:	20001420 	.word	0x20001420

08001a20 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 8001a26:	481e      	ldr	r0, [pc, #120]	; (8001aa0 <LPTIM2_IRQHandler+0x80>)
 8001a28:	f003 f8ec 	bl	8004c04 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */
  avgRadInterval = 0;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <LPTIM2_IRQHandler+0x84>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
  for ( int i = 0; i < radBufferSize - 1; i++) {
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	e00b      	b.n	8001a50 <LPTIM2_IRQHandler+0x30>
	  avgRadInterval = avgRadInterval + radBuffer[i];
 8001a38:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <LPTIM2_IRQHandler+0x88>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <LPTIM2_IRQHandler+0x84>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4413      	add	r3, r2
 8001a46:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <LPTIM2_IRQHandler+0x84>)
 8001a48:	6013      	str	r3, [r2, #0]
  for ( int i = 0; i < radBufferSize - 1; i++) {
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b30      	cmp	r3, #48	; 0x30
 8001a54:	ddf0      	ble.n	8001a38 <LPTIM2_IRQHandler+0x18>
  }

  if (avgRadInterval < Thr3) {
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <LPTIM2_IRQHandler+0x84>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <LPTIM2_IRQHandler+0x8c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d203      	bcs.n	8001a6a <LPTIM2_IRQHandler+0x4a>
		  alarmLevel = 3;
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <LPTIM2_IRQHandler+0x90>)
 8001a64:	2203      	movs	r2, #3
 8001a66:	801a      	strh	r2, [r3, #0]
			  alarmLevel = 0;  // Disable alarm sound
		  }
	  }
  }
  /* USER CODE END LPTIM2_IRQn 1 */
}
 8001a68:	e016      	b.n	8001a98 <LPTIM2_IRQHandler+0x78>
	  if (avgRadInterval < Thr2) {
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <LPTIM2_IRQHandler+0x84>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <LPTIM2_IRQHandler+0x94>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d203      	bcs.n	8001a7e <LPTIM2_IRQHandler+0x5e>
			  alarmLevel = 2;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <LPTIM2_IRQHandler+0x90>)
 8001a78:	2202      	movs	r2, #2
 8001a7a:	801a      	strh	r2, [r3, #0]
}
 8001a7c:	e00c      	b.n	8001a98 <LPTIM2_IRQHandler+0x78>
		  if (avgRadInterval < Thr1) {
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <LPTIM2_IRQHandler+0x84>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <LPTIM2_IRQHandler+0x98>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d203      	bcs.n	8001a92 <LPTIM2_IRQHandler+0x72>
				  alarmLevel = 1;
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <LPTIM2_IRQHandler+0x90>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	801a      	strh	r2, [r3, #0]
}
 8001a90:	e002      	b.n	8001a98 <LPTIM2_IRQHandler+0x78>
			  alarmLevel = 0;  // Disable alarm sound
 8001a92:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <LPTIM2_IRQHandler+0x90>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	801a      	strh	r2, [r3, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	200012b8 	.word	0x200012b8
 8001aa4:	2000113c 	.word	0x2000113c
 8001aa8:	2000106c 	.word	0x2000106c
 8001aac:	20000060 	.word	0x20000060
 8001ab0:	200011f0 	.word	0x200011f0
 8001ab4:	2000005c 	.word	0x2000005c
 8001ab8:	20000058 	.word	0x20000058

08001abc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac0:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <SystemInit+0x64>)
 8001ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac6:	4a16      	ldr	r2, [pc, #88]	; (8001b20 <SystemInit+0x64>)
 8001ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <SystemInit+0x68>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <SystemInit+0x68>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <SystemInit+0x68>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <SystemInit+0x68>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <SystemInit+0x68>)
 8001ae8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001aec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001af0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <SystemInit+0x68>)
 8001af4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001af8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <SystemInit+0x68>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <SystemInit+0x68>)
 8001b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <SystemInit+0x68>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <SystemInit+0x64>)
 8001b0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b12:	609a      	str	r2, [r3, #8]
#endif
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00
 8001b24:	40021000 	.word	0x40021000

08001b28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b2c:	f7ff ffc6 	bl	8001abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b32:	e003      	b.n	8001b3c <LoopCopyDataInit>

08001b34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b3a:	3104      	adds	r1, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b3c:	480a      	ldr	r0, [pc, #40]	; (8001b68 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b44:	d3f6      	bcc.n	8001b34 <CopyDataInit>
	ldr	r2, =_sbss
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b48:	e002      	b.n	8001b50 <LoopFillZerobss>

08001b4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b4c:	f842 3b04 	str.w	r3, [r2], #4

08001b50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <LoopForever+0x16>)
	cmp	r2, r3
 8001b52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b54:	d3f9      	bcc.n	8001b4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b56:	f006 facb 	bl	80080f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b5a:	f7fe fdcd 	bl	80006f8 <main>

08001b5e <LoopForever>:

LoopForever:
    b LoopForever
 8001b5e:	e7fe      	b.n	8001b5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b60:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001b64:	080081d4 	.word	0x080081d4
	ldr	r0, =_sdata
 8001b68:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b6c:	20000030 	.word	0x20000030
	ldr	r2, =_sbss
 8001b70:	20000030 	.word	0x20000030
	ldr	r3, = _ebss
 8001b74:	20001488 	.word	0x20001488

08001b78 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <COMP_IRQHandler>

08001b7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f001 ff41 	bl	8003a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f000 f80e 	bl	8001bac <HAL_InitTick>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	71fb      	strb	r3, [r7, #7]
 8001b9a:	e001      	b.n	8001ba0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b9c:	f7ff fb8c 	bl	80012b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_InitTick+0x6c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d023      	beq.n	8001c08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bc0:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <HAL_InitTick+0x70>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_InitTick+0x6c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f001 ff4d 	bl	8003a76 <HAL_SYSTICK_Config>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10f      	bne.n	8001c02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b0f      	cmp	r3, #15
 8001be6:	d809      	bhi.n	8001bfc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be8:	2200      	movs	r2, #0
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bf0:	f001 ff17 	bl	8003a22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <HAL_InitTick+0x74>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e007      	b.n	8001c0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	e004      	b.n	8001c0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
 8001c06:	e001      	b.n	8001c0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	2000000c 	.word	0x2000000c
 8001c1c:	20000004 	.word	0x20000004
 8001c20:	20000008 	.word	0x20000008

08001c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x20>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x24>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_IncTick+0x24>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	2000000c 	.word	0x2000000c
 8001c48:	20001484 	.word	0x20001484

08001c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_GetTick+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20001484 	.word	0x20001484

08001c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff ffee 	bl	8001c4c <HAL_GetTick>
 8001c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c7c:	d005      	beq.n	8001c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_Delay+0x40>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c8a:	bf00      	nop
 8001c8c:	f7ff ffde 	bl	8001c4c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d8f7      	bhi.n	8001c8c <HAL_Delay+0x28>
  {
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	2000000c 	.word	0x2000000c

08001ca8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3360      	adds	r3, #96	; 0x60
 8001d22:	461a      	mov	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <LL_ADC_SetOffset+0x44>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d48:	bf00      	nop
 8001d4a:	371c      	adds	r7, #28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	03fff000 	.word	0x03fff000

08001d58 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3360      	adds	r3, #96	; 0x60
 8001d66:	461a      	mov	r2, r3
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3360      	adds	r3, #96	; 0x60
 8001d94:	461a      	mov	r2, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	431a      	orrs	r2, r3
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001dae:	bf00      	nop
 8001db0:	371c      	adds	r7, #28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	615a      	str	r2, [r3, #20]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b087      	sub	sp, #28
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	3330      	adds	r3, #48	; 0x30
 8001e16:	461a      	mov	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	0a1b      	lsrs	r3, r3, #8
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	4413      	add	r3, r2
 8001e24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	211f      	movs	r1, #31
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	401a      	ands	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	0e9b      	lsrs	r3, r3, #26
 8001e3e:	f003 011f 	and.w	r1, r3, #31
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e52:	bf00      	nop
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3314      	adds	r3, #20
 8001e94:	461a      	mov	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	0e5b      	lsrs	r3, r3, #25
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	4413      	add	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	0d1b      	lsrs	r3, r3, #20
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	2107      	movs	r1, #7
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	401a      	ands	r2, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	0d1b      	lsrs	r3, r3, #20
 8001ebe:	f003 031f 	and.w	r3, r3, #31
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ece:	bf00      	nop
 8001ed0:	371c      	adds	r7, #28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f003 0318 	and.w	r3, r3, #24
 8001efe:	4908      	ldr	r1, [pc, #32]	; (8001f20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f00:	40d9      	lsrs	r1, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	400b      	ands	r3, r1
 8001f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	0007ffff 	.word	0x0007ffff

08001f24 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 031f 	and.w	r3, r3, #31
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6093      	str	r3, [r2, #8]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f94:	d101      	bne.n	8001f9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001fb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fe4:	d101      	bne.n	8001fea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002008:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800200c:	f043 0201 	orr.w	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002030:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002034:	f043 0202 	orr.w	r2, r3, #2
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <LL_ADC_IsEnabled+0x18>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <LL_ADC_IsEnabled+0x1a>
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b02      	cmp	r3, #2
 8002080:	d101      	bne.n	8002086 <LL_ADC_IsDisableOngoing+0x18>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <LL_ADC_IsDisableOngoing+0x1a>
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020a8:	f043 0204 	orr.w	r2, r3, #4
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d101      	bne.n	80020d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d101      	bne.n	80020fa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b089      	sub	sp, #36	; 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002114:	2300      	movs	r3, #0
 8002116:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e12f      	b.n	8002382 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	2b00      	cmp	r3, #0
 800212e:	d109      	bne.n	8002144 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff f8e5 	bl	8001300 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff19 	bl	8001f80 <LL_ADC_IsDeepPowerDownEnabled>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d004      	beq.n	800215e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff feff 	bl	8001f5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ff34 	bl	8001fd0 <LL_ADC_IsInternalRegulatorEnabled>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d113      	bne.n	8002196 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff18 	bl	8001fa8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002178:	4b84      	ldr	r3, [pc, #528]	; (800238c <HAL_ADC_Init+0x284>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	099b      	lsrs	r3, r3, #6
 800217e:	4a84      	ldr	r2, [pc, #528]	; (8002390 <HAL_ADC_Init+0x288>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	099b      	lsrs	r3, r3, #6
 8002186:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002188:	e002      	b.n	8002190 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3b01      	subs	r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f9      	bne.n	800218a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ff18 	bl	8001fd0 <LL_ADC_IsInternalRegulatorEnabled>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10d      	bne.n	80021c2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021aa:	f043 0210 	orr.w	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	f043 0201 	orr.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ff78 	bl	80020bc <LL_ADC_REG_IsConversionOngoing>
 80021cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f040 80ca 	bne.w	8002370 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f040 80c6 	bne.w	8002370 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021ec:	f043 0202 	orr.w	r2, r3, #2
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff25 	bl	8002048 <LL_ADC_IsEnabled>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d110      	bne.n	8002226 <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002204:	4863      	ldr	r0, [pc, #396]	; (8002394 <HAL_ADC_Init+0x28c>)
 8002206:	f7ff ff1f 	bl	8002048 <LL_ADC_IsEnabled>
 800220a:	4604      	mov	r4, r0
 800220c:	4862      	ldr	r0, [pc, #392]	; (8002398 <HAL_ADC_Init+0x290>)
 800220e:	f7ff ff1b 	bl	8002048 <LL_ADC_IsEnabled>
 8002212:	4603      	mov	r3, r0
 8002214:	4323      	orrs	r3, r4
 8002216:	2b00      	cmp	r3, #0
 8002218:	d105      	bne.n	8002226 <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4619      	mov	r1, r3
 8002220:	485e      	ldr	r0, [pc, #376]	; (800239c <HAL_ADC_Init+0x294>)
 8002222:	f7ff fd41 	bl	8001ca8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	7e5b      	ldrb	r3, [r3, #25]
 800222a:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002230:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002236:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800223c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002244:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d106      	bne.n	8002262 <HAL_ADC_Init+0x15a>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	3b01      	subs	r3, #1
 800225a:	045b      	lsls	r3, r3, #17
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <HAL_ADC_Init+0x176>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	4b46      	ldr	r3, [pc, #280]	; (80023a0 <HAL_ADC_Init+0x298>)
 8002286:	4013      	ands	r3, r2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	69b9      	ldr	r1, [r7, #24]
 800228e:	430b      	orrs	r3, r1
 8002290:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ff10 	bl	80020bc <LL_ADC_REG_IsConversionOngoing>
 800229c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ff1d 	bl	80020e2 <LL_ADC_INJ_IsConversionOngoing>
 80022a8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d13d      	bne.n	800232c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d13a      	bne.n	800232c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022ba:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022c2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022d2:	f023 0302 	bic.w	r3, r3, #2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	69b9      	ldr	r1, [r7, #24]
 80022dc:	430b      	orrs	r3, r1
 80022de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d118      	bne.n	800231c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022f4:	f023 0304 	bic.w	r3, r3, #4
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002300:	4311      	orrs	r1, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002306:	4311      	orrs	r1, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800230c:	430a      	orrs	r2, r1
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 0201 	orr.w	r2, r2, #1
 8002318:	611a      	str	r2, [r3, #16]
 800231a:	e007      	b.n	800232c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d10c      	bne.n	800234e <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f023 010f 	bic.w	r1, r3, #15
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	1e5a      	subs	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	631a      	str	r2, [r3, #48]	; 0x30
 800234c:	e007      	b.n	800235e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 020f 	bic.w	r2, r2, #15
 800235c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002362:	f023 0303 	bic.w	r3, r3, #3
 8002366:	f043 0201 	orr.w	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
 800236e:	e007      	b.n	8002380 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002374:	f043 0210 	orr.w	r2, r3, #16
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002380:	7ffb      	ldrb	r3, [r7, #31]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd90      	pop	{r4, r7, pc}
 800238a:	bf00      	nop
 800238c:	20000004 	.word	0x20000004
 8002390:	053e2d63 	.word	0x053e2d63
 8002394:	50040000 	.word	0x50040000
 8002398:	50040100 	.word	0x50040100
 800239c:	50040300 	.word	0x50040300
 80023a0:	fff0c007 	.word	0xfff0c007

080023a4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023ac:	4857      	ldr	r0, [pc, #348]	; (800250c <HAL_ADC_Start+0x168>)
 80023ae:	f7ff fdb9 	bl	8001f24 <LL_ADC_GetMultimode>
 80023b2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fe7f 	bl	80020bc <LL_ADC_REG_IsConversionOngoing>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f040 809c 	bne.w	80024fe <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_Start+0x30>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e097      	b.n	8002504 <HAL_ADC_Start+0x160>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f001 f80d 	bl	80033fc <ADC_Enable>
 80023e2:	4603      	mov	r3, r0
 80023e4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023e6:	7dfb      	ldrb	r3, [r7, #23]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f040 8083 	bne.w	80024f4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023f6:	f023 0301 	bic.w	r3, r3, #1
 80023fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a42      	ldr	r2, [pc, #264]	; (8002510 <HAL_ADC_Start+0x16c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d002      	beq.n	8002412 <HAL_ADC_Start+0x6e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	e000      	b.n	8002414 <HAL_ADC_Start+0x70>
 8002412:	4b40      	ldr	r3, [pc, #256]	; (8002514 <HAL_ADC_Start+0x170>)
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	4293      	cmp	r3, r2
 800241a:	d002      	beq.n	8002422 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d105      	bne.n	800242e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002426:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243a:	d106      	bne.n	800244a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	f023 0206 	bic.w	r2, r3, #6
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	659a      	str	r2, [r3, #88]	; 0x58
 8002448:	e002      	b.n	8002450 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	221c      	movs	r2, #28
 8002456:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a2a      	ldr	r2, [pc, #168]	; (8002510 <HAL_ADC_Start+0x16c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d002      	beq.n	8002470 <HAL_ADC_Start+0xcc>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	e000      	b.n	8002472 <HAL_ADC_Start+0xce>
 8002470:	4b28      	ldr	r3, [pc, #160]	; (8002514 <HAL_ADC_Start+0x170>)
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	4293      	cmp	r3, r2
 8002478:	d008      	beq.n	800248c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2b05      	cmp	r3, #5
 8002484:	d002      	beq.n	800248c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b09      	cmp	r3, #9
 800248a:	d114      	bne.n	80024b6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fdf0 	bl	8002094 <LL_ADC_REG_StartConversion>
 80024b4:	e025      	b.n	8002502 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <HAL_ADC_Start+0x16c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d002      	beq.n	80024d2 <HAL_ADC_Start+0x12e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	e000      	b.n	80024d4 <HAL_ADC_Start+0x130>
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <HAL_ADC_Start+0x170>)
 80024d4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00f      	beq.n	8002502 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	655a      	str	r2, [r3, #84]	; 0x54
 80024f2:	e006      	b.n	8002502 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80024fc:	e001      	b.n	8002502 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024fe:	2302      	movs	r3, #2
 8002500:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002502:	7dfb      	ldrb	r3, [r7, #23]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	50040300 	.word	0x50040300
 8002510:	50040100 	.word	0x50040100
 8002514:	50040000 	.word	0x50040000

08002518 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002520:	4893      	ldr	r0, [pc, #588]	; (8002770 <HAL_ADC_Start_IT+0x258>)
 8002522:	f7ff fcff 	bl	8001f24 <LL_ADC_GetMultimode>
 8002526:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fdc5 	bl	80020bc <LL_ADC_REG_IsConversionOngoing>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	f040 8112 	bne.w	800275e <HAL_ADC_Start_IT+0x246>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_ADC_Start_IT+0x30>
 8002544:	2302      	movs	r3, #2
 8002546:	e10f      	b.n	8002768 <HAL_ADC_Start_IT+0x250>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 ff53 	bl	80033fc <ADC_Enable>
 8002556:	4603      	mov	r3, r0
 8002558:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800255a:	7dfb      	ldrb	r3, [r7, #23]
 800255c:	2b00      	cmp	r3, #0
 800255e:	f040 80f9 	bne.w	8002754 <HAL_ADC_Start_IT+0x23c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002566:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a7e      	ldr	r2, [pc, #504]	; (8002774 <HAL_ADC_Start_IT+0x25c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d002      	beq.n	8002586 <HAL_ADC_Start_IT+0x6e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	e000      	b.n	8002588 <HAL_ADC_Start_IT+0x70>
 8002586:	4b7c      	ldr	r3, [pc, #496]	; (8002778 <HAL_ADC_Start_IT+0x260>)
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	4293      	cmp	r3, r2
 800258e:	d002      	beq.n	8002596 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d105      	bne.n	80025a2 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d006      	beq.n	80025bc <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b2:	f023 0206 	bic.w	r2, r3, #6
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	659a      	str	r2, [r3, #88]	; 0x58
 80025ba:	e002      	b.n	80025c2 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	221c      	movs	r2, #28
 80025c8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 021c 	bic.w	r2, r2, #28
 80025e0:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d108      	bne.n	80025fc <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0208 	orr.w	r2, r2, #8
 80025f8:	605a      	str	r2, [r3, #4]
          break;
 80025fa:	e008      	b.n	800260e <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0204 	orr.w	r2, r2, #4
 800260a:	605a      	str	r2, [r3, #4]
          break;
 800260c:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002612:	2b00      	cmp	r3, #0
 8002614:	d107      	bne.n	8002626 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0210 	orr.w	r2, r2, #16
 8002624:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a52      	ldr	r2, [pc, #328]	; (8002774 <HAL_ADC_Start_IT+0x25c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d002      	beq.n	8002636 <HAL_ADC_Start_IT+0x11e>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	e000      	b.n	8002638 <HAL_ADC_Start_IT+0x120>
 8002636:	4b50      	ldr	r3, [pc, #320]	; (8002778 <HAL_ADC_Start_IT+0x260>)
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	4293      	cmp	r3, r2
 800263e:	d008      	beq.n	8002652 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	2b05      	cmp	r3, #5
 800264a:	d002      	beq.n	8002652 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	2b09      	cmp	r3, #9
 8002650:	d13b      	bne.n	80026ca <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d02d      	beq.n	80026bc <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002664:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002668:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	2b08      	cmp	r3, #8
 8002676:	d110      	bne.n	800269a <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0220 	bic.w	r2, r2, #32
 8002686:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002696:	605a      	str	r2, [r3, #4]
              break;
 8002698:	e011      	b.n	80026be <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026a8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0220 	orr.w	r2, r2, #32
 80026b8:	605a      	str	r2, [r3, #4]
              break;
 80026ba:	e000      	b.n	80026be <HAL_ADC_Start_IT+0x1a6>
          }
        }
 80026bc:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fce6 	bl	8002094 <LL_ADC_REG_StartConversion>
 80026c8:	e04d      	b.n	8002766 <HAL_ADC_Start_IT+0x24e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a26      	ldr	r2, [pc, #152]	; (8002774 <HAL_ADC_Start_IT+0x25c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d002      	beq.n	80026e6 <HAL_ADC_Start_IT+0x1ce>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	e000      	b.n	80026e8 <HAL_ADC_Start_IT+0x1d0>
 80026e6:	4b24      	ldr	r3, [pc, #144]	; (8002778 <HAL_ADC_Start_IT+0x260>)
 80026e8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d036      	beq.n	8002764 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	2b08      	cmp	r3, #8
 800270c:	d110      	bne.n	8002730 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0220 	bic.w	r2, r2, #32
 800271c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800272c:	605a      	str	r2, [r3, #4]
              break;
 800272e:	e01a      	b.n	8002766 <HAL_ADC_Start_IT+0x24e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800273e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0220 	orr.w	r2, r2, #32
 800274e:	605a      	str	r2, [r3, #4]
              break;
 8002750:	bf00      	nop
 8002752:	e008      	b.n	8002766 <HAL_ADC_Start_IT+0x24e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800275c:	e003      	b.n	8002766 <HAL_ADC_Start_IT+0x24e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800275e:	2302      	movs	r3, #2
 8002760:	75fb      	strb	r3, [r7, #23]
 8002762:	e000      	b.n	8002766 <HAL_ADC_Start_IT+0x24e>
        }
 8002764:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8002766:	7dfb      	ldrb	r3, [r7, #23]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	50040300 	.word	0x50040300
 8002774:	50040100 	.word	0x50040100
 8002778:	50040000 	.word	0x50040000

0800277c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80027a0:	2300      	movs	r3, #0
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027b4:	4882      	ldr	r0, [pc, #520]	; (80029c0 <HAL_ADC_IRQHandler+0x228>)
 80027b6:	f7ff fbb5 	bl	8001f24 <LL_ADC_GetMultimode>
 80027ba:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d017      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x5e>
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d012      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d4:	f003 0310 	and.w	r3, r3, #16
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d105      	bne.n	80027e8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 ff94 	bl	8003716 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2202      	movs	r2, #2
 80027f4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d004      	beq.n	800280a <HAL_ADC_IRQHandler+0x72>
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10a      	bne.n	8002820 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8083 	beq.w	800291c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d07d      	beq.n	800291c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	d105      	bne.n	8002838 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff facf 	bl	8001de0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d062      	beq.n	800290e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a5d      	ldr	r2, [pc, #372]	; (80029c4 <HAL_ADC_IRQHandler+0x22c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d002      	beq.n	8002858 <HAL_ADC_IRQHandler+0xc0>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	e000      	b.n	800285a <HAL_ADC_IRQHandler+0xc2>
 8002858:	4b5b      	ldr	r3, [pc, #364]	; (80029c8 <HAL_ADC_IRQHandler+0x230>)
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	4293      	cmp	r3, r2
 8002860:	d008      	beq.n	8002874 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b05      	cmp	r3, #5
 800286c:	d002      	beq.n	8002874 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b09      	cmp	r3, #9
 8002872:	d104      	bne.n	800287e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	e00c      	b.n	8002898 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a50      	ldr	r2, [pc, #320]	; (80029c4 <HAL_ADC_IRQHandler+0x22c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d002      	beq.n	800288e <HAL_ADC_IRQHandler+0xf6>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	e000      	b.n	8002890 <HAL_ADC_IRQHandler+0xf8>
 800288e:	4b4e      	ldr	r3, [pc, #312]	; (80029c8 <HAL_ADC_IRQHandler+0x230>)
 8002890:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d135      	bne.n	800290e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d12e      	bne.n	800290e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fc01 	bl	80020bc <LL_ADC_REG_IsConversionOngoing>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d11a      	bne.n	80028f6 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 020c 	bic.w	r2, r2, #12
 80028ce:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d112      	bne.n	800290e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ec:	f043 0201 	orr.w	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	655a      	str	r2, [r3, #84]	; 0x54
 80028f4:	e00b      	b.n	800290e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	f043 0210 	orr.w	r2, r3, #16
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	f043 0201 	orr.w	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f95c 	bl	8002bcc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	220c      	movs	r2, #12
 800291a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d004      	beq.n	8002930 <HAL_ADC_IRQHandler+0x198>
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10b      	bne.n	8002948 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 809f 	beq.w	8002a7a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8099 	beq.w	8002a7a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	d105      	bne.n	8002960 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fa7a 	bl	8001e5e <LL_ADC_INJ_IsTriggerSourceSWStart>
 800296a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fa35 	bl	8001de0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002976:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a11      	ldr	r2, [pc, #68]	; (80029c4 <HAL_ADC_IRQHandler+0x22c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d002      	beq.n	8002988 <HAL_ADC_IRQHandler+0x1f0>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	e000      	b.n	800298a <HAL_ADC_IRQHandler+0x1f2>
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <HAL_ADC_IRQHandler+0x230>)
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	4293      	cmp	r3, r2
 8002990:	d008      	beq.n	80029a4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2b06      	cmp	r3, #6
 800299c:	d002      	beq.n	80029a4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b07      	cmp	r3, #7
 80029a2:	d104      	bne.n	80029ae <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	623b      	str	r3, [r7, #32]
 80029ac:	e013      	b.n	80029d6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <HAL_ADC_IRQHandler+0x22c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d009      	beq.n	80029cc <HAL_ADC_IRQHandler+0x234>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	e007      	b.n	80029ce <HAL_ADC_IRQHandler+0x236>
 80029be:	bf00      	nop
 80029c0:	50040300 	.word	0x50040300
 80029c4:	50040100 	.word	0x50040100
 80029c8:	50040000 	.word	0x50040000
 80029cc:	4b7d      	ldr	r3, [pc, #500]	; (8002bc4 <HAL_ADC_IRQHandler+0x42c>)
 80029ce:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10c      	bne.n	80029f6 <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d142      	bne.n	8002a6c <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d03f      	beq.n	8002a6c <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d13a      	bne.n	8002a6c <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a00:	2b40      	cmp	r3, #64	; 0x40
 8002a02:	d133      	bne.n	8002a6c <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d12e      	bne.n	8002a6c <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fb65 	bl	80020e2 <LL_ADC_INJ_IsConversionOngoing>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d11a      	bne.n	8002a54 <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a2c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d112      	bne.n	8002a6c <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4a:	f043 0201 	orr.w	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	655a      	str	r2, [r3, #84]	; 0x54
 8002a52:	e00b      	b.n	8002a6c <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a58:	f043 0210 	orr.w	r2, r3, #16
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a64:	f043 0201 	orr.w	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 fe2a 	bl	80036c6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2260      	movs	r2, #96	; 0x60
 8002a78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d011      	beq.n	8002aa8 <HAL_ADC_IRQHandler+0x310>
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00c      	beq.n	8002aa8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f8a0 	bl	8002be0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2280      	movs	r2, #128	; 0x80
 8002aa6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d012      	beq.n	8002ad8 <HAL_ADC_IRQHandler+0x340>
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00d      	beq.n	8002ad8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 fe10 	bl	80036ee <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ad6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d012      	beq.n	8002b08 <HAL_ADC_IRQHandler+0x370>
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00d      	beq.n	8002b08 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fe02 	bl	8003702 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d036      	beq.n	8002b80 <HAL_ADC_IRQHandler+0x3e8>
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d031      	beq.n	8002b80 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002b24:	2301      	movs	r3, #1
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
 8002b28:	e014      	b.n	8002b54 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b30:	4825      	ldr	r0, [pc, #148]	; (8002bc8 <HAL_ADC_IRQHandler+0x430>)
 8002b32:	f7ff fa05 	bl	8001f40 <LL_ADC_GetMultiDMATransfer>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00b      	beq.n	8002b54 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b40:	e008      	b.n	8002b54 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002b50:	2301      	movs	r3, #1
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d10e      	bne.n	8002b78 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	f043 0202 	orr.w	r2, r3, #2
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f83e 	bl	8002bf4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d018      	beq.n	8002bbc <HAL_ADC_IRQHandler+0x424>
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d013      	beq.n	8002bbc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b98:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	f043 0208 	orr.w	r2, r3, #8
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bb4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fd8f 	bl	80036da <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002bbc:	bf00      	nop
 8002bbe:	3728      	adds	r7, #40	; 0x28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	50040000 	.word	0x50040000
 8002bc8:	50040300 	.word	0x50040300

08002bcc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b0b6      	sub	sp, #216	; 0xd8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x22>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e3d4      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x7cc>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fa40 	bl	80020bc <LL_ADC_REG_IsConversionOngoing>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f040 83b9 	bne.w	80033b6 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b05      	cmp	r3, #5
 8002c4a:	d824      	bhi.n	8002c96 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	3b02      	subs	r3, #2
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d81b      	bhi.n	8002c8e <HAL_ADC_ConfigChannel+0x86>
 8002c56:	a201      	add	r2, pc, #4	; (adr r2, 8002c5c <HAL_ADC_ConfigChannel+0x54>)
 8002c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5c:	08002c6d 	.word	0x08002c6d
 8002c60:	08002c75 	.word	0x08002c75
 8002c64:	08002c7d 	.word	0x08002c7d
 8002c68:	08002c85 	.word	0x08002c85
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	220c      	movs	r2, #12
 8002c70:	605a      	str	r2, [r3, #4]
          break;
 8002c72:	e011      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2212      	movs	r2, #18
 8002c78:	605a      	str	r2, [r3, #4]
          break;
 8002c7a:	e00d      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2218      	movs	r2, #24
 8002c80:	605a      	str	r2, [r3, #4]
          break;
 8002c82:	e009      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c8a:	605a      	str	r2, [r3, #4]
          break;
 8002c8c:	e004      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2206      	movs	r2, #6
 8002c92:	605a      	str	r2, [r3, #4]
          break;
 8002c94:	e000      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002c96:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f7ff f8ae 	bl	8001e06 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fa04 	bl	80020bc <LL_ADC_REG_IsConversionOngoing>
 8002cb4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fa10 	bl	80020e2 <LL_ADC_INJ_IsConversionOngoing>
 8002cc2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f040 81c1 	bne.w	8003052 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f040 81bc 	bne.w	8003052 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ce2:	d10f      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2200      	movs	r2, #0
 8002cee:	4619      	mov	r1, r3
 8002cf0:	f7ff f8c8 	bl	8001e84 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff f85c 	bl	8001dba <LL_ADC_SetSamplingTimeCommonConfig>
 8002d02:	e00e      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	6819      	ldr	r1, [r3, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	461a      	mov	r2, r3
 8002d12:	f7ff f8b7 	bl	8001e84 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff f84c 	bl	8001dba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	08db      	lsrs	r3, r3, #3
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d00a      	beq.n	8002d5a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	6919      	ldr	r1, [r3, #16]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d54:	f7fe ffdc 	bl	8001d10 <LL_ADC_SetOffset>
 8002d58:	e17b      	b.n	8003052 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2100      	movs	r1, #0
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe fff9 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10a      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x17e>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fe ffee 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	0e9b      	lsrs	r3, r3, #26
 8002d80:	f003 021f 	and.w	r2, r3, #31
 8002d84:	e01e      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x1bc>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe ffe3 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002da4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002da8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002dac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002db4:	2320      	movs	r3, #32
 8002db6:	e004      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002db8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dbc:	fab3 f383 	clz	r3, r3
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d105      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x1d4>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	0e9b      	lsrs	r3, r3, #26
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	e018      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x206>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002df0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002df4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002df8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002e00:	2320      	movs	r3, #32
 8002e02:	e004      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002e04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d106      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe ffb2 	bl	8001d84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe ff96 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x244>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe ff8b 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	0e9b      	lsrs	r3, r3, #26
 8002e46:	f003 021f 	and.w	r2, r3, #31
 8002e4a:	e01e      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x282>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2101      	movs	r1, #1
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe ff80 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002e6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002e72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002e7a:	2320      	movs	r3, #32
 8002e7c:	e004      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002e7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d105      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x29a>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	0e9b      	lsrs	r3, r3, #26
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	e018      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x2cc>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002eb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002eba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002ebe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002ec6:	2320      	movs	r3, #32
 8002ec8:	e004      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002eca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d106      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2200      	movs	r2, #0
 8002ede:	2101      	movs	r1, #1
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fe ff4f 	bl	8001d84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2102      	movs	r1, #2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe ff33 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10a      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x30a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2102      	movs	r1, #2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe ff28 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	0e9b      	lsrs	r3, r3, #26
 8002f0c:	f003 021f 	and.w	r2, r3, #31
 8002f10:	e01e      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x348>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2102      	movs	r1, #2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fe ff1d 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002f30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002f38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002f40:	2320      	movs	r3, #32
 8002f42:	e004      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002f44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d105      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x360>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	0e9b      	lsrs	r3, r3, #26
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	e016      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x38e>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002f7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002f80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002f88:	2320      	movs	r3, #32
 8002f8a:	e004      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f90:	fab3 f383 	clz	r3, r3
 8002f94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d106      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe feee 	bl	8001d84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2103      	movs	r1, #3
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe fed2 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x3cc>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2103      	movs	r1, #3
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe fec7 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	0e9b      	lsrs	r3, r3, #26
 8002fce:	f003 021f 	and.w	r2, r3, #31
 8002fd2:	e017      	b.n	8003004 <HAL_ADC_ConfigChannel+0x3fc>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2103      	movs	r1, #3
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe febc 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002fec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fee:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002ff6:	2320      	movs	r3, #32
 8002ff8:	e003      	b.n	8003002 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002ffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ffc:	fab3 f383 	clz	r3, r3
 8003000:	b2db      	uxtb	r3, r3
 8003002:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300c:	2b00      	cmp	r3, #0
 800300e:	d105      	bne.n	800301c <HAL_ADC_ConfigChannel+0x414>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	0e9b      	lsrs	r3, r3, #26
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	e011      	b.n	8003040 <HAL_ADC_ConfigChannel+0x438>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003024:	fa93 f3a3 	rbit	r3, r3
 8003028:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800302a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800302c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800302e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003034:	2320      	movs	r3, #32
 8003036:	e003      	b.n	8003040 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003040:	429a      	cmp	r2, r3
 8003042:	d106      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2200      	movs	r2, #0
 800304a:	2103      	movs	r1, #3
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe fe99 	bl	8001d84 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe fff6 	bl	8002048 <LL_ADC_IsEnabled>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	f040 8140 	bne.w	80032e4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	6819      	ldr	r1, [r3, #0]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	461a      	mov	r2, r3
 8003072:	f7fe ff33 	bl	8001edc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	4a8f      	ldr	r2, [pc, #572]	; (80032b8 <HAL_ADC_ConfigChannel+0x6b0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	f040 8131 	bne.w	80032e4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10b      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x4a2>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	0e9b      	lsrs	r3, r3, #26
 8003098:	3301      	adds	r3, #1
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	2b09      	cmp	r3, #9
 80030a0:	bf94      	ite	ls
 80030a2:	2301      	movls	r3, #1
 80030a4:	2300      	movhi	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	e019      	b.n	80030de <HAL_ADC_ConfigChannel+0x4d6>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80030b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ba:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80030bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80030c2:	2320      	movs	r3, #32
 80030c4:	e003      	b.n	80030ce <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80030c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030c8:	fab3 f383 	clz	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	3301      	adds	r3, #1
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	2b09      	cmp	r3, #9
 80030d6:	bf94      	ite	ls
 80030d8:	2301      	movls	r3, #1
 80030da:	2300      	movhi	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d079      	beq.n	80031d6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d107      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x4f6>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	0e9b      	lsrs	r3, r3, #26
 80030f4:	3301      	adds	r3, #1
 80030f6:	069b      	lsls	r3, r3, #26
 80030f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030fc:	e015      	b.n	800312a <HAL_ADC_ConfigChannel+0x522>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003106:	fa93 f3a3 	rbit	r3, r3
 800310a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800310c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800310e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003116:	2320      	movs	r3, #32
 8003118:	e003      	b.n	8003122 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800311a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	b2db      	uxtb	r3, r3
 8003122:	3301      	adds	r3, #1
 8003124:	069b      	lsls	r3, r3, #26
 8003126:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003132:	2b00      	cmp	r3, #0
 8003134:	d109      	bne.n	800314a <HAL_ADC_ConfigChannel+0x542>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	0e9b      	lsrs	r3, r3, #26
 800313c:	3301      	adds	r3, #1
 800313e:	f003 031f 	and.w	r3, r3, #31
 8003142:	2101      	movs	r1, #1
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	e017      	b.n	800317a <HAL_ADC_ConfigChannel+0x572>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003152:	fa93 f3a3 	rbit	r3, r3
 8003156:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800315a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800315c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003162:	2320      	movs	r3, #32
 8003164:	e003      	b.n	800316e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003168:	fab3 f383 	clz	r3, r3
 800316c:	b2db      	uxtb	r3, r3
 800316e:	3301      	adds	r3, #1
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	2101      	movs	r1, #1
 8003176:	fa01 f303 	lsl.w	r3, r1, r3
 800317a:	ea42 0103 	orr.w	r1, r2, r3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10a      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x598>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	0e9b      	lsrs	r3, r3, #26
 8003190:	3301      	adds	r3, #1
 8003192:	f003 021f 	and.w	r2, r3, #31
 8003196:	4613      	mov	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	4413      	add	r3, r2
 800319c:	051b      	lsls	r3, r3, #20
 800319e:	e018      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x5ca>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a8:	fa93 f3a3 	rbit	r3, r3
 80031ac:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80031b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80031b8:	2320      	movs	r3, #32
 80031ba:	e003      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80031bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031be:	fab3 f383 	clz	r3, r3
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	3301      	adds	r3, #1
 80031c6:	f003 021f 	and.w	r2, r3, #31
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031d2:	430b      	orrs	r3, r1
 80031d4:	e081      	b.n	80032da <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d107      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x5ea>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	0e9b      	lsrs	r3, r3, #26
 80031e8:	3301      	adds	r3, #1
 80031ea:	069b      	lsls	r3, r3, #26
 80031ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031f0:	e015      	b.n	800321e <HAL_ADC_ConfigChannel+0x616>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003202:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800320a:	2320      	movs	r3, #32
 800320c:	e003      	b.n	8003216 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	fab3 f383 	clz	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	3301      	adds	r3, #1
 8003218:	069b      	lsls	r3, r3, #26
 800321a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <HAL_ADC_ConfigChannel+0x636>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	0e9b      	lsrs	r3, r3, #26
 8003230:	3301      	adds	r3, #1
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	2101      	movs	r1, #1
 8003238:	fa01 f303 	lsl.w	r3, r1, r3
 800323c:	e017      	b.n	800326e <HAL_ADC_ConfigChannel+0x666>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	61fb      	str	r3, [r7, #28]
  return result;
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003256:	2320      	movs	r3, #32
 8003258:	e003      	b.n	8003262 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	fab3 f383 	clz	r3, r3
 8003260:	b2db      	uxtb	r3, r3
 8003262:	3301      	adds	r3, #1
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f303 	lsl.w	r3, r1, r3
 800326e:	ea42 0103 	orr.w	r1, r2, r3
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10d      	bne.n	800329a <HAL_ADC_ConfigChannel+0x692>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	0e9b      	lsrs	r3, r3, #26
 8003284:	3301      	adds	r3, #1
 8003286:	f003 021f 	and.w	r2, r3, #31
 800328a:	4613      	mov	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4413      	add	r3, r2
 8003290:	3b1e      	subs	r3, #30
 8003292:	051b      	lsls	r3, r3, #20
 8003294:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003298:	e01e      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x6d0>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	613b      	str	r3, [r7, #16]
  return result;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d104      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80032b2:	2320      	movs	r3, #32
 80032b4:	e006      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x6bc>
 80032b6:	bf00      	nop
 80032b8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	fab3 f383 	clz	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	3301      	adds	r3, #1
 80032c6:	f003 021f 	and.w	r2, r3, #31
 80032ca:	4613      	mov	r3, r2
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	4413      	add	r3, r2
 80032d0:	3b1e      	subs	r3, #30
 80032d2:	051b      	lsls	r3, r3, #20
 80032d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032d8:	430b      	orrs	r3, r1
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	6892      	ldr	r2, [r2, #8]
 80032de:	4619      	mov	r1, r3
 80032e0:	f7fe fdd0 	bl	8001e84 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b3c      	ldr	r3, [pc, #240]	; (80033dc <HAL_ADC_ConfigChannel+0x7d4>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d06b      	beq.n	80033c8 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032f0:	483b      	ldr	r0, [pc, #236]	; (80033e0 <HAL_ADC_ConfigChannel+0x7d8>)
 80032f2:	f7fe fcff 	bl	8001cf4 <LL_ADC_GetCommonPathInternalCh>
 80032f6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a39      	ldr	r2, [pc, #228]	; (80033e4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d126      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d120      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a34      	ldr	r2, [pc, #208]	; (80033e8 <HAL_ADC_ConfigChannel+0x7e0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d156      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800331a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800331e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003322:	4619      	mov	r1, r3
 8003324:	482e      	ldr	r0, [pc, #184]	; (80033e0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003326:	f7fe fcd2 	bl	8001cce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800332a:	4b30      	ldr	r3, [pc, #192]	; (80033ec <HAL_ADC_ConfigChannel+0x7e4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	099b      	lsrs	r3, r3, #6
 8003330:	4a2f      	ldr	r2, [pc, #188]	; (80033f0 <HAL_ADC_ConfigChannel+0x7e8>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	099a      	lsrs	r2, r3, #6
 8003338:	4613      	mov	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003342:	e002      	b.n	800334a <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	3b01      	subs	r3, #1
 8003348:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f9      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003350:	e03a      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a27      	ldr	r2, [pc, #156]	; (80033f4 <HAL_ADC_ConfigChannel+0x7ec>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d113      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x77c>
 800335c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10d      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1e      	ldr	r2, [pc, #120]	; (80033e8 <HAL_ADC_ConfigChannel+0x7e0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d12a      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003372:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800337a:	4619      	mov	r1, r3
 800337c:	4818      	ldr	r0, [pc, #96]	; (80033e0 <HAL_ADC_ConfigChannel+0x7d8>)
 800337e:	f7fe fca6 	bl	8001cce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003382:	e021      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1b      	ldr	r2, [pc, #108]	; (80033f8 <HAL_ADC_ConfigChannel+0x7f0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d11c      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800338e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d116      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a12      	ldr	r2, [pc, #72]	; (80033e8 <HAL_ADC_ConfigChannel+0x7e0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d111      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033ac:	4619      	mov	r1, r3
 80033ae:	480c      	ldr	r0, [pc, #48]	; (80033e0 <HAL_ADC_ConfigChannel+0x7d8>)
 80033b0:	f7fe fc8d 	bl	8001cce <LL_ADC_SetCommonPathInternalCh>
 80033b4:	e008      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ba:	f043 0220 	orr.w	r2, r3, #32
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033d0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	37d8      	adds	r7, #216	; 0xd8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	80080000 	.word	0x80080000
 80033e0:	50040300 	.word	0x50040300
 80033e4:	c7520000 	.word	0xc7520000
 80033e8:	50040000 	.word	0x50040000
 80033ec:	20000004 	.word	0x20000004
 80033f0:	053e2d63 	.word	0x053e2d63
 80033f4:	cb840000 	.word	0xcb840000
 80033f8:	80000001 	.word	0x80000001

080033fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe fe1d 	bl	8002048 <LL_ADC_IsEnabled>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d146      	bne.n	80034a2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <ADC_Enable+0xb0>)
 800341c:	4013      	ands	r3, r2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00d      	beq.n	800343e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003426:	f043 0210 	orr.w	r2, r3, #16
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003432:	f043 0201 	orr.w	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e032      	b.n	80034a4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe fdd8 	bl	8001ff8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003448:	f7fe fc00 	bl	8001c4c <HAL_GetTick>
 800344c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800344e:	e021      	b.n	8003494 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe fdf7 	bl	8002048 <LL_ADC_IsEnabled>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d104      	bne.n	800346a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7fe fdc7 	bl	8001ff8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800346a:	f7fe fbef 	bl	8001c4c <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d90d      	bls.n	8003494 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	f043 0210 	orr.w	r2, r3, #16
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	f043 0201 	orr.w	r2, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e007      	b.n	80034a4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d1d6      	bne.n	8003450 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	8000003f 	.word	0x8000003f

080034b0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fe fdd6 	bl	800206e <LL_ADC_IsDisableOngoing>
 80034c2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fe fdbd 	bl	8002048 <LL_ADC_IsEnabled>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d040      	beq.n	8003556 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d13d      	bne.n	8003556 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 030d 	and.w	r3, r3, #13
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d10c      	bne.n	8003502 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fe fd97 	bl	8002020 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2203      	movs	r2, #3
 80034f8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034fa:	f7fe fba7 	bl	8001c4c <HAL_GetTick>
 80034fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003500:	e022      	b.n	8003548 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003506:	f043 0210 	orr.w	r2, r3, #16
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003512:	f043 0201 	orr.w	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e01c      	b.n	8003558 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800351e:	f7fe fb95 	bl	8001c4c <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d90d      	bls.n	8003548 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003530:	f043 0210 	orr.w	r2, r3, #16
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	f043 0201 	orr.w	r2, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e007      	b.n	8003558 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1e3      	bne.n	800351e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <LL_ADC_IsEnabled>:
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <LL_ADC_IsEnabled+0x18>
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <LL_ADC_IsEnabled+0x1a>
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <LL_ADC_StartCalibration>:
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003598:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	609a      	str	r2, [r3, #8]
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <LL_ADC_IsCalibrationOnGoing>:
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035cc:	d101      	bne.n	80035d2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <LL_ADC_REG_IsConversionOngoing>:
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d101      	bne.n	80035f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035f4:	2301      	movs	r3, #1
 80035f6:	e000      	b.n	80035fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003610:	2300      	movs	r3, #0
 8003612:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_ADCEx_Calibration_Start+0x1c>
 800361e:	2302      	movs	r3, #2
 8003620:	e04d      	b.n	80036be <HAL_ADCEx_Calibration_Start+0xb8>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff ff40 	bl	80034b0 <ADC_Disable>
 8003630:	4603      	mov	r3, r0
 8003632:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d136      	bne.n	80036a8 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003642:	f023 0302 	bic.w	r3, r3, #2
 8003646:	f043 0202 	orr.w	r2, r3, #2
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6839      	ldr	r1, [r7, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ff96 	bl	8003586 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800365a:	e014      	b.n	8003686 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	3301      	adds	r3, #1
 8003660:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003668:	d30d      	bcc.n	8003686 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366e:	f023 0312 	bic.w	r3, r3, #18
 8003672:	f043 0210 	orr.w	r2, r3, #16
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e01b      	b.n	80036be <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff ff94 	bl	80035b8 <LL_ADC_IsCalibrationOnGoing>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1e2      	bne.n	800365c <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369a:	f023 0303 	bic.w	r3, r3, #3
 800369e:	f043 0201 	orr.w	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	655a      	str	r2, [r3, #84]	; 0x54
 80036a6:	e005      	b.n	80036b4 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ac:	f043 0210 	orr.w	r2, r3, #16
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b09f      	sub	sp, #124	; 0x7c
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003746:	2302      	movs	r3, #2
 8003748:	e085      	b.n	8003856 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a42      	ldr	r2, [pc, #264]	; (8003860 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d102      	bne.n	8003762 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800375c:	4b41      	ldr	r3, [pc, #260]	; (8003864 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	e001      	b.n	8003766 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10b      	bne.n	8003784 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003770:	f043 0220 	orr.w	r2, r3, #32
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e068      	b.n	8003856 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff ff2a 	bl	80035e0 <LL_ADC_REG_IsConversionOngoing>
 800378c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff ff24 	bl	80035e0 <LL_ADC_REG_IsConversionOngoing>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d14a      	bne.n	8003834 <HAL_ADCEx_MultiModeConfigChannel+0x108>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800379e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d147      	bne.n	8003834 <HAL_ADCEx_MultiModeConfigChannel+0x108>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80037a4:	4b30      	ldr	r3, [pc, #192]	; (8003868 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80037a6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d027      	beq.n	8003800 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80037b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037c2:	035b      	lsls	r3, r3, #13
 80037c4:	430b      	orrs	r3, r1
 80037c6:	431a      	orrs	r2, r3
 80037c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037cc:	4824      	ldr	r0, [pc, #144]	; (8003860 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80037ce:	f7ff fec7 	bl	8003560 <LL_ADC_IsEnabled>
 80037d2:	4604      	mov	r4, r0
 80037d4:	4823      	ldr	r0, [pc, #140]	; (8003864 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80037d6:	f7ff fec3 	bl	8003560 <LL_ADC_IsEnabled>
 80037da:	4603      	mov	r3, r0
 80037dc:	4323      	orrs	r3, r4
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d132      	bne.n	8003848 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80037e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037ea:	f023 030f 	bic.w	r3, r3, #15
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	6811      	ldr	r1, [r2, #0]
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	6892      	ldr	r2, [r2, #8]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	431a      	orrs	r2, r3
 80037fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037fc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037fe:	e023      	b.n	8003848 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800380c:	4814      	ldr	r0, [pc, #80]	; (8003860 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800380e:	f7ff fea7 	bl	8003560 <LL_ADC_IsEnabled>
 8003812:	4604      	mov	r4, r0
 8003814:	4813      	ldr	r0, [pc, #76]	; (8003864 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003816:	f7ff fea3 	bl	8003560 <LL_ADC_IsEnabled>
 800381a:	4603      	mov	r3, r0
 800381c:	4323      	orrs	r3, r4
 800381e:	2b00      	cmp	r3, #0
 8003820:	d112      	bne.n	8003848 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800382a:	f023 030f 	bic.w	r3, r3, #15
 800382e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003830:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003832:	e009      	b.n	8003848 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003838:	f043 0220 	orr.w	r2, r3, #32
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003846:	e000      	b.n	800384a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003848:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003852:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003856:	4618      	mov	r0, r3
 8003858:	377c      	adds	r7, #124	; 0x7c
 800385a:	46bd      	mov	sp, r7
 800385c:	bd90      	pop	{r4, r7, pc}
 800385e:	bf00      	nop
 8003860:	50040000 	.word	0x50040000
 8003864:	50040100 	.word	0x50040100
 8003868:	50040300 	.word	0x50040300

0800386c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800387c:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <__NVIC_SetPriorityGrouping+0x44>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003888:	4013      	ands	r3, r2
 800388a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800389c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800389e:	4a04      	ldr	r2, [pc, #16]	; (80038b0 <__NVIC_SetPriorityGrouping+0x44>)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	60d3      	str	r3, [r2, #12]
}
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038b8:	4b04      	ldr	r3, [pc, #16]	; (80038cc <__NVIC_GetPriorityGrouping+0x18>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	0a1b      	lsrs	r3, r3, #8
 80038be:	f003 0307 	and.w	r3, r3, #7
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	e000ed00 	.word	0xe000ed00

080038d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	db0b      	blt.n	80038fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	f003 021f 	and.w	r2, r3, #31
 80038e8:	4907      	ldr	r1, [pc, #28]	; (8003908 <__NVIC_EnableIRQ+0x38>)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	2001      	movs	r0, #1
 80038f2:	fa00 f202 	lsl.w	r2, r0, r2
 80038f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	e000e100 	.word	0xe000e100

0800390c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	6039      	str	r1, [r7, #0]
 8003916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391c:	2b00      	cmp	r3, #0
 800391e:	db0a      	blt.n	8003936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	b2da      	uxtb	r2, r3
 8003924:	490c      	ldr	r1, [pc, #48]	; (8003958 <__NVIC_SetPriority+0x4c>)
 8003926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392a:	0112      	lsls	r2, r2, #4
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	440b      	add	r3, r1
 8003930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003934:	e00a      	b.n	800394c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	b2da      	uxtb	r2, r3
 800393a:	4908      	ldr	r1, [pc, #32]	; (800395c <__NVIC_SetPriority+0x50>)
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	3b04      	subs	r3, #4
 8003944:	0112      	lsls	r2, r2, #4
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	440b      	add	r3, r1
 800394a:	761a      	strb	r2, [r3, #24]
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	e000e100 	.word	0xe000e100
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003960:	b480      	push	{r7}
 8003962:	b089      	sub	sp, #36	; 0x24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f1c3 0307 	rsb	r3, r3, #7
 800397a:	2b04      	cmp	r3, #4
 800397c:	bf28      	it	cs
 800397e:	2304      	movcs	r3, #4
 8003980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3304      	adds	r3, #4
 8003986:	2b06      	cmp	r3, #6
 8003988:	d902      	bls.n	8003990 <NVIC_EncodePriority+0x30>
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	3b03      	subs	r3, #3
 800398e:	e000      	b.n	8003992 <NVIC_EncodePriority+0x32>
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43da      	mvns	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	401a      	ands	r2, r3
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	fa01 f303 	lsl.w	r3, r1, r3
 80039b2:	43d9      	mvns	r1, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b8:	4313      	orrs	r3, r2
         );
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3724      	adds	r7, #36	; 0x24
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
	...

080039c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039d8:	d301      	bcc.n	80039de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039da:	2301      	movs	r3, #1
 80039dc:	e00f      	b.n	80039fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039de:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <SysTick_Config+0x40>)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039e6:	210f      	movs	r1, #15
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039ec:	f7ff ff8e 	bl	800390c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <SysTick_Config+0x40>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039f6:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <SysTick_Config+0x40>)
 80039f8:	2207      	movs	r2, #7
 80039fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	e000e010 	.word	0xe000e010

08003a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ff29 	bl	800386c <__NVIC_SetPriorityGrouping>
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b086      	sub	sp, #24
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	4603      	mov	r3, r0
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a34:	f7ff ff3e 	bl	80038b4 <__NVIC_GetPriorityGrouping>
 8003a38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	68b9      	ldr	r1, [r7, #8]
 8003a3e:	6978      	ldr	r0, [r7, #20]
 8003a40:	f7ff ff8e 	bl	8003960 <NVIC_EncodePriority>
 8003a44:	4602      	mov	r2, r0
 8003a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff ff5d 	bl	800390c <__NVIC_SetPriority>
}
 8003a52:	bf00      	nop
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	4603      	mov	r3, r0
 8003a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff ff31 	bl	80038d0 <__NVIC_EnableIRQ>
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff ffa2 	bl	80039c8 <SysTick_Config>
 8003a84:	4603      	mov	r3, r0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e098      	b.n	8003bd4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4b4d      	ldr	r3, [pc, #308]	; (8003be0 <HAL_DMA_Init+0x150>)
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d80f      	bhi.n	8003ace <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	4b4b      	ldr	r3, [pc, #300]	; (8003be4 <HAL_DMA_Init+0x154>)
 8003ab6:	4413      	add	r3, r2
 8003ab8:	4a4b      	ldr	r2, [pc, #300]	; (8003be8 <HAL_DMA_Init+0x158>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	009a      	lsls	r2, r3, #2
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a48      	ldr	r2, [pc, #288]	; (8003bec <HAL_DMA_Init+0x15c>)
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
 8003acc:	e00e      	b.n	8003aec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	4b46      	ldr	r3, [pc, #280]	; (8003bf0 <HAL_DMA_Init+0x160>)
 8003ad6:	4413      	add	r3, r2
 8003ad8:	4a43      	ldr	r2, [pc, #268]	; (8003be8 <HAL_DMA_Init+0x158>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	009a      	lsls	r2, r3, #2
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a42      	ldr	r2, [pc, #264]	; (8003bf4 <HAL_DMA_Init+0x164>)
 8003aea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b46:	d039      	beq.n	8003bbc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	4a27      	ldr	r2, [pc, #156]	; (8003bec <HAL_DMA_Init+0x15c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d11a      	bne.n	8003b88 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b52:	4b29      	ldr	r3, [pc, #164]	; (8003bf8 <HAL_DMA_Init+0x168>)
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	f003 031c 	and.w	r3, r3, #28
 8003b5e:	210f      	movs	r1, #15
 8003b60:	fa01 f303 	lsl.w	r3, r1, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	4924      	ldr	r1, [pc, #144]	; (8003bf8 <HAL_DMA_Init+0x168>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b6c:	4b22      	ldr	r3, [pc, #136]	; (8003bf8 <HAL_DMA_Init+0x168>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b78:	f003 031c 	and.w	r3, r3, #28
 8003b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b80:	491d      	ldr	r1, [pc, #116]	; (8003bf8 <HAL_DMA_Init+0x168>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	600b      	str	r3, [r1, #0]
 8003b86:	e019      	b.n	8003bbc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b88:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <HAL_DMA_Init+0x16c>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	f003 031c 	and.w	r3, r3, #28
 8003b94:	210f      	movs	r1, #15
 8003b96:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	4917      	ldr	r1, [pc, #92]	; (8003bfc <HAL_DMA_Init+0x16c>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ba2:	4b16      	ldr	r3, [pc, #88]	; (8003bfc <HAL_DMA_Init+0x16c>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6859      	ldr	r1, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	f003 031c 	and.w	r3, r3, #28
 8003bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb6:	4911      	ldr	r1, [pc, #68]	; (8003bfc <HAL_DMA_Init+0x16c>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	40020407 	.word	0x40020407
 8003be4:	bffdfff8 	.word	0xbffdfff8
 8003be8:	cccccccd 	.word	0xcccccccd
 8003bec:	40020000 	.word	0x40020000
 8003bf0:	bffdfbf8 	.word	0xbffdfbf8
 8003bf4:	40020400 	.word	0x40020400
 8003bf8:	400200a8 	.word	0x400200a8
 8003bfc:	400204a8 	.word	0x400204a8

08003c00 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e072      	b.n	8003cf8 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	4b36      	ldr	r3, [pc, #216]	; (8003d04 <HAL_DMA_DeInit+0x104>)
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d80f      	bhi.n	8003c4e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	4b34      	ldr	r3, [pc, #208]	; (8003d08 <HAL_DMA_DeInit+0x108>)
 8003c36:	4413      	add	r3, r2
 8003c38:	4a34      	ldr	r2, [pc, #208]	; (8003d0c <HAL_DMA_DeInit+0x10c>)
 8003c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	009a      	lsls	r2, r3, #2
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a31      	ldr	r2, [pc, #196]	; (8003d10 <HAL_DMA_DeInit+0x110>)
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40
 8003c4c:	e00e      	b.n	8003c6c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	4b2f      	ldr	r3, [pc, #188]	; (8003d14 <HAL_DMA_DeInit+0x114>)
 8003c56:	4413      	add	r3, r2
 8003c58:	4a2c      	ldr	r2, [pc, #176]	; (8003d0c <HAL_DMA_DeInit+0x10c>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	009a      	lsls	r2, r3, #2
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a2b      	ldr	r2, [pc, #172]	; (8003d18 <HAL_DMA_DeInit+0x118>)
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c78:	f003 021c 	and.w	r2, r3, #28
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	2101      	movs	r1, #1
 8003c82:	fa01 f202 	lsl.w	r2, r1, r2
 8003c86:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	4a20      	ldr	r2, [pc, #128]	; (8003d10 <HAL_DMA_DeInit+0x110>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d10d      	bne.n	8003cae <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c92:	4b22      	ldr	r3, [pc, #136]	; (8003d1c <HAL_DMA_DeInit+0x11c>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	f003 031c 	and.w	r3, r3, #28
 8003c9e:	210f      	movs	r1, #15
 8003ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	491d      	ldr	r1, [pc, #116]	; (8003d1c <HAL_DMA_DeInit+0x11c>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	600b      	str	r3, [r1, #0]
 8003cac:	e00c      	b.n	8003cc8 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003cae:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <HAL_DMA_DeInit+0x120>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	f003 031c 	and.w	r3, r3, #28
 8003cba:	210f      	movs	r1, #15
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	4917      	ldr	r1, [pc, #92]	; (8003d20 <HAL_DMA_DeInit+0x120>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	40020407 	.word	0x40020407
 8003d08:	bffdfff8 	.word	0xbffdfff8
 8003d0c:	cccccccd 	.word	0xcccccccd
 8003d10:	40020000 	.word	0x40020000
 8003d14:	bffdfbf8 	.word	0xbffdfbf8
 8003d18:	40020400 	.word	0x40020400
 8003d1c:	400200a8 	.word	0x400200a8
 8003d20:	400204a8 	.word	0x400204a8

08003d24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_DMA_Start_IT+0x20>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e04b      	b.n	8003ddc <HAL_DMA_Start_IT+0xb8>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d13a      	bne.n	8003dce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0201 	bic.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f8e0 	bl	8003f42 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d008      	beq.n	8003d9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 020e 	orr.w	r2, r2, #14
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	e00f      	b.n	8003dbc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0204 	bic.w	r2, r2, #4
 8003daa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 020a 	orr.w	r2, r2, #10
 8003dba:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	e005      	b.n	8003dda <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e00:	f003 031c 	and.w	r3, r3, #28
 8003e04:	2204      	movs	r2, #4
 8003e06:	409a      	lsls	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d026      	beq.n	8003e5e <HAL_DMA_IRQHandler+0x7a>
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d021      	beq.n	8003e5e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d107      	bne.n	8003e38 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0204 	bic.w	r2, r2, #4
 8003e36:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	f003 021c 	and.w	r2, r3, #28
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	2104      	movs	r1, #4
 8003e46:	fa01 f202 	lsl.w	r2, r1, r2
 8003e4a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d071      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003e5c:	e06c      	b.n	8003f38 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	f003 031c 	and.w	r3, r3, #28
 8003e66:	2202      	movs	r2, #2
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d02e      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0xec>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d029      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10b      	bne.n	8003ea2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 020a 	bic.w	r2, r2, #10
 8003e98:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	f003 021c 	and.w	r2, r3, #28
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	2102      	movs	r1, #2
 8003eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d038      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003ece:	e033      	b.n	8003f38 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed4:	f003 031c 	and.w	r3, r3, #28
 8003ed8:	2208      	movs	r2, #8
 8003eda:	409a      	lsls	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d02a      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x156>
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d025      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 020e 	bic.w	r2, r2, #14
 8003efc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	f003 021c 	and.w	r2, r3, #28
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f10:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d004      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
}
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b085      	sub	sp, #20
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	607a      	str	r2, [r7, #4]
 8003f4e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f54:	f003 021c 	and.w	r2, r3, #28
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f62:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2b10      	cmp	r3, #16
 8003f72:	d108      	bne.n	8003f86 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f84:	e007      	b.n	8003f96 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	60da      	str	r2, [r3, #12]
}
 8003f96:	bf00      	nop
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003fb6:	4b2f      	ldr	r3, [pc, #188]	; (8004074 <HAL_FLASH_Program+0xd0>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_FLASH_Program+0x1e>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e053      	b.n	800406a <HAL_FLASH_Program+0xc6>
 8003fc2:	4b2c      	ldr	r3, [pc, #176]	; (8004074 <HAL_FLASH_Program+0xd0>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003fc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fcc:	f000 f888 	bl	80040e0 <FLASH_WaitForLastOperation>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d143      	bne.n	8004062 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003fda:	4b26      	ldr	r3, [pc, #152]	; (8004074 <HAL_FLASH_Program+0xd0>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003fe0:	4b25      	ldr	r3, [pc, #148]	; (8004078 <HAL_FLASH_Program+0xd4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d009      	beq.n	8004000 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003fec:	4b22      	ldr	r3, [pc, #136]	; (8004078 <HAL_FLASH_Program+0xd4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a21      	ldr	r2, [pc, #132]	; (8004078 <HAL_FLASH_Program+0xd4>)
 8003ff2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ff6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003ff8:	4b1e      	ldr	r3, [pc, #120]	; (8004074 <HAL_FLASH_Program+0xd0>)
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	771a      	strb	r2, [r3, #28]
 8003ffe:	e002      	b.n	8004006 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004000:	4b1c      	ldr	r3, [pc, #112]	; (8004074 <HAL_FLASH_Program+0xd0>)
 8004002:	2200      	movs	r2, #0
 8004004:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d107      	bne.n	800401c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800400c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004010:	68b8      	ldr	r0, [r7, #8]
 8004012:	f000 f8bd 	bl	8004190 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8004016:	2301      	movs	r3, #1
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	e010      	b.n	800403e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d002      	beq.n	8004028 <HAL_FLASH_Program+0x84>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d10a      	bne.n	800403e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	4619      	mov	r1, r3
 800402c:	68b8      	ldr	r0, [r7, #8]
 800402e:	f000 f8d3 	bl	80041d8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d102      	bne.n	800403e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8004038:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800403c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800403e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004042:	f000 f84d 	bl	80040e0 <FLASH_WaitForLastOperation>
 8004046:	4603      	mov	r3, r0
 8004048:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d006      	beq.n	800405e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8004050:	4b09      	ldr	r3, [pc, #36]	; (8004078 <HAL_FLASH_Program+0xd4>)
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	43db      	mvns	r3, r3
 8004058:	4907      	ldr	r1, [pc, #28]	; (8004078 <HAL_FLASH_Program+0xd4>)
 800405a:	4013      	ands	r3, r2
 800405c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800405e:	f000 f9cf 	bl	8004400 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004062:	4b04      	ldr	r3, [pc, #16]	; (8004074 <HAL_FLASH_Program+0xd0>)
 8004064:	2200      	movs	r2, #0
 8004066:	701a      	strb	r2, [r3, #0]

  return status;
 8004068:	7dfb      	ldrb	r3, [r7, #23]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000010 	.word	0x20000010
 8004078:	40022000 	.word	0x40022000

0800407c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004086:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <HAL_FLASH_Unlock+0x38>)
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	da0b      	bge.n	80040a6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800408e:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <HAL_FLASH_Unlock+0x38>)
 8004090:	4a09      	ldr	r2, [pc, #36]	; (80040b8 <HAL_FLASH_Unlock+0x3c>)
 8004092:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004094:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <HAL_FLASH_Unlock+0x38>)
 8004096:	4a09      	ldr	r2, [pc, #36]	; (80040bc <HAL_FLASH_Unlock+0x40>)
 8004098:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800409a:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <HAL_FLASH_Unlock+0x38>)
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	da01      	bge.n	80040a6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80040a6:	79fb      	ldrb	r3, [r7, #7]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	40022000 	.word	0x40022000
 80040b8:	45670123 	.word	0x45670123
 80040bc:	cdef89ab 	.word	0xcdef89ab

080040c0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <HAL_FLASH_Lock+0x1c>)
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	4a04      	ldr	r2, [pc, #16]	; (80040dc <HAL_FLASH_Lock+0x1c>)
 80040ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040ce:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	40022000 	.word	0x40022000

080040e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80040e8:	f7fd fdb0 	bl	8001c4c <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80040ee:	e00d      	b.n	800410c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040f6:	d009      	beq.n	800410c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80040f8:	f7fd fda8 	bl	8001c4c <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	429a      	cmp	r2, r3
 8004106:	d801      	bhi.n	800410c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e036      	b.n	800417a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800410c:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <FLASH_WaitForLastOperation+0xa4>)
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1eb      	bne.n	80040f0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8004118:	4b1a      	ldr	r3, [pc, #104]	; (8004184 <FLASH_WaitForLastOperation+0xa4>)
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <FLASH_WaitForLastOperation+0xa8>)
 800411e:	4013      	ands	r3, r2
 8004120:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01e      	beq.n	8004166 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8004128:	4b18      	ldr	r3, [pc, #96]	; (800418c <FLASH_WaitForLastOperation+0xac>)
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4313      	orrs	r3, r2
 8004130:	4a16      	ldr	r2, [pc, #88]	; (800418c <FLASH_WaitForLastOperation+0xac>)
 8004132:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d007      	beq.n	800414e <FLASH_WaitForLastOperation+0x6e>
 800413e:	4b11      	ldr	r3, [pc, #68]	; (8004184 <FLASH_WaitForLastOperation+0xa4>)
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004148:	490e      	ldr	r1, [pc, #56]	; (8004184 <FLASH_WaitForLastOperation+0xa4>)
 800414a:	4313      	orrs	r3, r2
 800414c:	618b      	str	r3, [r1, #24]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d004      	beq.n	8004162 <FLASH_WaitForLastOperation+0x82>
 8004158:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <FLASH_WaitForLastOperation+0xa4>)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004160:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e009      	b.n	800417a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004166:	4b07      	ldr	r3, [pc, #28]	; (8004184 <FLASH_WaitForLastOperation+0xa4>)
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004172:	4b04      	ldr	r3, [pc, #16]	; (8004184 <FLASH_WaitForLastOperation+0xa4>)
 8004174:	2201      	movs	r2, #1
 8004176:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40022000 	.word	0x40022000
 8004188:	0002c3fa 	.word	0x0002c3fa
 800418c:	20000010 	.word	0x20000010

08004190 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004190:	b490      	push	{r4, r7}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800419c:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <FLASH_Program_DoubleWord+0x44>)
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	4a0c      	ldr	r2, [pc, #48]	; (80041d4 <FLASH_Program_DoubleWord+0x44>)
 80041a2:	f043 0301 	orr.w	r3, r3, #1
 80041a6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80041ae:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80041b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	f04f 0400 	mov.w	r4, #0
 80041be:	0013      	movs	r3, r2
 80041c0:	2400      	movs	r4, #0
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	3204      	adds	r2, #4
 80041c6:	6013      	str	r3, [r2, #0]
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc90      	pop	{r4, r7}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40022000 	.word	0x40022000

080041d8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80041d8:	b480      	push	{r7}
 80041da:	b089      	sub	sp, #36	; 0x24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80041e2:	2340      	movs	r3, #64	; 0x40
 80041e4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80041ee:	4b13      	ldr	r3, [pc, #76]	; (800423c <FLASH_Program_Fast+0x64>)
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	4a12      	ldr	r2, [pc, #72]	; (800423c <FLASH_Program_Fast+0x64>)
 80041f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041f8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041fa:	f3ef 8310 	mrs	r3, PRIMASK
 80041fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8004200:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8004202:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004204:	b672      	cpsid	i
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	3304      	adds	r3, #4
 8004212:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	3304      	adds	r3, #4
 8004218:	617b      	str	r3, [r7, #20]
    row_index--;
 800421a:	7ffb      	ldrb	r3, [r7, #31]
 800421c:	3b01      	subs	r3, #1
 800421e:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8004220:	7ffb      	ldrb	r3, [r7, #31]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1ef      	bne.n	8004206 <FLASH_Program_Fast+0x2e>
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f383 8810 	msr	PRIMASK, r3

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8004230:	bf00      	nop
 8004232:	3724      	adds	r7, #36	; 0x24
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	40022000 	.word	0x40022000

08004240 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800424a:	4b4a      	ldr	r3, [pc, #296]	; (8004374 <HAL_FLASHEx_Erase+0x134>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_FLASHEx_Erase+0x16>
 8004252:	2302      	movs	r3, #2
 8004254:	e089      	b.n	800436a <HAL_FLASHEx_Erase+0x12a>
 8004256:	4b47      	ldr	r3, [pc, #284]	; (8004374 <HAL_FLASHEx_Erase+0x134>)
 8004258:	2201      	movs	r2, #1
 800425a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800425c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004260:	f7ff ff3e 	bl	80040e0 <FLASH_WaitForLastOperation>
 8004264:	4603      	mov	r3, r0
 8004266:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d179      	bne.n	8004362 <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800426e:	4b41      	ldr	r3, [pc, #260]	; (8004374 <HAL_FLASHEx_Erase+0x134>)
 8004270:	2200      	movs	r2, #0
 8004272:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8004274:	4b40      	ldr	r3, [pc, #256]	; (8004378 <HAL_FLASHEx_Erase+0x138>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800427c:	2b00      	cmp	r3, #0
 800427e:	d019      	beq.n	80042b4 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004280:	4b3d      	ldr	r3, [pc, #244]	; (8004378 <HAL_FLASHEx_Erase+0x138>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a3c      	ldr	r2, [pc, #240]	; (8004378 <HAL_FLASHEx_Erase+0x138>)
 8004286:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800428a:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800428c:	4b3a      	ldr	r3, [pc, #232]	; (8004378 <HAL_FLASHEx_Erase+0x138>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004294:	2b00      	cmp	r3, #0
 8004296:	d009      	beq.n	80042ac <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8004298:	4b37      	ldr	r3, [pc, #220]	; (8004378 <HAL_FLASHEx_Erase+0x138>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a36      	ldr	r2, [pc, #216]	; (8004378 <HAL_FLASHEx_Erase+0x138>)
 800429e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80042a4:	4b33      	ldr	r3, [pc, #204]	; (8004374 <HAL_FLASHEx_Erase+0x134>)
 80042a6:	2203      	movs	r2, #3
 80042a8:	771a      	strb	r2, [r3, #28]
 80042aa:	e016      	b.n	80042da <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80042ac:	4b31      	ldr	r3, [pc, #196]	; (8004374 <HAL_FLASHEx_Erase+0x134>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	771a      	strb	r2, [r3, #28]
 80042b2:	e012      	b.n	80042da <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80042b4:	4b30      	ldr	r3, [pc, #192]	; (8004378 <HAL_FLASHEx_Erase+0x138>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d009      	beq.n	80042d4 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80042c0:	4b2d      	ldr	r3, [pc, #180]	; (8004378 <HAL_FLASHEx_Erase+0x138>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a2c      	ldr	r2, [pc, #176]	; (8004378 <HAL_FLASHEx_Erase+0x138>)
 80042c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042ca:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80042cc:	4b29      	ldr	r3, [pc, #164]	; (8004374 <HAL_FLASHEx_Erase+0x134>)
 80042ce:	2202      	movs	r2, #2
 80042d0:	771a      	strb	r2, [r3, #28]
 80042d2:	e002      	b.n	80042da <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80042d4:	4b27      	ldr	r3, [pc, #156]	; (8004374 <HAL_FLASHEx_Erase+0x134>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d111      	bne.n	8004306 <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 f848 	bl	800437c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80042f0:	f7ff fef6 	bl	80040e0 <FLASH_WaitForLastOperation>
 80042f4:	4603      	mov	r3, r0
 80042f6:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80042f8:	4b1f      	ldr	r3, [pc, #124]	; (8004378 <HAL_FLASHEx_Erase+0x138>)
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	4a1e      	ldr	r2, [pc, #120]	; (8004378 <HAL_FLASHEx_Erase+0x138>)
 80042fe:	f023 0304 	bic.w	r3, r3, #4
 8004302:	6153      	str	r3, [r2, #20]
 8004304:	e02b      	b.n	800435e <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800430c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	60bb      	str	r3, [r7, #8]
 8004314:	e01b      	b.n	800434e <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	4619      	mov	r1, r3
 800431c:	68b8      	ldr	r0, [r7, #8]
 800431e:	f000 f84b 	bl	80043b8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004322:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004326:	f7ff fedb 	bl	80040e0 <FLASH_WaitForLastOperation>
 800432a:	4603      	mov	r3, r0
 800432c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800432e:	4b12      	ldr	r3, [pc, #72]	; (8004378 <HAL_FLASHEx_Erase+0x138>)
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	4a11      	ldr	r2, [pc, #68]	; (8004378 <HAL_FLASHEx_Erase+0x138>)
 8004334:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8004338:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	601a      	str	r2, [r3, #0]
          break;
 8004346:	e00a      	b.n	800435e <HAL_FLASHEx_Erase+0x11e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	3301      	adds	r3, #1
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	4413      	add	r3, r2
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	429a      	cmp	r2, r3
 800435c:	d3db      	bcc.n	8004316 <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800435e:	f000 f84f 	bl	8004400 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004362:	4b04      	ldr	r3, [pc, #16]	; (8004374 <HAL_FLASHEx_Erase+0x134>)
 8004364:	2200      	movs	r2, #0
 8004366:	701a      	strb	r2, [r3, #0]

  return status;
 8004368:	7bfb      	ldrb	r3, [r7, #15]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20000010 	.word	0x20000010
 8004378:	40022000 	.word	0x40022000

0800437c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800438e:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <FLASH_MassErase+0x38>)
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	4a08      	ldr	r2, [pc, #32]	; (80043b4 <FLASH_MassErase+0x38>)
 8004394:	f043 0304 	orr.w	r3, r3, #4
 8004398:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800439a:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <FLASH_MassErase+0x38>)
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	4a05      	ldr	r2, [pc, #20]	; (80043b4 <FLASH_MassErase+0x38>)
 80043a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a4:	6153      	str	r3, [r2, #20]
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40022000 	.word	0x40022000

080043b8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80043c2:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <FLASH_PageErase+0x44>)
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80043d2:	490a      	ldr	r1, [pc, #40]	; (80043fc <FLASH_PageErase+0x44>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80043d8:	4b08      	ldr	r3, [pc, #32]	; (80043fc <FLASH_PageErase+0x44>)
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	4a07      	ldr	r2, [pc, #28]	; (80043fc <FLASH_PageErase+0x44>)
 80043de:	f043 0302 	orr.w	r3, r3, #2
 80043e2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <FLASH_PageErase+0x44>)
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	4a04      	ldr	r2, [pc, #16]	; (80043fc <FLASH_PageErase+0x44>)
 80043ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ee:	6153      	str	r3, [r2, #20]
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	40022000 	.word	0x40022000

08004400 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004406:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <FLASH_FlushCaches+0x80>)
 8004408:	7f1b      	ldrb	r3, [r3, #28]
 800440a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d002      	beq.n	8004418 <FLASH_FlushCaches+0x18>
 8004412:	79fb      	ldrb	r3, [r7, #7]
 8004414:	2b03      	cmp	r3, #3
 8004416:	d111      	bne.n	800443c <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004418:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <FLASH_FlushCaches+0x84>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a19      	ldr	r2, [pc, #100]	; (8004484 <FLASH_FlushCaches+0x84>)
 800441e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	4b17      	ldr	r3, [pc, #92]	; (8004484 <FLASH_FlushCaches+0x84>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a16      	ldr	r2, [pc, #88]	; (8004484 <FLASH_FlushCaches+0x84>)
 800442a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800442e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004430:	4b14      	ldr	r3, [pc, #80]	; (8004484 <FLASH_FlushCaches+0x84>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a13      	ldr	r2, [pc, #76]	; (8004484 <FLASH_FlushCaches+0x84>)
 8004436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800443a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d002      	beq.n	8004448 <FLASH_FlushCaches+0x48>
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	2b03      	cmp	r3, #3
 8004446:	d111      	bne.n	800446c <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004448:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <FLASH_FlushCaches+0x84>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a0d      	ldr	r2, [pc, #52]	; (8004484 <FLASH_FlushCaches+0x84>)
 800444e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <FLASH_FlushCaches+0x84>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a0a      	ldr	r2, [pc, #40]	; (8004484 <FLASH_FlushCaches+0x84>)
 800445a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800445e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004460:	4b08      	ldr	r3, [pc, #32]	; (8004484 <FLASH_FlushCaches+0x84>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a07      	ldr	r2, [pc, #28]	; (8004484 <FLASH_FlushCaches+0x84>)
 8004466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800446a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800446c:	4b04      	ldr	r3, [pc, #16]	; (8004480 <FLASH_FlushCaches+0x80>)
 800446e:	2200      	movs	r2, #0
 8004470:	771a      	strb	r2, [r3, #28]
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	20000010 	.word	0x20000010
 8004484:	40022000 	.word	0x40022000

08004488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004496:	e14e      	b.n	8004736 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	2101      	movs	r1, #1
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	fa01 f303 	lsl.w	r3, r1, r3
 80044a4:	4013      	ands	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 8140 	beq.w	8004730 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d00b      	beq.n	80044d0 <HAL_GPIO_Init+0x48>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d007      	beq.n	80044d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044c4:	2b11      	cmp	r3, #17
 80044c6:	d003      	beq.n	80044d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b12      	cmp	r3, #18
 80044ce:	d130      	bne.n	8004532 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	2203      	movs	r2, #3
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	43db      	mvns	r3, r3
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4013      	ands	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004506:	2201      	movs	r2, #1
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	43db      	mvns	r3, r3
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4013      	ands	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	091b      	lsrs	r3, r3, #4
 800451c:	f003 0201 	and.w	r2, r3, #1
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	2203      	movs	r2, #3
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	43db      	mvns	r3, r3
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4013      	ands	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d003      	beq.n	8004572 <HAL_GPIO_Init+0xea>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b12      	cmp	r3, #18
 8004570:	d123      	bne.n	80045ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	08da      	lsrs	r2, r3, #3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3208      	adds	r2, #8
 800457a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800457e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	220f      	movs	r2, #15
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	43db      	mvns	r3, r3
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4013      	ands	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	691a      	ldr	r2, [r3, #16]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	08da      	lsrs	r2, r3, #3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3208      	adds	r2, #8
 80045b4:	6939      	ldr	r1, [r7, #16]
 80045b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	2203      	movs	r2, #3
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43db      	mvns	r3, r3
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4013      	ands	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f003 0203 	and.w	r2, r3, #3
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 809a 	beq.w	8004730 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045fc:	4b55      	ldr	r3, [pc, #340]	; (8004754 <HAL_GPIO_Init+0x2cc>)
 80045fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004600:	4a54      	ldr	r2, [pc, #336]	; (8004754 <HAL_GPIO_Init+0x2cc>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	6613      	str	r3, [r2, #96]	; 0x60
 8004608:	4b52      	ldr	r3, [pc, #328]	; (8004754 <HAL_GPIO_Init+0x2cc>)
 800460a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004614:	4a50      	ldr	r2, [pc, #320]	; (8004758 <HAL_GPIO_Init+0x2d0>)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	089b      	lsrs	r3, r3, #2
 800461a:	3302      	adds	r3, #2
 800461c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004620:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	220f      	movs	r2, #15
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	43db      	mvns	r3, r3
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4013      	ands	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800463e:	d013      	beq.n	8004668 <HAL_GPIO_Init+0x1e0>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a46      	ldr	r2, [pc, #280]	; (800475c <HAL_GPIO_Init+0x2d4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00d      	beq.n	8004664 <HAL_GPIO_Init+0x1dc>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a45      	ldr	r2, [pc, #276]	; (8004760 <HAL_GPIO_Init+0x2d8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d007      	beq.n	8004660 <HAL_GPIO_Init+0x1d8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a44      	ldr	r2, [pc, #272]	; (8004764 <HAL_GPIO_Init+0x2dc>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d101      	bne.n	800465c <HAL_GPIO_Init+0x1d4>
 8004658:	2303      	movs	r3, #3
 800465a:	e006      	b.n	800466a <HAL_GPIO_Init+0x1e2>
 800465c:	2307      	movs	r3, #7
 800465e:	e004      	b.n	800466a <HAL_GPIO_Init+0x1e2>
 8004660:	2302      	movs	r3, #2
 8004662:	e002      	b.n	800466a <HAL_GPIO_Init+0x1e2>
 8004664:	2301      	movs	r3, #1
 8004666:	e000      	b.n	800466a <HAL_GPIO_Init+0x1e2>
 8004668:	2300      	movs	r3, #0
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	f002 0203 	and.w	r2, r2, #3
 8004670:	0092      	lsls	r2, r2, #2
 8004672:	4093      	lsls	r3, r2
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800467a:	4937      	ldr	r1, [pc, #220]	; (8004758 <HAL_GPIO_Init+0x2d0>)
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	089b      	lsrs	r3, r3, #2
 8004680:	3302      	adds	r3, #2
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004688:	4b37      	ldr	r3, [pc, #220]	; (8004768 <HAL_GPIO_Init+0x2e0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	43db      	mvns	r3, r3
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4013      	ands	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046ac:	4a2e      	ldr	r2, [pc, #184]	; (8004768 <HAL_GPIO_Init+0x2e0>)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80046b2:	4b2d      	ldr	r3, [pc, #180]	; (8004768 <HAL_GPIO_Init+0x2e0>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	43db      	mvns	r3, r3
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4013      	ands	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046d6:	4a24      	ldr	r2, [pc, #144]	; (8004768 <HAL_GPIO_Init+0x2e0>)
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046dc:	4b22      	ldr	r3, [pc, #136]	; (8004768 <HAL_GPIO_Init+0x2e0>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	43db      	mvns	r3, r3
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4013      	ands	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004700:	4a19      	ldr	r2, [pc, #100]	; (8004768 <HAL_GPIO_Init+0x2e0>)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004706:	4b18      	ldr	r3, [pc, #96]	; (8004768 <HAL_GPIO_Init+0x2e0>)
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	43db      	mvns	r3, r3
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4013      	ands	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800472a:	4a0f      	ldr	r2, [pc, #60]	; (8004768 <HAL_GPIO_Init+0x2e0>)
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	3301      	adds	r3, #1
 8004734:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	fa22 f303 	lsr.w	r3, r2, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	f47f aea9 	bne.w	8004498 <HAL_GPIO_Init+0x10>
  }
}
 8004746:	bf00      	nop
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	40010000 	.word	0x40010000
 800475c:	48000400 	.word	0x48000400
 8004760:	48000800 	.word	0x48000800
 8004764:	48000c00 	.word	0x48000c00
 8004768:	40010400 	.word	0x40010400

0800476c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800476c:	b480      	push	{r7}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800477a:	e0b1      	b.n	80048e0 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800477c:	2201      	movs	r2, #1
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	4013      	ands	r3, r2
 8004788:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80a4 	beq.w	80048da <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004792:	4a5a      	ldr	r2, [pc, #360]	; (80048fc <HAL_GPIO_DeInit+0x190>)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	089b      	lsrs	r3, r3, #2
 8004798:	3302      	adds	r3, #2
 800479a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	220f      	movs	r2, #15
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4013      	ands	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80047ba:	d013      	beq.n	80047e4 <HAL_GPIO_DeInit+0x78>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a50      	ldr	r2, [pc, #320]	; (8004900 <HAL_GPIO_DeInit+0x194>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00d      	beq.n	80047e0 <HAL_GPIO_DeInit+0x74>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a4f      	ldr	r2, [pc, #316]	; (8004904 <HAL_GPIO_DeInit+0x198>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d007      	beq.n	80047dc <HAL_GPIO_DeInit+0x70>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a4e      	ldr	r2, [pc, #312]	; (8004908 <HAL_GPIO_DeInit+0x19c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d101      	bne.n	80047d8 <HAL_GPIO_DeInit+0x6c>
 80047d4:	2303      	movs	r3, #3
 80047d6:	e006      	b.n	80047e6 <HAL_GPIO_DeInit+0x7a>
 80047d8:	2307      	movs	r3, #7
 80047da:	e004      	b.n	80047e6 <HAL_GPIO_DeInit+0x7a>
 80047dc:	2302      	movs	r3, #2
 80047de:	e002      	b.n	80047e6 <HAL_GPIO_DeInit+0x7a>
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <HAL_GPIO_DeInit+0x7a>
 80047e4:	2300      	movs	r3, #0
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	f002 0203 	and.w	r2, r2, #3
 80047ec:	0092      	lsls	r2, r2, #2
 80047ee:	4093      	lsls	r3, r2
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d132      	bne.n	800485c <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80047f6:	4b45      	ldr	r3, [pc, #276]	; (800490c <HAL_GPIO_DeInit+0x1a0>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	43db      	mvns	r3, r3
 80047fe:	4943      	ldr	r1, [pc, #268]	; (800490c <HAL_GPIO_DeInit+0x1a0>)
 8004800:	4013      	ands	r3, r2
 8004802:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004804:	4b41      	ldr	r3, [pc, #260]	; (800490c <HAL_GPIO_DeInit+0x1a0>)
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	43db      	mvns	r3, r3
 800480c:	493f      	ldr	r1, [pc, #252]	; (800490c <HAL_GPIO_DeInit+0x1a0>)
 800480e:	4013      	ands	r3, r2
 8004810:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004812:	4b3e      	ldr	r3, [pc, #248]	; (800490c <HAL_GPIO_DeInit+0x1a0>)
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	43db      	mvns	r3, r3
 800481a:	493c      	ldr	r1, [pc, #240]	; (800490c <HAL_GPIO_DeInit+0x1a0>)
 800481c:	4013      	ands	r3, r2
 800481e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8004820:	4b3a      	ldr	r3, [pc, #232]	; (800490c <HAL_GPIO_DeInit+0x1a0>)
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	43db      	mvns	r3, r3
 8004828:	4938      	ldr	r1, [pc, #224]	; (800490c <HAL_GPIO_DeInit+0x1a0>)
 800482a:	4013      	ands	r3, r2
 800482c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	220f      	movs	r2, #15
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800483e:	4a2f      	ldr	r2, [pc, #188]	; (80048fc <HAL_GPIO_DeInit+0x190>)
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	089b      	lsrs	r3, r3, #2
 8004844:	3302      	adds	r3, #2
 8004846:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	43da      	mvns	r2, r3
 800484e:	482b      	ldr	r0, [pc, #172]	; (80048fc <HAL_GPIO_DeInit+0x190>)
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	400a      	ands	r2, r1
 8004856:	3302      	adds	r3, #2
 8004858:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	2103      	movs	r1, #3
 8004866:	fa01 f303 	lsl.w	r3, r1, r3
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	08da      	lsrs	r2, r3, #3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3208      	adds	r2, #8
 8004878:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	220f      	movs	r2, #15
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	43db      	mvns	r3, r3
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	08d2      	lsrs	r2, r2, #3
 8004890:	4019      	ands	r1, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3208      	adds	r2, #8
 8004896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	2103      	movs	r1, #3
 80048a4:	fa01 f303 	lsl.w	r3, r1, r3
 80048a8:	43db      	mvns	r3, r3
 80048aa:	401a      	ands	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	2101      	movs	r1, #1
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	fa01 f303 	lsl.w	r3, r1, r3
 80048bc:	43db      	mvns	r3, r3
 80048be:	401a      	ands	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	2103      	movs	r1, #3
 80048ce:	fa01 f303 	lsl.w	r3, r1, r3
 80048d2:	43db      	mvns	r3, r3
 80048d4:	401a      	ands	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	3301      	adds	r3, #1
 80048de:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f47f af47 	bne.w	800477c <HAL_GPIO_DeInit+0x10>
  }
}
 80048ee:	bf00      	nop
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40010000 	.word	0x40010000
 8004900:	48000400 	.word	0x48000400
 8004904:	48000800 	.word	0x48000800
 8004908:	48000c00 	.word	0x48000c00
 800490c:	40010400 	.word	0x40010400

08004910 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	887b      	ldrh	r3, [r7, #2]
 8004922:	4013      	ands	r3, r2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004928:	2301      	movs	r3, #1
 800492a:	73fb      	strb	r3, [r7, #15]
 800492c:	e001      	b.n	8004932 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800492e:	2300      	movs	r3, #0
 8004930:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004932:	7bfb      	ldrb	r3, [r7, #15]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	807b      	strh	r3, [r7, #2]
 800494c:	4613      	mov	r3, r2
 800494e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004950:	787b      	ldrb	r3, [r7, #1]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004956:	887a      	ldrh	r2, [r7, #2]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800495c:	e002      	b.n	8004964 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800495e:	887a      	ldrh	r2, [r7, #2]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e0a9      	b.n	8004ad6 <HAL_LPTIM_Init+0x166>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_LPTIM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fc fd42 	bl	8001420 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if defined(LPTIM_RCR_REP)

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691a      	ldr	r2, [r3, #16]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049bc:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80049c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fa49 	bl	8004e64 <LPTIM_WaitForFlag>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d101      	bne.n	80049dc <HAL_LPTIM_Init+0x6c>
  {
    return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e07c      	b.n	8004ad6 <HAL_LPTIM_Init+0x166>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fa71 	bl	8004ec4 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fa30 	bl	8004e48 <HAL_LPTIM_GetState>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d101      	bne.n	80049f2 <HAL_LPTIM_Init+0x82>
  {
    return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e071      	b.n	8004ad6 <HAL_LPTIM_Init+0x166>
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	60fb      	str	r3, [r7, #12]

  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d103      	bne.n	8004a0a <HAL_LPTIM_Init+0x9a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f023 0306 	bic.w	r3, r3, #6
 8004a08:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d003      	beq.n	8004a1e <HAL_LPTIM_Init+0xae>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004a1c:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d103      	bne.n	8004a2e <HAL_LPTIM_Init+0xbe>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_CKFLT));
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f023 03d8 	bic.w	r3, r3, #216	; 0xd8
 8004a2c:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4b2b      	ldr	r3, [pc, #172]	; (8004ae0 <HAL_LPTIM_Init+0x170>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004a3e:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004a44:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004a4a:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004a50:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d107      	bne.n	8004a70 <HAL_LPTIM_Init+0x100>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the active edge or edges used by the counter only if LPTIM is
   * clocked by an external clock source
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d104      	bne.n	8004a82 <HAL_LPTIM_Init+0x112>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
  }

  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d007      	beq.n	8004a9e <HAL_LPTIM_Init+0x12e>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8004a96:	4313      	orrs	r3, r2
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a0e      	ldr	r2, [pc, #56]	; (8004ae4 <HAL_LPTIM_Init+0x174>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d108      	bne.n	8004ac2 <HAL_LPTIM_Init+0x152>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	621a      	str	r2, [r3, #32]
 8004ac0:	e004      	b.n	8004acc <HAL_LPTIM_Init+0x15c>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004aca:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	ff19f1f8 	.word	0xff19f1f8
 8004ae4:	40007c00 	.word	0x40007c00

08004ae8 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2202      	movs	r2, #2
 8004af6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a3f      	ldr	r2, [pc, #252]	; (8004bfc <HAL_LPTIM_Counter_Start_IT+0x114>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d106      	bne.n	8004b12 <HAL_LPTIM_Counter_Start_IT+0x2a>
 8004b04:	4b3e      	ldr	r3, [pc, #248]	; (8004c00 <HAL_LPTIM_Counter_Start_IT+0x118>)
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	4a3d      	ldr	r2, [pc, #244]	; (8004c00 <HAL_LPTIM_Counter_Start_IT+0x118>)
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	6213      	str	r3, [r2, #32]
 8004b10:	e005      	b.n	8004b1e <HAL_LPTIM_Counter_Start_IT+0x36>
 8004b12:	4b3b      	ldr	r3, [pc, #236]	; (8004c00 <HAL_LPTIM_Counter_Start_IT+0x118>)
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	4a3a      	ldr	r2, [pc, #232]	; (8004c00 <HAL_LPTIM_Counter_Start_IT+0x118>)
 8004b18:	f043 0302 	orr.w	r3, r3, #2
 8004b1c:	6213      	str	r3, [r2, #32]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d00c      	beq.n	8004b40 <HAL_LPTIM_Counter_Start_IT+0x58>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b2e:	d107      	bne.n	8004b40 <HAL_LPTIM_Counter_Start_IT+0x58>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8004b3e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691a      	ldr	r2, [r3, #16]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0201 	orr.w	r2, r2, #1
 8004b4e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2210      	movs	r2, #16
 8004b56:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004b60:	2110      	movs	r1, #16
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f97e 	bl	8004e64 <LPTIM_WaitForFlag>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d101      	bne.n	8004b72 <HAL_LPTIM_Counter_Start_IT+0x8a>
  {
    return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e03f      	b.n	8004bf2 <HAL_LPTIM_Counter_Start_IT+0x10a>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f9a6 	bl	8004ec4 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f965 	bl	8004e48 <HAL_LPTIM_GetState>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d101      	bne.n	8004b88 <HAL_LPTIM_Counter_Start_IT+0xa0>
  {
    return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e034      	b.n	8004bf2 <HAL_LPTIM_Counter_Start_IT+0x10a>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0210 	orr.w	r2, r2, #16
 8004b96:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0202 	orr.w	r2, r2, #2
 8004ba6:	609a      	str	r2, [r3, #8]

#if defined(LPTIM_RCR_REP)
  /* Enable Rep Update Ok interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bb6:	609a      	str	r2, [r3, #8]

  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bc6:	609a      	str	r2, [r3, #8]

#endif
  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691a      	ldr	r2, [r3, #16]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0204 	orr.w	r2, r2, #4
 8004be6:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40007c00 	.word	0x40007c00
 8004c00:	40010400 	.word	0x40010400

08004c04 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d10d      	bne.n	8004c36 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d106      	bne.n	8004c36 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f8af 	bl	8004d94 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d10d      	bne.n	8004c60 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d106      	bne.n	8004c60 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2202      	movs	r2, #2
 8004c58:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f8a4 	bl	8004da8 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d10d      	bne.n	8004c8a <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d106      	bne.n	8004c8a <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2204      	movs	r2, #4
 8004c82:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f899 	bl	8004dbc <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d10d      	bne.n	8004cb4 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d106      	bne.n	8004cb4 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2208      	movs	r2, #8
 8004cac:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f88e 	bl	8004dd0 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0310 	and.w	r3, r3, #16
 8004cbe:	2b10      	cmp	r3, #16
 8004cc0:	d10d      	bne.n	8004cde <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 0310 	and.w	r3, r3, #16
 8004ccc:	2b10      	cmp	r3, #16
 8004cce:	d106      	bne.n	8004cde <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2210      	movs	r2, #16
 8004cd6:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f883 	bl	8004de4 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0320 	and.w	r3, r3, #32
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d10d      	bne.n	8004d08 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d106      	bne.n	8004d08 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f878 	bl	8004df8 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	d10d      	bne.n	8004d32 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b40      	cmp	r3, #64	; 0x40
 8004d22:	d106      	bne.n	8004d32 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2240      	movs	r2, #64	; 0x40
 8004d2a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f86d 	bl	8004e0c <HAL_LPTIM_DirectionDownCallback>
  }
#if defined(LPTIM_RCR_REP)

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3c:	2b80      	cmp	r3, #128	; 0x80
 8004d3e:	d10d      	bne.n	8004d5c <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4a:	2b80      	cmp	r3, #128	; 0x80
 8004d4c:	d106      	bne.n	8004d5c <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2280      	movs	r2, #128	; 0x80
 8004d54:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f862 	bl	8004e20 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d6a:	d10f      	bne.n	8004d8c <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7a:	d107      	bne.n	8004d8c <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d84:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f854 	bl	8004e34 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8004d8c:	bf00      	nop
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e56:	b2db      	uxtb	r3, r3
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004e72:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <LPTIM_WaitForFlag+0x58>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a12      	ldr	r2, [pc, #72]	; (8004ec0 <LPTIM_WaitForFlag+0x5c>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	0b9b      	lsrs	r3, r3, #14
 8004e7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e82:	fb02 f303 	mul.w	r3, r2, r3
 8004e86:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	73fb      	strb	r3, [r7, #15]
    }
  }
  while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d002      	beq.n	8004eae <LPTIM_WaitForFlag+0x4a>
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1ec      	bne.n	8004e88 <LPTIM_WaitForFlag+0x24>

  return result;
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	20000004 	.word	0x20000004
 8004ec0:	d1b71759 	.word	0xd1b71759

08004ec4 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08a      	sub	sp, #40	; 0x28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8004ed0:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a85      	ldr	r2, [pc, #532]	; (80050ec <LPTIM_Disable+0x228>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <LPTIM_Disable+0x20>
 8004edc:	4a84      	ldr	r2, [pc, #528]	; (80050f0 <LPTIM_Disable+0x22c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d007      	beq.n	8004ef2 <LPTIM_Disable+0x2e>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8004ee2:	e00d      	b.n	8004f00 <LPTIM_Disable+0x3c>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004ee4:	4b83      	ldr	r3, [pc, #524]	; (80050f4 <LPTIM_Disable+0x230>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eea:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004ef0:	e006      	b.n	8004f00 <LPTIM_Disable+0x3c>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004ef2:	4b80      	ldr	r3, [pc, #512]	; (80050f4 <LPTIM_Disable+0x230>)
 8004ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004efe:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	623b      	str	r3, [r7, #32]
  tmpCFGR = hlptim->Instance->CFGR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	61fb      	str	r3, [r7, #28]
  tmpCMP = hlptim->Instance->CMP;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	61bb      	str	r3, [r7, #24]
  tmpARR = hlptim->Instance->ARR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	617b      	str	r3, [r7, #20]
  tmpOR = hlptim->Instance->OR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	613b      	str	r3, [r7, #16]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2e:	60fb      	str	r3, [r7, #12]
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a6d      	ldr	r2, [pc, #436]	; (80050ec <LPTIM_Disable+0x228>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d003      	beq.n	8004f42 <LPTIM_Disable+0x7e>
 8004f3a:	4a6d      	ldr	r2, [pc, #436]	; (80050f0 <LPTIM_Disable+0x22c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00d      	beq.n	8004f5c <LPTIM_Disable+0x98>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8004f40:	e019      	b.n	8004f76 <LPTIM_Disable+0xb2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004f42:	4b6c      	ldr	r3, [pc, #432]	; (80050f4 <LPTIM_Disable+0x230>)
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	4a6b      	ldr	r2, [pc, #428]	; (80050f4 <LPTIM_Disable+0x230>)
 8004f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f4c:	6393      	str	r3, [r2, #56]	; 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004f4e:	4b69      	ldr	r3, [pc, #420]	; (80050f4 <LPTIM_Disable+0x230>)
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	4a68      	ldr	r2, [pc, #416]	; (80050f4 <LPTIM_Disable+0x230>)
 8004f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f58:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 8004f5a:	e00c      	b.n	8004f76 <LPTIM_Disable+0xb2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8004f5c:	4b65      	ldr	r3, [pc, #404]	; (80050f4 <LPTIM_Disable+0x230>)
 8004f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f60:	4a64      	ldr	r2, [pc, #400]	; (80050f4 <LPTIM_Disable+0x230>)
 8004f62:	f043 0320 	orr.w	r3, r3, #32
 8004f66:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8004f68:	4b62      	ldr	r3, [pc, #392]	; (80050f4 <LPTIM_Disable+0x230>)
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6c:	4a61      	ldr	r2, [pc, #388]	; (80050f4 <LPTIM_Disable+0x230>)
 8004f6e:	f023 0320 	bic.w	r3, r3, #32
 8004f72:	63d3      	str	r3, [r2, #60]	; 0x3c
      break;
 8004f74:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d106      	bne.n	8004f8a <LPTIM_Disable+0xc6>
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d103      	bne.n	8004f8a <LPTIM_Disable+0xc6>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 8096 	beq.w	80050b6 <LPTIM_Disable+0x1f2>
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a57      	ldr	r2, [pc, #348]	; (80050ec <LPTIM_Disable+0x228>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d003      	beq.n	8004f9c <LPTIM_Disable+0xd8>
 8004f94:	4a56      	ldr	r2, [pc, #344]	; (80050f0 <LPTIM_Disable+0x22c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d009      	beq.n	8004fae <LPTIM_Disable+0xea>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8004f9a:	e011      	b.n	8004fc0 <LPTIM_Disable+0xfc>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8004f9c:	4b55      	ldr	r3, [pc, #340]	; (80050f4 <LPTIM_Disable+0x230>)
 8004f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa2:	4a54      	ldr	r2, [pc, #336]	; (80050f4 <LPTIM_Disable+0x230>)
 8004fa4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8004fac:	e008      	b.n	8004fc0 <LPTIM_Disable+0xfc>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8004fae:	4b51      	ldr	r3, [pc, #324]	; (80050f4 <LPTIM_Disable+0x230>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	4a4f      	ldr	r2, [pc, #316]	; (80050f4 <LPTIM_Disable+0x230>)
 8004fb6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004fba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8004fbe:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d01a      	beq.n	8004ffc <LPTIM_Disable+0x138>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0201 	orr.w	r2, r2, #1
 8004fd4:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004fde:	2108      	movs	r1, #8
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff ff3f 	bl	8004e64 <LPTIM_WaitForFlag>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d103      	bne.n	8004ff4 <LPTIM_Disable+0x130>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2203      	movs	r2, #3
 8004ff0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01a      	beq.n	8005038 <LPTIM_Disable+0x174>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0201 	orr.w	r2, r2, #1
 8005010:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800501a:	2110      	movs	r1, #16
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff ff21 	bl	8004e64 <LPTIM_WaitForFlag>
 8005022:	4603      	mov	r3, r0
 8005024:	2b03      	cmp	r3, #3
 8005026:	d103      	bne.n	8005030 <LPTIM_Disable+0x16c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2203      	movs	r2, #3
 800502c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2210      	movs	r2, #16
 8005036:	605a      	str	r2, [r3, #4]
    }
#if defined(LPTIM_RCR_REP)

    if (tmpRCR != 0UL)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d01c      	beq.n	8005078 <LPTIM_Disable+0x1b4>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0201 	orr.w	r2, r2, #1
 800504c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8005056:	f44f 7180 	mov.w	r1, #256	; 0x100
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7ff ff02 	bl	8004e64 <LPTIM_WaitForFlag>
 8005060:	4603      	mov	r3, r0
 8005062:	2b03      	cmp	r3, #3
 8005064:	d103      	bne.n	800506e <LPTIM_Disable+0x1aa>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2203      	movs	r2, #3
 800506a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005076:	605a      	str	r2, [r3, #4]
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1b      	ldr	r2, [pc, #108]	; (80050ec <LPTIM_Disable+0x228>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d003      	beq.n	800508a <LPTIM_Disable+0x1c6>
 8005082:	4a1b      	ldr	r2, [pc, #108]	; (80050f0 <LPTIM_Disable+0x22c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00b      	beq.n	80050a0 <LPTIM_Disable+0x1dc>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8005088:	e016      	b.n	80050b8 <LPTIM_Disable+0x1f4>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800508a:	4b1a      	ldr	r3, [pc, #104]	; (80050f4 <LPTIM_Disable+0x230>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005090:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005094:	4917      	ldr	r1, [pc, #92]	; (80050f4 <LPTIM_Disable+0x230>)
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 800509e:	e00b      	b.n	80050b8 <LPTIM_Disable+0x1f4>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80050a0:	4b14      	ldr	r3, [pc, #80]	; (80050f4 <LPTIM_Disable+0x230>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050aa:	4912      	ldr	r1, [pc, #72]	; (80050f4 <LPTIM_Disable+0x230>)
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 80050b4:	e000      	b.n	80050b8 <LPTIM_Disable+0x1f4>
    }
  }
 80050b6:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691a      	ldr	r2, [r3, #16]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0201 	bic.w	r2, r2, #1
 80050c6:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6a3a      	ldr	r2, [r7, #32]
 80050ce:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	69fa      	ldr	r2, [r7, #28]
 80050d6:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 80050e0:	b662      	cpsie	i

  __enable_irq();
}
 80050e2:	bf00      	nop
 80050e4:	3728      	adds	r7, #40	; 0x28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40007c00 	.word	0x40007c00
 80050f0:	40009400 	.word	0x40009400
 80050f4:	40021000 	.word	0x40021000

080050f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80050fc:	4b04      	ldr	r3, [pc, #16]	; (8005110 <HAL_PWREx_GetVoltageRange+0x18>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005104:	4618      	mov	r0, r3
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40007000 	.word	0x40007000

08005114 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005122:	d130      	bne.n	8005186 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005124:	4b23      	ldr	r3, [pc, #140]	; (80051b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800512c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005130:	d038      	beq.n	80051a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005132:	4b20      	ldr	r3, [pc, #128]	; (80051b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800513a:	4a1e      	ldr	r2, [pc, #120]	; (80051b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800513c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005140:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005142:	4b1d      	ldr	r3, [pc, #116]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2232      	movs	r2, #50	; 0x32
 8005148:	fb02 f303 	mul.w	r3, r2, r3
 800514c:	4a1b      	ldr	r2, [pc, #108]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800514e:	fba2 2303 	umull	r2, r3, r2, r3
 8005152:	0c9b      	lsrs	r3, r3, #18
 8005154:	3301      	adds	r3, #1
 8005156:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005158:	e002      	b.n	8005160 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3b01      	subs	r3, #1
 800515e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005160:	4b14      	ldr	r3, [pc, #80]	; (80051b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800516c:	d102      	bne.n	8005174 <HAL_PWREx_ControlVoltageScaling+0x60>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f2      	bne.n	800515a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005174:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005180:	d110      	bne.n	80051a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e00f      	b.n	80051a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005186:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800518e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005192:	d007      	beq.n	80051a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005194:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800519c:	4a05      	ldr	r2, [pc, #20]	; (80051b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800519e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40007000 	.word	0x40007000
 80051b8:	20000004 	.word	0x20000004
 80051bc:	431bde83 	.word	0x431bde83

080051c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08a      	sub	sp, #40	; 0x28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d102      	bne.n	80051d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f000 bc56 	b.w	8005a80 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d4:	4ba1      	ldr	r3, [pc, #644]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 030c 	and.w	r3, r3, #12
 80051dc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051de:	4b9f      	ldr	r3, [pc, #636]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80e6 	beq.w	80053c2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d007      	beq.n	800520c <HAL_RCC_OscConfig+0x4c>
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	2b0c      	cmp	r3, #12
 8005200:	f040 808d 	bne.w	800531e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b01      	cmp	r3, #1
 8005208:	f040 8089 	bne.w	800531e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800520c:	4b93      	ldr	r3, [pc, #588]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d006      	beq.n	8005226 <HAL_RCC_OscConfig+0x66>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d102      	bne.n	8005226 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	f000 bc2d 	b.w	8005a80 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800522a:	4b8c      	ldr	r3, [pc, #560]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	d004      	beq.n	8005240 <HAL_RCC_OscConfig+0x80>
 8005236:	4b89      	ldr	r3, [pc, #548]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800523e:	e005      	b.n	800524c <HAL_RCC_OscConfig+0x8c>
 8005240:	4b86      	ldr	r3, [pc, #536]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005246:	091b      	lsrs	r3, r3, #4
 8005248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800524c:	4293      	cmp	r3, r2
 800524e:	d224      	bcs.n	800529a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fdbd 	bl	8005dd4 <RCC_SetFlashLatencyFromMSIRange>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	f000 bc0d 	b.w	8005a80 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005266:	4b7d      	ldr	r3, [pc, #500]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a7c      	ldr	r2, [pc, #496]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 800526c:	f043 0308 	orr.w	r3, r3, #8
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	4b7a      	ldr	r3, [pc, #488]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	4977      	ldr	r1, [pc, #476]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005280:	4313      	orrs	r3, r2
 8005282:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005284:	4b75      	ldr	r3, [pc, #468]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	021b      	lsls	r3, r3, #8
 8005292:	4972      	ldr	r1, [pc, #456]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005294:	4313      	orrs	r3, r2
 8005296:	604b      	str	r3, [r1, #4]
 8005298:	e025      	b.n	80052e6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800529a:	4b70      	ldr	r3, [pc, #448]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a6f      	ldr	r2, [pc, #444]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 80052a0:	f043 0308 	orr.w	r3, r3, #8
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	4b6d      	ldr	r3, [pc, #436]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	496a      	ldr	r1, [pc, #424]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052b8:	4b68      	ldr	r3, [pc, #416]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	021b      	lsls	r3, r3, #8
 80052c6:	4965      	ldr	r1, [pc, #404]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d109      	bne.n	80052e6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fd7c 	bl	8005dd4 <RCC_SetFlashLatencyFromMSIRange>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e3cc      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052e6:	f000 fcb3 	bl	8005c50 <HAL_RCC_GetSysClockFreq>
 80052ea:	4601      	mov	r1, r0
 80052ec:	4b5b      	ldr	r3, [pc, #364]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	091b      	lsrs	r3, r3, #4
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	4a5a      	ldr	r2, [pc, #360]	; (8005460 <HAL_RCC_OscConfig+0x2a0>)
 80052f8:	5cd3      	ldrb	r3, [r2, r3]
 80052fa:	f003 031f 	and.w	r3, r3, #31
 80052fe:	fa21 f303 	lsr.w	r3, r1, r3
 8005302:	4a58      	ldr	r2, [pc, #352]	; (8005464 <HAL_RCC_OscConfig+0x2a4>)
 8005304:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005306:	4b58      	ldr	r3, [pc, #352]	; (8005468 <HAL_RCC_OscConfig+0x2a8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f7fc fc4e 	bl	8001bac <HAL_InitTick>
 8005310:	4603      	mov	r3, r0
 8005312:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8005314:	7dfb      	ldrb	r3, [r7, #23]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d052      	beq.n	80053c0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800531a:	7dfb      	ldrb	r3, [r7, #23]
 800531c:	e3b0      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d032      	beq.n	800538c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005326:	4b4d      	ldr	r3, [pc, #308]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a4c      	ldr	r2, [pc, #304]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 800532c:	f043 0301 	orr.w	r3, r3, #1
 8005330:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005332:	f7fc fc8b 	bl	8001c4c <HAL_GetTick>
 8005336:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005338:	e008      	b.n	800534c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800533a:	f7fc fc87 	bl	8001c4c <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e399      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800534c:	4b43      	ldr	r3, [pc, #268]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0f0      	beq.n	800533a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005358:	4b40      	ldr	r3, [pc, #256]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a3f      	ldr	r2, [pc, #252]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 800535e:	f043 0308 	orr.w	r3, r3, #8
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	4b3d      	ldr	r3, [pc, #244]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	493a      	ldr	r1, [pc, #232]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005372:	4313      	orrs	r3, r2
 8005374:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005376:	4b39      	ldr	r3, [pc, #228]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	4935      	ldr	r1, [pc, #212]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005386:	4313      	orrs	r3, r2
 8005388:	604b      	str	r3, [r1, #4]
 800538a:	e01a      	b.n	80053c2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800538c:	4b33      	ldr	r3, [pc, #204]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a32      	ldr	r2, [pc, #200]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005392:	f023 0301 	bic.w	r3, r3, #1
 8005396:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005398:	f7fc fc58 	bl	8001c4c <HAL_GetTick>
 800539c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053a0:	f7fc fc54 	bl	8001c4c <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e366      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053b2:	4b2a      	ldr	r3, [pc, #168]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0x1e0>
 80053be:	e000      	b.n	80053c2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d073      	beq.n	80054b6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d005      	beq.n	80053e0 <HAL_RCC_OscConfig+0x220>
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	2b0c      	cmp	r3, #12
 80053d8:	d10e      	bne.n	80053f8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d10b      	bne.n	80053f8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e0:	4b1e      	ldr	r3, [pc, #120]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d063      	beq.n	80054b4 <HAL_RCC_OscConfig+0x2f4>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d15f      	bne.n	80054b4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e343      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005400:	d106      	bne.n	8005410 <HAL_RCC_OscConfig+0x250>
 8005402:	4b16      	ldr	r3, [pc, #88]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a15      	ldr	r2, [pc, #84]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	e01d      	b.n	800544c <HAL_RCC_OscConfig+0x28c>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005418:	d10c      	bne.n	8005434 <HAL_RCC_OscConfig+0x274>
 800541a:	4b10      	ldr	r3, [pc, #64]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a0f      	ldr	r2, [pc, #60]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	4b0d      	ldr	r3, [pc, #52]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a0c      	ldr	r2, [pc, #48]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 800542c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	e00b      	b.n	800544c <HAL_RCC_OscConfig+0x28c>
 8005434:	4b09      	ldr	r3, [pc, #36]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a08      	ldr	r2, [pc, #32]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 800543a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	4b06      	ldr	r3, [pc, #24]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a05      	ldr	r2, [pc, #20]	; (800545c <HAL_RCC_OscConfig+0x29c>)
 8005446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800544a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d01b      	beq.n	800548c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fc fbfa 	bl	8001c4c <HAL_GetTick>
 8005458:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800545a:	e010      	b.n	800547e <HAL_RCC_OscConfig+0x2be>
 800545c:	40021000 	.word	0x40021000
 8005460:	0800817c 	.word	0x0800817c
 8005464:	20000004 	.word	0x20000004
 8005468:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800546c:	f7fc fbee 	bl	8001c4c <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b64      	cmp	r3, #100	; 0x64
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e300      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800547e:	4ba0      	ldr	r3, [pc, #640]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f0      	beq.n	800546c <HAL_RCC_OscConfig+0x2ac>
 800548a:	e014      	b.n	80054b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548c:	f7fc fbde 	bl	8001c4c <HAL_GetTick>
 8005490:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005494:	f7fc fbda 	bl	8001c4c <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b64      	cmp	r3, #100	; 0x64
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e2ec      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054a6:	4b96      	ldr	r3, [pc, #600]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1f0      	bne.n	8005494 <HAL_RCC_OscConfig+0x2d4>
 80054b2:	e000      	b.n	80054b6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d060      	beq.n	8005584 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d005      	beq.n	80054d4 <HAL_RCC_OscConfig+0x314>
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	2b0c      	cmp	r3, #12
 80054cc:	d119      	bne.n	8005502 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d116      	bne.n	8005502 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054d4:	4b8a      	ldr	r3, [pc, #552]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <HAL_RCC_OscConfig+0x32c>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e2c9      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ec:	4b84      	ldr	r3, [pc, #528]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	061b      	lsls	r3, r3, #24
 80054fa:	4981      	ldr	r1, [pc, #516]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005500:	e040      	b.n	8005584 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d023      	beq.n	8005552 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800550a:	4b7d      	ldr	r3, [pc, #500]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a7c      	ldr	r2, [pc, #496]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 8005510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005516:	f7fc fb99 	bl	8001c4c <HAL_GetTick>
 800551a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800551e:	f7fc fb95 	bl	8001c4c <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e2a7      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005530:	4b73      	ldr	r3, [pc, #460]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0f0      	beq.n	800551e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800553c:	4b70      	ldr	r3, [pc, #448]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	061b      	lsls	r3, r3, #24
 800554a:	496d      	ldr	r1, [pc, #436]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 800554c:	4313      	orrs	r3, r2
 800554e:	604b      	str	r3, [r1, #4]
 8005550:	e018      	b.n	8005584 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005552:	4b6b      	ldr	r3, [pc, #428]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a6a      	ldr	r2, [pc, #424]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 8005558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800555c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555e:	f7fc fb75 	bl	8001c4c <HAL_GetTick>
 8005562:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005564:	e008      	b.n	8005578 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005566:	f7fc fb71 	bl	8001c4c <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e283      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005578:	4b61      	ldr	r3, [pc, #388]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1f0      	bne.n	8005566 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b00      	cmp	r3, #0
 800558e:	d07f      	beq.n	8005690 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d05f      	beq.n	8005658 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8005598:	4b59      	ldr	r3, [pc, #356]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 800559a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800559e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699a      	ldr	r2, [r3, #24]
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f003 0310 	and.w	r3, r3, #16
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d037      	beq.n	800561e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d006      	beq.n	80055c6 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e25c      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01b      	beq.n	8005608 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80055d0:	4b4b      	ldr	r3, [pc, #300]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 80055d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055d6:	4a4a      	ldr	r2, [pc, #296]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 80055d8:	f023 0301 	bic.w	r3, r3, #1
 80055dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055e0:	f7fc fb34 	bl	8001c4c <HAL_GetTick>
 80055e4:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055e8:	f7fc fb30 	bl	8001c4c <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b11      	cmp	r3, #17
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e242      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055fa:	4b41      	ldr	r3, [pc, #260]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 80055fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1ef      	bne.n	80055e8 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8005608:	4b3d      	ldr	r3, [pc, #244]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 800560a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800560e:	f023 0210 	bic.w	r2, r3, #16
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	493a      	ldr	r1, [pc, #232]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800561e:	4b38      	ldr	r3, [pc, #224]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 8005620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005624:	4a36      	ldr	r2, [pc, #216]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 8005626:	f043 0301 	orr.w	r3, r3, #1
 800562a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562e:	f7fc fb0d 	bl	8001c4c <HAL_GetTick>
 8005632:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005634:	e008      	b.n	8005648 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005636:	f7fc fb09 	bl	8001c4c <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b11      	cmp	r3, #17
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e21b      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005648:	4b2d      	ldr	r3, [pc, #180]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 800564a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0ef      	beq.n	8005636 <HAL_RCC_OscConfig+0x476>
 8005656:	e01b      	b.n	8005690 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005658:	4b29      	ldr	r3, [pc, #164]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 800565a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800565e:	4a28      	ldr	r2, [pc, #160]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 8005660:	f023 0301 	bic.w	r3, r3, #1
 8005664:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005668:	f7fc faf0 	bl	8001c4c <HAL_GetTick>
 800566c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005670:	f7fc faec 	bl	8001c4c <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b11      	cmp	r3, #17
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e1fe      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005682:	4b1f      	ldr	r3, [pc, #124]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 8005684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1ef      	bne.n	8005670 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 80c1 	beq.w	8005820 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800569e:	2300      	movs	r3, #0
 80056a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80056a4:	4b16      	ldr	r3, [pc, #88]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 80056a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10e      	bne.n	80056ce <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b0:	4b13      	ldr	r3, [pc, #76]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 80056b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b4:	4a12      	ldr	r2, [pc, #72]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 80056b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ba:	6593      	str	r3, [r2, #88]	; 0x58
 80056bc:	4b10      	ldr	r3, [pc, #64]	; (8005700 <HAL_RCC_OscConfig+0x540>)
 80056be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80056c8:	2301      	movs	r3, #1
 80056ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056ce:	4b0d      	ldr	r3, [pc, #52]	; (8005704 <HAL_RCC_OscConfig+0x544>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d11c      	bne.n	8005714 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056da:	4b0a      	ldr	r3, [pc, #40]	; (8005704 <HAL_RCC_OscConfig+0x544>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a09      	ldr	r2, [pc, #36]	; (8005704 <HAL_RCC_OscConfig+0x544>)
 80056e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056e6:	f7fc fab1 	bl	8001c4c <HAL_GetTick>
 80056ea:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056ec:	e00c      	b.n	8005708 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ee:	f7fc faad 	bl	8001c4c <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d905      	bls.n	8005708 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e1bf      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
 8005700:	40021000 	.word	0x40021000
 8005704:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005708:	4bb1      	ldr	r3, [pc, #708]	; (80059d0 <HAL_RCC_OscConfig+0x810>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0ec      	beq.n	80056ee <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d02c      	beq.n	800577a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8005720:	4bac      	ldr	r3, [pc, #688]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005732:	49a8      	ldr	r1, [pc, #672]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 0304 	and.w	r3, r3, #4
 8005742:	2b00      	cmp	r3, #0
 8005744:	d010      	beq.n	8005768 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005746:	4ba3      	ldr	r3, [pc, #652]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 8005748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574c:	4aa1      	ldr	r2, [pc, #644]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 800574e:	f043 0304 	orr.w	r3, r3, #4
 8005752:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005756:	4b9f      	ldr	r3, [pc, #636]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 8005758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575c:	4a9d      	ldr	r2, [pc, #628]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005766:	e018      	b.n	800579a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005768:	4b9a      	ldr	r3, [pc, #616]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 800576a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576e:	4a99      	ldr	r2, [pc, #612]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 8005770:	f043 0301 	orr.w	r3, r3, #1
 8005774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005778:	e00f      	b.n	800579a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800577a:	4b96      	ldr	r3, [pc, #600]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 800577c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005780:	4a94      	ldr	r2, [pc, #592]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 8005782:	f023 0301 	bic.w	r3, r3, #1
 8005786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800578a:	4b92      	ldr	r3, [pc, #584]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 800578c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005790:	4a90      	ldr	r2, [pc, #576]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 8005792:	f023 0304 	bic.w	r3, r3, #4
 8005796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d016      	beq.n	80057d0 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a2:	f7fc fa53 	bl	8001c4c <HAL_GetTick>
 80057a6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057a8:	e00a      	b.n	80057c0 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057aa:	f7fc fa4f 	bl	8001c4c <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e15f      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057c0:	4b84      	ldr	r3, [pc, #528]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 80057c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0ed      	beq.n	80057aa <HAL_RCC_OscConfig+0x5ea>
 80057ce:	e01d      	b.n	800580c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d0:	f7fc fa3c 	bl	8001c4c <HAL_GetTick>
 80057d4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057d6:	e00a      	b.n	80057ee <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057d8:	f7fc fa38 	bl	8001c4c <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e148      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057ee:	4b79      	ldr	r3, [pc, #484]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 80057f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1ed      	bne.n	80057d8 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80057fc:	4b75      	ldr	r3, [pc, #468]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005802:	4a74      	ldr	r2, [pc, #464]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 8005804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800580c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005810:	2b01      	cmp	r3, #1
 8005812:	d105      	bne.n	8005820 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005814:	4b6f      	ldr	r3, [pc, #444]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 8005816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005818:	4a6e      	ldr	r2, [pc, #440]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 800581a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800581e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0320 	and.w	r3, r3, #32
 8005828:	2b00      	cmp	r3, #0
 800582a:	d03c      	beq.n	80058a6 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	2b00      	cmp	r3, #0
 8005832:	d01c      	beq.n	800586e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005834:	4b67      	ldr	r3, [pc, #412]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 8005836:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800583a:	4a66      	ldr	r2, [pc, #408]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 800583c:	f043 0301 	orr.w	r3, r3, #1
 8005840:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005844:	f7fc fa02 	bl	8001c4c <HAL_GetTick>
 8005848:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800584c:	f7fc f9fe 	bl	8001c4c <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e110      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800585e:	4b5d      	ldr	r3, [pc, #372]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 8005860:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0ef      	beq.n	800584c <HAL_RCC_OscConfig+0x68c>
 800586c:	e01b      	b.n	80058a6 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800586e:	4b59      	ldr	r3, [pc, #356]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 8005870:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005874:	4a57      	ldr	r2, [pc, #348]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 8005876:	f023 0301 	bic.w	r3, r3, #1
 800587a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800587e:	f7fc f9e5 	bl	8001c4c <HAL_GetTick>
 8005882:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005884:	e008      	b.n	8005898 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005886:	f7fc f9e1 	bl	8001c4c <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d901      	bls.n	8005898 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e0f3      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005898:	4b4e      	ldr	r3, [pc, #312]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 800589a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1ef      	bne.n	8005886 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 80e7 	beq.w	8005a7e <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	f040 80b7 	bne.w	8005a28 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80058ba:	4b46      	ldr	r3, [pc, #280]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	f003 0203 	and.w	r2, r3, #3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d124      	bne.n	8005918 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d8:	3b01      	subs	r3, #1
 80058da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058dc:	429a      	cmp	r2, r3
 80058de:	d11b      	bne.n	8005918 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d113      	bne.n	8005918 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fa:	085b      	lsrs	r3, r3, #1
 80058fc:	3b01      	subs	r3, #1
 80058fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005900:	429a      	cmp	r2, r3
 8005902:	d109      	bne.n	8005918 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	085b      	lsrs	r3, r3, #1
 8005910:	3b01      	subs	r3, #1
 8005912:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005914:	429a      	cmp	r2, r3
 8005916:	d061      	beq.n	80059dc <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	2b0c      	cmp	r3, #12
 800591c:	d056      	beq.n	80059cc <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800591e:	4b2d      	ldr	r3, [pc, #180]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a2c      	ldr	r2, [pc, #176]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 8005924:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005928:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800592a:	f7fc f98f 	bl	8001c4c <HAL_GetTick>
 800592e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005930:	e008      	b.n	8005944 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005932:	f7fc f98b 	bl	8001c4c <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d901      	bls.n	8005944 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e09d      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005944:	4b23      	ldr	r3, [pc, #140]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1f0      	bne.n	8005932 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005950:	4b20      	ldr	r3, [pc, #128]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	4b20      	ldr	r3, [pc, #128]	; (80059d8 <HAL_RCC_OscConfig+0x818>)
 8005956:	4013      	ands	r3, r2
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005960:	3a01      	subs	r2, #1
 8005962:	0112      	lsls	r2, r2, #4
 8005964:	4311      	orrs	r1, r2
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800596a:	0212      	lsls	r2, r2, #8
 800596c:	4311      	orrs	r1, r2
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005972:	0852      	lsrs	r2, r2, #1
 8005974:	3a01      	subs	r2, #1
 8005976:	0552      	lsls	r2, r2, #21
 8005978:	4311      	orrs	r1, r2
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800597e:	0852      	lsrs	r2, r2, #1
 8005980:	3a01      	subs	r2, #1
 8005982:	0652      	lsls	r2, r2, #25
 8005984:	430a      	orrs	r2, r1
 8005986:	4913      	ldr	r1, [pc, #76]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 8005988:	4313      	orrs	r3, r2
 800598a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800598c:	4b11      	ldr	r3, [pc, #68]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a10      	ldr	r2, [pc, #64]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 8005992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005996:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005998:	4b0e      	ldr	r3, [pc, #56]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	4a0d      	ldr	r2, [pc, #52]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 800599e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059a4:	f7fc f952 	bl	8001c4c <HAL_GetTick>
 80059a8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ac:	f7fc f94e 	bl	8001c4c <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e060      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059be:	4b05      	ldr	r3, [pc, #20]	; (80059d4 <HAL_RCC_OscConfig+0x814>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0f0      	beq.n	80059ac <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059ca:	e058      	b.n	8005a7e <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e057      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
 80059d0:	40007000 	.word	0x40007000
 80059d4:	40021000 	.word	0x40021000
 80059d8:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059dc:	4b2a      	ldr	r3, [pc, #168]	; (8005a88 <HAL_RCC_OscConfig+0x8c8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d14a      	bne.n	8005a7e <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80059e8:	4b27      	ldr	r3, [pc, #156]	; (8005a88 <HAL_RCC_OscConfig+0x8c8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a26      	ldr	r2, [pc, #152]	; (8005a88 <HAL_RCC_OscConfig+0x8c8>)
 80059ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059f4:	4b24      	ldr	r3, [pc, #144]	; (8005a88 <HAL_RCC_OscConfig+0x8c8>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	4a23      	ldr	r2, [pc, #140]	; (8005a88 <HAL_RCC_OscConfig+0x8c8>)
 80059fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a00:	f7fc f924 	bl	8001c4c <HAL_GetTick>
 8005a04:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a08:	f7fc f920 	bl	8001c4c <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e032      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a1a:	4b1b      	ldr	r3, [pc, #108]	; (8005a88 <HAL_RCC_OscConfig+0x8c8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0f0      	beq.n	8005a08 <HAL_RCC_OscConfig+0x848>
 8005a26:	e02a      	b.n	8005a7e <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	2b0c      	cmp	r3, #12
 8005a2c:	d025      	beq.n	8005a7a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a2e:	4b16      	ldr	r3, [pc, #88]	; (8005a88 <HAL_RCC_OscConfig+0x8c8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a15      	ldr	r2, [pc, #84]	; (8005a88 <HAL_RCC_OscConfig+0x8c8>)
 8005a34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a38:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005a3a:	4b13      	ldr	r3, [pc, #76]	; (8005a88 <HAL_RCC_OscConfig+0x8c8>)
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	4a12      	ldr	r2, [pc, #72]	; (8005a88 <HAL_RCC_OscConfig+0x8c8>)
 8005a40:	f023 0303 	bic.w	r3, r3, #3
 8005a44:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8005a46:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <HAL_RCC_OscConfig+0x8c8>)
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	4a0f      	ldr	r2, [pc, #60]	; (8005a88 <HAL_RCC_OscConfig+0x8c8>)
 8005a4c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005a50:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a52:	f7fc f8fb 	bl	8001c4c <HAL_GetTick>
 8005a56:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a58:	e008      	b.n	8005a6c <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a5a:	f7fc f8f7 	bl	8001c4c <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e009      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a6c:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <HAL_RCC_OscConfig+0x8c8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1f0      	bne.n	8005a5a <HAL_RCC_OscConfig+0x89a>
 8005a78:	e001      	b.n	8005a7e <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3728      	adds	r7, #40	; 0x28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	40021000 	.word	0x40021000

08005a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e0c8      	b.n	8005c32 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005aa0:	4b66      	ldr	r3, [pc, #408]	; (8005c3c <HAL_RCC_ClockConfig+0x1b0>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d910      	bls.n	8005ad0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aae:	4b63      	ldr	r3, [pc, #396]	; (8005c3c <HAL_RCC_ClockConfig+0x1b0>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f023 0207 	bic.w	r2, r3, #7
 8005ab6:	4961      	ldr	r1, [pc, #388]	; (8005c3c <HAL_RCC_ClockConfig+0x1b0>)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005abe:	4b5f      	ldr	r3, [pc, #380]	; (8005c3c <HAL_RCC_ClockConfig+0x1b0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d001      	beq.n	8005ad0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e0b0      	b.n	8005c32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d04c      	beq.n	8005b76 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d107      	bne.n	8005af4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ae4:	4b56      	ldr	r3, [pc, #344]	; (8005c40 <HAL_RCC_ClockConfig+0x1b4>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d121      	bne.n	8005b34 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e09e      	b.n	8005c32 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d107      	bne.n	8005b0c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005afc:	4b50      	ldr	r3, [pc, #320]	; (8005c40 <HAL_RCC_ClockConfig+0x1b4>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d115      	bne.n	8005b34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e092      	b.n	8005c32 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d107      	bne.n	8005b24 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b14:	4b4a      	ldr	r3, [pc, #296]	; (8005c40 <HAL_RCC_ClockConfig+0x1b4>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d109      	bne.n	8005b34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e086      	b.n	8005c32 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b24:	4b46      	ldr	r3, [pc, #280]	; (8005c40 <HAL_RCC_ClockConfig+0x1b4>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e07e      	b.n	8005c32 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b34:	4b42      	ldr	r3, [pc, #264]	; (8005c40 <HAL_RCC_ClockConfig+0x1b4>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f023 0203 	bic.w	r2, r3, #3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	493f      	ldr	r1, [pc, #252]	; (8005c40 <HAL_RCC_ClockConfig+0x1b4>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b46:	f7fc f881 	bl	8001c4c <HAL_GetTick>
 8005b4a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b4c:	e00a      	b.n	8005b64 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b4e:	f7fc f87d 	bl	8001c4c <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d901      	bls.n	8005b64 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e066      	b.n	8005c32 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b64:	4b36      	ldr	r3, [pc, #216]	; (8005c40 <HAL_RCC_ClockConfig+0x1b4>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 020c 	and.w	r2, r3, #12
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d1eb      	bne.n	8005b4e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d008      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b82:	4b2f      	ldr	r3, [pc, #188]	; (8005c40 <HAL_RCC_ClockConfig+0x1b4>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	492c      	ldr	r1, [pc, #176]	; (8005c40 <HAL_RCC_ClockConfig+0x1b4>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b94:	4b29      	ldr	r3, [pc, #164]	; (8005c3c <HAL_RCC_ClockConfig+0x1b0>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d210      	bcs.n	8005bc4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba2:	4b26      	ldr	r3, [pc, #152]	; (8005c3c <HAL_RCC_ClockConfig+0x1b0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f023 0207 	bic.w	r2, r3, #7
 8005baa:	4924      	ldr	r1, [pc, #144]	; (8005c3c <HAL_RCC_ClockConfig+0x1b0>)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb2:	4b22      	ldr	r3, [pc, #136]	; (8005c3c <HAL_RCC_ClockConfig+0x1b0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d001      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e036      	b.n	8005c32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d008      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bd0:	4b1b      	ldr	r3, [pc, #108]	; (8005c40 <HAL_RCC_ClockConfig+0x1b4>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	4918      	ldr	r1, [pc, #96]	; (8005c40 <HAL_RCC_ClockConfig+0x1b4>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d009      	beq.n	8005c02 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bee:	4b14      	ldr	r3, [pc, #80]	; (8005c40 <HAL_RCC_ClockConfig+0x1b4>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	4910      	ldr	r1, [pc, #64]	; (8005c40 <HAL_RCC_ClockConfig+0x1b4>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c02:	f000 f825 	bl	8005c50 <HAL_RCC_GetSysClockFreq>
 8005c06:	4601      	mov	r1, r0
 8005c08:	4b0d      	ldr	r3, [pc, #52]	; (8005c40 <HAL_RCC_ClockConfig+0x1b4>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	091b      	lsrs	r3, r3, #4
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	4a0c      	ldr	r2, [pc, #48]	; (8005c44 <HAL_RCC_ClockConfig+0x1b8>)
 8005c14:	5cd3      	ldrb	r3, [r2, r3]
 8005c16:	f003 031f 	and.w	r3, r3, #31
 8005c1a:	fa21 f303 	lsr.w	r3, r1, r3
 8005c1e:	4a0a      	ldr	r2, [pc, #40]	; (8005c48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c22:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <HAL_RCC_ClockConfig+0x1c0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fb ffc0 	bl	8001bac <HAL_InitTick>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005c30:	7afb      	ldrb	r3, [r7, #11]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40022000 	.word	0x40022000
 8005c40:	40021000 	.word	0x40021000
 8005c44:	0800817c 	.word	0x0800817c
 8005c48:	20000004 	.word	0x20000004
 8005c4c:	20000008 	.word	0x20000008

08005c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b089      	sub	sp, #36	; 0x24
 8005c54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	61fb      	str	r3, [r7, #28]
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c5e:	4b3d      	ldr	r3, [pc, #244]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x104>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 030c 	and.w	r3, r3, #12
 8005c66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c68:	4b3a      	ldr	r3, [pc, #232]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x104>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f003 0303 	and.w	r3, r3, #3
 8005c70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_RCC_GetSysClockFreq+0x34>
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	2b0c      	cmp	r3, #12
 8005c7c:	d121      	bne.n	8005cc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d11e      	bne.n	8005cc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c84:	4b33      	ldr	r3, [pc, #204]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x104>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d107      	bne.n	8005ca0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c90:	4b30      	ldr	r3, [pc, #192]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x104>)
 8005c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c96:	0a1b      	lsrs	r3, r3, #8
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	61fb      	str	r3, [r7, #28]
 8005c9e:	e005      	b.n	8005cac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ca0:	4b2c      	ldr	r3, [pc, #176]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x104>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	091b      	lsrs	r3, r3, #4
 8005ca6:	f003 030f 	and.w	r3, r3, #15
 8005caa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005cac:	4a2a      	ldr	r2, [pc, #168]	; (8005d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10d      	bne.n	8005cd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cc0:	e00a      	b.n	8005cd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d102      	bne.n	8005cce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005cc8:	4b24      	ldr	r3, [pc, #144]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005cca:	61bb      	str	r3, [r7, #24]
 8005ccc:	e004      	b.n	8005cd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d101      	bne.n	8005cd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005cd4:	4b22      	ldr	r3, [pc, #136]	; (8005d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8005cd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2b0c      	cmp	r3, #12
 8005cdc:	d133      	bne.n	8005d46 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cde:	4b1d      	ldr	r3, [pc, #116]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x104>)
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d002      	beq.n	8005cf4 <HAL_RCC_GetSysClockFreq+0xa4>
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d003      	beq.n	8005cfa <HAL_RCC_GetSysClockFreq+0xaa>
 8005cf2:	e005      	b.n	8005d00 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005cf4:	4b19      	ldr	r3, [pc, #100]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005cf6:	617b      	str	r3, [r7, #20]
      break;
 8005cf8:	e005      	b.n	8005d06 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005cfa:	4b19      	ldr	r3, [pc, #100]	; (8005d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8005cfc:	617b      	str	r3, [r7, #20]
      break;
 8005cfe:	e002      	b.n	8005d06 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	617b      	str	r3, [r7, #20]
      break;
 8005d04:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d06:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x104>)
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	091b      	lsrs	r3, r3, #4
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	3301      	adds	r3, #1
 8005d12:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d14:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x104>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	0a1b      	lsrs	r3, r3, #8
 8005d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	fb02 f203 	mul.w	r2, r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d2c:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x104>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	0e5b      	lsrs	r3, r3, #25
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	3301      	adds	r3, #1
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d44:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d46:	69bb      	ldr	r3, [r7, #24]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3724      	adds	r7, #36	; 0x24
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	40021000 	.word	0x40021000
 8005d58:	08008194 	.word	0x08008194
 8005d5c:	00f42400 	.word	0x00f42400
 8005d60:	007a1200 	.word	0x007a1200

08005d64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d64:	b480      	push	{r7}
 8005d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d68:	4b03      	ldr	r3, [pc, #12]	; (8005d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	20000004 	.word	0x20000004

08005d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d80:	f7ff fff0 	bl	8005d64 <HAL_RCC_GetHCLKFreq>
 8005d84:	4601      	mov	r1, r0
 8005d86:	4b06      	ldr	r3, [pc, #24]	; (8005da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	0a1b      	lsrs	r3, r3, #8
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	4a04      	ldr	r2, [pc, #16]	; (8005da4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d92:	5cd3      	ldrb	r3, [r2, r3]
 8005d94:	f003 031f 	and.w	r3, r3, #31
 8005d98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	40021000 	.word	0x40021000
 8005da4:	0800818c 	.word	0x0800818c

08005da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005dac:	f7ff ffda 	bl	8005d64 <HAL_RCC_GetHCLKFreq>
 8005db0:	4601      	mov	r1, r0
 8005db2:	4b06      	ldr	r3, [pc, #24]	; (8005dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	0adb      	lsrs	r3, r3, #11
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	4a04      	ldr	r2, [pc, #16]	; (8005dd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005dbe:	5cd3      	ldrb	r3, [r2, r3]
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	40021000 	.word	0x40021000
 8005dd0:	0800818c 	.word	0x0800818c

08005dd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ddc:	2300      	movs	r3, #0
 8005dde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005de0:	4b2a      	ldr	r3, [pc, #168]	; (8005e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005dec:	f7ff f984 	bl	80050f8 <HAL_PWREx_GetVoltageRange>
 8005df0:	6178      	str	r0, [r7, #20]
 8005df2:	e014      	b.n	8005e1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005df4:	4b25      	ldr	r3, [pc, #148]	; (8005e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df8:	4a24      	ldr	r2, [pc, #144]	; (8005e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8005e00:	4b22      	ldr	r3, [pc, #136]	; (8005e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e0c:	f7ff f974 	bl	80050f8 <HAL_PWREx_GetVoltageRange>
 8005e10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e12:	4b1e      	ldr	r3, [pc, #120]	; (8005e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e16:	4a1d      	ldr	r2, [pc, #116]	; (8005e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e24:	d10b      	bne.n	8005e3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b80      	cmp	r3, #128	; 0x80
 8005e2a:	d919      	bls.n	8005e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2ba0      	cmp	r3, #160	; 0xa0
 8005e30:	d902      	bls.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e32:	2302      	movs	r3, #2
 8005e34:	613b      	str	r3, [r7, #16]
 8005e36:	e013      	b.n	8005e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e38:	2301      	movs	r3, #1
 8005e3a:	613b      	str	r3, [r7, #16]
 8005e3c:	e010      	b.n	8005e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b80      	cmp	r3, #128	; 0x80
 8005e42:	d902      	bls.n	8005e4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005e44:	2303      	movs	r3, #3
 8005e46:	613b      	str	r3, [r7, #16]
 8005e48:	e00a      	b.n	8005e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b80      	cmp	r3, #128	; 0x80
 8005e4e:	d102      	bne.n	8005e56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e50:	2302      	movs	r3, #2
 8005e52:	613b      	str	r3, [r7, #16]
 8005e54:	e004      	b.n	8005e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b70      	cmp	r3, #112	; 0x70
 8005e5a:	d101      	bne.n	8005e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e60:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f023 0207 	bic.w	r2, r3, #7
 8005e68:	4909      	ldr	r1, [pc, #36]	; (8005e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e70:	4b07      	ldr	r3, [pc, #28]	; (8005e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d001      	beq.n	8005e82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e000      	b.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3718      	adds	r7, #24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	40021000 	.word	0x40021000
 8005e90:	40022000 	.word	0x40022000

08005e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 809e 	beq.w	8005fee <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005eb6:	4b46      	ldr	r3, [pc, #280]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e000      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00d      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ecc:	4b40      	ldr	r3, [pc, #256]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed0:	4a3f      	ldr	r2, [pc, #252]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8005ed8:	4b3d      	ldr	r3, [pc, #244]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ee0:	60bb      	str	r3, [r7, #8]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ee8:	4b3a      	ldr	r3, [pc, #232]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a39      	ldr	r2, [pc, #228]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ef2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ef4:	f7fb feaa 	bl	8001c4c <HAL_GetTick>
 8005ef8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005efa:	e009      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005efc:	f7fb fea6 	bl	8001c4c <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d902      	bls.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	74fb      	strb	r3, [r7, #19]
        break;
 8005f0e:	e005      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f10:	4b30      	ldr	r3, [pc, #192]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0ef      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8005f1c:	7cfb      	ldrb	r3, [r7, #19]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d15a      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f22:	4b2b      	ldr	r3, [pc, #172]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01e      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d019      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f3e:	4b24      	ldr	r3, [pc, #144]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f48:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f4a:	4b21      	ldr	r3, [pc, #132]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f50:	4a1f      	ldr	r2, [pc, #124]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f5a:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f60:	4a1b      	ldr	r2, [pc, #108]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f6a:	4a19      	ldr	r2, [pc, #100]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d016      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7c:	f7fb fe66 	bl	8001c4c <HAL_GetTick>
 8005f80:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f82:	e00b      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f84:	f7fb fe62 	bl	8001c4c <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d902      	bls.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	74fb      	strb	r3, [r7, #19]
            break;
 8005f9a:	e006      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f9c:	4b0c      	ldr	r3, [pc, #48]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0ec      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8005faa:	7cfb      	ldrb	r3, [r7, #19]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10b      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fb0:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbe:	4904      	ldr	r1, [pc, #16]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005fc6:	e009      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fc8:	7cfb      	ldrb	r3, [r7, #19]
 8005fca:	74bb      	strb	r3, [r7, #18]
 8005fcc:	e006      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x148>
 8005fce:	bf00      	nop
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd8:	7cfb      	ldrb	r3, [r7, #19]
 8005fda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fdc:	7c7b      	ldrb	r3, [r7, #17]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d105      	bne.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fe2:	4b6e      	ldr	r3, [pc, #440]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe6:	4a6d      	ldr	r2, [pc, #436]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ffa:	4b68      	ldr	r3, [pc, #416]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006000:	f023 0203 	bic.w	r2, r3, #3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	4964      	ldr	r1, [pc, #400]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800600a:	4313      	orrs	r3, r2
 800600c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800601c:	4b5f      	ldr	r3, [pc, #380]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800601e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006022:	f023 020c 	bic.w	r2, r3, #12
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	495c      	ldr	r1, [pc, #368]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800602c:	4313      	orrs	r3, r2
 800602e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800603e:	4b57      	ldr	r3, [pc, #348]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006044:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	4953      	ldr	r1, [pc, #332]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800604e:	4313      	orrs	r3, r2
 8006050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0320 	and.w	r3, r3, #32
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00a      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006060:	4b4e      	ldr	r3, [pc, #312]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006066:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	494b      	ldr	r1, [pc, #300]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006070:	4313      	orrs	r3, r2
 8006072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006082:	4b46      	ldr	r3, [pc, #280]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006088:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	4942      	ldr	r1, [pc, #264]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006092:	4313      	orrs	r3, r2
 8006094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00a      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060a4:	4b3d      	ldr	r3, [pc, #244]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	493a      	ldr	r1, [pc, #232]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060c6:	4b35      	ldr	r3, [pc, #212]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	4931      	ldr	r1, [pc, #196]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00a      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060e8:	4b2c      	ldr	r3, [pc, #176]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	4929      	ldr	r1, [pc, #164]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00a      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800610a:	4b24      	ldr	r3, [pc, #144]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800610c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006110:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	4920      	ldr	r1, [pc, #128]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800611a:	4313      	orrs	r3, r2
 800611c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d015      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800612c:	4b1b      	ldr	r3, [pc, #108]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800612e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006132:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613a:	4918      	ldr	r1, [pc, #96]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800613c:	4313      	orrs	r3, r2
 800613e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006146:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800614a:	d105      	bne.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800614c:	4b13      	ldr	r3, [pc, #76]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	4a12      	ldr	r2, [pc, #72]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006156:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d015      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006164:	4b0d      	ldr	r3, [pc, #52]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006172:	490a      	ldr	r1, [pc, #40]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006174:	4313      	orrs	r3, r2
 8006176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006182:	d105      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006184:	4b05      	ldr	r3, [pc, #20]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	4a04      	ldr	r2, [pc, #16]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800618a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800618e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006190:	7cbb      	ldrb	r3, [r7, #18]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	40021000 	.word	0x40021000

080061a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e049      	b.n	8006246 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d106      	bne.n	80061cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7fb f950 	bl	800146c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3304      	adds	r3, #4
 80061dc:	4619      	mov	r1, r3
 80061de:	4610      	mov	r0, r2
 80061e0:	f000 fd5c 	bl	8006c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b01      	cmp	r3, #1
 8006262:	d001      	beq.n	8006268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e03b      	b.n	80062e0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a19      	ldr	r2, [pc, #100]	; (80062ec <HAL_TIM_Base_Start_IT+0x9c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d009      	beq.n	800629e <HAL_TIM_Base_Start_IT+0x4e>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006292:	d004      	beq.n	800629e <HAL_TIM_Base_Start_IT+0x4e>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a15      	ldr	r2, [pc, #84]	; (80062f0 <HAL_TIM_Base_Start_IT+0xa0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d115      	bne.n	80062ca <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	4b13      	ldr	r3, [pc, #76]	; (80062f4 <HAL_TIM_Base_Start_IT+0xa4>)
 80062a6:	4013      	ands	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b06      	cmp	r3, #6
 80062ae:	d015      	beq.n	80062dc <HAL_TIM_Base_Start_IT+0x8c>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b6:	d011      	beq.n	80062dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0201 	orr.w	r2, r2, #1
 80062c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c8:	e008      	b.n	80062dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f042 0201 	orr.w	r2, r2, #1
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	e000      	b.n	80062de <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	40012c00 	.word	0x40012c00
 80062f0:	40014000 	.word	0x40014000
 80062f4:	00010007 	.word	0x00010007

080062f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0201 	bic.w	r2, r2, #1
 800630e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6a1a      	ldr	r2, [r3, #32]
 8006316:	f241 1311 	movw	r3, #4369	; 0x1111
 800631a:	4013      	ands	r3, r2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10f      	bne.n	8006340 <HAL_TIM_Base_Stop_IT+0x48>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6a1a      	ldr	r2, [r3, #32]
 8006326:	f240 4344 	movw	r3, #1092	; 0x444
 800632a:	4013      	ands	r3, r2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d107      	bne.n	8006340 <HAL_TIM_Base_Stop_IT+0x48>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0201 	bic.w	r2, r2, #1
 800633e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b082      	sub	sp, #8
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e049      	b.n	80063fc <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d106      	bne.n	8006382 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f841 	bl	8006404 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2202      	movs	r2, #2
 8006386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	3304      	adds	r3, #4
 8006392:	4619      	mov	r1, r3
 8006394:	4610      	mov	r0, r2
 8006396:	f000 fc81 	bl	8006c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d109      	bne.n	800643c <HAL_TIM_OC_Start+0x24>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b01      	cmp	r3, #1
 8006432:	bf14      	ite	ne
 8006434:	2301      	movne	r3, #1
 8006436:	2300      	moveq	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	e03c      	b.n	80064b6 <HAL_TIM_OC_Start+0x9e>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b04      	cmp	r3, #4
 8006440:	d109      	bne.n	8006456 <HAL_TIM_OC_Start+0x3e>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b01      	cmp	r3, #1
 800644c:	bf14      	ite	ne
 800644e:	2301      	movne	r3, #1
 8006450:	2300      	moveq	r3, #0
 8006452:	b2db      	uxtb	r3, r3
 8006454:	e02f      	b.n	80064b6 <HAL_TIM_OC_Start+0x9e>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b08      	cmp	r3, #8
 800645a:	d109      	bne.n	8006470 <HAL_TIM_OC_Start+0x58>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b01      	cmp	r3, #1
 8006466:	bf14      	ite	ne
 8006468:	2301      	movne	r3, #1
 800646a:	2300      	moveq	r3, #0
 800646c:	b2db      	uxtb	r3, r3
 800646e:	e022      	b.n	80064b6 <HAL_TIM_OC_Start+0x9e>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2b0c      	cmp	r3, #12
 8006474:	d109      	bne.n	800648a <HAL_TIM_OC_Start+0x72>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b01      	cmp	r3, #1
 8006480:	bf14      	ite	ne
 8006482:	2301      	movne	r3, #1
 8006484:	2300      	moveq	r3, #0
 8006486:	b2db      	uxtb	r3, r3
 8006488:	e015      	b.n	80064b6 <HAL_TIM_OC_Start+0x9e>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b10      	cmp	r3, #16
 800648e:	d109      	bne.n	80064a4 <HAL_TIM_OC_Start+0x8c>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b01      	cmp	r3, #1
 800649a:	bf14      	ite	ne
 800649c:	2301      	movne	r3, #1
 800649e:	2300      	moveq	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	e008      	b.n	80064b6 <HAL_TIM_OC_Start+0x9e>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	bf14      	ite	ne
 80064b0:	2301      	movne	r3, #1
 80064b2:	2300      	moveq	r3, #0
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e07e      	b.n	80065bc <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d104      	bne.n	80064ce <HAL_TIM_OC_Start+0xb6>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064cc:	e023      	b.n	8006516 <HAL_TIM_OC_Start+0xfe>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b04      	cmp	r3, #4
 80064d2:	d104      	bne.n	80064de <HAL_TIM_OC_Start+0xc6>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064dc:	e01b      	b.n	8006516 <HAL_TIM_OC_Start+0xfe>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d104      	bne.n	80064ee <HAL_TIM_OC_Start+0xd6>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064ec:	e013      	b.n	8006516 <HAL_TIM_OC_Start+0xfe>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b0c      	cmp	r3, #12
 80064f2:	d104      	bne.n	80064fe <HAL_TIM_OC_Start+0xe6>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064fc:	e00b      	b.n	8006516 <HAL_TIM_OC_Start+0xfe>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b10      	cmp	r3, #16
 8006502:	d104      	bne.n	800650e <HAL_TIM_OC_Start+0xf6>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800650c:	e003      	b.n	8006516 <HAL_TIM_OC_Start+0xfe>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2202      	movs	r2, #2
 8006512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2201      	movs	r2, #1
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	4618      	mov	r0, r3
 8006520:	f000 ff38 	bl	8007394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a26      	ldr	r2, [pc, #152]	; (80065c4 <HAL_TIM_OC_Start+0x1ac>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d009      	beq.n	8006542 <HAL_TIM_OC_Start+0x12a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a25      	ldr	r2, [pc, #148]	; (80065c8 <HAL_TIM_OC_Start+0x1b0>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d004      	beq.n	8006542 <HAL_TIM_OC_Start+0x12a>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a23      	ldr	r2, [pc, #140]	; (80065cc <HAL_TIM_OC_Start+0x1b4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d101      	bne.n	8006546 <HAL_TIM_OC_Start+0x12e>
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <HAL_TIM_OC_Start+0x130>
 8006546:	2300      	movs	r3, #0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d007      	beq.n	800655c <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800655a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a18      	ldr	r2, [pc, #96]	; (80065c4 <HAL_TIM_OC_Start+0x1ac>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d009      	beq.n	800657a <HAL_TIM_OC_Start+0x162>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656e:	d004      	beq.n	800657a <HAL_TIM_OC_Start+0x162>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a14      	ldr	r2, [pc, #80]	; (80065c8 <HAL_TIM_OC_Start+0x1b0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d115      	bne.n	80065a6 <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	4b13      	ldr	r3, [pc, #76]	; (80065d0 <HAL_TIM_OC_Start+0x1b8>)
 8006582:	4013      	ands	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b06      	cmp	r3, #6
 800658a:	d015      	beq.n	80065b8 <HAL_TIM_OC_Start+0x1a0>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006592:	d011      	beq.n	80065b8 <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0201 	orr.w	r2, r2, #1
 80065a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a4:	e008      	b.n	80065b8 <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f042 0201 	orr.w	r2, r2, #1
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	e000      	b.n	80065ba <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	40012c00 	.word	0x40012c00
 80065c8:	40014000 	.word	0x40014000
 80065cc:	40014400 	.word	0x40014400
 80065d0:	00010007 	.word	0x00010007

080065d4 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2200      	movs	r2, #0
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fed4 	bl	8007394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a39      	ldr	r2, [pc, #228]	; (80066d8 <HAL_TIM_OC_Stop+0x104>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d009      	beq.n	800660a <HAL_TIM_OC_Stop+0x36>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a38      	ldr	r2, [pc, #224]	; (80066dc <HAL_TIM_OC_Stop+0x108>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d004      	beq.n	800660a <HAL_TIM_OC_Stop+0x36>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a36      	ldr	r2, [pc, #216]	; (80066e0 <HAL_TIM_OC_Stop+0x10c>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d101      	bne.n	800660e <HAL_TIM_OC_Stop+0x3a>
 800660a:	2301      	movs	r3, #1
 800660c:	e000      	b.n	8006610 <HAL_TIM_OC_Stop+0x3c>
 800660e:	2300      	movs	r3, #0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d017      	beq.n	8006644 <HAL_TIM_OC_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6a1a      	ldr	r2, [r3, #32]
 800661a:	f241 1311 	movw	r3, #4369	; 0x1111
 800661e:	4013      	ands	r3, r2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10f      	bne.n	8006644 <HAL_TIM_OC_Stop+0x70>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6a1a      	ldr	r2, [r3, #32]
 800662a:	f240 4344 	movw	r3, #1092	; 0x444
 800662e:	4013      	ands	r3, r2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d107      	bne.n	8006644 <HAL_TIM_OC_Stop+0x70>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006642:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6a1a      	ldr	r2, [r3, #32]
 800664a:	f241 1311 	movw	r3, #4369	; 0x1111
 800664e:	4013      	ands	r3, r2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10f      	bne.n	8006674 <HAL_TIM_OC_Stop+0xa0>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6a1a      	ldr	r2, [r3, #32]
 800665a:	f240 4344 	movw	r3, #1092	; 0x444
 800665e:	4013      	ands	r3, r2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d107      	bne.n	8006674 <HAL_TIM_OC_Stop+0xa0>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0201 	bic.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d104      	bne.n	8006684 <HAL_TIM_OC_Stop+0xb0>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006682:	e023      	b.n	80066cc <HAL_TIM_OC_Stop+0xf8>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b04      	cmp	r3, #4
 8006688:	d104      	bne.n	8006694 <HAL_TIM_OC_Stop+0xc0>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006692:	e01b      	b.n	80066cc <HAL_TIM_OC_Stop+0xf8>
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b08      	cmp	r3, #8
 8006698:	d104      	bne.n	80066a4 <HAL_TIM_OC_Stop+0xd0>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066a2:	e013      	b.n	80066cc <HAL_TIM_OC_Stop+0xf8>
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2b0c      	cmp	r3, #12
 80066a8:	d104      	bne.n	80066b4 <HAL_TIM_OC_Stop+0xe0>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066b2:	e00b      	b.n	80066cc <HAL_TIM_OC_Stop+0xf8>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2b10      	cmp	r3, #16
 80066b8:	d104      	bne.n	80066c4 <HAL_TIM_OC_Stop+0xf0>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066c2:	e003      	b.n	80066cc <HAL_TIM_OC_Stop+0xf8>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	40012c00 	.word	0x40012c00
 80066dc:	40014000 	.word	0x40014000
 80066e0:	40014400 	.word	0x40014400

080066e4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e041      	b.n	800677c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d106      	bne.n	8006712 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f839 	bl	8006784 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2202      	movs	r2, #2
 8006716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	3304      	adds	r3, #4
 8006722:	4619      	mov	r1, r3
 8006724:	4610      	mov	r0, r2
 8006726:	f000 fab9 	bl	8006c9c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0208 	bic.w	r2, r2, #8
 8006738:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6819      	ldr	r1, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d122      	bne.n	80067f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d11b      	bne.n	80067f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f06f 0202 	mvn.w	r2, #2
 80067c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fa3f 	bl	8006c5e <HAL_TIM_IC_CaptureCallback>
 80067e0:	e005      	b.n	80067ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fa31 	bl	8006c4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fa42 	bl	8006c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f003 0304 	and.w	r3, r3, #4
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d122      	bne.n	8006848 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b04      	cmp	r3, #4
 800680e:	d11b      	bne.n	8006848 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f06f 0204 	mvn.w	r2, #4
 8006818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2202      	movs	r2, #2
 800681e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fa15 	bl	8006c5e <HAL_TIM_IC_CaptureCallback>
 8006834:	e005      	b.n	8006842 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fa07 	bl	8006c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fa18 	bl	8006c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	f003 0308 	and.w	r3, r3, #8
 8006852:	2b08      	cmp	r3, #8
 8006854:	d122      	bne.n	800689c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f003 0308 	and.w	r3, r3, #8
 8006860:	2b08      	cmp	r3, #8
 8006862:	d11b      	bne.n	800689c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f06f 0208 	mvn.w	r2, #8
 800686c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2204      	movs	r2, #4
 8006872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	f003 0303 	and.w	r3, r3, #3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f9eb 	bl	8006c5e <HAL_TIM_IC_CaptureCallback>
 8006888:	e005      	b.n	8006896 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f9dd 	bl	8006c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f9ee 	bl	8006c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	f003 0310 	and.w	r3, r3, #16
 80068a6:	2b10      	cmp	r3, #16
 80068a8:	d122      	bne.n	80068f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f003 0310 	and.w	r3, r3, #16
 80068b4:	2b10      	cmp	r3, #16
 80068b6:	d11b      	bne.n	80068f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f06f 0210 	mvn.w	r2, #16
 80068c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2208      	movs	r2, #8
 80068c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f9c1 	bl	8006c5e <HAL_TIM_IC_CaptureCallback>
 80068dc:	e005      	b.n	80068ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f9b3 	bl	8006c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f9c4 	bl	8006c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d10e      	bne.n	800691c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b01      	cmp	r3, #1
 800690a:	d107      	bne.n	800691c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f06f 0201 	mvn.w	r2, #1
 8006914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f98d 	bl	8006c36 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006926:	2b80      	cmp	r3, #128	; 0x80
 8006928:	d10e      	bne.n	8006948 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006934:	2b80      	cmp	r3, #128	; 0x80
 8006936:	d107      	bne.n	8006948 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fdbc 	bl	80074c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006956:	d10e      	bne.n	8006976 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006962:	2b80      	cmp	r3, #128	; 0x80
 8006964:	d107      	bne.n	8006976 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800696e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fdaf 	bl	80074d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006980:	2b40      	cmp	r3, #64	; 0x40
 8006982:	d10e      	bne.n	80069a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698e:	2b40      	cmp	r3, #64	; 0x40
 8006990:	d107      	bne.n	80069a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800699a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f972 	bl	8006c86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	f003 0320 	and.w	r3, r3, #32
 80069ac:	2b20      	cmp	r3, #32
 80069ae:	d10e      	bne.n	80069ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f003 0320 	and.w	r3, r3, #32
 80069ba:	2b20      	cmp	r3, #32
 80069bc:	d107      	bne.n	80069ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f06f 0220 	mvn.w	r2, #32
 80069c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fd6f 	bl	80074ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069ce:	bf00      	nop
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
	...

080069d8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d101      	bne.n	80069f2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80069ee:	2302      	movs	r3, #2
 80069f0:	e064      	b.n	8006abc <HAL_TIM_OC_ConfigChannel+0xe4>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b14      	cmp	r3, #20
 80069fe:	d857      	bhi.n	8006ab0 <HAL_TIM_OC_ConfigChannel+0xd8>
 8006a00:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <HAL_TIM_OC_ConfigChannel+0x30>)
 8006a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a06:	bf00      	nop
 8006a08:	08006a5d 	.word	0x08006a5d
 8006a0c:	08006ab1 	.word	0x08006ab1
 8006a10:	08006ab1 	.word	0x08006ab1
 8006a14:	08006ab1 	.word	0x08006ab1
 8006a18:	08006a6b 	.word	0x08006a6b
 8006a1c:	08006ab1 	.word	0x08006ab1
 8006a20:	08006ab1 	.word	0x08006ab1
 8006a24:	08006ab1 	.word	0x08006ab1
 8006a28:	08006a79 	.word	0x08006a79
 8006a2c:	08006ab1 	.word	0x08006ab1
 8006a30:	08006ab1 	.word	0x08006ab1
 8006a34:	08006ab1 	.word	0x08006ab1
 8006a38:	08006a87 	.word	0x08006a87
 8006a3c:	08006ab1 	.word	0x08006ab1
 8006a40:	08006ab1 	.word	0x08006ab1
 8006a44:	08006ab1 	.word	0x08006ab1
 8006a48:	08006a95 	.word	0x08006a95
 8006a4c:	08006ab1 	.word	0x08006ab1
 8006a50:	08006ab1 	.word	0x08006ab1
 8006a54:	08006ab1 	.word	0x08006ab1
 8006a58:	08006aa3 	.word	0x08006aa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 f97e 	bl	8006d64 <TIM_OC1_SetConfig>
      break;
 8006a68:	e023      	b.n	8006ab2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68b9      	ldr	r1, [r7, #8]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 f9f3 	bl	8006e5c <TIM_OC2_SetConfig>
      break;
 8006a76:	e01c      	b.n	8006ab2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 fa66 	bl	8006f50 <TIM_OC3_SetConfig>
      break;
 8006a84:	e015      	b.n	8006ab2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68b9      	ldr	r1, [r7, #8]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 fad7 	bl	8007040 <TIM_OC4_SetConfig>
      break;
 8006a92:	e00e      	b.n	8006ab2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68b9      	ldr	r1, [r7, #8]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fb2e 	bl	80070fc <TIM_OC5_SetConfig>
      break;
 8006aa0:	e007      	b.n	8006ab2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68b9      	ldr	r1, [r7, #8]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f000 fb7f 	bl	80071ac <TIM_OC6_SetConfig>
      break;
 8006aae:	e000      	b.n	8006ab2 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8006ab0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d101      	bne.n	8006adc <HAL_TIM_ConfigClockSource+0x18>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	e0a8      	b.n	8006c2e <HAL_TIM_ConfigClockSource+0x16a>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006afa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006afe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b40      	cmp	r3, #64	; 0x40
 8006b16:	d067      	beq.n	8006be8 <HAL_TIM_ConfigClockSource+0x124>
 8006b18:	2b40      	cmp	r3, #64	; 0x40
 8006b1a:	d80b      	bhi.n	8006b34 <HAL_TIM_ConfigClockSource+0x70>
 8006b1c:	2b10      	cmp	r3, #16
 8006b1e:	d073      	beq.n	8006c08 <HAL_TIM_ConfigClockSource+0x144>
 8006b20:	2b10      	cmp	r3, #16
 8006b22:	d802      	bhi.n	8006b2a <HAL_TIM_ConfigClockSource+0x66>
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d06f      	beq.n	8006c08 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006b28:	e078      	b.n	8006c1c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006b2a:	2b20      	cmp	r3, #32
 8006b2c:	d06c      	beq.n	8006c08 <HAL_TIM_ConfigClockSource+0x144>
 8006b2e:	2b30      	cmp	r3, #48	; 0x30
 8006b30:	d06a      	beq.n	8006c08 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006b32:	e073      	b.n	8006c1c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006b34:	2b70      	cmp	r3, #112	; 0x70
 8006b36:	d00d      	beq.n	8006b54 <HAL_TIM_ConfigClockSource+0x90>
 8006b38:	2b70      	cmp	r3, #112	; 0x70
 8006b3a:	d804      	bhi.n	8006b46 <HAL_TIM_ConfigClockSource+0x82>
 8006b3c:	2b50      	cmp	r3, #80	; 0x50
 8006b3e:	d033      	beq.n	8006ba8 <HAL_TIM_ConfigClockSource+0xe4>
 8006b40:	2b60      	cmp	r3, #96	; 0x60
 8006b42:	d041      	beq.n	8006bc8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006b44:	e06a      	b.n	8006c1c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b4a:	d066      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x156>
 8006b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b50:	d017      	beq.n	8006b82 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006b52:	e063      	b.n	8006c1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6818      	ldr	r0, [r3, #0]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	6899      	ldr	r1, [r3, #8]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f000 fbf6 	bl	8007354 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b76:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	609a      	str	r2, [r3, #8]
      break;
 8006b80:	e04c      	b.n	8006c1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6818      	ldr	r0, [r3, #0]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	6899      	ldr	r1, [r3, #8]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f000 fbdf 	bl	8007354 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ba4:	609a      	str	r2, [r3, #8]
      break;
 8006ba6:	e039      	b.n	8006c1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6818      	ldr	r0, [r3, #0]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	6859      	ldr	r1, [r3, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	f000 fb53 	bl	8007260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2150      	movs	r1, #80	; 0x50
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f000 fbac 	bl	800731e <TIM_ITRx_SetConfig>
      break;
 8006bc6:	e029      	b.n	8006c1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6818      	ldr	r0, [r3, #0]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	6859      	ldr	r1, [r3, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	f000 fb72 	bl	80072be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2160      	movs	r1, #96	; 0x60
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fb9c 	bl	800731e <TIM_ITRx_SetConfig>
      break;
 8006be6:	e019      	b.n	8006c1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6818      	ldr	r0, [r3, #0]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	6859      	ldr	r1, [r3, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	f000 fb33 	bl	8007260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2140      	movs	r1, #64	; 0x40
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 fb8c 	bl	800731e <TIM_ITRx_SetConfig>
      break;
 8006c06:	e009      	b.n	8006c1c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4619      	mov	r1, r3
 8006c12:	4610      	mov	r0, r2
 8006c14:	f000 fb83 	bl	800731e <TIM_ITRx_SetConfig>
        break;
 8006c18:	e000      	b.n	8006c1c <HAL_TIM_ConfigClockSource+0x158>
      break;
 8006c1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006c3e:	bf00      	nop
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b083      	sub	sp, #12
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c52:	bf00      	nop
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c66:	bf00      	nop
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b083      	sub	sp, #12
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c7a:	bf00      	nop
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b083      	sub	sp, #12
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
	...

08006c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a2a      	ldr	r2, [pc, #168]	; (8006d58 <TIM_Base_SetConfig+0xbc>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d003      	beq.n	8006cbc <TIM_Base_SetConfig+0x20>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cba:	d108      	bne.n	8006cce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a21      	ldr	r2, [pc, #132]	; (8006d58 <TIM_Base_SetConfig+0xbc>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d00b      	beq.n	8006cee <TIM_Base_SetConfig+0x52>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cdc:	d007      	beq.n	8006cee <TIM_Base_SetConfig+0x52>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a1e      	ldr	r2, [pc, #120]	; (8006d5c <TIM_Base_SetConfig+0xc0>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d003      	beq.n	8006cee <TIM_Base_SetConfig+0x52>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a1d      	ldr	r2, [pc, #116]	; (8006d60 <TIM_Base_SetConfig+0xc4>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d108      	bne.n	8006d00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a0c      	ldr	r2, [pc, #48]	; (8006d58 <TIM_Base_SetConfig+0xbc>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d007      	beq.n	8006d3c <TIM_Base_SetConfig+0xa0>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a0b      	ldr	r2, [pc, #44]	; (8006d5c <TIM_Base_SetConfig+0xc0>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d003      	beq.n	8006d3c <TIM_Base_SetConfig+0xa0>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a0a      	ldr	r2, [pc, #40]	; (8006d60 <TIM_Base_SetConfig+0xc4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d103      	bne.n	8006d44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	691a      	ldr	r2, [r3, #16]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	615a      	str	r2, [r3, #20]
}
 8006d4a:	bf00      	nop
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	40012c00 	.word	0x40012c00
 8006d5c:	40014000 	.word	0x40014000
 8006d60:	40014400 	.word	0x40014400

08006d64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b087      	sub	sp, #28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	f023 0201 	bic.w	r2, r3, #1
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0303 	bic.w	r3, r3, #3
 8006d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f023 0302 	bic.w	r3, r3, #2
 8006db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a24      	ldr	r2, [pc, #144]	; (8006e50 <TIM_OC1_SetConfig+0xec>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d007      	beq.n	8006dd4 <TIM_OC1_SetConfig+0x70>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a23      	ldr	r2, [pc, #140]	; (8006e54 <TIM_OC1_SetConfig+0xf0>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d003      	beq.n	8006dd4 <TIM_OC1_SetConfig+0x70>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a22      	ldr	r2, [pc, #136]	; (8006e58 <TIM_OC1_SetConfig+0xf4>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d10c      	bne.n	8006dee <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f023 0308 	bic.w	r3, r3, #8
 8006dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f023 0304 	bic.w	r3, r3, #4
 8006dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a17      	ldr	r2, [pc, #92]	; (8006e50 <TIM_OC1_SetConfig+0xec>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d007      	beq.n	8006e06 <TIM_OC1_SetConfig+0xa2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a16      	ldr	r2, [pc, #88]	; (8006e54 <TIM_OC1_SetConfig+0xf0>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d003      	beq.n	8006e06 <TIM_OC1_SetConfig+0xa2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a15      	ldr	r2, [pc, #84]	; (8006e58 <TIM_OC1_SetConfig+0xf4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d111      	bne.n	8006e2a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	621a      	str	r2, [r3, #32]
}
 8006e44:	bf00      	nop
 8006e46:	371c      	adds	r7, #28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	40012c00 	.word	0x40012c00
 8006e54:	40014000 	.word	0x40014000
 8006e58:	40014400 	.word	0x40014400

08006e5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	f023 0210 	bic.w	r2, r3, #16
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	021b      	lsls	r3, r3, #8
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f023 0320 	bic.w	r3, r3, #32
 8006eaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	011b      	lsls	r3, r3, #4
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a22      	ldr	r2, [pc, #136]	; (8006f44 <TIM_OC2_SetConfig+0xe8>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d10d      	bne.n	8006edc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a19      	ldr	r2, [pc, #100]	; (8006f44 <TIM_OC2_SetConfig+0xe8>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d007      	beq.n	8006ef4 <TIM_OC2_SetConfig+0x98>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a18      	ldr	r2, [pc, #96]	; (8006f48 <TIM_OC2_SetConfig+0xec>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d003      	beq.n	8006ef4 <TIM_OC2_SetConfig+0x98>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a17      	ldr	r2, [pc, #92]	; (8006f4c <TIM_OC2_SetConfig+0xf0>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d113      	bne.n	8006f1c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006efa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	695b      	ldr	r3, [r3, #20]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	621a      	str	r2, [r3, #32]
}
 8006f36:	bf00      	nop
 8006f38:	371c      	adds	r7, #28
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	40012c00 	.word	0x40012c00
 8006f48:	40014000 	.word	0x40014000
 8006f4c:	40014400 	.word	0x40014400

08006f50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0303 	bic.w	r3, r3, #3
 8006f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	021b      	lsls	r3, r3, #8
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a21      	ldr	r2, [pc, #132]	; (8007034 <TIM_OC3_SetConfig+0xe4>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d10d      	bne.n	8006fce <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	021b      	lsls	r3, r3, #8
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a18      	ldr	r2, [pc, #96]	; (8007034 <TIM_OC3_SetConfig+0xe4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d007      	beq.n	8006fe6 <TIM_OC3_SetConfig+0x96>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a17      	ldr	r2, [pc, #92]	; (8007038 <TIM_OC3_SetConfig+0xe8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d003      	beq.n	8006fe6 <TIM_OC3_SetConfig+0x96>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a16      	ldr	r2, [pc, #88]	; (800703c <TIM_OC3_SetConfig+0xec>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d113      	bne.n	800700e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	011b      	lsls	r3, r3, #4
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	011b      	lsls	r3, r3, #4
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	4313      	orrs	r3, r2
 800700c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	621a      	str	r2, [r3, #32]
}
 8007028:	bf00      	nop
 800702a:	371c      	adds	r7, #28
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	40012c00 	.word	0x40012c00
 8007038:	40014000 	.word	0x40014000
 800703c:	40014400 	.word	0x40014400

08007040 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007040:	b480      	push	{r7}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800706e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800707a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	021b      	lsls	r3, r3, #8
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	4313      	orrs	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800708e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	031b      	lsls	r3, r3, #12
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	4313      	orrs	r3, r2
 800709a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a14      	ldr	r2, [pc, #80]	; (80070f0 <TIM_OC4_SetConfig+0xb0>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d007      	beq.n	80070b4 <TIM_OC4_SetConfig+0x74>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a13      	ldr	r2, [pc, #76]	; (80070f4 <TIM_OC4_SetConfig+0xb4>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d003      	beq.n	80070b4 <TIM_OC4_SetConfig+0x74>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a12      	ldr	r2, [pc, #72]	; (80070f8 <TIM_OC4_SetConfig+0xb8>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d109      	bne.n	80070c8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	695b      	ldr	r3, [r3, #20]
 80070c0:	019b      	lsls	r3, r3, #6
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	621a      	str	r2, [r3, #32]
}
 80070e2:	bf00      	nop
 80070e4:	371c      	adds	r7, #28
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	40012c00 	.word	0x40012c00
 80070f4:	40014000 	.word	0x40014000
 80070f8:	40014400 	.word	0x40014400

080070fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800712a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	4313      	orrs	r3, r2
 8007138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007140:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	041b      	lsls	r3, r3, #16
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	4313      	orrs	r3, r2
 800714c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a13      	ldr	r2, [pc, #76]	; (80071a0 <TIM_OC5_SetConfig+0xa4>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d007      	beq.n	8007166 <TIM_OC5_SetConfig+0x6a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a12      	ldr	r2, [pc, #72]	; (80071a4 <TIM_OC5_SetConfig+0xa8>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d003      	beq.n	8007166 <TIM_OC5_SetConfig+0x6a>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a11      	ldr	r2, [pc, #68]	; (80071a8 <TIM_OC5_SetConfig+0xac>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d109      	bne.n	800717a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800716c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	021b      	lsls	r3, r3, #8
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	4313      	orrs	r3, r2
 8007178:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	621a      	str	r2, [r3, #32]
}
 8007194:	bf00      	nop
 8007196:	371c      	adds	r7, #28
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	40012c00 	.word	0x40012c00
 80071a4:	40014000 	.word	0x40014000
 80071a8:	40014400 	.word	0x40014400

080071ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	021b      	lsls	r3, r3, #8
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	051b      	lsls	r3, r3, #20
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a14      	ldr	r2, [pc, #80]	; (8007254 <TIM_OC6_SetConfig+0xa8>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d007      	beq.n	8007218 <TIM_OC6_SetConfig+0x6c>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a13      	ldr	r2, [pc, #76]	; (8007258 <TIM_OC6_SetConfig+0xac>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d003      	beq.n	8007218 <TIM_OC6_SetConfig+0x6c>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a12      	ldr	r2, [pc, #72]	; (800725c <TIM_OC6_SetConfig+0xb0>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d109      	bne.n	800722c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800721e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	029b      	lsls	r3, r3, #10
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	4313      	orrs	r3, r2
 800722a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	621a      	str	r2, [r3, #32]
}
 8007246:	bf00      	nop
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	40012c00 	.word	0x40012c00
 8007258:	40014000 	.word	0x40014000
 800725c:	40014400 	.word	0x40014400

08007260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	f023 0201 	bic.w	r2, r3, #1
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800728a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	011b      	lsls	r3, r3, #4
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f023 030a 	bic.w	r3, r3, #10
 800729c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	621a      	str	r2, [r3, #32]
}
 80072b2:	bf00      	nop
 80072b4:	371c      	adds	r7, #28
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072be:	b480      	push	{r7}
 80072c0:	b087      	sub	sp, #28
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	60b9      	str	r1, [r7, #8]
 80072c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	f023 0210 	bic.w	r2, r3, #16
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	031b      	lsls	r3, r3, #12
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	011b      	lsls	r3, r3, #4
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	4313      	orrs	r3, r2
 8007304:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	621a      	str	r2, [r3, #32]
}
 8007312:	bf00      	nop
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800731e:	b480      	push	{r7}
 8007320:	b085      	sub	sp, #20
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4313      	orrs	r3, r2
 800733c:	f043 0307 	orr.w	r3, r3, #7
 8007340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	609a      	str	r2, [r3, #8]
}
 8007348:	bf00      	nop
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800736e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	021a      	lsls	r2, r3, #8
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	431a      	orrs	r2, r3
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	4313      	orrs	r3, r2
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	4313      	orrs	r3, r2
 8007380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	609a      	str	r2, [r3, #8]
}
 8007388:	bf00      	nop
 800738a:	371c      	adds	r7, #28
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f003 031f 	and.w	r3, r3, #31
 80073a6:	2201      	movs	r2, #1
 80073a8:	fa02 f303 	lsl.w	r3, r2, r3
 80073ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6a1a      	ldr	r2, [r3, #32]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	43db      	mvns	r3, r3
 80073b6:	401a      	ands	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a1a      	ldr	r2, [r3, #32]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f003 031f 	and.w	r3, r3, #31
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	fa01 f303 	lsl.w	r3, r1, r3
 80073cc:	431a      	orrs	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	621a      	str	r2, [r3, #32]
}
 80073d2:	bf00      	nop
 80073d4:	371c      	adds	r7, #28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
	...

080073e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d101      	bne.n	80073f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073f4:	2302      	movs	r3, #2
 80073f6:	e04f      	b.n	8007498 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a21      	ldr	r2, [pc, #132]	; (80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d108      	bne.n	8007434 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007428:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4313      	orrs	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a14      	ldr	r2, [pc, #80]	; (80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d009      	beq.n	800746c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007460:	d004      	beq.n	800746c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a10      	ldr	r2, [pc, #64]	; (80074a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d10c      	bne.n	8007486 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007472:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	4313      	orrs	r3, r2
 800747c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	40012c00 	.word	0x40012c00
 80074a8:	40014000 	.word	0x40014000

080074ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e040      	b.n	800757c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d106      	bne.n	8007510 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7fa f852 	bl	80015b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2224      	movs	r2, #36	; 0x24
 8007514:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0201 	bic.w	r2, r2, #1
 8007524:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f996 	bl	8007858 <UART_SetConfig>
 800752c:	4603      	mov	r3, r0
 800752e:	2b01      	cmp	r3, #1
 8007530:	d101      	bne.n	8007536 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e022      	b.n	800757c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fbc0 	bl	8007cc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685a      	ldr	r2, [r3, #4]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007552:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689a      	ldr	r2, [r3, #8]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007562:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f042 0201 	orr.w	r2, r2, #1
 8007572:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fc47 	bl	8007e08 <UART_CheckIdleState>
 800757a:	4603      	mov	r3, r0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e027      	b.n	80075e6 <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2224      	movs	r2, #36	; 0x24
 800759a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0201 	bic.w	r2, r2, #1
 80075aa:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2200      	movs	r2, #0
 80075ba:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2200      	movs	r2, #0
 80075c2:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7fa f865 	bl	8001694 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b08a      	sub	sp, #40	; 0x28
 80075f2:	af02      	add	r7, sp, #8
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	603b      	str	r3, [r7, #0]
 80075fa:	4613      	mov	r3, r2
 80075fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007602:	2b20      	cmp	r3, #32
 8007604:	f040 8081 	bne.w	800770a <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <HAL_UART_Transmit+0x26>
 800760e:	88fb      	ldrh	r3, [r7, #6]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e079      	b.n	800770c <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800761e:	2b01      	cmp	r3, #1
 8007620:	d101      	bne.n	8007626 <HAL_UART_Transmit+0x38>
 8007622:	2302      	movs	r3, #2
 8007624:	e072      	b.n	800770c <HAL_UART_Transmit+0x11e>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2221      	movs	r2, #33	; 0x21
 8007638:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800763a:	f7fa fb07 	bl	8001c4c <HAL_GetTick>
 800763e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	88fa      	ldrh	r2, [r7, #6]
 8007644:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	88fa      	ldrh	r2, [r7, #6]
 800764c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007658:	d108      	bne.n	800766c <HAL_UART_Transmit+0x7e>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d104      	bne.n	800766c <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8007662:	2300      	movs	r3, #0
 8007664:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	61bb      	str	r3, [r7, #24]
 800766a:	e003      	b.n	8007674 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007670:	2300      	movs	r3, #0
 8007672:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800767c:	e02d      	b.n	80076da <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2200      	movs	r2, #0
 8007686:	2180      	movs	r1, #128	; 0x80
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 fc02 	bl	8007e92 <UART_WaitOnFlagUntilTimeout>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e039      	b.n	800770c <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10b      	bne.n	80076b6 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	881a      	ldrh	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076aa:	b292      	uxth	r2, r2
 80076ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	3302      	adds	r3, #2
 80076b2:	61bb      	str	r3, [r7, #24]
 80076b4:	e008      	b.n	80076c8 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	781a      	ldrb	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	b292      	uxth	r2, r2
 80076c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	3301      	adds	r3, #1
 80076c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	3b01      	subs	r3, #1
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1cb      	bne.n	800767e <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2200      	movs	r2, #0
 80076ee:	2140      	movs	r1, #64	; 0x40
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 fbce 	bl	8007e92 <UART_WaitOnFlagUntilTimeout>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e005      	b.n	800770c <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2220      	movs	r2, #32
 8007704:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	e000      	b.n	800770c <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800770a:	2302      	movs	r3, #2
  }
}
 800770c:	4618      	mov	r0, r3
 800770e:	3720      	adds	r7, #32
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	4613      	mov	r3, r2
 8007720:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007726:	2b20      	cmp	r3, #32
 8007728:	d16c      	bne.n	8007804 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <HAL_UART_Receive_DMA+0x22>
 8007730:	88fb      	ldrh	r3, [r7, #6]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e065      	b.n	8007806 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007740:	2b01      	cmp	r3, #1
 8007742:	d101      	bne.n	8007748 <HAL_UART_Receive_DMA+0x34>
 8007744:	2302      	movs	r3, #2
 8007746:	e05e      	b.n	8007806 <HAL_UART_Receive_DMA+0xf2>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	88fa      	ldrh	r2, [r7, #6]
 800775a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2222      	movs	r2, #34	; 0x22
 8007768:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800776e:	2b00      	cmp	r3, #0
 8007770:	d02a      	beq.n	80077c8 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007776:	4a26      	ldr	r2, [pc, #152]	; (8007810 <HAL_UART_Receive_DMA+0xfc>)
 8007778:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800777e:	4a25      	ldr	r2, [pc, #148]	; (8007814 <HAL_UART_Receive_DMA+0x100>)
 8007780:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007786:	4a24      	ldr	r2, [pc, #144]	; (8007818 <HAL_UART_Receive_DMA+0x104>)
 8007788:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800778e:	2200      	movs	r2, #0
 8007790:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3324      	adds	r3, #36	; 0x24
 800779c:	4619      	mov	r1, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a2:	461a      	mov	r2, r3
 80077a4:	88fb      	ldrh	r3, [r7, #6]
 80077a6:	f7fc fabd 	bl	8003d24 <HAL_DMA_Start_IT>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00b      	beq.n	80077c8 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2210      	movs	r2, #16
 80077b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2220      	movs	r2, #32
 80077c2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e01e      	b.n	8007806 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077de:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689a      	ldr	r2, [r3, #8]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f042 0201 	orr.w	r2, r2, #1
 80077ee:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689a      	ldr	r2, [r3, #8]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077fe:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8007800:	2300      	movs	r3, #0
 8007802:	e000      	b.n	8007806 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8007804:	2302      	movs	r3, #2
  }
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	08007ff3 	.word	0x08007ff3
 8007814:	0800805b 	.word	0x0800805b
 8007818:	08008077 	.word	0x08008077

0800781c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007858:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800785c:	b088      	sub	sp, #32
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	689a      	ldr	r2, [r3, #8]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	431a      	orrs	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	695b      	ldr	r3, [r3, #20]
 8007874:	431a      	orrs	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	4313      	orrs	r3, r2
 800787c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	4baa      	ldr	r3, [pc, #680]	; (8007b30 <UART_SetConfig+0x2d8>)
 8007886:	4013      	ands	r3, r2
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	6812      	ldr	r2, [r2, #0]
 800788c:	69f9      	ldr	r1, [r7, #28]
 800788e:	430b      	orrs	r3, r1
 8007890:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4aa0      	ldr	r2, [pc, #640]	; (8007b34 <UART_SetConfig+0x2dc>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d004      	beq.n	80078c2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a1b      	ldr	r3, [r3, #32]
 80078bc:	69fa      	ldr	r2, [r7, #28]
 80078be:	4313      	orrs	r3, r2
 80078c0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	69fa      	ldr	r2, [r7, #28]
 80078d2:	430a      	orrs	r2, r1
 80078d4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a97      	ldr	r2, [pc, #604]	; (8007b38 <UART_SetConfig+0x2e0>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d121      	bne.n	8007924 <UART_SetConfig+0xcc>
 80078e0:	4b96      	ldr	r3, [pc, #600]	; (8007b3c <UART_SetConfig+0x2e4>)
 80078e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078e6:	f003 0303 	and.w	r3, r3, #3
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	d816      	bhi.n	800791c <UART_SetConfig+0xc4>
 80078ee:	a201      	add	r2, pc, #4	; (adr r2, 80078f4 <UART_SetConfig+0x9c>)
 80078f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f4:	08007905 	.word	0x08007905
 80078f8:	08007911 	.word	0x08007911
 80078fc:	0800790b 	.word	0x0800790b
 8007900:	08007917 	.word	0x08007917
 8007904:	2301      	movs	r3, #1
 8007906:	76fb      	strb	r3, [r7, #27]
 8007908:	e098      	b.n	8007a3c <UART_SetConfig+0x1e4>
 800790a:	2302      	movs	r3, #2
 800790c:	76fb      	strb	r3, [r7, #27]
 800790e:	e095      	b.n	8007a3c <UART_SetConfig+0x1e4>
 8007910:	2304      	movs	r3, #4
 8007912:	76fb      	strb	r3, [r7, #27]
 8007914:	e092      	b.n	8007a3c <UART_SetConfig+0x1e4>
 8007916:	2308      	movs	r3, #8
 8007918:	76fb      	strb	r3, [r7, #27]
 800791a:	e08f      	b.n	8007a3c <UART_SetConfig+0x1e4>
 800791c:	2310      	movs	r3, #16
 800791e:	76fb      	strb	r3, [r7, #27]
 8007920:	bf00      	nop
 8007922:	e08b      	b.n	8007a3c <UART_SetConfig+0x1e4>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a85      	ldr	r2, [pc, #532]	; (8007b40 <UART_SetConfig+0x2e8>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d134      	bne.n	8007998 <UART_SetConfig+0x140>
 800792e:	4b83      	ldr	r3, [pc, #524]	; (8007b3c <UART_SetConfig+0x2e4>)
 8007930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007934:	f003 030c 	and.w	r3, r3, #12
 8007938:	2b0c      	cmp	r3, #12
 800793a:	d829      	bhi.n	8007990 <UART_SetConfig+0x138>
 800793c:	a201      	add	r2, pc, #4	; (adr r2, 8007944 <UART_SetConfig+0xec>)
 800793e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007942:	bf00      	nop
 8007944:	08007979 	.word	0x08007979
 8007948:	08007991 	.word	0x08007991
 800794c:	08007991 	.word	0x08007991
 8007950:	08007991 	.word	0x08007991
 8007954:	08007985 	.word	0x08007985
 8007958:	08007991 	.word	0x08007991
 800795c:	08007991 	.word	0x08007991
 8007960:	08007991 	.word	0x08007991
 8007964:	0800797f 	.word	0x0800797f
 8007968:	08007991 	.word	0x08007991
 800796c:	08007991 	.word	0x08007991
 8007970:	08007991 	.word	0x08007991
 8007974:	0800798b 	.word	0x0800798b
 8007978:	2300      	movs	r3, #0
 800797a:	76fb      	strb	r3, [r7, #27]
 800797c:	e05e      	b.n	8007a3c <UART_SetConfig+0x1e4>
 800797e:	2302      	movs	r3, #2
 8007980:	76fb      	strb	r3, [r7, #27]
 8007982:	e05b      	b.n	8007a3c <UART_SetConfig+0x1e4>
 8007984:	2304      	movs	r3, #4
 8007986:	76fb      	strb	r3, [r7, #27]
 8007988:	e058      	b.n	8007a3c <UART_SetConfig+0x1e4>
 800798a:	2308      	movs	r3, #8
 800798c:	76fb      	strb	r3, [r7, #27]
 800798e:	e055      	b.n	8007a3c <UART_SetConfig+0x1e4>
 8007990:	2310      	movs	r3, #16
 8007992:	76fb      	strb	r3, [r7, #27]
 8007994:	bf00      	nop
 8007996:	e051      	b.n	8007a3c <UART_SetConfig+0x1e4>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a69      	ldr	r2, [pc, #420]	; (8007b44 <UART_SetConfig+0x2ec>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d120      	bne.n	80079e4 <UART_SetConfig+0x18c>
 80079a2:	4b66      	ldr	r3, [pc, #408]	; (8007b3c <UART_SetConfig+0x2e4>)
 80079a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80079ac:	2b10      	cmp	r3, #16
 80079ae:	d00f      	beq.n	80079d0 <UART_SetConfig+0x178>
 80079b0:	2b10      	cmp	r3, #16
 80079b2:	d802      	bhi.n	80079ba <UART_SetConfig+0x162>
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d005      	beq.n	80079c4 <UART_SetConfig+0x16c>
 80079b8:	e010      	b.n	80079dc <UART_SetConfig+0x184>
 80079ba:	2b20      	cmp	r3, #32
 80079bc:	d005      	beq.n	80079ca <UART_SetConfig+0x172>
 80079be:	2b30      	cmp	r3, #48	; 0x30
 80079c0:	d009      	beq.n	80079d6 <UART_SetConfig+0x17e>
 80079c2:	e00b      	b.n	80079dc <UART_SetConfig+0x184>
 80079c4:	2300      	movs	r3, #0
 80079c6:	76fb      	strb	r3, [r7, #27]
 80079c8:	e038      	b.n	8007a3c <UART_SetConfig+0x1e4>
 80079ca:	2302      	movs	r3, #2
 80079cc:	76fb      	strb	r3, [r7, #27]
 80079ce:	e035      	b.n	8007a3c <UART_SetConfig+0x1e4>
 80079d0:	2304      	movs	r3, #4
 80079d2:	76fb      	strb	r3, [r7, #27]
 80079d4:	e032      	b.n	8007a3c <UART_SetConfig+0x1e4>
 80079d6:	2308      	movs	r3, #8
 80079d8:	76fb      	strb	r3, [r7, #27]
 80079da:	e02f      	b.n	8007a3c <UART_SetConfig+0x1e4>
 80079dc:	2310      	movs	r3, #16
 80079de:	76fb      	strb	r3, [r7, #27]
 80079e0:	bf00      	nop
 80079e2:	e02b      	b.n	8007a3c <UART_SetConfig+0x1e4>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a52      	ldr	r2, [pc, #328]	; (8007b34 <UART_SetConfig+0x2dc>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d124      	bne.n	8007a38 <UART_SetConfig+0x1e0>
 80079ee:	4b53      	ldr	r3, [pc, #332]	; (8007b3c <UART_SetConfig+0x2e4>)
 80079f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80079f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079fc:	d012      	beq.n	8007a24 <UART_SetConfig+0x1cc>
 80079fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a02:	d802      	bhi.n	8007a0a <UART_SetConfig+0x1b2>
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d007      	beq.n	8007a18 <UART_SetConfig+0x1c0>
 8007a08:	e012      	b.n	8007a30 <UART_SetConfig+0x1d8>
 8007a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a0e:	d006      	beq.n	8007a1e <UART_SetConfig+0x1c6>
 8007a10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a14:	d009      	beq.n	8007a2a <UART_SetConfig+0x1d2>
 8007a16:	e00b      	b.n	8007a30 <UART_SetConfig+0x1d8>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	76fb      	strb	r3, [r7, #27]
 8007a1c:	e00e      	b.n	8007a3c <UART_SetConfig+0x1e4>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	76fb      	strb	r3, [r7, #27]
 8007a22:	e00b      	b.n	8007a3c <UART_SetConfig+0x1e4>
 8007a24:	2304      	movs	r3, #4
 8007a26:	76fb      	strb	r3, [r7, #27]
 8007a28:	e008      	b.n	8007a3c <UART_SetConfig+0x1e4>
 8007a2a:	2308      	movs	r3, #8
 8007a2c:	76fb      	strb	r3, [r7, #27]
 8007a2e:	e005      	b.n	8007a3c <UART_SetConfig+0x1e4>
 8007a30:	2310      	movs	r3, #16
 8007a32:	76fb      	strb	r3, [r7, #27]
 8007a34:	bf00      	nop
 8007a36:	e001      	b.n	8007a3c <UART_SetConfig+0x1e4>
 8007a38:	2310      	movs	r3, #16
 8007a3a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a3c      	ldr	r2, [pc, #240]	; (8007b34 <UART_SetConfig+0x2dc>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	f040 8082 	bne.w	8007b4c <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a48:	7efb      	ldrb	r3, [r7, #27]
 8007a4a:	2b08      	cmp	r3, #8
 8007a4c:	d823      	bhi.n	8007a96 <UART_SetConfig+0x23e>
 8007a4e:	a201      	add	r2, pc, #4	; (adr r2, 8007a54 <UART_SetConfig+0x1fc>)
 8007a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a54:	08007a79 	.word	0x08007a79
 8007a58:	08007a97 	.word	0x08007a97
 8007a5c:	08007a81 	.word	0x08007a81
 8007a60:	08007a97 	.word	0x08007a97
 8007a64:	08007a87 	.word	0x08007a87
 8007a68:	08007a97 	.word	0x08007a97
 8007a6c:	08007a97 	.word	0x08007a97
 8007a70:	08007a97 	.word	0x08007a97
 8007a74:	08007a8f 	.word	0x08007a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a78:	f7fe f980 	bl	8005d7c <HAL_RCC_GetPCLK1Freq>
 8007a7c:	6178      	str	r0, [r7, #20]
        break;
 8007a7e:	e00f      	b.n	8007aa0 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a80:	4b31      	ldr	r3, [pc, #196]	; (8007b48 <UART_SetConfig+0x2f0>)
 8007a82:	617b      	str	r3, [r7, #20]
        break;
 8007a84:	e00c      	b.n	8007aa0 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a86:	f7fe f8e3 	bl	8005c50 <HAL_RCC_GetSysClockFreq>
 8007a8a:	6178      	str	r0, [r7, #20]
        break;
 8007a8c:	e008      	b.n	8007aa0 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a92:	617b      	str	r3, [r7, #20]
        break;
 8007a94:	e004      	b.n	8007aa0 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	76bb      	strb	r3, [r7, #26]
        break;
 8007a9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 8100 	beq.w	8007ca8 <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	4613      	mov	r3, r2
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	4413      	add	r3, r2
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d305      	bcc.n	8007ac4 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d902      	bls.n	8007aca <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	76bb      	strb	r3, [r7, #26]
 8007ac8:	e0ee      	b.n	8007ca8 <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	4619      	mov	r1, r3
 8007ace:	f04f 0200 	mov.w	r2, #0
 8007ad2:	f04f 0300 	mov.w	r3, #0
 8007ad6:	f04f 0400 	mov.w	r4, #0
 8007ada:	0214      	lsls	r4, r2, #8
 8007adc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007ae0:	020b      	lsls	r3, r1, #8
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	6852      	ldr	r2, [r2, #4]
 8007ae6:	0852      	lsrs	r2, r2, #1
 8007ae8:	4611      	mov	r1, r2
 8007aea:	f04f 0200 	mov.w	r2, #0
 8007aee:	eb13 0b01 	adds.w	fp, r3, r1
 8007af2:	eb44 0c02 	adc.w	ip, r4, r2
 8007af6:	4658      	mov	r0, fp
 8007af8:	4661      	mov	r1, ip
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f04f 0400 	mov.w	r4, #0
 8007b02:	461a      	mov	r2, r3
 8007b04:	4623      	mov	r3, r4
 8007b06:	f7f8 fb61 	bl	80001cc <__aeabi_uldivmod>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	460c      	mov	r4, r1
 8007b0e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b16:	d308      	bcc.n	8007b2a <UART_SetConfig+0x2d2>
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b1e:	d204      	bcs.n	8007b2a <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	60da      	str	r2, [r3, #12]
 8007b28:	e0be      	b.n	8007ca8 <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	76bb      	strb	r3, [r7, #26]
 8007b2e:	e0bb      	b.n	8007ca8 <UART_SetConfig+0x450>
 8007b30:	efff69f3 	.word	0xefff69f3
 8007b34:	40008000 	.word	0x40008000
 8007b38:	40013800 	.word	0x40013800
 8007b3c:	40021000 	.word	0x40021000
 8007b40:	40004400 	.word	0x40004400
 8007b44:	40004800 	.word	0x40004800
 8007b48:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b54:	d15c      	bne.n	8007c10 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8007b56:	7efb      	ldrb	r3, [r7, #27]
 8007b58:	2b08      	cmp	r3, #8
 8007b5a:	d828      	bhi.n	8007bae <UART_SetConfig+0x356>
 8007b5c:	a201      	add	r2, pc, #4	; (adr r2, 8007b64 <UART_SetConfig+0x30c>)
 8007b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b62:	bf00      	nop
 8007b64:	08007b89 	.word	0x08007b89
 8007b68:	08007b91 	.word	0x08007b91
 8007b6c:	08007b99 	.word	0x08007b99
 8007b70:	08007baf 	.word	0x08007baf
 8007b74:	08007b9f 	.word	0x08007b9f
 8007b78:	08007baf 	.word	0x08007baf
 8007b7c:	08007baf 	.word	0x08007baf
 8007b80:	08007baf 	.word	0x08007baf
 8007b84:	08007ba7 	.word	0x08007ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b88:	f7fe f8f8 	bl	8005d7c <HAL_RCC_GetPCLK1Freq>
 8007b8c:	6178      	str	r0, [r7, #20]
        break;
 8007b8e:	e013      	b.n	8007bb8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b90:	f7fe f90a 	bl	8005da8 <HAL_RCC_GetPCLK2Freq>
 8007b94:	6178      	str	r0, [r7, #20]
        break;
 8007b96:	e00f      	b.n	8007bb8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b98:	4b49      	ldr	r3, [pc, #292]	; (8007cc0 <UART_SetConfig+0x468>)
 8007b9a:	617b      	str	r3, [r7, #20]
        break;
 8007b9c:	e00c      	b.n	8007bb8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b9e:	f7fe f857 	bl	8005c50 <HAL_RCC_GetSysClockFreq>
 8007ba2:	6178      	str	r0, [r7, #20]
        break;
 8007ba4:	e008      	b.n	8007bb8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007baa:	617b      	str	r3, [r7, #20]
        break;
 8007bac:	e004      	b.n	8007bb8 <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	76bb      	strb	r3, [r7, #26]
        break;
 8007bb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d074      	beq.n	8007ca8 <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	005a      	lsls	r2, r3, #1
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	085b      	lsrs	r3, r3, #1
 8007bc8:	441a      	add	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	2b0f      	cmp	r3, #15
 8007bda:	d916      	bls.n	8007c0a <UART_SetConfig+0x3b2>
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007be2:	d212      	bcs.n	8007c0a <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	f023 030f 	bic.w	r3, r3, #15
 8007bec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	085b      	lsrs	r3, r3, #1
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	f003 0307 	and.w	r3, r3, #7
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	89fb      	ldrh	r3, [r7, #14]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	89fa      	ldrh	r2, [r7, #14]
 8007c06:	60da      	str	r2, [r3, #12]
 8007c08:	e04e      	b.n	8007ca8 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	76bb      	strb	r3, [r7, #26]
 8007c0e:	e04b      	b.n	8007ca8 <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c10:	7efb      	ldrb	r3, [r7, #27]
 8007c12:	2b08      	cmp	r3, #8
 8007c14:	d827      	bhi.n	8007c66 <UART_SetConfig+0x40e>
 8007c16:	a201      	add	r2, pc, #4	; (adr r2, 8007c1c <UART_SetConfig+0x3c4>)
 8007c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1c:	08007c41 	.word	0x08007c41
 8007c20:	08007c49 	.word	0x08007c49
 8007c24:	08007c51 	.word	0x08007c51
 8007c28:	08007c67 	.word	0x08007c67
 8007c2c:	08007c57 	.word	0x08007c57
 8007c30:	08007c67 	.word	0x08007c67
 8007c34:	08007c67 	.word	0x08007c67
 8007c38:	08007c67 	.word	0x08007c67
 8007c3c:	08007c5f 	.word	0x08007c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c40:	f7fe f89c 	bl	8005d7c <HAL_RCC_GetPCLK1Freq>
 8007c44:	6178      	str	r0, [r7, #20]
        break;
 8007c46:	e013      	b.n	8007c70 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c48:	f7fe f8ae 	bl	8005da8 <HAL_RCC_GetPCLK2Freq>
 8007c4c:	6178      	str	r0, [r7, #20]
        break;
 8007c4e:	e00f      	b.n	8007c70 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c50:	4b1b      	ldr	r3, [pc, #108]	; (8007cc0 <UART_SetConfig+0x468>)
 8007c52:	617b      	str	r3, [r7, #20]
        break;
 8007c54:	e00c      	b.n	8007c70 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c56:	f7fd fffb 	bl	8005c50 <HAL_RCC_GetSysClockFreq>
 8007c5a:	6178      	str	r0, [r7, #20]
        break;
 8007c5c:	e008      	b.n	8007c70 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c62:	617b      	str	r3, [r7, #20]
        break;
 8007c64:	e004      	b.n	8007c70 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	76bb      	strb	r3, [r7, #26]
        break;
 8007c6e:	bf00      	nop
    }

    if (pclk != 0U)
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d018      	beq.n	8007ca8 <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	085a      	lsrs	r2, r3, #1
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	441a      	add	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	2b0f      	cmp	r3, #15
 8007c90:	d908      	bls.n	8007ca4 <UART_SetConfig+0x44c>
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c98:	d204      	bcs.n	8007ca4 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	693a      	ldr	r2, [r7, #16]
 8007ca0:	60da      	str	r2, [r3, #12]
 8007ca2:	e001      	b.n	8007ca8 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007cb4:	7ebb      	ldrb	r3, [r7, #26]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3720      	adds	r7, #32
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007cc0:	00f42400 	.word	0x00f42400

08007cc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00a      	beq.n	8007cee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	430a      	orrs	r2, r1
 8007cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf2:	f003 0302 	and.w	r3, r3, #2
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00a      	beq.n	8007d10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d14:	f003 0304 	and.w	r3, r3, #4
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00a      	beq.n	8007d32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d36:	f003 0308 	and.w	r3, r3, #8
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00a      	beq.n	8007d54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	430a      	orrs	r2, r1
 8007d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	f003 0310 	and.w	r3, r3, #16
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00a      	beq.n	8007d76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7a:	f003 0320 	and.w	r3, r3, #32
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	430a      	orrs	r2, r1
 8007d96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d01a      	beq.n	8007dda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dc2:	d10a      	bne.n	8007dda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00a      	beq.n	8007dfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	605a      	str	r2, [r3, #4]
  }
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af02      	add	r7, sp, #8
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007e16:	f7f9 ff19 	bl	8001c4c <HAL_GetTick>
 8007e1a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0308 	and.w	r3, r3, #8
 8007e26:	2b08      	cmp	r3, #8
 8007e28:	d10e      	bne.n	8007e48 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f82a 	bl	8007e92 <UART_WaitOnFlagUntilTimeout>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d001      	beq.n	8007e48 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e020      	b.n	8007e8a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0304 	and.w	r3, r3, #4
 8007e52:	2b04      	cmp	r3, #4
 8007e54:	d10e      	bne.n	8007e74 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 f814 	bl	8007e92 <UART_WaitOnFlagUntilTimeout>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e00a      	b.n	8007e8a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2220      	movs	r2, #32
 8007e78:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b084      	sub	sp, #16
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	60b9      	str	r1, [r7, #8]
 8007e9c:	603b      	str	r3, [r7, #0]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ea2:	e05d      	b.n	8007f60 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eaa:	d059      	beq.n	8007f60 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eac:	f7f9 fece 	bl	8001c4c <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	69ba      	ldr	r2, [r7, #24]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d302      	bcc.n	8007ec2 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d11b      	bne.n	8007efa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ed0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f022 0201 	bic.w	r2, r2, #1
 8007ee0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2220      	movs	r2, #32
 8007eec:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e042      	b.n	8007f80 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0304 	and.w	r3, r3, #4
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d02b      	beq.n	8007f60 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f16:	d123      	bne.n	8007f60 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f20:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f30:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 0201 	bic.w	r2, r2, #1
 8007f40:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2220      	movs	r2, #32
 8007f46:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2220      	movs	r2, #32
 8007f4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2220      	movs	r2, #32
 8007f52:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e00f      	b.n	8007f80 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	69da      	ldr	r2, [r3, #28]
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	4013      	ands	r3, r2
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	bf0c      	ite	eq
 8007f70:	2301      	moveq	r3, #1
 8007f72:	2300      	movne	r3, #0
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	461a      	mov	r2, r3
 8007f78:	79fb      	ldrb	r3, [r7, #7]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d092      	beq.n	8007ea4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007f9e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007fa6:	bf00      	nop
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b083      	sub	sp, #12
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007fc8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f022 0201 	bic.w	r2, r2, #1
 8007fd8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007fe6:	bf00      	nop
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b084      	sub	sp, #16
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0320 	and.w	r3, r3, #32
 800800a:	2b00      	cmp	r3, #0
 800800c:	d11e      	bne.n	800804c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008024:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 0201 	bic.w	r2, r2, #1
 8008034:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	689a      	ldr	r2, [r3, #8]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008044:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2220      	movs	r2, #32
 800804a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f7ff fbe5 	bl	800781c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008052:	bf00      	nop
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008066:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f7ff fbe1 	bl	8007830 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800806e:	bf00      	nop
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b086      	sub	sp, #24
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008082:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008088:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800808e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800809a:	2b80      	cmp	r3, #128	; 0x80
 800809c:	d109      	bne.n	80080b2 <UART_DMAError+0x3c>
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2b21      	cmp	r3, #33	; 0x21
 80080a2:	d106      	bne.n	80080b2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80080ac:	6978      	ldr	r0, [r7, #20]
 80080ae:	f7ff ff6b 	bl	8007f88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080bc:	2b40      	cmp	r3, #64	; 0x40
 80080be:	d109      	bne.n	80080d4 <UART_DMAError+0x5e>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2b22      	cmp	r3, #34	; 0x22
 80080c4:	d106      	bne.n	80080d4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80080ce:	6978      	ldr	r0, [r7, #20]
 80080d0:	f7ff ff6f 	bl	8007fb2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080d8:	f043 0210 	orr.w	r2, r3, #16
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080e0:	6978      	ldr	r0, [r7, #20]
 80080e2:	f7ff fbaf 	bl	8007844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080e6:	bf00      	nop
 80080e8:	3718      	adds	r7, #24
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <__libc_init_array>:
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	4e0d      	ldr	r6, [pc, #52]	; (8008128 <__libc_init_array+0x38>)
 80080f4:	4c0d      	ldr	r4, [pc, #52]	; (800812c <__libc_init_array+0x3c>)
 80080f6:	1ba4      	subs	r4, r4, r6
 80080f8:	10a4      	asrs	r4, r4, #2
 80080fa:	2500      	movs	r5, #0
 80080fc:	42a5      	cmp	r5, r4
 80080fe:	d109      	bne.n	8008114 <__libc_init_array+0x24>
 8008100:	4e0b      	ldr	r6, [pc, #44]	; (8008130 <__libc_init_array+0x40>)
 8008102:	4c0c      	ldr	r4, [pc, #48]	; (8008134 <__libc_init_array+0x44>)
 8008104:	f000 f820 	bl	8008148 <_init>
 8008108:	1ba4      	subs	r4, r4, r6
 800810a:	10a4      	asrs	r4, r4, #2
 800810c:	2500      	movs	r5, #0
 800810e:	42a5      	cmp	r5, r4
 8008110:	d105      	bne.n	800811e <__libc_init_array+0x2e>
 8008112:	bd70      	pop	{r4, r5, r6, pc}
 8008114:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008118:	4798      	blx	r3
 800811a:	3501      	adds	r5, #1
 800811c:	e7ee      	b.n	80080fc <__libc_init_array+0xc>
 800811e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008122:	4798      	blx	r3
 8008124:	3501      	adds	r5, #1
 8008126:	e7f2      	b.n	800810e <__libc_init_array+0x1e>
 8008128:	080081cc 	.word	0x080081cc
 800812c:	080081cc 	.word	0x080081cc
 8008130:	080081cc 	.word	0x080081cc
 8008134:	080081d0 	.word	0x080081d0

08008138 <memset>:
 8008138:	4402      	add	r2, r0
 800813a:	4603      	mov	r3, r0
 800813c:	4293      	cmp	r3, r2
 800813e:	d100      	bne.n	8008142 <memset+0xa>
 8008140:	4770      	bx	lr
 8008142:	f803 1b01 	strb.w	r1, [r3], #1
 8008146:	e7f9      	b.n	800813c <memset+0x4>

08008148 <_init>:
 8008148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814a:	bf00      	nop
 800814c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800814e:	bc08      	pop	{r3}
 8008150:	469e      	mov	lr, r3
 8008152:	4770      	bx	lr

08008154 <_fini>:
 8008154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008156:	bf00      	nop
 8008158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815a:	bc08      	pop	{r3}
 800815c:	469e      	mov	lr, r3
 800815e:	4770      	bx	lr
