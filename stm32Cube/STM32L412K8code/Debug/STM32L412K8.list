
STM32L412K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090d0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800925c  0800925c  0001925c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092c0  080092c0  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  080092c0  080092c0  000192c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092c8  080092c8  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092c8  080092c8  000192c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092cc  080092cc  000192cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  080092d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e40  20000034  08009304  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e74  08009304  00024e74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183a8  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c43  00000000  00000000  0003840c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  0003b050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  0003c5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d085  00000000  00000000  0003da30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f64  00000000  00000000  0005aab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c024e  00000000  00000000  00070a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00130c67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c10  00000000  00000000  00130cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000034 	.word	0x20000034
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08009244 	.word	0x08009244

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000038 	.word	0x20000038
 80001c8:	08009244 	.word	0x08009244

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <bebe>:
static union {
	uint32_t uint;
	float flt;
}cfgKoef;

void bebe(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_3); // Start timer for turn off Buzzer
 80004c8:	2108      	movs	r1, #8
 80004ca:	4815      	ldr	r0, [pc, #84]	; (8000520 <bebe+0x5c>)
 80004cc:	f006 ff9e 	bl	800740c <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4); // Start timer for turn off Buzzer
 80004d0:	210c      	movs	r1, #12
 80004d2:	4813      	ldr	r0, [pc, #76]	; (8000520 <bebe+0x5c>)
 80004d4:	f006 ff9a 	bl	800740c <HAL_TIM_OC_Start>
	HAL_Delay(200);
 80004d8:	20c8      	movs	r0, #200	; 0xc8
 80004da:	f002 f925 	bl	8002728 <HAL_Delay>
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_3);
 80004de:	2108      	movs	r1, #8
 80004e0:	480f      	ldr	r0, [pc, #60]	; (8000520 <bebe+0x5c>)
 80004e2:	f007 f871 	bl	80075c8 <HAL_TIM_OC_Stop>
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);
 80004e6:	210c      	movs	r1, #12
 80004e8:	480d      	ldr	r0, [pc, #52]	; (8000520 <bebe+0x5c>)
 80004ea:	f007 f86d 	bl	80075c8 <HAL_TIM_OC_Stop>
	HAL_Delay(200);
 80004ee:	20c8      	movs	r0, #200	; 0xc8
 80004f0:	f002 f91a 	bl	8002728 <HAL_Delay>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_3); // Start timer for turn off Buzzer
 80004f4:	2108      	movs	r1, #8
 80004f6:	480a      	ldr	r0, [pc, #40]	; (8000520 <bebe+0x5c>)
 80004f8:	f006 ff88 	bl	800740c <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4); // Start timer for turn off Buzzer
 80004fc:	210c      	movs	r1, #12
 80004fe:	4808      	ldr	r0, [pc, #32]	; (8000520 <bebe+0x5c>)
 8000500:	f006 ff84 	bl	800740c <HAL_TIM_OC_Start>
	HAL_Delay(200);
 8000504:	20c8      	movs	r0, #200	; 0xc8
 8000506:	f002 f90f 	bl	8002728 <HAL_Delay>
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_3);
 800050a:	2108      	movs	r1, #8
 800050c:	4804      	ldr	r0, [pc, #16]	; (8000520 <bebe+0x5c>)
 800050e:	f007 f85b 	bl	80075c8 <HAL_TIM_OC_Stop>
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);
 8000512:	210c      	movs	r1, #12
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <bebe+0x5c>)
 8000516:	f007 f857 	bl	80075c8 <HAL_TIM_OC_Stop>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20004db0 	.word	0x20004db0

08000524 <rwFlash>:
            13
            14
            15
            16
 */
void rwFlash(uint8_t rwFlag) {
 8000524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000528:	b091      	sub	sp, #68	; 0x44
 800052a:	af00      	add	r7, sp, #0
 800052c:	4603      	mov	r3, r0
 800052e:	73fb      	strb	r3, [r7, #15]
	uint32_t pageAdr = 0x800F800; // Begin of 31 page, last page flash for STM32L412K8.
 8000530:	4b9e      	ldr	r3, [pc, #632]	; (80007ac <rwFlash+0x288>)
 8000532:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t magicKey;
	uint64_t dataForSave;
	magicKey = *(__IO uint16_t*) pageAdr;
 8000534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	877b      	strh	r3, [r7, #58]	; 0x3a
	if ((magicKey != 0x1234) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 800053a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800053c:	f241 2234 	movw	r2, #4660	; 0x1234
 8000540:	4293      	cmp	r3, r2
 8000542:	d103      	bne.n	800054c <rwFlash+0x28>
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	2b01      	cmp	r3, #1
 8000548:	f040 80ba 	bne.w	80006c0 <rwFlash+0x19c>
		magicKey = 0x1234;
 800054c:	f241 2334 	movw	r3, #4660	; 0x1234
 8000550:	877b      	strh	r3, [r7, #58]	; 0x3a
		if (rwFlag == 0) { // For first initial
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d10f      	bne.n	8000578 <rwFlash+0x54>
			cfgData = 0;
 8000558:	4b95      	ldr	r3, [pc, #596]	; (80007b0 <rwFlash+0x28c>)
 800055a:	2200      	movs	r2, #0
 800055c:	801a      	strh	r2, [r3, #0]
			cfgLevel1 = 0;
 800055e:	4b95      	ldr	r3, [pc, #596]	; (80007b4 <rwFlash+0x290>)
 8000560:	2200      	movs	r2, #0
 8000562:	801a      	strh	r2, [r3, #0]
			cfgLevel2 = 0;
 8000564:	4b94      	ldr	r3, [pc, #592]	; (80007b8 <rwFlash+0x294>)
 8000566:	2200      	movs	r2, #0
 8000568:	801a      	strh	r2, [r3, #0]
			cfgLevel3 = 0;
 800056a:	4b94      	ldr	r3, [pc, #592]	; (80007bc <rwFlash+0x298>)
 800056c:	2200      	movs	r2, #0
 800056e:	801a      	strh	r2, [r3, #0]
			powerCoeff = 256;
 8000570:	4b93      	ldr	r3, [pc, #588]	; (80007c0 <rwFlash+0x29c>)
 8000572:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000576:	801a      	strh	r2, [r3, #0]
		}
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t PAGEError = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
		EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.Page = 31; // Page size for STM32L412K8 is 2KB
 8000580:	231f      	movs	r3, #31
 8000582:	623b      	str	r3, [r7, #32]
		EraseInitStruct.NbPages     = 1;
 8000584:	2301      	movs	r3, #1
 8000586:	627b      	str	r3, [r7, #36]	; 0x24

		flash_ok = HAL_ERROR;
 8000588:	4b8e      	ldr	r3, [pc, #568]	; (80007c4 <rwFlash+0x2a0>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
		// Unlock flash
		while(flash_ok != HAL_OK) {
 800058e:	e005      	b.n	800059c <rwFlash+0x78>
		  flash_ok = HAL_FLASH_Unlock();
 8000590:	f004 fd08 	bl	8004fa4 <HAL_FLASH_Unlock>
 8000594:	4603      	mov	r3, r0
 8000596:	461a      	mov	r2, r3
 8000598:	4b8a      	ldr	r3, [pc, #552]	; (80007c4 <rwFlash+0x2a0>)
 800059a:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK) {
 800059c:	4b89      	ldr	r3, [pc, #548]	; (80007c4 <rwFlash+0x2a0>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d1f5      	bne.n	8000590 <rwFlash+0x6c>
		}
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) == HAL_OK) {
 80005a4:	f107 0214 	add.w	r2, r7, #20
 80005a8:	f107 0318 	add.w	r3, r7, #24
 80005ac:	4611      	mov	r1, r2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 fdde 	bl	8005170 <HAL_FLASHEx_Erase>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d170      	bne.n	800069c <rwFlash+0x178>

			dataForSave = (uint64_t) (magicKey | (((uint32_t) powerCoeff << 16) & 0xFFFF0000 ) | (((uint64_t) cfgData << 32) & 0xFFFFFFFF00000000) | (((uint64_t) cfgLevel1 << 48) & 0xFFFF000000000000));
 80005ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80005bc:	4b80      	ldr	r3, [pc, #512]	; (80007c0 <rwFlash+0x29c>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	041b      	lsls	r3, r3, #16
 80005c2:	4313      	orrs	r3, r2
 80005c4:	4619      	mov	r1, r3
 80005c6:	f04f 0200 	mov.w	r2, #0
 80005ca:	e9c7 1200 	strd	r1, r2, [r7]
 80005ce:	4b78      	ldr	r3, [pc, #480]	; (80007b0 <rwFlash+0x28c>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	4619      	mov	r1, r3
 80005d4:	b289      	uxth	r1, r1
 80005d6:	f04f 0200 	mov.w	r2, #0
 80005da:	4608      	mov	r0, r1
 80005dc:	4611      	mov	r1, r2
 80005de:	f04f 0200 	mov.w	r2, #0
 80005e2:	f04f 0300 	mov.w	r3, #0
 80005e6:	4606      	mov	r6, r0
 80005e8:	0033      	movs	r3, r6
 80005ea:	2200      	movs	r2, #0
 80005ec:	6839      	ldr	r1, [r7, #0]
 80005ee:	ea41 0402 	orr.w	r4, r1, r2
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	4319      	orrs	r1, r3
 80005f6:	460d      	mov	r5, r1
 80005f8:	4b6e      	ldr	r3, [pc, #440]	; (80007b4 <rwFlash+0x290>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	b298      	uxth	r0, r3
 80005fe:	f04f 0100 	mov.w	r1, #0
 8000602:	f04f 0200 	mov.w	r2, #0
 8000606:	f04f 0300 	mov.w	r3, #0
 800060a:	0403      	lsls	r3, r0, #16
 800060c:	2200      	movs	r2, #0
 800060e:	ea44 0a02 	orr.w	sl, r4, r2
 8000612:	ea45 0b03 	orr.w	fp, r5, r3
 8000616:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
			flash_ok = HAL_ERROR;
 800061a:	4b6a      	ldr	r3, [pc, #424]	; (80007c4 <rwFlash+0x2a0>)
 800061c:	2201      	movs	r2, #1
 800061e:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8000620:	e009      	b.n	8000636 <rwFlash+0x112>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr, dataForSave); // Write  magic key into Flash
 8000622:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000626:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000628:	2000      	movs	r0, #0
 800062a:	f004 fc4f 	bl	8004ecc <HAL_FLASH_Program>
 800062e:	4603      	mov	r3, r0
 8000630:	461a      	mov	r2, r3
 8000632:	4b64      	ldr	r3, [pc, #400]	; (80007c4 <rwFlash+0x2a0>)
 8000634:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8000636:	4b63      	ldr	r3, [pc, #396]	; (80007c4 <rwFlash+0x2a0>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1f1      	bne.n	8000622 <rwFlash+0xfe>
			}

			dataForSave = (uint64_t) (cfgLevel2 | (cfgLevel3 << 16) | (uint64_t) cfgKoef.uint << 32);
 800063e:	4b5e      	ldr	r3, [pc, #376]	; (80007b8 <rwFlash+0x294>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	461a      	mov	r2, r3
 8000644:	4b5d      	ldr	r3, [pc, #372]	; (80007bc <rwFlash+0x298>)
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	041b      	lsls	r3, r3, #16
 800064a:	4313      	orrs	r3, r2
 800064c:	4618      	mov	r0, r3
 800064e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000652:	4b5d      	ldr	r3, [pc, #372]	; (80007c8 <rwFlash+0x2a4>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	461c      	mov	r4, r3
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0200 	mov.w	r2, #0
 8000660:	f04f 0300 	mov.w	r3, #0
 8000664:	0023      	movs	r3, r4
 8000666:	2200      	movs	r2, #0
 8000668:	ea40 0802 	orr.w	r8, r0, r2
 800066c:	ea41 0903 	orr.w	r9, r1, r3
 8000670:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
			flash_ok = HAL_ERROR;
 8000674:	4b53      	ldr	r3, [pc, #332]	; (80007c4 <rwFlash+0x2a0>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK) {
 800067a:	e00b      	b.n	8000694 <rwFlash+0x170>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr + 8, dataForSave); // Write Level2, Level3
 800067c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067e:	f103 0108 	add.w	r1, r3, #8
 8000682:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000686:	2000      	movs	r0, #0
 8000688:	f004 fc20 	bl	8004ecc <HAL_FLASH_Program>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b4c      	ldr	r3, [pc, #304]	; (80007c4 <rwFlash+0x2a0>)
 8000692:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK) {
 8000694:	4b4b      	ldr	r3, [pc, #300]	; (80007c4 <rwFlash+0x2a0>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1ef      	bne.n	800067c <rwFlash+0x158>
			}
		}
		// Lock flash
		flash_ok = HAL_ERROR;
 800069c:	4b49      	ldr	r3, [pc, #292]	; (80007c4 <rwFlash+0x2a0>)
 800069e:	2201      	movs	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK) {
 80006a2:	e005      	b.n	80006b0 <rwFlash+0x18c>
			flash_ok = HAL_FLASH_Lock();
 80006a4:	f004 fca0 	bl	8004fe8 <HAL_FLASH_Lock>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b45      	ldr	r3, [pc, #276]	; (80007c4 <rwFlash+0x2a0>)
 80006ae:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK) {
 80006b0:	4b44      	ldr	r3, [pc, #272]	; (80007c4 <rwFlash+0x2a0>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d1f5      	bne.n	80006a4 <rwFlash+0x180>
		}
		bebe();
 80006b8:	f7ff ff04 	bl	80004c4 <bebe>
	if ((magicKey != 0x1234) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 80006bc:	bf00      	nop
			Thr1 = (uint32_t) (tmpVal / (float)cfgLevel1);
			Thr2 = (uint32_t) (tmpVal / (float)cfgLevel2);
			Thr3 = (uint32_t) (tmpVal / (float)cfgLevel3);
		}
	}
}
 80006be:	e070      	b.n	80007a2 <rwFlash+0x27e>
		powerCoeff = *(__IO uint16_t*) (pageAdr + 2);
 80006c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006c2:	3302      	adds	r3, #2
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	4b3d      	ldr	r3, [pc, #244]	; (80007c0 <rwFlash+0x29c>)
 80006ca:	801a      	strh	r2, [r3, #0]
		cfgData = *(__IO uint16_t*) (pageAdr + 4);
 80006cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ce:	3304      	adds	r3, #4
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	4b36      	ldr	r3, [pc, #216]	; (80007b0 <rwFlash+0x28c>)
 80006d6:	801a      	strh	r2, [r3, #0]
		resolution = (uint8_t) (cfgData >> 8 & 0x3);
 80006d8:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <rwFlash+0x28c>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	b29b      	uxth	r3, r3
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	f003 0303 	and.w	r3, r3, #3
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	4b38      	ldr	r3, [pc, #224]	; (80007cc <rwFlash+0x2a8>)
 80006ea:	701a      	strb	r2, [r3, #0]
		cfgLevel1 = *(__IO uint16_t*) (pageAdr + 6);
 80006ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ee:	3306      	adds	r3, #6
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	4b2f      	ldr	r3, [pc, #188]	; (80007b4 <rwFlash+0x290>)
 80006f6:	801a      	strh	r2, [r3, #0]
		cfgLevel2 = *(__IO uint16_t*) (pageAdr + 8);
 80006f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006fa:	3308      	adds	r3, #8
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	b29a      	uxth	r2, r3
 8000700:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <rwFlash+0x294>)
 8000702:	801a      	strh	r2, [r3, #0]
		cfgLevel3 = *(__IO uint16_t*) (pageAdr + 10);
 8000704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000706:	330a      	adds	r3, #10
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	b29a      	uxth	r2, r3
 800070c:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <rwFlash+0x298>)
 800070e:	801a      	strh	r2, [r3, #0]
		uint32_t koefAddr = pageAdr + 12;
 8000710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000712:	330c      	adds	r3, #12
 8000714:	637b      	str	r3, [r7, #52]	; 0x34
		cfgKoef.uint = *(__IO uint32_t*) (koefAddr);
 8000716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a2b      	ldr	r2, [pc, #172]	; (80007c8 <rwFlash+0x2a4>)
 800071c:	6013      	str	r3, [r2, #0]
		if (cfgKoef.flt > 0) {
 800071e:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <rwFlash+0x2a4>)
 8000720:	edd3 7a00 	vldr	s15, [r3]
 8000724:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072c:	dc00      	bgt.n	8000730 <rwFlash+0x20c>
}
 800072e:	e038      	b.n	80007a2 <rwFlash+0x27e>
			float tmpVal = cfgKoef.flt * 1000;
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <rwFlash+0x2a4>)
 8000732:	edd3 7a00 	vldr	s15, [r3]
 8000736:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80007d0 <rwFlash+0x2ac>
 800073a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800073e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			Thr1 = (uint32_t) (tmpVal / (float)cfgLevel1);
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <rwFlash+0x290>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	ee07 3a90 	vmov	s15, r3
 800074a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800074e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800075a:	ee17 2a90 	vmov	r2, s15
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <rwFlash+0x2b0>)
 8000760:	601a      	str	r2, [r3, #0]
			Thr2 = (uint32_t) (tmpVal / (float)cfgLevel2);
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <rwFlash+0x294>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	ee07 3a90 	vmov	s15, r3
 800076a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800076e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800077a:	ee17 2a90 	vmov	r2, s15
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <rwFlash+0x2b4>)
 8000780:	601a      	str	r2, [r3, #0]
			Thr3 = (uint32_t) (tmpVal / (float)cfgLevel3);
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <rwFlash+0x298>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	ee07 3a90 	vmov	s15, r3
 800078a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800078e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800079a:	ee17 2a90 	vmov	r2, s15
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <rwFlash+0x2b8>)
 80007a0:	601a      	str	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	3744      	adds	r7, #68	; 0x44
 80007a6:	46bd      	mov	sp, r7
 80007a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007ac:	0800f800 	.word	0x0800f800
 80007b0:	20004e04 	.word	0x20004e04
 80007b4:	20004e0a 	.word	0x20004e0a
 80007b8:	20004e08 	.word	0x20004e08
 80007bc:	20004226 	.word	0x20004226
 80007c0:	2000423c 	.word	0x2000423c
 80007c4:	20004e6c 	.word	0x20004e6c
 80007c8:	2000415c 	.word	0x2000415c
 80007cc:	20004154 	.word	0x20004154
 80007d0:	447a0000 	.word	0x447a0000
 80007d4:	20000064 	.word	0x20000064
 80007d8:	20000068 	.word	0x20000068
 80007dc:	2000006c 	.word	0x2000006c

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b096      	sub	sp, #88	; 0x58
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e6:	f001 ff2a 	bl	800263e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ea:	f000 fda9 	bl	8001340 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ee:	f001 f8d3 	bl	8001998 <MX_GPIO_Init>
  MX_DMA_Init();
 80007f2:	f001 f8ab 	bl	800194c <MX_DMA_Init>
  MX_ADC1_Init();
 80007f6:	f000 fe05 	bl	8001404 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80007fa:	f001 f873 	bl	80018e4 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 80007fe:	f000 ffe7 	bl	80017d0 <MX_TIM15_Init>
  MX_ADC2_Init();
 8000802:	f000 fe91 	bl	8001528 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000806:	f000 ff2f 	bl	8001668 <MX_TIM2_Init>
  MX_TIM16_Init();
 800080a:	f001 f83b 	bl	8001884 <MX_TIM16_Init>
  MX_TIM6_Init();
 800080e:	f000 ffa9 	bl	8001764 <MX_TIM6_Init>
  MX_LPTIM2_Init();
 8000812:	f000 fef9 	bl	8001608 <MX_LPTIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_LPTIM_Counter_Stop_IT(&hlptim2);
 8000816:	48ab      	ldr	r0, [pc, #684]	; (8000ac4 <main+0x2e4>)
 8000818:	f005 f998 	bl	8005b4c <HAL_LPTIM_Counter_Stop_IT>
  //HAL_PWREx_EnableLowPowerRunMode();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int j = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	657b      	str	r3, [r7, #84]	; 0x54
  uint8_t btCommand[sizeCommand];
  uint8_t prefix[3] = {'<', 'B', '>'};
 8000820:	4aa9      	ldr	r2, [pc, #676]	; (8000ac8 <main+0x2e8>)
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	6812      	ldr	r2, [r2, #0]
 8000828:	4611      	mov	r1, r2
 800082a:	8019      	strh	r1, [r3, #0]
 800082c:	3302      	adds	r3, #2
 800082e:	0c12      	lsrs	r2, r2, #16
 8000830:	701a      	strb	r2, [r3, #0]
  /*
   * Температура с учетом калибровки
   * (TS_CAL2_TEMP - TS_CAL1_TEMP) / (TS_CAL2 - TS_CAL1) * (TS_DATA - TS_CAL1) + 30
   *
   * */
  temperatureKoeff1 = (float) (TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP) / (float) (*TEMPSENSOR_CAL2_ADDR - *TEMPSENSOR_CAL1_ADDR);
 8000832:	4ba6      	ldr	r3, [pc, #664]	; (8000acc <main+0x2ec>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	461a      	mov	r2, r3
 8000838:	4ba5      	ldr	r3, [pc, #660]	; (8000ad0 <main+0x2f0>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	ee07 3a90 	vmov	s15, r3
 8000842:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000846:	eddf 6aa3 	vldr	s13, [pc, #652]	; 8000ad4 <main+0x2f4>
 800084a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800084e:	4ba2      	ldr	r3, [pc, #648]	; (8000ad8 <main+0x2f8>)
 8000850:	edc3 7a00 	vstr	s15, [r3]
  temperatureKoeff2 = 30 - temperatureKoeff1 * (float) ( *(__IO uint16_t*) TEMPSENSOR_CAL1_ADDR);
 8000854:	4b9e      	ldr	r3, [pc, #632]	; (8000ad0 <main+0x2f0>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	b29b      	uxth	r3, r3
 800085a:	ee07 3a90 	vmov	s15, r3
 800085e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000862:	4b9d      	ldr	r3, [pc, #628]	; (8000ad8 <main+0x2f8>)
 8000864:	edd3 7a00 	vldr	s15, [r3]
 8000868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800086c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000874:	4b99      	ldr	r3, [pc, #612]	; (8000adc <main+0x2fc>)
 8000876:	edc3 7a00 	vstr	s15, [r3]
  temperatureKoeff1 = temperatureKoeff1 * 4 * ADC_REF_VOLTAGE / 3.0f;	// ADC 10 разрядов, default Vref = 3v.
 800087a:	4b97      	ldr	r3, [pc, #604]	; (8000ad8 <main+0x2f8>)
 800087c:	edd3 7a00 	vldr	s15, [r3]
 8000880:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000888:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8000ae0 <main+0x300>
 800088c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000890:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000898:	4b8f      	ldr	r3, [pc, #572]	; (8000ad8 <main+0x2f8>)
 800089a:	edc3 7a00 	vstr	s15, [r3]

  uint32_t initDelay, oldTime = HAL_GetTick();
 800089e:	f001 ff37 	bl	8002710 <HAL_GetTick>
 80008a2:	6338      	str	r0, [r7, #48]	; 0x30
  initDelay = oldTime;
 80008a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  oldTimeAll = oldTime;
 80008a8:	4a8e      	ldr	r2, [pc, #568]	; (8000ae4 <main+0x304>)
 80008aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008ac:	6013      	str	r3, [r2, #0]
  sleepFlag = oldTime;
 80008ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	bf14      	ite	ne
 80008b4:	2301      	movne	r3, #1
 80008b6:	2300      	moveq	r3, #0
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b8b      	ldr	r3, [pc, #556]	; (8000ae8 <main+0x308>)
 80008bc:	701a      	strb	r2, [r3, #0]
  batteryInterval = 0;
 80008be:	4b8b      	ldr	r3, [pc, #556]	; (8000aec <main+0x30c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
  counterCC = 0;
 80008c4:	4b8a      	ldr	r3, [pc, #552]	; (8000af0 <main+0x310>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]

  rwFlash(0); // Read config from flash.
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff fe2a 	bl	8000524 <rwFlash>

  if (powerCoeff == 0 || powerCoeff > 4095) {
 80008d0:	4b88      	ldr	r3, [pc, #544]	; (8000af4 <main+0x314>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d004      	beq.n	80008e2 <main+0x102>
 80008d8:	4b86      	ldr	r3, [pc, #536]	; (8000af4 <main+0x314>)
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008e0:	d302      	bcc.n	80008e8 <main+0x108>
	  powerCoeff = 60;
 80008e2:	4b84      	ldr	r3, [pc, #528]	; (8000af4 <main+0x314>)
 80008e4:	223c      	movs	r2, #60	; 0x3c
 80008e6:	801a      	strh	r2, [r3, #0]
  }
  HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_SET); // LED on.
 80008e8:	2201      	movs	r2, #1
 80008ea:	2108      	movs	r1, #8
 80008ec:	4882      	ldr	r0, [pc, #520]	; (8000af8 <main+0x318>)
 80008ee:	f004 ffbf 	bl	8005870 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, COM_PIN, GPIO_PIN_SET); // Com pin disable
 80008f2:	2201      	movs	r2, #1
 80008f4:	2140      	movs	r1, #64	; 0x40
 80008f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fa:	f004 ffb9 	bl	8005870 <HAL_GPIO_WritePin>
  __HAL_TIM_CLEAR_FLAG(&htim15, TIM_SR_UIF); // Clear flags
 80008fe:	4b7f      	ldr	r3, [pc, #508]	; (8000afc <main+0x31c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f06f 0201 	mvn.w	r2, #1
 8000906:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim15); // Start timer for turn off LED
 8000908:	487c      	ldr	r0, [pc, #496]	; (8000afc <main+0x31c>)
 800090a:	f006 fc9b 	bl	8007244 <HAL_TIM_Base_Start_IT>
  //
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_3);  // Sound on
 800090e:	2108      	movs	r1, #8
 8000910:	487b      	ldr	r0, [pc, #492]	; (8000b00 <main+0x320>)
 8000912:	f006 fd7b 	bl	800740c <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);  // Sound on
 8000916:	210c      	movs	r1, #12
 8000918:	4879      	ldr	r0, [pc, #484]	; (8000b00 <main+0x320>)
 800091a:	f006 fd77 	bl	800740c <HAL_TIM_OC_Start>
  HAL_GPIO_WritePin(GPIOA, VIBRO_PIN, GPIO_PIN_SET); // Vibro on.
 800091e:	2201      	movs	r2, #1
 8000920:	2102      	movs	r1, #2
 8000922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000926:	f004 ffa3 	bl	8005870 <HAL_GPIO_WritePin>
  __HAL_TIM_CLEAR_FLAG(&htim16, TIM_SR_UIF); // Clear flags
 800092a:	4b76      	ldr	r3, [pc, #472]	; (8000b04 <main+0x324>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f06f 0201 	mvn.w	r2, #1
 8000932:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 8000934:	4873      	ldr	r0, [pc, #460]	; (8000b04 <main+0x324>)
 8000936:	f006 fc85 	bl	8007244 <HAL_TIM_Base_Start_IT>

  alarmLevel = 0;
 800093a:	4b73      	ldr	r3, [pc, #460]	; (8000b08 <main+0x328>)
 800093c:	2200      	movs	r2, #0
 800093e:	801a      	strh	r2, [r3, #0]
  alarmCount = 0;
 8000940:	4b72      	ldr	r3, [pc, #456]	; (8000b0c <main+0x32c>)
 8000942:	2200      	movs	r2, #0
 8000944:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim6); // Alarm timer.
 8000946:	4872      	ldr	r0, [pc, #456]	; (8000b10 <main+0x330>)
 8000948:	f006 fc7c 	bl	8007244 <HAL_TIM_Base_Start_IT>
	  counterCC = 0;
	  oldTime = HAL_GetTick();
	  ssd1306_SetCursor(0, 0);
	  ssd1306_WriteString(counterPP, Font_6x8, 0x01);
	#endif
	  uint32_t max = 1;
 800094c:	2301      	movs	r3, #1
 800094e:	653b      	str	r3, [r7, #80]	; 0x50
	  for ( int i = reservDataSize; i < 2050; i++) {
 8000950:	2306      	movs	r3, #6
 8000952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000954:	e00f      	b.n	8000976 <main+0x196>
		  if (spectrData[i][0] > max)
 8000956:	4a6f      	ldr	r2, [pc, #444]	; (8000b14 <main+0x334>)
 8000958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800095a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800095e:	461a      	mov	r2, r3
 8000960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000962:	4293      	cmp	r3, r2
 8000964:	d204      	bcs.n	8000970 <main+0x190>
			  max = spectrData[i][0];
 8000966:	4a6b      	ldr	r2, [pc, #428]	; (8000b14 <main+0x334>)
 8000968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800096a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800096e:	653b      	str	r3, [r7, #80]	; 0x50
	  for ( int i = reservDataSize; i < 2050; i++) {
 8000970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000972:	3301      	adds	r3, #1
 8000974:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000978:	f640 0201 	movw	r2, #2049	; 0x801
 800097c:	4293      	cmp	r3, r2
 800097e:	ddea      	ble.n	8000956 <main+0x176>
	  */
	#ifdef DISPLAY_ENABLE
	  ssd1306_UpdateScreen();
	#endif
	  // Delay after on.
	  if (initFlag && (HAL_GetTick() - initDelay > INIT_TIME)) {
 8000980:	4b65      	ldr	r3, [pc, #404]	; (8000b18 <main+0x338>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d017      	beq.n	80009b8 <main+0x1d8>
 8000988:	f001 fec2 	bl	8002710 <HAL_GetTick>
 800098c:	4602      	mov	r2, r0
 800098e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000996:	d90f      	bls.n	80009b8 <main+0x1d8>
		  initFlag = 0;
 8000998:	4b5f      	ldr	r3, [pc, #380]	; (8000b18 <main+0x338>)
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_IT(&hadc2);  // Init ADC for sipm channel.
 800099e:	485f      	ldr	r0, [pc, #380]	; (8000b1c <main+0x33c>)
 80009a0:	f002 fa8e 	bl	8002ec0 <HAL_ADC_Start_IT>
		  oldTimeAll = HAL_GetTick();
 80009a4:	f001 feb4 	bl	8002710 <HAL_GetTick>
 80009a8:	4603      	mov	r3, r0
 80009aa:	4a4e      	ldr	r2, [pc, #312]	; (8000ae4 <main+0x304>)
 80009ac:	6013      	str	r3, [r2, #0]
		  HAL_LPTIM_Counter_Start_IT(&hlptim2, 32000);
 80009ae:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 80009b2:	4844      	ldr	r0, [pc, #272]	; (8000ac4 <main+0x2e4>)
 80009b4:	f005 f83c 	bl	8005a30 <HAL_LPTIM_Counter_Start_IT>
	  }
	#ifdef DISPLAY_ENABLE
	  ssd1306_SetCursor(0, 24);
	#endif
	  /* Status JDY-19, BT connected ? */
	  if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == 1 ) { // BT State active ?
 80009b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c0:	f004 ff3e 	bl	8005840 <HAL_GPIO_ReadPin>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	f040 83f0 	bne.w	80011ac <main+0x9cc>
	#ifdef DISPLAY_ENABLE
		  ssd1306_WriteString("BT: connect   ", Font_6x8, 0x01);
	#endif
		  /* Init uart after sleep */
		  if (initUART) {
 80009cc:	4b54      	ldr	r3, [pc, #336]	; (8000b20 <main+0x340>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d00c      	beq.n	80009ee <main+0x20e>
			  HAL_UART_Init(&huart1);
 80009d4:	4853      	ldr	r0, [pc, #332]	; (8000b24 <main+0x344>)
 80009d6:	f007 fd8d 	bl	80084f4 <HAL_UART_Init>
			  HAL_UART_Receive_DMA(&huart1, btCommand, sizeCommand);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	2214      	movs	r2, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	4850      	ldr	r0, [pc, #320]	; (8000b24 <main+0x344>)
 80009e4:	f007 fea2 	bl	800872c <HAL_UART_Receive_DMA>
			  initUART = 0;
 80009e8:	4b4d      	ldr	r3, [pc, #308]	; (8000b20 <main+0x340>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
		  }

		  /* Receive data from android */
		  if (hdma_usart1_rx.State == HAL_DMA_STATE_READY) {
 80009ee:	4b4e      	ldr	r3, [pc, #312]	; (8000b28 <main+0x348>)
 80009f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	f040 8146 	bne.w	8000c88 <main+0x4a8>
			  HAL_UART_Receive_DMA(&huart1, btCommand, sizeCommand);
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	2214      	movs	r2, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4847      	ldr	r0, [pc, #284]	; (8000b24 <main+0x344>)
 8000a06:	f007 fe91 	bl	800872c <HAL_UART_Receive_DMA>
			  if (btCommand[0] == '<' && btCommand[2] == '>') {
 8000a0a:	7b3b      	ldrb	r3, [r7, #12]
 8000a0c:	2b3c      	cmp	r3, #60	; 0x3c
 8000a0e:	f040 813b 	bne.w	8000c88 <main+0x4a8>
 8000a12:	7bbb      	ldrb	r3, [r7, #14]
 8000a14:	2b3e      	cmp	r3, #62	; 0x3e
 8000a16:	f040 8137 	bne.w	8000c88 <main+0x4a8>
				  uint16_t CS = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				  for (int i = 0; i < 18; i++) {
 8000a20:	2300      	movs	r3, #0
 8000a22:	647b      	str	r3, [r7, #68]	; 0x44
 8000a24:	e00d      	b.n	8000a42 <main+0x262>
					  CS = CS + btCommand[i];
 8000a26:	f107 020c 	add.w	r2, r7, #12
 8000a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a2c:	4413      	add	r3, r2
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000a36:	4413      	add	r3, r2
 8000a38:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				  for (int i = 0; i < 18; i++) {
 8000a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a3e:	3301      	adds	r3, #1
 8000a40:	647b      	str	r3, [r7, #68]	; 0x44
 8000a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a44:	2b11      	cmp	r3, #17
 8000a46:	ddee      	ble.n	8000a26 <main+0x246>
				  }
				  if (((CS & 0xFF) == btCommand[18]) && (((CS >> 8) & 0xFF) == btCommand[19])) {
 8000a48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	7fba      	ldrb	r2, [r7, #30]
 8000a50:	4293      	cmp	r3, r2
 8000a52:	f040 8119 	bne.w	8000c88 <main+0x4a8>
 8000a56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000a5a:	0a1b      	lsrs	r3, r3, #8
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	7ffa      	ldrb	r2, [r7, #31]
 8000a62:	4293      	cmp	r3, r2
 8000a64:	f040 8110 	bne.w	8000c88 <main+0x4a8>
					  //HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
					  //HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
					  if (btCommand[1] == '1')  { // Clear statistics
 8000a68:	7b7b      	ldrb	r3, [r7, #13]
 8000a6a:	2b31      	cmp	r3, #49	; 0x31
 8000a6c:	d166      	bne.n	8000b3c <main+0x35c>
						  for (int i = 0; i < 2050; i++) {
 8000a6e:	2300      	movs	r3, #0
 8000a70:	643b      	str	r3, [r7, #64]	; 0x40
 8000a72:	e019      	b.n	8000aa8 <main+0x2c8>
							  spectrData[i][specterHistory] = 0;
 8000a74:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <main+0x34c>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4a26      	ldr	r2, [pc, #152]	; (8000b14 <main+0x334>)
 8000a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	440b      	add	r3, r1
 8000a82:	2100      	movs	r1, #0
 8000a84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							  batteryInterval = 0;
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <main+0x30c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
							  if (specterHistory == 1) {
 8000a8e:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <main+0x34c>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d105      	bne.n	8000aa2 <main+0x2c2>
								  counterCCAlarm = 0;
 8000a96:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <main+0x350>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
								  alarmTime = 0;
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <main+0x354>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
						  for (int i = 0; i < 2050; i++) {
 8000aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	643b      	str	r3, [r7, #64]	; 0x40
 8000aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000aaa:	f640 0201 	movw	r2, #2049	; 0x801
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	dde0      	ble.n	8000a74 <main+0x294>
							  }
						  }
						  oldTimeAll = HAL_GetTick();
 8000ab2:	f001 fe2d 	bl	8002710 <HAL_GetTick>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <main+0x304>)
 8000aba:	6013      	str	r3, [r2, #0]
						  counterALL = 0;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <main+0x358>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	e0e1      	b.n	8000c88 <main+0x4a8>
 8000ac4:	200042f0 	.word	0x200042f0
 8000ac8:	08009274 	.word	0x08009274
 8000acc:	1fff75ca 	.word	0x1fff75ca
 8000ad0:	1fff75a8 	.word	0x1fff75a8
 8000ad4:	42c80000 	.word	0x42c80000
 8000ad8:	20004e00 	.word	0x20004e00
 8000adc:	2000416c 	.word	0x2000416c
 8000ae0:	40333333 	.word	0x40333333
 8000ae4:	20004da4 	.word	0x20004da4
 8000ae8:	20000003 	.word	0x20000003
 8000aec:	20004dac 	.word	0x20004dac
 8000af0:	20000054 	.word	0x20000054
 8000af4:	2000423c 	.word	0x2000423c
 8000af8:	48000400 	.word	0x48000400
 8000afc:	200041d8 	.word	0x200041d8
 8000b00:	20004db0 	.word	0x20004db0
 8000b04:	20004e0c 	.word	0x20004e0c
 8000b08:	20004224 	.word	0x20004224
 8000b0c:	20004dfc 	.word	0x20004dfc
 8000b10:	20004d58 	.word	0x20004d58
 8000b14:	20000074 	.word	0x20000074
 8000b18:	20000002 	.word	0x20000002
 8000b1c:	20004174 	.word	0x20004174
 8000b20:	20000004 	.word	0x20000004
 8000b24:	2000432c 	.word	0x2000432c
 8000b28:	200042a8 	.word	0x200042a8
 8000b2c:	20004155 	.word	0x20004155
 8000b30:	20000050 	.word	0x20000050
 8000b34:	2000005c 	.word	0x2000005c
 8000b38:	20000058 	.word	0x20000058
					  } else if (btCommand[1] == '2') { // Write config data
 8000b3c:	7b7b      	ldrb	r3, [r7, #13]
 8000b3e:	2b32      	cmp	r3, #50	; 0x32
 8000b40:	f040 808e 	bne.w	8000c60 <main+0x480>
						  cfgData = ((btCommand[4] << 8) & 0xFF00) | btCommand[3];
 8000b44:	7c3b      	ldrb	r3, [r7, #16]
 8000b46:	021b      	lsls	r3, r3, #8
 8000b48:	b21a      	sxth	r2, r3
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b8c      	ldr	r3, [pc, #560]	; (8000d88 <main+0x5a8>)
 8000b56:	801a      	strh	r2, [r3, #0]
						  resolution = (uint8_t) (cfgData >> 8 & 0x3);
 8000b58:	4b8b      	ldr	r3, [pc, #556]	; (8000d88 <main+0x5a8>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	f003 0303 	and.w	r3, r3, #3
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	4b88      	ldr	r3, [pc, #544]	; (8000d8c <main+0x5ac>)
 8000b6a:	701a      	strb	r2, [r3, #0]
						  cfgLevel1 = ((btCommand[6] << 8) & 0xFF00) | btCommand[5];
 8000b6c:	7cbb      	ldrb	r3, [r7, #18]
 8000b6e:	021b      	lsls	r3, r3, #8
 8000b70:	b21a      	sxth	r2, r3
 8000b72:	7c7b      	ldrb	r3, [r7, #17]
 8000b74:	b21b      	sxth	r3, r3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	b21b      	sxth	r3, r3
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	4b84      	ldr	r3, [pc, #528]	; (8000d90 <main+0x5b0>)
 8000b7e:	801a      	strh	r2, [r3, #0]
						  cfgLevel2 = ((btCommand[8] << 8) & 0xFF00) | btCommand[7];
 8000b80:	7d3b      	ldrb	r3, [r7, #20]
 8000b82:	021b      	lsls	r3, r3, #8
 8000b84:	b21a      	sxth	r2, r3
 8000b86:	7cfb      	ldrb	r3, [r7, #19]
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b21b      	sxth	r3, r3
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	4b80      	ldr	r3, [pc, #512]	; (8000d94 <main+0x5b4>)
 8000b92:	801a      	strh	r2, [r3, #0]
						  cfgLevel3 = ((btCommand[10] << 8) & 0xFF00) | btCommand[9];
 8000b94:	7dbb      	ldrb	r3, [r7, #22]
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	7d7b      	ldrb	r3, [r7, #21]
 8000b9c:	b21b      	sxth	r3, r3
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	b21b      	sxth	r3, r3
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	4b7c      	ldr	r3, [pc, #496]	; (8000d98 <main+0x5b8>)
 8000ba6:	801a      	strh	r2, [r3, #0]
						  //cfgKoefRh = *(float *) &btCommand[11];
						  cfgKoef.uint = (uint32_t) (btCommand[11] | (uint32_t) btCommand[12] << 8 | (uint32_t) btCommand[13] << 16 | (uint32_t) btCommand[14] << 24);
 8000ba8:	7dfb      	ldrb	r3, [r7, #23]
 8000baa:	461a      	mov	r2, r3
 8000bac:	7e3b      	ldrb	r3, [r7, #24]
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	7e7b      	ldrb	r3, [r7, #25]
 8000bb4:	041b      	lsls	r3, r3, #16
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	7ebb      	ldrb	r3, [r7, #26]
 8000bba:	061b      	lsls	r3, r3, #24
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	4a77      	ldr	r2, [pc, #476]	; (8000d9c <main+0x5bc>)
 8000bc0:	6013      	str	r3, [r2, #0]
						  powerCoeff = (uint16_t) (btCommand[15] | (uint16_t) btCommand[16] << 8);
 8000bc2:	7efb      	ldrb	r3, [r7, #27]
 8000bc4:	b21a      	sxth	r2, r3
 8000bc6:	7f3b      	ldrb	r3, [r7, #28]
 8000bc8:	021b      	lsls	r3, r3, #8
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	b21b      	sxth	r3, r3
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	4b73      	ldr	r3, [pc, #460]	; (8000da0 <main+0x5c0>)
 8000bd4:	801a      	strh	r2, [r3, #0]
						  if (cfgKoef.flt > 0) {
 8000bd6:	4b71      	ldr	r3, [pc, #452]	; (8000d9c <main+0x5bc>)
 8000bd8:	edd3 7a00 	vldr	s15, [r3]
 8000bdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be4:	dd38      	ble.n	8000c58 <main+0x478>
							  //float tmpVal = cfgKoefRh * 1000;
							  float tmpVal = cfgKoef.flt * 1000;
 8000be6:	4b6d      	ldr	r3, [pc, #436]	; (8000d9c <main+0x5bc>)
 8000be8:	edd3 7a00 	vldr	s15, [r3]
 8000bec:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8000da4 <main+0x5c4>
 8000bf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
							  Thr1 = (uint32_t) (tmpVal / (float)cfgLevel1);
 8000bf8:	4b65      	ldr	r3, [pc, #404]	; (8000d90 <main+0x5b0>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	ee07 3a90 	vmov	s15, r3
 8000c00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c04:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c10:	ee17 2a90 	vmov	r2, s15
 8000c14:	4b64      	ldr	r3, [pc, #400]	; (8000da8 <main+0x5c8>)
 8000c16:	601a      	str	r2, [r3, #0]
							  Thr2 = (uint32_t) (tmpVal / (float)cfgLevel2);
 8000c18:	4b5e      	ldr	r3, [pc, #376]	; (8000d94 <main+0x5b4>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	ee07 3a90 	vmov	s15, r3
 8000c20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c24:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c30:	ee17 2a90 	vmov	r2, s15
 8000c34:	4b5d      	ldr	r3, [pc, #372]	; (8000dac <main+0x5cc>)
 8000c36:	601a      	str	r2, [r3, #0]
							  Thr3 = (uint32_t) (tmpVal / (float)cfgLevel3);
 8000c38:	4b57      	ldr	r3, [pc, #348]	; (8000d98 <main+0x5b8>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	ee07 3a90 	vmov	s15, r3
 8000c40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c44:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c50:	ee17 2a90 	vmov	r2, s15
 8000c54:	4b56      	ldr	r3, [pc, #344]	; (8000db0 <main+0x5d0>)
 8000c56:	601a      	str	r2, [r3, #0]
						  }
						  rwFlash(1); // Write to flash
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff fc63 	bl	8000524 <rwFlash>
 8000c5e:	e013      	b.n	8000c88 <main+0x4a8>
					  } else if (btCommand[1] == '3') {  // Request log data.
 8000c60:	7b7b      	ldrb	r3, [r7, #13]
 8000c62:	2b33      	cmp	r3, #51	; 0x33
 8000c64:	d103      	bne.n	8000c6e <main+0x48e>
						  logDataFlag = 1;
 8000c66:	4b53      	ldr	r3, [pc, #332]	; (8000db4 <main+0x5d4>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	e00c      	b.n	8000c88 <main+0x4a8>
					  } else if (btCommand[1] == '4') {  // Toggle to alarm specter array
 8000c6e:	7b7b      	ldrb	r3, [r7, #13]
 8000c70:	2b34      	cmp	r3, #52	; 0x34
 8000c72:	d103      	bne.n	8000c7c <main+0x49c>
						  specterHistory = 1;
 8000c74:	4b50      	ldr	r3, [pc, #320]	; (8000db8 <main+0x5d8>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
 8000c7a:	e005      	b.n	8000c88 <main+0x4a8>
					  } else if (btCommand[1] == '5') {  // Toggle to normal specter array
 8000c7c:	7b7b      	ldrb	r3, [r7, #13]
 8000c7e:	2b35      	cmp	r3, #53	; 0x35
 8000c80:	d102      	bne.n	8000c88 <main+0x4a8>
						  specterHistory = 0;
 8000c82:	4b4d      	ldr	r3, [pc, #308]	; (8000db8 <main+0x5d8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
		  }

		  /*
		   *  Transmit data over BT.
		   */
		  if (logDataFlag == 0) {  // Spectert data
 8000c88:	4b4a      	ldr	r3, [pc, #296]	; (8000db4 <main+0x5d4>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	f083 0301 	eor.w	r3, r3, #1
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f000 80e7 	beq.w	8000e66 <main+0x686>
			  if (specterHistory == 0) {
 8000c98:	4b47      	ldr	r3, [pc, #284]	; (8000db8 <main+0x5d8>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d138      	bne.n	8000d12 <main+0x532>
				  prefix[1] = 'B';		// Normal specter
 8000ca0:	2342      	movs	r3, #66	; 0x42
 8000ca2:	727b      	strb	r3, [r7, #9]
				  spectrData[0][specterHistory] = (uint16_t) ((HAL_GetTick() - oldTimeAll) / 1000); // Specter collection time.
 8000ca4:	f001 fd34 	bl	8002710 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	4b44      	ldr	r3, [pc, #272]	; (8000dbc <main+0x5dc>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	4a43      	ldr	r2, [pc, #268]	; (8000dc0 <main+0x5e0>)
 8000cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb6:	0999      	lsrs	r1, r3, #6
 8000cb8:	4b3f      	ldr	r3, [pc, #252]	; (8000db8 <main+0x5d8>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	b289      	uxth	r1, r1
 8000cc0:	4b40      	ldr	r3, [pc, #256]	; (8000dc4 <main+0x5e4>)
 8000cc2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				  spectrData[1][specterHistory] = (uint16_t) (((HAL_GetTick() - oldTimeAll) / 1000) >> 16);
 8000cc6:	f001 fd23 	bl	8002710 <HAL_GetTick>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	4b3b      	ldr	r3, [pc, #236]	; (8000dbc <main+0x5dc>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	4a3b      	ldr	r2, [pc, #236]	; (8000dc0 <main+0x5e0>)
 8000cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd8:	099b      	lsrs	r3, r3, #6
 8000cda:	0c1a      	lsrs	r2, r3, #16
 8000cdc:	4b36      	ldr	r3, [pc, #216]	; (8000db8 <main+0x5d8>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b291      	uxth	r1, r2
 8000ce2:	4a38      	ldr	r2, [pc, #224]	; (8000dc4 <main+0x5e4>)
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  spectrData[2][specterHistory] = (uint16_t) (counterALL & 0xFFFF);
 8000cea:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <main+0x5e8>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b32      	ldr	r3, [pc, #200]	; (8000db8 <main+0x5d8>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	b291      	uxth	r1, r2
 8000cf4:	4a33      	ldr	r2, [pc, #204]	; (8000dc4 <main+0x5e4>)
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  spectrData[3][specterHistory] = (uint16_t) (counterALL >> 16);
 8000cfc:	4b32      	ldr	r3, [pc, #200]	; (8000dc8 <main+0x5e8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	0c1a      	lsrs	r2, r3, #16
 8000d02:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <main+0x5d8>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	b291      	uxth	r1, r2
 8000d08:	4a2e      	ldr	r2, [pc, #184]	; (8000dc4 <main+0x5e4>)
 8000d0a:	3306      	adds	r3, #6
 8000d0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d10:	e027      	b.n	8000d62 <main+0x582>
			  } else {
				  prefix[1] = 'b';		// Alarm specter
 8000d12:	2362      	movs	r3, #98	; 0x62
 8000d14:	727b      	strb	r3, [r7, #9]
				  spectrData[0][specterHistory] = (uint16_t) (alarmTime & 0xFFFF); // Specter collection time.
 8000d16:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <main+0x5ec>)
 8000d18:	6819      	ldr	r1, [r3, #0]
 8000d1a:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <main+0x5d8>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	b289      	uxth	r1, r1
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <main+0x5e4>)
 8000d24:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				  spectrData[1][specterHistory] = (uint16_t) (alarmTime >> 16);
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <main+0x5ec>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	0c1a      	lsrs	r2, r3, #16
 8000d2e:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <main+0x5d8>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	b291      	uxth	r1, r2
 8000d34:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <main+0x5e4>)
 8000d36:	3302      	adds	r3, #2
 8000d38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  spectrData[2][specterHistory] = (uint16_t) (counterCCAlarm & 0xFFFF);
 8000d3c:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <main+0x5f0>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <main+0x5d8>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b291      	uxth	r1, r2
 8000d46:	4a1f      	ldr	r2, [pc, #124]	; (8000dc4 <main+0x5e4>)
 8000d48:	3304      	adds	r3, #4
 8000d4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  spectrData[3][specterHistory] = (uint16_t) (counterCCAlarm >> 16);
 8000d4e:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <main+0x5f0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	0c1a      	lsrs	r2, r3, #16
 8000d54:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <main+0x5d8>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b291      	uxth	r1, r2
 8000d5a:	4a1a      	ldr	r2, [pc, #104]	; (8000dc4 <main+0x5e4>)
 8000d5c:	3306      	adds	r3, #6
 8000d5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  }
			  HAL_UART_Transmit(&huart1, prefix, 3, 1000); // Start sequence.
 8000d62:	f107 0108 	add.w	r1, r7, #8
 8000d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	4819      	ldr	r0, [pc, #100]	; (8000dd4 <main+0x5f4>)
 8000d6e:	f007 fc48 	bl	8008602 <HAL_UART_Transmit>
			  //spectrData[2] = 0;
			  //spectrData[3] = 1;
			  spectrCRC = 0;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <main+0x5f8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	801a      	strh	r2, [r3, #0]
			  HAL_Delay(TRANSMIT_DALAY);  // Increase time delay if transmit error.
 8000d78:	2014      	movs	r0, #20
 8000d7a:	f001 fcd5 	bl	8002728 <HAL_Delay>
			  j = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	657b      	str	r3, [r7, #84]	; 0x54
			  for ( int i = 0; i < 1042; i++) {
 8000d82:	2300      	movs	r3, #0
 8000d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d86:	e068      	b.n	8000e5a <main+0x67a>
 8000d88:	20004e04 	.word	0x20004e04
 8000d8c:	20004154 	.word	0x20004154
 8000d90:	20004e0a 	.word	0x20004e0a
 8000d94:	20004e08 	.word	0x20004e08
 8000d98:	20004226 	.word	0x20004226
 8000d9c:	2000415c 	.word	0x2000415c
 8000da0:	2000423c 	.word	0x2000423c
 8000da4:	447a0000 	.word	0x447a0000
 8000da8:	20000064 	.word	0x20000064
 8000dac:	20000068 	.word	0x20000068
 8000db0:	2000006c 	.word	0x2000006c
 8000db4:	20004158 	.word	0x20004158
 8000db8:	20004155 	.word	0x20004155
 8000dbc:	20004da4 	.word	0x20004da4
 8000dc0:	10624dd3 	.word	0x10624dd3
 8000dc4:	20000074 	.word	0x20000074
 8000dc8:	20000058 	.word	0x20000058
 8000dcc:	2000005c 	.word	0x2000005c
 8000dd0:	20000050 	.word	0x20000050
 8000dd4:	2000432c 	.word	0x2000432c
 8000dd8:	20004e06 	.word	0x20004e06
				  lowSpectr = spectrData[i][specterHistory] & 0xFF;
 8000ddc:	4b5d      	ldr	r3, [pc, #372]	; (8000f54 <main+0x774>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	4a5d      	ldr	r2, [pc, #372]	; (8000f58 <main+0x778>)
 8000de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	440b      	add	r3, r1
 8000dea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	71fb      	strb	r3, [r7, #7]
				  highSpectr = (spectrData[i][specterHistory] & 0xFF00) >> 8;
 8000df2:	4b58      	ldr	r3, [pc, #352]	; (8000f54 <main+0x774>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	4619      	mov	r1, r3
 8000df8:	4a57      	ldr	r2, [pc, #348]	; (8000f58 <main+0x778>)
 8000dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	440b      	add	r3, r1
 8000e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	71bb      	strb	r3, [r7, #6]
				  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	4b52      	ldr	r3, [pc, #328]	; (8000f5c <main+0x77c>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	4413      	add	r3, r2
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	79bb      	ldrb	r3, [r7, #6]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	4b4e      	ldr	r3, [pc, #312]	; (8000f5c <main+0x77c>)
 8000e22:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8000e24:	1db9      	adds	r1, r7, #6
 8000e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	484c      	ldr	r0, [pc, #304]	; (8000f60 <main+0x780>)
 8000e2e:	f007 fbe8 	bl	8008602 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8000e32:	1df9      	adds	r1, r7, #7
 8000e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4849      	ldr	r0, [pc, #292]	; (8000f60 <main+0x780>)
 8000e3c:	f007 fbe1 	bl	8008602 <HAL_UART_Transmit>
				  if ( j++ >= 9) {
 8000e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	657a      	str	r2, [r7, #84]	; 0x54
 8000e46:	2b08      	cmp	r3, #8
 8000e48:	dd04      	ble.n	8000e54 <main+0x674>
					  HAL_Delay(TRANSMIT_DALAY);  // Increase time delay if transmit error.
 8000e4a:	2014      	movs	r0, #20
 8000e4c:	f001 fc6c 	bl	8002728 <HAL_Delay>
					  j = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	657b      	str	r3, [r7, #84]	; 0x54
			  for ( int i = 0; i < 1042; i++) {
 8000e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e56:	3301      	adds	r3, #1
 8000e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e5c:	f240 4211 	movw	r2, #1041	; 0x411
 8000e60:	4293      	cmp	r3, r2
 8000e62:	ddbb      	ble.n	8000ddc <main+0x5fc>
 8000e64:	e171      	b.n	800114a <main+0x96a>
				  }
			  }
		  } else {  // Log data
			  uint32_t logTime = HAL_GetTick() / 1000;
 8000e66:	f001 fc53 	bl	8002710 <HAL_GetTick>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	4a3d      	ldr	r2, [pc, #244]	; (8000f64 <main+0x784>)
 8000e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e72:	099b      	lsrs	r3, r3, #6
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
			  uint8_t emptyBuff[5] = {0};
 8000e76:	2300      	movs	r3, #0
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	713b      	strb	r3, [r7, #4]
			  logDataFlag = 0;	// Reset log data flag
 8000e7e:	4b3a      	ldr	r3, [pc, #232]	; (8000f68 <main+0x788>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
			  prefix[1] = 'L';
 8000e84:	234c      	movs	r3, #76	; 0x4c
 8000e86:	727b      	strb	r3, [r7, #9]
			  HAL_UART_Transmit(&huart1, prefix, 3, 1000); // Start sequence.
 8000e88:	f107 0108 	add.w	r1, r7, #8
 8000e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e90:	2203      	movs	r2, #3
 8000e92:	4833      	ldr	r0, [pc, #204]	; (8000f60 <main+0x780>)
 8000e94:	f007 fbb5 	bl	8008602 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, &logRecords, 1, 1000); // Records count
 8000e98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4933      	ldr	r1, [pc, #204]	; (8000f6c <main+0x78c>)
 8000ea0:	482f      	ldr	r0, [pc, #188]	; (8000f60 <main+0x780>)
 8000ea2:	f007 fbae 	bl	8008602 <HAL_UART_Transmit>
			  spectrCRC = logRecords;
 8000ea6:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <main+0x78c>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <main+0x77c>)
 8000eae:	801a      	strh	r2, [r3, #0]
			  /* Send current time */
			  lowSpectr = logTime & 0xFF;
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	71fb      	strb	r3, [r7, #7]
			  highSpectr = (logTime & 0xFF00) >> 8;
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	71bb      	strb	r3, [r7, #6]
			  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <main+0x77c>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	79bb      	ldrb	r3, [r7, #6]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	4413      	add	r3, r2
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <main+0x77c>)
 8000ed4:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8000ed6:	1db9      	adds	r1, r7, #6
 8000ed8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000edc:	2201      	movs	r2, #1
 8000ede:	4820      	ldr	r0, [pc, #128]	; (8000f60 <main+0x780>)
 8000ee0:	f007 fb8f 	bl	8008602 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8000ee4:	1df9      	adds	r1, r7, #7
 8000ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eea:	2201      	movs	r2, #1
 8000eec:	481c      	ldr	r0, [pc, #112]	; (8000f60 <main+0x780>)
 8000eee:	f007 fb88 	bl	8008602 <HAL_UART_Transmit>
			  lowSpectr = (logTime & 0xFF0000) >> 16;
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	0c1b      	lsrs	r3, r3, #16
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	71fb      	strb	r3, [r7, #7]
			  highSpectr = (logTime & 0xFF000000) >> 24;
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	0e1b      	lsrs	r3, r3, #24
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	71bb      	strb	r3, [r7, #6]
			  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <main+0x77c>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	4413      	add	r3, r2
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <main+0x77c>)
 8000f18:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8000f1a:	1db9      	adds	r1, r7, #6
 8000f1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f20:	2201      	movs	r2, #1
 8000f22:	480f      	ldr	r0, [pc, #60]	; (8000f60 <main+0x780>)
 8000f24:	f007 fb6d 	bl	8008602 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8000f28:	1df9      	adds	r1, r7, #7
 8000f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2e:	2201      	movs	r2, #1
 8000f30:	480b      	ldr	r0, [pc, #44]	; (8000f60 <main+0x780>)
 8000f32:	f007 fb66 	bl	8008602 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, emptyBuff, 5, 1000);
 8000f36:	4639      	mov	r1, r7
 8000f38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3c:	2205      	movs	r2, #5
 8000f3e:	4808      	ldr	r0, [pc, #32]	; (8000f60 <main+0x780>)
 8000f40:	f007 fb5f 	bl	8008602 <HAL_UART_Transmit>
			  HAL_Delay(TRANSMIT_DALAY);  // Increase time delay if transmit error.
 8000f44:	2014      	movs	r0, #20
 8000f46:	f001 fbef 	bl	8002728 <HAL_Delay>
			  j = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	657b      	str	r3, [r7, #84]	; 0x54
			  for (int i = 0; i < logRecords; i++) {
 8000f4e:	2300      	movs	r3, #0
 8000f50:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f52:	e0f3      	b.n	800113c <main+0x95c>
 8000f54:	20004155 	.word	0x20004155
 8000f58:	20000074 	.word	0x20000074
 8000f5c:	20004e06 	.word	0x20004e06
 8000f60:	2000432c 	.word	0x2000432c
 8000f64:	10624dd3 	.word	0x10624dd3
 8000f68:	20004158 	.word	0x20004158
 8000f6c:	20004157 	.word	0x20004157
				  lowSpectr = logDat[i].timeData & 0xFF;
 8000f70:	4988      	ldr	r1, [pc, #544]	; (8001194 <main+0x9b4>)
 8000f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f74:	4613      	mov	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	71fb      	strb	r3, [r7, #7]
				  highSpectr = (logDat[i].timeData & 0xFF00) >> 8;
 8000f84:	4983      	ldr	r1, [pc, #524]	; (8001194 <main+0x9b4>)
 8000f86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	71bb      	strb	r3, [r7, #6]
				  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	4b7e      	ldr	r3, [pc, #504]	; (8001198 <main+0x9b8>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	79bb      	ldrb	r3, [r7, #6]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	4413      	add	r3, r2
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	4b7a      	ldr	r3, [pc, #488]	; (8001198 <main+0x9b8>)
 8000fb0:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8000fb2:	1db9      	adds	r1, r7, #6
 8000fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4878      	ldr	r0, [pc, #480]	; (800119c <main+0x9bc>)
 8000fbc:	f007 fb21 	bl	8008602 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8000fc0:	1df9      	adds	r1, r7, #7
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4874      	ldr	r0, [pc, #464]	; (800119c <main+0x9bc>)
 8000fca:	f007 fb1a 	bl	8008602 <HAL_UART_Transmit>
				  lowSpectr = (logDat[i].timeData & 0xFF0000) >> 16;
 8000fce:	4971      	ldr	r1, [pc, #452]	; (8001194 <main+0x9b4>)
 8000fd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	0c1b      	lsrs	r3, r3, #16
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	71fb      	strb	r3, [r7, #7]
				  highSpectr = (logDat[i].timeData & 0xFF000000) >> 24;
 8000fe4:	496b      	ldr	r1, [pc, #428]	; (8001194 <main+0x9b4>)
 8000fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fe8:	4613      	mov	r3, r2
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	0e1b      	lsrs	r3, r3, #24
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	71bb      	strb	r3, [r7, #6]
				  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	4b66      	ldr	r3, [pc, #408]	; (8001198 <main+0x9b8>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	b29a      	uxth	r2, r3
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	b29b      	uxth	r3, r3
 800100a:	4413      	add	r3, r2
 800100c:	b29a      	uxth	r2, r3
 800100e:	4b62      	ldr	r3, [pc, #392]	; (8001198 <main+0x9b8>)
 8001010:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8001012:	1db9      	adds	r1, r7, #6
 8001014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001018:	2201      	movs	r2, #1
 800101a:	4860      	ldr	r0, [pc, #384]	; (800119c <main+0x9bc>)
 800101c:	f007 faf1 	bl	8008602 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8001020:	1df9      	adds	r1, r7, #7
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	2201      	movs	r2, #1
 8001028:	485c      	ldr	r0, [pc, #368]	; (800119c <main+0x9bc>)
 800102a:	f007 faea 	bl	8008602 <HAL_UART_Transmit>
				  spectrCRC = spectrCRC + logDat[i].eventType;
 800102e:	4959      	ldr	r1, [pc, #356]	; (8001194 <main+0x9b4>)
 8001030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001032:	4613      	mov	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	3304      	adds	r3, #4
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b29a      	uxth	r2, r3
 8001042:	4b55      	ldr	r3, [pc, #340]	; (8001198 <main+0x9b8>)
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	b29a      	uxth	r2, r3
 800104a:	4b53      	ldr	r3, [pc, #332]	; (8001198 <main+0x9b8>)
 800104c:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, &logDat[i].eventType, 1, 1000);
 800104e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001050:	4613      	mov	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4a4e      	ldr	r2, [pc, #312]	; (8001194 <main+0x9b4>)
 800105a:	4413      	add	r3, r2
 800105c:	1d19      	adds	r1, r3, #4
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	2201      	movs	r2, #1
 8001064:	484d      	ldr	r0, [pc, #308]	; (800119c <main+0x9bc>)
 8001066:	f007 facc 	bl	8008602 <HAL_UART_Transmit>
				  lowSpectr = logDat[i].event_data & 0xFF;
 800106a:	494a      	ldr	r1, [pc, #296]	; (8001194 <main+0x9b4>)
 800106c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800106e:	4613      	mov	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	3308      	adds	r3, #8
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	71fb      	strb	r3, [r7, #7]
				  highSpectr = (logDat[i].event_data & 0xFF00) >> 8;
 8001080:	4944      	ldr	r1, [pc, #272]	; (8001194 <main+0x9b4>)
 8001082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	440b      	add	r3, r1
 800108e:	3308      	adds	r3, #8
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	0a1b      	lsrs	r3, r3, #8
 8001094:	b2db      	uxtb	r3, r3
 8001096:	71bb      	strb	r3, [r7, #6]
				  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	b29a      	uxth	r2, r3
 800109c:	4b3e      	ldr	r3, [pc, #248]	; (8001198 <main+0x9b8>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	4413      	add	r3, r2
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	79bb      	ldrb	r3, [r7, #6]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4413      	add	r3, r2
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <main+0x9b8>)
 80010ae:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 80010b0:	1db9      	adds	r1, r7, #6
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	2201      	movs	r2, #1
 80010b8:	4838      	ldr	r0, [pc, #224]	; (800119c <main+0x9bc>)
 80010ba:	f007 faa2 	bl	8008602 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 80010be:	1df9      	adds	r1, r7, #7
 80010c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c4:	2201      	movs	r2, #1
 80010c6:	4835      	ldr	r0, [pc, #212]	; (800119c <main+0x9bc>)
 80010c8:	f007 fa9b 	bl	8008602 <HAL_UART_Transmit>
				  lowSpectr = (logDat[i].event_data & 0xFF0000) >> 16;
 80010cc:	4931      	ldr	r1, [pc, #196]	; (8001194 <main+0x9b4>)
 80010ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010d0:	4613      	mov	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	3308      	adds	r3, #8
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	0c1b      	lsrs	r3, r3, #16
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	71fb      	strb	r3, [r7, #7]
				  highSpectr = (logDat[i].event_data & 0xFF000000) >> 24;
 80010e4:	492b      	ldr	r1, [pc, #172]	; (8001194 <main+0x9b4>)
 80010e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	3308      	adds	r3, #8
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	0e1b      	lsrs	r3, r3, #24
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	71bb      	strb	r3, [r7, #6]
				  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	b29a      	uxth	r2, r3
 8001100:	4b25      	ldr	r3, [pc, #148]	; (8001198 <main+0x9b8>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	4413      	add	r3, r2
 8001106:	b29a      	uxth	r2, r3
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	b29b      	uxth	r3, r3
 800110c:	4413      	add	r3, r2
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <main+0x9b8>)
 8001112:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8001114:	1db9      	adds	r1, r7, #6
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	2201      	movs	r2, #1
 800111c:	481f      	ldr	r0, [pc, #124]	; (800119c <main+0x9bc>)
 800111e:	f007 fa70 	bl	8008602 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8001122:	1df9      	adds	r1, r7, #7
 8001124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001128:	2201      	movs	r2, #1
 800112a:	481c      	ldr	r0, [pc, #112]	; (800119c <main+0x9bc>)
 800112c:	f007 fa69 	bl	8008602 <HAL_UART_Transmit>
				  HAL_Delay(TRANSMIT_DALAY);  // Increase time delay if transmit error.
 8001130:	2014      	movs	r0, #20
 8001132:	f001 faf9 	bl	8002728 <HAL_Delay>
			  for (int i = 0; i < logRecords; i++) {
 8001136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001138:	3301      	adds	r3, #1
 800113a:	63bb      	str	r3, [r7, #56]	; 0x38
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <main+0x9c0>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001144:	4293      	cmp	r3, r2
 8001146:	f6ff af13 	blt.w	8000f70 <main+0x790>
			  }
		  }
		  /* Transmit CRC */
		  HAL_Delay(TRANSMIT_DALAY);
 800114a:	2014      	movs	r0, #20
 800114c:	f001 faec 	bl	8002728 <HAL_Delay>
		  lowSpectr = spectrCRC & 0xFF;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <main+0x9b8>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	71fb      	strb	r3, [r7, #7]
		  highSpectr = (spectrCRC & 0xFF00) >> 8;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <main+0x9b8>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	b29b      	uxth	r3, r3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	71bb      	strb	r3, [r7, #6]
		  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8001164:	1db9      	adds	r1, r7, #6
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	2201      	movs	r2, #1
 800116c:	480b      	ldr	r0, [pc, #44]	; (800119c <main+0x9bc>)
 800116e:	f007 fa48 	bl	8008602 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8001172:	1df9      	adds	r1, r7, #7
 8001174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001178:	2201      	movs	r2, #1
 800117a:	4808      	ldr	r0, [pc, #32]	; (800119c <main+0x9bc>)
 800117c:	f007 fa41 	bl	8008602 <HAL_UART_Transmit>
		  sleepDelay = HAL_GetTick();
 8001180:	f001 fac6 	bl	8002710 <HAL_GetTick>
 8001184:	4603      	mov	r3, r0
 8001186:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <main+0x9c4>)
 8001188:	6013      	str	r3, [r2, #0]
		  sleepFlag = 1;
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <main+0x9c8>)
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	e03b      	b.n	800120a <main+0xa2a>
 8001192:	bf00      	nop
 8001194:	200043b0 	.word	0x200043b0
 8001198:	20004e06 	.word	0x20004e06
 800119c:	2000432c 	.word	0x2000432c
 80011a0:	20004157 	.word	0x20004157
 80011a4:	20004240 	.word	0x20004240
 80011a8:	20000003 	.word	0x20000003
	#ifdef DISPLAY_ENABLE
		  HAL_Delay(500);
		  ssd1306_WriteString("BT: disconnect", Font_6x8, 0x01);
	#endif
		  // BT sleep control
		  if (sleepFlag && (HAL_GetTick() - sleepDelay > SLEEPDALAY)) {
 80011ac:	4b56      	ldr	r3, [pc, #344]	; (8001308 <main+0xb28>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d02a      	beq.n	800120a <main+0xa2a>
 80011b4:	f001 faac 	bl	8002710 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	4b54      	ldr	r3, [pc, #336]	; (800130c <main+0xb2c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011c4:	d921      	bls.n	800120a <main+0xa2a>
			  sleepFlag = 0;
 80011c6:	4b50      	ldr	r3, [pc, #320]	; (8001308 <main+0xb28>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, (uint8_t*) "AT+SLEEP\n", 9, 1000);    //For JDY-10
 80011cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d0:	2209      	movs	r2, #9
 80011d2:	494f      	ldr	r1, [pc, #316]	; (8001310 <main+0xb30>)
 80011d4:	484f      	ldr	r0, [pc, #316]	; (8001314 <main+0xb34>)
 80011d6:	f007 fa14 	bl	8008602 <HAL_UART_Transmit>
			  HAL_Delay(200);
 80011da:	20c8      	movs	r0, #200	; 0xc8
 80011dc:	f001 faa4 	bl	8002728 <HAL_Delay>
			  HAL_UART_Transmit(&huart1, (uint8_t*) "AT+SLEEP\r\n", 10, 1000); //For JDY-19
 80011e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e4:	220a      	movs	r2, #10
 80011e6:	494c      	ldr	r1, [pc, #304]	; (8001318 <main+0xb38>)
 80011e8:	484a      	ldr	r0, [pc, #296]	; (8001314 <main+0xb34>)
 80011ea:	f007 fa0a 	bl	8008602 <HAL_UART_Transmit>
			  HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_SET); // LED on.
 80011ee:	2201      	movs	r2, #1
 80011f0:	2108      	movs	r1, #8
 80011f2:	484a      	ldr	r0, [pc, #296]	; (800131c <main+0xb3c>)
 80011f4:	f004 fb3c 	bl	8005870 <HAL_GPIO_WritePin>
			  HAL_TIM_Base_Start_IT(&htim15); // Start timer for turn off LED.
 80011f8:	4849      	ldr	r0, [pc, #292]	; (8001320 <main+0xb40>)
 80011fa:	f006 f823 	bl	8007244 <HAL_TIM_Base_Start_IT>
			  HAL_UART_DeInit(&huart1);
 80011fe:	4845      	ldr	r0, [pc, #276]	; (8001314 <main+0xb34>)
 8001200:	f007 f9c6 	bl	8008590 <HAL_UART_DeInit>
			  initUART = 1;
 8001204:	4b47      	ldr	r3, [pc, #284]	; (8001324 <main+0xb44>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  /*
	   * Measure battery voltage and temperature
	   */
	  if ((HAL_GetTick() - batteryInterval > batteryMeasureInterval) || batteryInterval == 0) {
 800120a:	f001 fa81 	bl	8002710 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	4b45      	ldr	r3, [pc, #276]	; (8001328 <main+0xb48>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	f644 6220 	movw	r2, #20000	; 0x4e20
 800121a:	4293      	cmp	r3, r2
 800121c:	d803      	bhi.n	8001226 <main+0xa46>
 800121e:	4b42      	ldr	r3, [pc, #264]	; (8001328 <main+0xb48>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d169      	bne.n	80012fa <main+0xb1a>
		  HAL_GPIO_WritePin(GPIOA, COM_PIN, GPIO_PIN_RESET); // Enable common pin
 8001226:	2200      	movs	r2, #0
 8001228:	2140      	movs	r1, #64	; 0x40
 800122a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122e:	f004 fb1f 	bl	8005870 <HAL_GPIO_WritePin>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &adc1Result, 2);
 8001232:	2202      	movs	r2, #2
 8001234:	493d      	ldr	r1, [pc, #244]	; (800132c <main+0xb4c>)
 8001236:	483e      	ldr	r0, [pc, #248]	; (8001330 <main+0xb50>)
 8001238:	f001 ff74 	bl	8003124 <HAL_ADC_Start_DMA>
		  batteryInterval = HAL_GetTick();
 800123c:	f001 fa68 	bl	8002710 <HAL_GetTick>
 8001240:	4603      	mov	r3, r0
 8001242:	4a39      	ldr	r2, [pc, #228]	; (8001328 <main+0xb48>)
 8001244:	6013      	str	r3, [r2, #0]

		  /*
		   * DAC LTC1662 control
		   * Less value, more voltage.
		   */
		  if (dacValue != powerCoeff) {
 8001246:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <main+0xb54>)
 8001248:	881a      	ldrh	r2, [r3, #0]
 800124a:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <main+0xb58>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	429a      	cmp	r2, r3
 8001250:	d053      	beq.n	80012fa <main+0xb1a>
			  dacValue = powerCoeff;  // Constant for test
 8001252:	4b39      	ldr	r3, [pc, #228]	; (8001338 <main+0xb58>)
 8001254:	881a      	ldrh	r2, [r3, #0]
 8001256:	4b37      	ldr	r3, [pc, #220]	; (8001334 <main+0xb54>)
 8001258:	801a      	strh	r2, [r3, #0]
			  uint16_t transmitData = 0xA000 | dacValue;
 800125a:	4b36      	ldr	r3, [pc, #216]	; (8001334 <main+0xb54>)
 800125c:	881a      	ldrh	r2, [r3, #0]
 800125e:	4b37      	ldr	r3, [pc, #220]	; (800133c <main+0xb5c>)
 8001260:	4313      	orrs	r3, r2
 8001262:	847b      	strh	r3, [r7, #34]	; 0x22
			  HAL_GPIO_WritePin(GPIOA, CS_DAC, GPIO_PIN_SET);		// Disable CS pin
 8001264:	2201      	movs	r2, #1
 8001266:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800126a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126e:	f004 faff 	bl	8005870 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, SCK_DAC, GPIO_PIN_SET);		// Pulse on SCK pin
 8001272:	2201      	movs	r2, #1
 8001274:	2110      	movs	r1, #16
 8001276:	4829      	ldr	r0, [pc, #164]	; (800131c <main+0xb3c>)
 8001278:	f004 fafa 	bl	8005870 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, SCK_DAC, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	2110      	movs	r1, #16
 8001280:	4826      	ldr	r0, [pc, #152]	; (800131c <main+0xb3c>)
 8001282:	f004 faf5 	bl	8005870 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, CS_DAC, GPIO_PIN_RESET);		// Enable CS pin
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800128c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001290:	f004 faee 	bl	8005870 <HAL_GPIO_WritePin>
			  for (int i = 0; i < 16; i++) {
 8001294:	2300      	movs	r3, #0
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
 8001298:	e025      	b.n	80012e6 <main+0xb06>
				  if ((transmitData & (1 << (15 - i))) == 0) {
 800129a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800129c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129e:	f1c3 030f 	rsb	r3, r3, #15
 80012a2:	fa42 f303 	asr.w	r3, r2, r3
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d107      	bne.n	80012be <main+0xade>
					  HAL_GPIO_WritePin(GPIOA, SDI_DAC, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b8:	f004 fada 	bl	8005870 <HAL_GPIO_WritePin>
 80012bc:	e006      	b.n	80012cc <main+0xaec>
				  } else {
					  HAL_GPIO_WritePin(GPIOA, SDI_DAC, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c8:	f004 fad2 	bl	8005870 <HAL_GPIO_WritePin>
				  }
				  HAL_GPIO_WritePin(GPIOB, SCK_DAC, GPIO_PIN_SET);		// Pulse on SCK pin
 80012cc:	2201      	movs	r2, #1
 80012ce:	2110      	movs	r1, #16
 80012d0:	4812      	ldr	r0, [pc, #72]	; (800131c <main+0xb3c>)
 80012d2:	f004 facd 	bl	8005870 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SCK_DAC, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2110      	movs	r1, #16
 80012da:	4810      	ldr	r0, [pc, #64]	; (800131c <main+0xb3c>)
 80012dc:	f004 fac8 	bl	8005870 <HAL_GPIO_WritePin>
			  for (int i = 0; i < 16; i++) {
 80012e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e2:	3301      	adds	r3, #1
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
 80012e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	ddd6      	ble.n	800129a <main+0xaba>
			  }
			  HAL_GPIO_WritePin(GPIOA, CS_DAC, GPIO_PIN_SET);		// Disable CS pin and execute command
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f6:	f004 fabb 	bl	8005870 <HAL_GPIO_WritePin>
		  }
	  }
	  HAL_Delay(500);
 80012fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012fe:	f001 fa13 	bl	8002728 <HAL_Delay>
  {
 8001302:	f7ff bb23 	b.w	800094c <main+0x16c>
 8001306:	bf00      	nop
 8001308:	20000003 	.word	0x20000003
 800130c:	20004240 	.word	0x20004240
 8001310:	0800925c 	.word	0x0800925c
 8001314:	2000432c 	.word	0x2000432c
 8001318:	08009268 	.word	0x08009268
 800131c:	48000400 	.word	0x48000400
 8001320:	200041d8 	.word	0x200041d8
 8001324:	20000004 	.word	0x20000004
 8001328:	20004dac 	.word	0x20004dac
 800132c:	20004164 	.word	0x20004164
 8001330:	20004244 	.word	0x20004244
 8001334:	20004168 	.word	0x20004168
 8001338:	2000423c 	.word	0x2000423c
 800133c:	ffffa000 	.word	0xffffa000

08001340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0a4      	sub	sp, #144	; 0x90
 8001344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001346:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800134a:	2244      	movs	r2, #68	; 0x44
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f007 ff70 	bl	8009234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001354:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2234      	movs	r2, #52	; 0x34
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f007 ff62 	bl	8009234 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001370:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001374:	f004 fec6 	bl	8006104 <HAL_PWREx_ControlVoltageScaling>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0x42>
  {
    Error_Handler();
 800137e:	f000 fb8d 	bl	8001a9c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001382:	2318      	movs	r3, #24
 8001384:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001386:	2301      	movs	r3, #1
 8001388:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800138a:	2301      	movs	r3, #1
 800138c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001392:	2370      	movs	r3, #112	; 0x70
 8001394:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001396:	2300      	movs	r3, #0
 8001398:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 ff06 	bl	80061b0 <HAL_RCC_OscConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013aa:	f000 fb77 	bl	8001a9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ae:	230f      	movs	r3, #15
 80013b0:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013b2:	2300      	movs	r3, #0
 80013b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 80013b6:	23b0      	movs	r3, #176	; 0xb0
 80013b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f005 fb57 	bl	8006a7c <HAL_RCC_ClockConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013d4:	f000 fb62 	bl	8001a9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPTIM2
 80013d8:	f244 4301 	movw	r3, #17409	; 0x4401
 80013dc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80013de:	2301      	movs	r3, #1
 80013e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_LSI;
 80013e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	4618      	mov	r0, r3
 80013ec:	f005 fd4c 	bl	8006e88 <HAL_RCCEx_PeriphCLKConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0xba>
  {
    Error_Handler();
 80013f6:	f000 fb51 	bl	8001a9c <Error_Handler>
  }
}
 80013fa:	bf00      	nop
 80013fc:	3790      	adds	r7, #144	; 0x90
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
 8001424:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001426:	4b3c      	ldr	r3, [pc, #240]	; (8001518 <MX_ADC1_Init+0x114>)
 8001428:	4a3c      	ldr	r2, [pc, #240]	; (800151c <MX_ADC1_Init+0x118>)
 800142a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800142c:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <MX_ADC1_Init+0x114>)
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001432:	4b39      	ldr	r3, [pc, #228]	; (8001518 <MX_ADC1_Init+0x114>)
 8001434:	2208      	movs	r2, #8
 8001436:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001438:	4b37      	ldr	r3, [pc, #220]	; (8001518 <MX_ADC1_Init+0x114>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800143e:	4b36      	ldr	r3, [pc, #216]	; (8001518 <MX_ADC1_Init+0x114>)
 8001440:	2201      	movs	r2, #1
 8001442:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001444:	4b34      	ldr	r3, [pc, #208]	; (8001518 <MX_ADC1_Init+0x114>)
 8001446:	2204      	movs	r2, #4
 8001448:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 800144a:	4b33      	ldr	r3, [pc, #204]	; (8001518 <MX_ADC1_Init+0x114>)
 800144c:	2201      	movs	r2, #1
 800144e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001450:	4b31      	ldr	r3, [pc, #196]	; (8001518 <MX_ADC1_Init+0x114>)
 8001452:	2200      	movs	r2, #0
 8001454:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001456:	4b30      	ldr	r3, [pc, #192]	; (8001518 <MX_ADC1_Init+0x114>)
 8001458:	2202      	movs	r2, #2
 800145a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800145c:	4b2e      	ldr	r3, [pc, #184]	; (8001518 <MX_ADC1_Init+0x114>)
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001464:	4b2c      	ldr	r3, [pc, #176]	; (8001518 <MX_ADC1_Init+0x114>)
 8001466:	2200      	movs	r2, #0
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800146a:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <MX_ADC1_Init+0x114>)
 800146c:	2200      	movs	r2, #0
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <MX_ADC1_Init+0x114>)
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <MX_ADC1_Init+0x114>)
 800147a:	2200      	movs	r2, #0
 800147c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <MX_ADC1_Init+0x114>)
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001486:	4824      	ldr	r0, [pc, #144]	; (8001518 <MX_ADC1_Init+0x114>)
 8001488:	f001 fbca 	bl	8002c20 <HAL_ADC_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001492:	f000 fb03 	bl	8001a9c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4619      	mov	r1, r3
 80014a0:	481d      	ldr	r0, [pc, #116]	; (8001518 <MX_ADC1_Init+0x114>)
 80014a2:	f003 f895 	bl	80045d0 <HAL_ADCEx_MultiModeConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80014ac:	f000 faf6 	bl	8001a9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_ADC1_Init+0x11c>)
 80014b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014b4:	2306      	movs	r3, #6
 80014b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80014b8:	2303      	movs	r3, #3
 80014ba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014bc:	237f      	movs	r3, #127	; 0x7f
 80014be:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014c0:	2304      	movs	r3, #4
 80014c2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	4619      	mov	r1, r3
 80014cc:	4812      	ldr	r0, [pc, #72]	; (8001518 <MX_ADC1_Init+0x114>)
 80014ce:	f002 f98d 	bl	80037ec <HAL_ADC_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80014d8:	f000 fae0 	bl	8001a9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_ADC1_Init+0x120>)
 80014de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014e0:	230c      	movs	r3, #12
 80014e2:	60bb      	str	r3, [r7, #8]
  sConfig.Offset = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	4619      	mov	r1, r3
 80014ec:	480a      	ldr	r0, [pc, #40]	; (8001518 <MX_ADC1_Init+0x114>)
 80014ee:	f002 f97d 	bl	80037ec <HAL_ADC_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80014f8:	f000 fad0 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  while (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK);
 80014fc:	bf00      	nop
 80014fe:	217f      	movs	r1, #127	; 0x7f
 8001500:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_ADC1_Init+0x114>)
 8001502:	f002 ffd3 	bl	80044ac <HAL_ADCEx_Calibration_Start>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f8      	bne.n	80014fe <MX_ADC1_Init+0xfa>

  /* USER CODE END ADC1_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	; 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20004244 	.word	0x20004244
 800151c:	50040000 	.word	0x50040000
 8001520:	32601000 	.word	0x32601000
 8001524:	c7520000 	.word	0xc7520000

08001528 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800152e:	463b      	mov	r3, r7
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
 800153c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800153e:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <MX_ADC2_Init+0xd4>)
 8001540:	4a2f      	ldr	r2, [pc, #188]	; (8001600 <MX_ADC2_Init+0xd8>)
 8001542:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001544:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <MX_ADC2_Init+0xd4>)
 8001546:	2200      	movs	r2, #0
 8001548:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800154a:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <MX_ADC2_Init+0xd4>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001550:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <MX_ADC2_Init+0xd4>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001556:	4b29      	ldr	r3, [pc, #164]	; (80015fc <MX_ADC2_Init+0xd4>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <MX_ADC2_Init+0xd4>)
 800155e:	2204      	movs	r2, #4
 8001560:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = ENABLE;
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <MX_ADC2_Init+0xd4>)
 8001564:	2201      	movs	r2, #1
 8001566:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <MX_ADC2_Init+0xd4>)
 800156a:	2200      	movs	r2, #0
 800156c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <MX_ADC2_Init+0xd4>)
 8001570:	2201      	movs	r2, #1
 8001572:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <MX_ADC2_Init+0xd4>)
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <MX_ADC2_Init+0xd4>)
 800157e:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8001582:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001584:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <MX_ADC2_Init+0xd4>)
 8001586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <MX_ADC2_Init+0xd4>)
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <MX_ADC2_Init+0xd4>)
 8001596:	2200      	movs	r2, #0
 8001598:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <MX_ADC2_Init+0xd4>)
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015a2:	4816      	ldr	r0, [pc, #88]	; (80015fc <MX_ADC2_Init+0xd4>)
 80015a4:	f001 fb3c 	bl	8002c20 <HAL_ADC_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80015ae:	f000 fa75 	bl	8001a9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80015b2:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_ADC2_Init+0xdc>)
 80015b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015b6:	2306      	movs	r3, #6
 80015b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES_5;
 80015ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80015be:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015c0:	237f      	movs	r3, #127	; 0x7f
 80015c2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 1;
 80015c8:	2301      	movs	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	4619      	mov	r1, r3
 80015d0:	480a      	ldr	r0, [pc, #40]	; (80015fc <MX_ADC2_Init+0xd4>)
 80015d2:	f002 f90b 	bl	80037ec <HAL_ADC_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 80015dc:	f000 fa5e 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  while(HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK);
 80015e0:	bf00      	nop
 80015e2:	217f      	movs	r1, #127	; 0x7f
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_ADC2_Init+0xd4>)
 80015e6:	f002 ff61 	bl	80044ac <HAL_ADCEx_Calibration_Start>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f8      	bne.n	80015e2 <MX_ADC2_Init+0xba>
  //HAL_ADCEx_Calibration_SetValue(&hadc2, ADC_SINGLE_ENDED, cal_dat);

  //while(HAL_ADCEx_Calibration_Start(&hadc2, ADC_DIFFERENTIAL_ENDED) != HAL_OK);
  /* USER CODE END ADC2_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20004174 	.word	0x20004174
 8001600:	50040100 	.word	0x50040100
 8001604:	43210000 	.word	0x43210000

08001608 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_LPTIM2_Init+0x58>)
 800160e:	4a15      	ldr	r2, [pc, #84]	; (8001664 <MX_LPTIM2_Init+0x5c>)
 8001610:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <MX_LPTIM2_Init+0x58>)
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_LPTIM2_Init+0x58>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <MX_LPTIM2_Init+0x58>)
 8001620:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001624:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_LPTIM2_Init+0x58>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_LPTIM2_Init+0x58>)
 800162e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001632:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <MX_LPTIM2_Init+0x58>)
 8001636:	2200      	movs	r2, #0
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_LPTIM2_Init+0x58>)
 800163c:	2200      	movs	r2, #0
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001640:	4b07      	ldr	r3, [pc, #28]	; (8001660 <MX_LPTIM2_Init+0x58>)
 8001642:	2200      	movs	r2, #0
 8001644:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim2.Init.RepetitionCounter = 0;
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_LPTIM2_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <MX_LPTIM2_Init+0x58>)
 800164e:	f004 f927 	bl	80058a0 <HAL_LPTIM_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_LPTIM2_Init+0x54>
  {
    Error_Handler();
 8001658:	f000 fa20 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200042f0 	.word	0x200042f0
 8001664:	40009400 	.word	0x40009400

08001668 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08e      	sub	sp, #56	; 0x38
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001688:	463b      	mov	r3, r7
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]
 8001696:	615a      	str	r2, [r3, #20]
 8001698:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800169a:	4b31      	ldr	r3, [pc, #196]	; (8001760 <MX_TIM2_Init+0xf8>)
 800169c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016a2:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <MX_TIM2_Init+0xf8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a8:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <MX_TIM2_Init+0xf8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 56;
 80016ae:	4b2c      	ldr	r3, [pc, #176]	; (8001760 <MX_TIM2_Init+0xf8>)
 80016b0:	2238      	movs	r2, #56	; 0x38
 80016b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b4:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <MX_TIM2_Init+0xf8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016ba:	4b29      	ldr	r3, [pc, #164]	; (8001760 <MX_TIM2_Init+0xf8>)
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016c0:	4827      	ldr	r0, [pc, #156]	; (8001760 <MX_TIM2_Init+0xf8>)
 80016c2:	f005 fd67 	bl	8007194 <HAL_TIM_Base_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80016cc:	f000 f9e6 	bl	8001a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016da:	4619      	mov	r1, r3
 80016dc:	4820      	ldr	r0, [pc, #128]	; (8001760 <MX_TIM2_Init+0xf8>)
 80016de:	f006 f9eb 	bl	8007ab8 <HAL_TIM_ConfigClockSource>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80016e8:	f000 f9d8 	bl	8001a9c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80016ec:	481c      	ldr	r0, [pc, #112]	; (8001760 <MX_TIM2_Init+0xf8>)
 80016ee:	f005 fe2c 	bl	800734a <HAL_TIM_OC_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80016f8:	f000 f9d0 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016fc:	2320      	movs	r3, #32
 80016fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	4619      	mov	r1, r3
 800170a:	4815      	ldr	r0, [pc, #84]	; (8001760 <MX_TIM2_Init+0xf8>)
 800170c:	f006 fe6e 	bl	80083ec <HAL_TIMEx_MasterConfigSynchronization>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001716:	f000 f9c1 	bl	8001a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800171a:	2330      	movs	r3, #48	; 0x30
 800171c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001722:	2302      	movs	r3, #2
 8001724:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800172a:	463b      	mov	r3, r7
 800172c:	220c      	movs	r2, #12
 800172e:	4619      	mov	r1, r3
 8001730:	480b      	ldr	r0, [pc, #44]	; (8001760 <MX_TIM2_Init+0xf8>)
 8001732:	f006 f94b 	bl	80079cc <HAL_TIM_OC_ConfigChannel>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800173c:	f000 f9ae 	bl	8001a9c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_4);
 8001740:	4b07      	ldr	r3, [pc, #28]	; (8001760 <MX_TIM2_Init+0xf8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	69da      	ldr	r2, [r3, #28]
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <MX_TIM2_Init+0xf8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800174e:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001750:	4803      	ldr	r0, [pc, #12]	; (8001760 <MX_TIM2_Init+0xf8>)
 8001752:	f000 fb25 	bl	8001da0 <HAL_TIM_MspPostInit>

}
 8001756:	bf00      	nop
 8001758:	3738      	adds	r7, #56	; 0x38
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20004db0 	.word	0x20004db0

08001764 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_TIM6_Init+0x64>)
 8001776:	4a15      	ldr	r2, [pc, #84]	; (80017cc <MX_TIM6_Init+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <MX_TIM6_Init+0x64>)
 800177c:	2202      	movs	r2, #2
 800177e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_TIM6_Init+0x64>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <MX_TIM6_Init+0x64>)
 8001788:	f644 6220 	movw	r2, #20000	; 0x4e20
 800178c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_TIM6_Init+0x64>)
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <MX_TIM6_Init+0x64>)
 8001796:	f005 fcfd 	bl	8007194 <HAL_TIM_Base_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80017a0:	f000 f97c 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_TIM6_Init+0x64>)
 80017b2:	f006 fe1b 	bl	80083ec <HAL_TIMEx_MasterConfigSynchronization>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80017bc:	f000 f96e 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20004d58 	.word	0x20004d58
 80017cc:	40001000 	.word	0x40001000

080017d0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d6:	f107 0310 	add.w	r3, r7, #16
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80017ee:	4b23      	ldr	r3, [pc, #140]	; (800187c <MX_TIM15_Init+0xac>)
 80017f0:	4a23      	ldr	r2, [pc, #140]	; (8001880 <MX_TIM15_Init+0xb0>)
 80017f2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80017f4:	4b21      	ldr	r3, [pc, #132]	; (800187c <MX_TIM15_Init+0xac>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <MX_TIM15_Init+0xac>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100;
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <MX_TIM15_Init+0xac>)
 8001802:	2264      	movs	r2, #100	; 0x64
 8001804:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001806:	4b1d      	ldr	r3, [pc, #116]	; (800187c <MX_TIM15_Init+0xac>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <MX_TIM15_Init+0xac>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001812:	4b1a      	ldr	r3, [pc, #104]	; (800187c <MX_TIM15_Init+0xac>)
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001818:	4818      	ldr	r0, [pc, #96]	; (800187c <MX_TIM15_Init+0xac>)
 800181a:	f005 fcbb 	bl	8007194 <HAL_TIM_Base_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8001824:	f000 f93a 	bl	8001a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	4619      	mov	r1, r3
 8001834:	4811      	ldr	r0, [pc, #68]	; (800187c <MX_TIM15_Init+0xac>)
 8001836:	f006 f93f 	bl	8007ab8 <HAL_TIM_ConfigClockSource>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8001840:	f000 f92c 	bl	8001a9c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim15, TIM_OPMODE_SINGLE) != HAL_OK)
 8001844:	2108      	movs	r1, #8
 8001846:	480d      	ldr	r0, [pc, #52]	; (800187c <MX_TIM15_Init+0xac>)
 8001848:	f005 ff46 	bl	80076d8 <HAL_TIM_OnePulse_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM15_Init+0x86>
  {
    Error_Handler();
 8001852:	f000 f923 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001856:	2320      	movs	r3, #32
 8001858:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	4619      	mov	r1, r3
 8001862:	4806      	ldr	r0, [pc, #24]	; (800187c <MX_TIM15_Init+0xac>)
 8001864:	f006 fdc2 	bl	80083ec <HAL_TIMEx_MasterConfigSynchronization>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM15_Init+0xa2>
  {
    Error_Handler();
 800186e:	f000 f915 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */
  /* USER CODE END TIM15_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	3720      	adds	r7, #32
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200041d8 	.word	0x200041d8
 8001880:	40014000 	.word	0x40014000

08001884 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <MX_TIM16_Init+0x58>)
 800188a:	4a15      	ldr	r2, [pc, #84]	; (80018e0 <MX_TIM16_Init+0x5c>)
 800188c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <MX_TIM16_Init+0x58>)
 8001890:	2200      	movs	r2, #0
 8001892:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_TIM16_Init+0x58>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 30000;
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <MX_TIM16_Init+0x58>)
 800189c:	f247 5230 	movw	r2, #30000	; 0x7530
 80018a0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <MX_TIM16_Init+0x58>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <MX_TIM16_Init+0x58>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <MX_TIM16_Init+0x58>)
 80018b0:	2280      	movs	r2, #128	; 0x80
 80018b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018b4:	4809      	ldr	r0, [pc, #36]	; (80018dc <MX_TIM16_Init+0x58>)
 80018b6:	f005 fc6d 	bl	8007194 <HAL_TIM_Base_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80018c0:	f000 f8ec 	bl	8001a9c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80018c4:	2108      	movs	r1, #8
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_TIM16_Init+0x58>)
 80018c8:	f005 ff06 	bl	80076d8 <HAL_TIM_OnePulse_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 80018d2:	f000 f8e3 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20004e0c 	.word	0x20004e0c
 80018e0:	40014400 	.word	0x40014400

080018e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018e8:	4b16      	ldr	r3, [pc, #88]	; (8001944 <MX_USART1_UART_Init+0x60>)
 80018ea:	4a17      	ldr	r2, [pc, #92]	; (8001948 <MX_USART1_UART_Init+0x64>)
 80018ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <MX_USART1_UART_Init+0x60>)
 80018f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <MX_USART1_UART_Init+0x60>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <MX_USART1_UART_Init+0x60>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <MX_USART1_UART_Init+0x60>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <MX_USART1_UART_Init+0x60>)
 800190a:	220c      	movs	r2, #12
 800190c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <MX_USART1_UART_Init+0x60>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <MX_USART1_UART_Init+0x60>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <MX_USART1_UART_Init+0x60>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <MX_USART1_UART_Init+0x60>)
 8001922:	2220      	movs	r2, #32
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <MX_USART1_UART_Init+0x60>)
 8001928:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800192c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_USART1_UART_Init+0x60>)
 8001930:	f006 fde0 	bl	80084f4 <HAL_UART_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800193a:	f000 f8af 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	2000432c 	.word	0x2000432c
 8001948:	40013800 	.word	0x40013800

0800194c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <MX_DMA_Init+0x48>)
 8001954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001956:	4a0f      	ldr	r2, [pc, #60]	; (8001994 <MX_DMA_Init+0x48>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6493      	str	r3, [r2, #72]	; 0x48
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <MX_DMA_Init+0x48>)
 8001960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	200b      	movs	r0, #11
 8001970:	f002 ffad 	bl	80048ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001974:	200b      	movs	r0, #11
 8001976:	f002 ffc6 	bl	8004906 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	200f      	movs	r0, #15
 8001980:	f002 ffa5 	bl	80048ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001984:	200f      	movs	r0, #15
 8001986:	f002 ffbe 	bl	8004906 <HAL_NVIC_EnableIRQ>

}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000

08001998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199e:	f107 030c 	add.w	r3, r7, #12
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <MX_GPIO_Init+0xf8>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	4a37      	ldr	r2, [pc, #220]	; (8001a90 <MX_GPIO_Init+0xf8>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ba:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <MX_GPIO_Init+0xf8>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	4b32      	ldr	r3, [pc, #200]	; (8001a90 <MX_GPIO_Init+0xf8>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	4a31      	ldr	r2, [pc, #196]	; (8001a90 <MX_GPIO_Init+0xf8>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d2:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <MX_GPIO_Init+0xf8>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Vibro_Pin|COM_Pin|GPIO_PIN_8|CS_Pin, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	f241 1142 	movw	r1, #4418	; 0x1142
 80019e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e8:	f003 ff42 	bl	8005870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SC_Pin, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2118      	movs	r1, #24
 80019f0:	4828      	ldr	r0, [pc, #160]	; (8001a94 <MX_GPIO_Init+0xfc>)
 80019f2:	f003 ff3d 	bl	8005870 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Vibro_Pin PA8 CS_Pin */
  GPIO_InitStruct.Pin = Vibro_Pin|GPIO_PIN_8|CS_Pin;
 80019f6:	f241 1302 	movw	r3, #4354	; 0x1102
 80019fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fc:	2301      	movs	r3, #1
 80019fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a12:	f003 fcd1 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : COM_Pin */
  GPIO_InitStruct.Pin = COM_Pin;
 8001a16:	2340      	movs	r3, #64	; 0x40
 8001a18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a1a:	2311      	movs	r3, #17
 8001a1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(COM_GPIO_Port, &GPIO_InitStruct);
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a30:	f003 fcc2 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : StartADC_Pin */
  GPIO_InitStruct.Pin = StartADC_Pin;
 8001a34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <MX_GPIO_Init+0x100>)
 8001a3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(StartADC_GPIO_Port, &GPIO_InitStruct);
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	4619      	mov	r1, r3
 8001a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4c:	f003 fcb4 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_Status_Pin */
  GPIO_InitStruct.Pin = BT_Status_Pin;
 8001a50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BT_Status_GPIO_Port, &GPIO_InitStruct);
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	4619      	mov	r1, r3
 8001a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a68:	f003 fca6 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin SC_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SC_Pin;
 8001a6c:	2318      	movs	r3, #24
 8001a6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a70:	2301      	movs	r3, #1
 8001a72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	4619      	mov	r1, r3
 8001a82:	4804      	ldr	r0, [pc, #16]	; (8001a94 <MX_GPIO_Init+0xfc>)
 8001a84:	f003 fc98 	bl	80053b8 <HAL_GPIO_Init>

}
 8001a88:	bf00      	nop
 8001a8a:	3720      	adds	r7, #32
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000
 8001a94:	48000400 	.word	0x48000400
 8001a98:	10110000 	.word	0x10110000

08001a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_MspInit+0x44>)
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <HAL_MspInit+0x44>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6613      	str	r3, [r2, #96]	; 0x60
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <HAL_MspInit+0x44>)
 8001ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_MspInit+0x44>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <HAL_MspInit+0x44>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_MspInit+0x44>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08c      	sub	sp, #48	; 0x30
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a51      	ldr	r2, [pc, #324]	; (8001c58 <HAL_ADC_MspInit+0x164>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d161      	bne.n	8001bda <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001b16:	4b51      	ldr	r3, [pc, #324]	; (8001c5c <HAL_ADC_MspInit+0x168>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	4a4f      	ldr	r2, [pc, #316]	; (8001c5c <HAL_ADC_MspInit+0x168>)
 8001b1e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001b20:	4b4e      	ldr	r3, [pc, #312]	; (8001c5c <HAL_ADC_MspInit+0x168>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d10b      	bne.n	8001b40 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001b28:	4b4d      	ldr	r3, [pc, #308]	; (8001c60 <HAL_ADC_MspInit+0x16c>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2c:	4a4c      	ldr	r2, [pc, #304]	; (8001c60 <HAL_ADC_MspInit+0x16c>)
 8001b2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b34:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <HAL_ADC_MspInit+0x16c>)
 8001b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b3c:	61bb      	str	r3, [r7, #24]
 8001b3e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b40:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <HAL_ADC_MspInit+0x16c>)
 8001b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b44:	4a46      	ldr	r2, [pc, #280]	; (8001c60 <HAL_ADC_MspInit+0x16c>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4c:	4b44      	ldr	r3, [pc, #272]	; (8001c60 <HAL_ADC_MspInit+0x16c>)
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = BAT_LEVEL_Pin;
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b5c:	230b      	movs	r3, #11
 8001b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b6e:	f003 fc23 	bl	80053b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b72:	4b3c      	ldr	r3, [pc, #240]	; (8001c64 <HAL_ADC_MspInit+0x170>)
 8001b74:	4a3c      	ldr	r2, [pc, #240]	; (8001c68 <HAL_ADC_MspInit+0x174>)
 8001b76:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001b78:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <HAL_ADC_MspInit+0x170>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b7e:	4b39      	ldr	r3, [pc, #228]	; (8001c64 <HAL_ADC_MspInit+0x170>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b84:	4b37      	ldr	r3, [pc, #220]	; (8001c64 <HAL_ADC_MspInit+0x170>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b8a:	4b36      	ldr	r3, [pc, #216]	; (8001c64 <HAL_ADC_MspInit+0x170>)
 8001b8c:	2280      	movs	r2, #128	; 0x80
 8001b8e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b90:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <HAL_ADC_MspInit+0x170>)
 8001b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b96:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b98:	4b32      	ldr	r3, [pc, #200]	; (8001c64 <HAL_ADC_MspInit+0x170>)
 8001b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b9e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001ba0:	4b30      	ldr	r3, [pc, #192]	; (8001c64 <HAL_ADC_MspInit+0x170>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ba6:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <HAL_ADC_MspInit+0x170>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bac:	482d      	ldr	r0, [pc, #180]	; (8001c64 <HAL_ADC_MspInit+0x170>)
 8001bae:	f002 fec5 	bl	800493c <HAL_DMA_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001bb8:	f7ff ff70 	bl	8001a9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a29      	ldr	r2, [pc, #164]	; (8001c64 <HAL_ADC_MspInit+0x170>)
 8001bc0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bc2:	4a28      	ldr	r2, [pc, #160]	; (8001c64 <HAL_ADC_MspInit+0x170>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2012      	movs	r0, #18
 8001bce:	f002 fe7e 	bl	80048ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001bd2:	2012      	movs	r0, #18
 8001bd4:	f002 fe97 	bl	8004906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001bd8:	e039      	b.n	8001c4e <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a23      	ldr	r2, [pc, #140]	; (8001c6c <HAL_ADC_MspInit+0x178>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d134      	bne.n	8001c4e <HAL_ADC_MspInit+0x15a>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_ADC_MspInit+0x168>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	3301      	adds	r3, #1
 8001bea:	4a1c      	ldr	r2, [pc, #112]	; (8001c5c <HAL_ADC_MspInit+0x168>)
 8001bec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001bee:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_ADC_MspInit+0x168>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d10b      	bne.n	8001c0e <HAL_ADC_MspInit+0x11a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <HAL_ADC_MspInit+0x16c>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <HAL_ADC_MspInit+0x16c>)
 8001bfc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_ADC_MspInit+0x16c>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_ADC_MspInit+0x16c>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	4a13      	ldr	r2, [pc, #76]	; (8001c60 <HAL_ADC_MspInit+0x16c>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_ADC_MspInit+0x16c>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SiPM_Pin;
 8001c26:	2302      	movs	r3, #2
 8001c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c2a:	230b      	movs	r3, #11
 8001c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SiPM_GPIO_Port, &GPIO_InitStruct);
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	4619      	mov	r1, r3
 8001c38:	480d      	ldr	r0, [pc, #52]	; (8001c70 <HAL_ADC_MspInit+0x17c>)
 8001c3a:	f003 fbbd 	bl	80053b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	2012      	movs	r0, #18
 8001c44:	f002 fe43 	bl	80048ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c48:	2012      	movs	r0, #18
 8001c4a:	f002 fe5c 	bl	8004906 <HAL_NVIC_EnableIRQ>
}
 8001c4e:	bf00      	nop
 8001c50:	3730      	adds	r7, #48	; 0x30
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	50040000 	.word	0x50040000
 8001c5c:	20004160 	.word	0x20004160
 8001c60:	40021000 	.word	0x40021000
 8001c64:	20004d10 	.word	0x20004d10
 8001c68:	40020008 	.word	0x40020008
 8001c6c:	50040100 	.word	0x50040100
 8001c70:	48000400 	.word	0x48000400

08001c74 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <HAL_LPTIM_MspInit+0x44>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d113      	bne.n	8001cae <HAL_LPTIM_MspInit+0x3a>
  {
  /* USER CODE BEGIN LPTIM2_MspInit 0 */

  /* USER CODE END LPTIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <HAL_LPTIM_MspInit+0x48>)
 8001c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8a:	4a0c      	ldr	r2, [pc, #48]	; (8001cbc <HAL_LPTIM_MspInit+0x48>)
 8001c8c:	f043 0320 	orr.w	r3, r3, #32
 8001c90:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_LPTIM_MspInit+0x48>)
 8001c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c96:	f003 0320 	and.w	r3, r3, #32
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM2 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2042      	movs	r0, #66	; 0x42
 8001ca4:	f002 fe13 	bl	80048ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 8001ca8:	2042      	movs	r0, #66	; 0x42
 8001caa:	f002 fe2c 	bl	8004906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40009400 	.word	0x40009400
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd0:	d10c      	bne.n	8001cec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	; (8001d90 <HAL_TIM_Base_MspInit+0xd0>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	4a2e      	ldr	r2, [pc, #184]	; (8001d90 <HAL_TIM_Base_MspInit+0xd0>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8001cde:	4b2c      	ldr	r3, [pc, #176]	; (8001d90 <HAL_TIM_Base_MspInit+0xd0>)
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001cea:	e04c      	b.n	8001d86 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a28      	ldr	r2, [pc, #160]	; (8001d94 <HAL_TIM_Base_MspInit+0xd4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d114      	bne.n	8001d20 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cf6:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_TIM_Base_MspInit+0xd0>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfa:	4a25      	ldr	r2, [pc, #148]	; (8001d90 <HAL_TIM_Base_MspInit+0xd0>)
 8001cfc:	f043 0310 	orr.w	r3, r3, #16
 8001d00:	6593      	str	r3, [r2, #88]	; 0x58
 8001d02:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_TIM_Base_MspInit+0xd0>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	2036      	movs	r0, #54	; 0x36
 8001d14:	f002 fddb 	bl	80048ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001d18:	2036      	movs	r0, #54	; 0x36
 8001d1a:	f002 fdf4 	bl	8004906 <HAL_NVIC_EnableIRQ>
}
 8001d1e:	e032      	b.n	8001d86 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM15)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1c      	ldr	r2, [pc, #112]	; (8001d98 <HAL_TIM_Base_MspInit+0xd8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d114      	bne.n	8001d54 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001d2a:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_TIM_Base_MspInit+0xd0>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2e:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <HAL_TIM_Base_MspInit+0xd0>)
 8001d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d34:	6613      	str	r3, [r2, #96]	; 0x60
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_TIM_Base_MspInit+0xd0>)
 8001d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	2018      	movs	r0, #24
 8001d48:	f002 fdc1 	bl	80048ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001d4c:	2018      	movs	r0, #24
 8001d4e:	f002 fdda 	bl	8004906 <HAL_NVIC_EnableIRQ>
}
 8001d52:	e018      	b.n	8001d86 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM16)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a10      	ldr	r2, [pc, #64]	; (8001d9c <HAL_TIM_Base_MspInit+0xdc>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d113      	bne.n	8001d86 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_TIM_Base_MspInit+0xd0>)
 8001d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d62:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <HAL_TIM_Base_MspInit+0xd0>)
 8001d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d68:	6613      	str	r3, [r2, #96]	; 0x60
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_TIM_Base_MspInit+0xd0>)
 8001d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	2019      	movs	r0, #25
 8001d7c:	f002 fda7 	bl	80048ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d80:	2019      	movs	r0, #25
 8001d82:	f002 fdc0 	bl	8004906 <HAL_NVIC_EnableIRQ>
}
 8001d86:	bf00      	nop
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40001000 	.word	0x40001000
 8001d98:	40014000 	.word	0x40014000
 8001d9c:	40014400 	.word	0x40014400

08001da0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc0:	d11c      	bne.n	8001dfc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_TIM_MspPostInit+0x64>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <HAL_TIM_MspPostInit+0x64>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_TIM_MspPostInit+0x64>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dda:	2308      	movs	r3, #8
 8001ddc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dea:	2301      	movs	r3, #1
 8001dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	4619      	mov	r1, r3
 8001df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df8:	f003 fade 	bl	80053b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001dfc:	bf00      	nop
 8001dfe:	3720      	adds	r7, #32
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000

08001e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a2c      	ldr	r2, [pc, #176]	; (8001ed8 <HAL_UART_MspInit+0xd0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d152      	bne.n	8001ed0 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e2a:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <HAL_UART_MspInit+0xd4>)
 8001e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e2e:	4a2b      	ldr	r2, [pc, #172]	; (8001edc <HAL_UART_MspInit+0xd4>)
 8001e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e34:	6613      	str	r3, [r2, #96]	; 0x60
 8001e36:	4b29      	ldr	r3, [pc, #164]	; (8001edc <HAL_UART_MspInit+0xd4>)
 8001e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <HAL_UART_MspInit+0xd4>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e46:	4a25      	ldr	r2, [pc, #148]	; (8001edc <HAL_UART_MspInit+0xd4>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e4e:	4b23      	ldr	r3, [pc, #140]	; (8001edc <HAL_UART_MspInit+0xd4>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BT_TX_Pin|BT_RX_Pin;
 8001e5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e6c:	2307      	movs	r3, #7
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7a:	f003 fa9d 	bl	80053b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_UART_MspInit+0xd8>)
 8001e80:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <HAL_UART_MspInit+0xdc>)
 8001e82:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001e84:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <HAL_UART_MspInit+0xd8>)
 8001e86:	2202      	movs	r2, #2
 8001e88:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_UART_MspInit+0xd8>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <HAL_UART_MspInit+0xd8>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_UART_MspInit+0xd8>)
 8001e98:	2280      	movs	r2, #128	; 0x80
 8001e9a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e9c:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <HAL_UART_MspInit+0xd8>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_UART_MspInit+0xd8>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_UART_MspInit+0xd8>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_UART_MspInit+0xd8>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001eb4:	480a      	ldr	r0, [pc, #40]	; (8001ee0 <HAL_UART_MspInit+0xd8>)
 8001eb6:	f002 fd41 	bl	800493c <HAL_DMA_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8001ec0:	f7ff fdec 	bl	8001a9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a06      	ldr	r2, [pc, #24]	; (8001ee0 <HAL_UART_MspInit+0xd8>)
 8001ec8:	671a      	str	r2, [r3, #112]	; 0x70
 8001eca:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <HAL_UART_MspInit+0xd8>)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ed0:	bf00      	nop
 8001ed2:	3728      	adds	r7, #40	; 0x28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40013800 	.word	0x40013800
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	200042a8 	.word	0x200042a8
 8001ee4:	40020058 	.word	0x40020058

08001ee8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <HAL_UART_MspDeInit+0x3c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d110      	bne.n	8001f1c <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001efa:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_UART_MspDeInit+0x40>)
 8001efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efe:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <HAL_UART_MspDeInit+0x40>)
 8001f00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f04:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, BT_TX_Pin|BT_RX_Pin);
 8001f06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0e:	f003 fbc5 	bl	800569c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f16:	4618      	mov	r0, r3
 8001f18:	f002 fdc8 	bl	8004aac <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40013800 	.word	0x40013800
 8001f28:	40021000 	.word	0x40021000

08001f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <HardFault_Handler+0x4>

08001f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <MemManage_Handler+0x4>

08001f46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <BusFault_Handler+0x4>

08001f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <UsageFault_Handler+0x4>

08001f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f80:	f000 fbb2 	bl	80026e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	// Battery voltage.
	HAL_ADC_Stop_DMA(&hadc1);
 8001f8e:	4825      	ldr	r0, [pc, #148]	; (8002024 <DMA1_Channel1_IRQHandler+0x9c>)
 8001f90:	f001 f97c 	bl	800328c <HAL_ADC_Stop_DMA>
	HAL_GPIO_WritePin(GPIOA, COM_PIN, GPIO_PIN_SET);  // Disable common pin
 8001f94:	2201      	movs	r2, #1
 8001f96:	2140      	movs	r1, #64	; 0x40
 8001f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f9c:	f003 fc68 	bl	8005870 <HAL_GPIO_WritePin>

	/* Battery level */
	uint16_t batv;
	if (adc1Result[0] < 785) {
 8001fa0:	4b21      	ldr	r3, [pc, #132]	; (8002028 <DMA1_Channel1_IRQHandler+0xa0>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8001fa8:	d802      	bhi.n	8001fb0 <DMA1_Channel1_IRQHandler+0x28>
		batv = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	80fb      	strh	r3, [r7, #6]
 8001fae:	e004      	b.n	8001fba <DMA1_Channel1_IRQHandler+0x32>
	} else {
		batv = adc1Result[0] - 785; // 3.2v -- 4.2v
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <DMA1_Channel1_IRQHandler+0xa0>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8001fb8:	80fb      	strh	r3, [r7, #6]
	}

	/* Temperature*/

	uint16_t temper = (uint16_t) ( temperatureKoeff1 * (float) adc1Result[1] + temperatureKoeff2);
 8001fba:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <DMA1_Channel1_IRQHandler+0xa0>)
 8001fbc:	885b      	ldrh	r3, [r3, #2]
 8001fbe:	ee07 3a90 	vmov	s15, r3
 8001fc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fc6:	4b19      	ldr	r3, [pc, #100]	; (800202c <DMA1_Channel1_IRQHandler+0xa4>)
 8001fc8:	edd3 7a00 	vldr	s15, [r3]
 8001fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd0:	4b17      	ldr	r3, [pc, #92]	; (8002030 <DMA1_Channel1_IRQHandler+0xa8>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fde:	ee17 3a90 	vmov	r3, s15
 8001fe2:	80bb      	strh	r3, [r7, #4]
	//uint16_t temper = (uint16_t) (((float) adc1Result[1] / 1024 * 3 - 0.76f) / 2.5f + 30);
	spectrData[4][0] = (temper << 8) | (batv & 0x00FF); // Main specter
 8001fe4:	88bb      	ldrh	r3, [r7, #4]
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	b21a      	sxth	r2, r3
 8001fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	b21b      	sxth	r3, r3
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <DMA1_Channel1_IRQHandler+0xac>)
 8001ffa:	821a      	strh	r2, [r3, #16]
	spectrData[4][1] = (temper << 8) | (batv & 0x00FF); // History specter
 8001ffc:	88bb      	ldrh	r3, [r7, #4]
 8001ffe:	021b      	lsls	r3, r3, #8
 8002000:	b21a      	sxth	r2, r3
 8002002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	b21b      	sxth	r3, r3
 800200a:	4313      	orrs	r3, r2
 800200c:	b21b      	sxth	r3, r3
 800200e:	b29a      	uxth	r2, r3
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <DMA1_Channel1_IRQHandler+0xac>)
 8002012:	825a      	strh	r2, [r3, #18]
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002014:	4808      	ldr	r0, [pc, #32]	; (8002038 <DMA1_Channel1_IRQHandler+0xb0>)
 8002016:	f002 fe79 	bl	8004d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20004244 	.word	0x20004244
 8002028:	20004164 	.word	0x20004164
 800202c:	20004e00 	.word	0x20004e00
 8002030:	2000416c 	.word	0x2000416c
 8002034:	20000074 	.word	0x20000074
 8002038:	20004d10 	.word	0x20004d10

0800203c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <DMA1_Channel5_IRQHandler+0x10>)
 8002042:	f002 fe63 	bl	8004d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200042a8 	.word	0x200042a8

08002050 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	uint32_t nowInterval;
	if( __HAL_ADC_GET_FLAG(&hadc2, ADC_ISR_EOC) != RESET) {
 8002056:	4b56      	ldr	r3, [pc, #344]	; (80021b0 <ADC1_2_IRQHandler+0x160>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b04      	cmp	r3, #4
 8002062:	f040 809a 	bne.w	800219a <ADC1_2_IRQHandler+0x14a>
	  adc2Result = HAL_ADC_GetValue(&hadc2);
 8002066:	4852      	ldr	r0, [pc, #328]	; (80021b0 <ADC1_2_IRQHandler+0x160>)
 8002068:	f001 f971 	bl	800334e <HAL_ADC_GetValue>
 800206c:	4603      	mov	r3, r0
 800206e:	b29a      	uxth	r2, r3
 8002070:	4b50      	ldr	r3, [pc, #320]	; (80021b4 <ADC1_2_IRQHandler+0x164>)
 8002072:	801a      	strh	r2, [r3, #0]
	  if (adc2Result > 0) {
 8002074:	4b4f      	ldr	r3, [pc, #316]	; (80021b4 <ADC1_2_IRQHandler+0x164>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 808e 	beq.w	800219a <ADC1_2_IRQHandler+0x14a>
		  adc2Result = adc2Result & 0x0FFF;
 800207e:	4b4d      	ldr	r3, [pc, #308]	; (80021b4 <ADC1_2_IRQHandler+0x164>)
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002086:	b29a      	uxth	r2, r3
 8002088:	4b4a      	ldr	r3, [pc, #296]	; (80021b4 <ADC1_2_IRQHandler+0x164>)
 800208a:	801a      	strh	r2, [r3, #0]
		  if (resolution == 1) {
 800208c:	4b4a      	ldr	r3, [pc, #296]	; (80021b8 <ADC1_2_IRQHandler+0x168>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d106      	bne.n	80020a2 <ADC1_2_IRQHandler+0x52>
			  adc2Result = adc2Result >> 2;			// 1024 channels
 8002094:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <ADC1_2_IRQHandler+0x164>)
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	089b      	lsrs	r3, r3, #2
 800209a:	b29a      	uxth	r2, r3
 800209c:	4b45      	ldr	r3, [pc, #276]	; (80021b4 <ADC1_2_IRQHandler+0x164>)
 800209e:	801a      	strh	r2, [r3, #0]
 80020a0:	e009      	b.n	80020b6 <ADC1_2_IRQHandler+0x66>
		  } else {
			  if (resolution == 2) {
 80020a2:	4b45      	ldr	r3, [pc, #276]	; (80021b8 <ADC1_2_IRQHandler+0x168>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d105      	bne.n	80020b6 <ADC1_2_IRQHandler+0x66>
				  adc2Result = adc2Result >> 1;		// 2048 channels
 80020aa:	4b42      	ldr	r3, [pc, #264]	; (80021b4 <ADC1_2_IRQHandler+0x164>)
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	085b      	lsrs	r3, r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	4b40      	ldr	r3, [pc, #256]	; (80021b4 <ADC1_2_IRQHandler+0x164>)
 80020b4:	801a      	strh	r2, [r3, #0]
			  }										// else 4096 channels
		  }
		  adc2Result = adc2Result + reservDataSize;	// Reserved additional parameter in send buffer ( 12 bytes )
 80020b6:	4b3f      	ldr	r3, [pc, #252]	; (80021b4 <ADC1_2_IRQHandler+0x164>)
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	3306      	adds	r3, #6
 80020bc:	b29a      	uxth	r2, r3
 80020be:	4b3d      	ldr	r3, [pc, #244]	; (80021b4 <ADC1_2_IRQHandler+0x164>)
 80020c0:	801a      	strh	r2, [r3, #0]
		  if (spectrData[adc2Result][0] < 0xFFFF)		// Check overflow in channel.
 80020c2:	4b3c      	ldr	r3, [pc, #240]	; (80021b4 <ADC1_2_IRQHandler+0x164>)
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b3c      	ldr	r3, [pc, #240]	; (80021bc <ADC1_2_IRQHandler+0x16c>)
 80020ca:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80020ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d009      	beq.n	80020ea <ADC1_2_IRQHandler+0x9a>
			  spectrData[adc2Result][0]++;
 80020d6:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <ADC1_2_IRQHandler+0x164>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	4a38      	ldr	r2, [pc, #224]	; (80021bc <ADC1_2_IRQHandler+0x16c>)
 80020dc:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 80020e0:	3201      	adds	r2, #1
 80020e2:	b291      	uxth	r1, r2
 80020e4:	4a35      	ldr	r2, [pc, #212]	; (80021bc <ADC1_2_IRQHandler+0x16c>)
 80020e6:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		  if (alarmLevel != 0) {		// Record to alarm specter array
 80020ea:	4b35      	ldr	r3, [pc, #212]	; (80021c0 <ADC1_2_IRQHandler+0x170>)
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d01c      	beq.n	800212c <ADC1_2_IRQHandler+0xdc>
			  if (spectrData[adc2Result][1] < 0xFFFF)		// Check overflow in alarm channel.
 80020f2:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <ADC1_2_IRQHandler+0x164>)
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	4a31      	ldr	r2, [pc, #196]	; (80021bc <ADC1_2_IRQHandler+0x16c>)
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	885b      	ldrh	r3, [r3, #2]
 80020fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002102:	4293      	cmp	r3, r2
 8002104:	d00d      	beq.n	8002122 <ADC1_2_IRQHandler+0xd2>
				  spectrData[adc2Result][1]++;
 8002106:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <ADC1_2_IRQHandler+0x164>)
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	492b      	ldr	r1, [pc, #172]	; (80021bc <ADC1_2_IRQHandler+0x16c>)
 800210e:	0093      	lsls	r3, r2, #2
 8002110:	440b      	add	r3, r1
 8002112:	885b      	ldrh	r3, [r3, #2]
 8002114:	3301      	adds	r3, #1
 8002116:	b298      	uxth	r0, r3
 8002118:	4928      	ldr	r1, [pc, #160]	; (80021bc <ADC1_2_IRQHandler+0x16c>)
 800211a:	0093      	lsls	r3, r2, #2
 800211c:	440b      	add	r3, r1
 800211e:	4602      	mov	r2, r0
 8002120:	805a      	strh	r2, [r3, #2]
			  counterCCAlarm++;
 8002122:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <ADC1_2_IRQHandler+0x174>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3301      	adds	r3, #1
 8002128:	4a26      	ldr	r2, [pc, #152]	; (80021c4 <ADC1_2_IRQHandler+0x174>)
 800212a:	6013      	str	r3, [r2, #0]
		  }
		  counterCC++;
 800212c:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <ADC1_2_IRQHandler+0x178>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	3301      	adds	r3, #1
 8002132:	4a25      	ldr	r2, [pc, #148]	; (80021c8 <ADC1_2_IRQHandler+0x178>)
 8002134:	6013      	str	r3, [r2, #0]
		  counterALL++;
 8002136:	4b25      	ldr	r3, [pc, #148]	; (80021cc <ADC1_2_IRQHandler+0x17c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	3301      	adds	r3, #1
 800213c:	4a23      	ldr	r2, [pc, #140]	; (80021cc <ADC1_2_IRQHandler+0x17c>)
 800213e:	6013      	str	r3, [r2, #0]

		  /* intervals for radiation levels */
		  nowInterval = HAL_GetTick();
 8002140:	f000 fae6 	bl	8002710 <HAL_GetTick>
 8002144:	6078      	str	r0, [r7, #4]
		  if (oldInterval > 0) {
 8002146:	4b22      	ldr	r3, [pc, #136]	; (80021d0 <ADC1_2_IRQHandler+0x180>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d014      	beq.n	8002178 <ADC1_2_IRQHandler+0x128>
			  radBuffer[indexBuffer++] = nowInterval - oldInterval;
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <ADC1_2_IRQHandler+0x180>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <ADC1_2_IRQHandler+0x184>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	1c59      	adds	r1, r3, #1
 8002158:	b2c8      	uxtb	r0, r1
 800215a:	491e      	ldr	r1, [pc, #120]	; (80021d4 <ADC1_2_IRQHandler+0x184>)
 800215c:	7008      	strb	r0, [r1, #0]
 800215e:	4619      	mov	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	4a1c      	ldr	r2, [pc, #112]	; (80021d8 <ADC1_2_IRQHandler+0x188>)
 8002166:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			  if (indexBuffer > radBufferSize - 1) { // Buffer size = radBufferSize.
 800216a:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <ADC1_2_IRQHandler+0x184>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b31      	cmp	r3, #49	; 0x31
 8002170:	d902      	bls.n	8002178 <ADC1_2_IRQHandler+0x128>
				  indexBuffer = 0;
 8002172:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <ADC1_2_IRQHandler+0x184>)
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  oldInterval = nowInterval;
 8002178:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <ADC1_2_IRQHandler+0x180>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6013      	str	r3, [r2, #0]

		  if ((cfgData & 64) > 0) {					// Check config data for LED activity
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <ADC1_2_IRQHandler+0x18c>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002186:	2b00      	cmp	r3, #0
 8002188:	dd07      	ble.n	800219a <ADC1_2_IRQHandler+0x14a>
			  HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_SET); // LED on.
 800218a:	2201      	movs	r2, #1
 800218c:	2108      	movs	r1, #8
 800218e:	4814      	ldr	r0, [pc, #80]	; (80021e0 <ADC1_2_IRQHandler+0x190>)
 8002190:	f003 fb6e 	bl	8005870 <HAL_GPIO_WritePin>
			  HAL_TIM_Base_Start_IT(&htim15);		// Start timer for turn off LED.
 8002194:	4813      	ldr	r0, [pc, #76]	; (80021e4 <ADC1_2_IRQHandler+0x194>)
 8002196:	f005 f855 	bl	8007244 <HAL_TIM_Base_Start_IT>
		  }
	  }
	}
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800219a:	4813      	ldr	r0, [pc, #76]	; (80021e8 <ADC1_2_IRQHandler+0x198>)
 800219c:	f001 f8e4 	bl	8003368 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80021a0:	4803      	ldr	r0, [pc, #12]	; (80021b0 <ADC1_2_IRQHandler+0x160>)
 80021a2:	f001 f8e1 	bl	8003368 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20004174 	.word	0x20004174
 80021b4:	20000070 	.word	0x20000070
 80021b8:	20004154 	.word	0x20004154
 80021bc:	20000074 	.word	0x20000074
 80021c0:	20004224 	.word	0x20004224
 80021c4:	20000050 	.word	0x20000050
 80021c8:	20000054 	.word	0x20000054
 80021cc:	20000058 	.word	0x20000058
 80021d0:	20000060 	.word	0x20000060
 80021d4:	20004da8 	.word	0x20004da8
 80021d8:	2000408c 	.word	0x2000408c
 80021dc:	20004e04 	.word	0x20004e04
 80021e0:	48000400 	.word	0x48000400
 80021e4:	200041d8 	.word	0x200041d8
 80021e8:	20004244 	.word	0x20004244

080021ec <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_RESET); // LED off.
 80021f0:	2200      	movs	r2, #0
 80021f2:	2108      	movs	r1, #8
 80021f4:	4805      	ldr	r0, [pc, #20]	; (800220c <TIM1_BRK_TIM15_IRQHandler+0x20>)
 80021f6:	f003 fb3b 	bl	8005870 <HAL_GPIO_WritePin>
	//HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80021fa:	4805      	ldr	r0, [pc, #20]	; (8002210 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80021fc:	f005 fac6 	bl	800778c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim15);
 8002200:	4803      	ldr	r0, [pc, #12]	; (8002210 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8002202:	f005 f873 	bl	80072ec <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	48000400 	.word	0x48000400
 8002210:	200041d8 	.word	0x200041d8

08002214 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_3);  // Sound off
 8002218:	2108      	movs	r1, #8
 800221a:	480a      	ldr	r0, [pc, #40]	; (8002244 <TIM1_UP_TIM16_IRQHandler+0x30>)
 800221c:	f005 f9d4 	bl	80075c8 <HAL_TIM_OC_Stop>
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);  // Sound off
 8002220:	210c      	movs	r1, #12
 8002222:	4808      	ldr	r0, [pc, #32]	; (8002244 <TIM1_UP_TIM16_IRQHandler+0x30>)
 8002224:	f005 f9d0 	bl	80075c8 <HAL_TIM_OC_Stop>
    HAL_GPIO_WritePin(GPIOA, VIBRO_PIN, GPIO_PIN_RESET); // Vibro off.
 8002228:	2200      	movs	r2, #0
 800222a:	2102      	movs	r1, #2
 800222c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002230:	f003 fb1e 	bl	8005870 <HAL_GPIO_WritePin>

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002234:	4804      	ldr	r0, [pc, #16]	; (8002248 <TIM1_UP_TIM16_IRQHandler+0x34>)
 8002236:	f005 faa9 	bl	800778c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim16);
 800223a:	4803      	ldr	r0, [pc, #12]	; (8002248 <TIM1_UP_TIM16_IRQHandler+0x34>)
 800223c:	f005 f856 	bl	80072ec <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20004db0 	.word	0x20004db0
 8002248:	20004e0c 	.word	0x20004e0c

0800224c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002250:	485d      	ldr	r0, [pc, #372]	; (80023c8 <TIM6_IRQHandler+0x17c>)
 8002252:	f005 fa9b 	bl	800778c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  if ((cfgData & 0x3F) > 0 ){  // Sound on.
 8002256:	4b5d      	ldr	r3, [pc, #372]	; (80023cc <TIM6_IRQHandler+0x180>)
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800225e:	2b00      	cmp	r3, #0
 8002260:	f340 80a8 	ble.w	80023b4 <TIM6_IRQHandler+0x168>
	  switch (alarmLevel) {
 8002264:	4b5a      	ldr	r3, [pc, #360]	; (80023d0 <TIM6_IRQHandler+0x184>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	2b03      	cmp	r3, #3
 800226a:	f200 80aa 	bhi.w	80023c2 <TIM6_IRQHandler+0x176>
 800226e:	a201      	add	r2, pc, #4	; (adr r2, 8002274 <TIM6_IRQHandler+0x28>)
 8002270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002274:	08002285 	.word	0x08002285
 8002278:	0800228d 	.word	0x0800228d
 800227c:	080022f1 	.word	0x080022f1
 8002280:	08002353 	.word	0x08002353
	  case 0:
		  alarmCount = 0;
 8002284:	4b53      	ldr	r3, [pc, #332]	; (80023d4 <TIM6_IRQHandler+0x188>)
 8002286:	2200      	movs	r2, #0
 8002288:	801a      	strh	r2, [r3, #0]
		  break;
 800228a:	e09a      	b.n	80023c2 <TIM6_IRQHandler+0x176>
	  case 1:
		  if (alarmCount-- <= 0) {
 800228c:	4b51      	ldr	r3, [pc, #324]	; (80023d4 <TIM6_IRQHandler+0x188>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	1e5a      	subs	r2, r3, #1
 8002292:	b291      	uxth	r1, r2
 8002294:	4a4f      	ldr	r2, [pc, #316]	; (80023d4 <TIM6_IRQHandler+0x188>)
 8002296:	8011      	strh	r1, [r2, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d103      	bne.n	80022a4 <TIM6_IRQHandler+0x58>
			  alarmCount = 4;
 800229c:	4b4d      	ldr	r3, [pc, #308]	; (80023d4 <TIM6_IRQHandler+0x188>)
 800229e:	2204      	movs	r2, #4
 80022a0:	801a      	strh	r2, [r3, #0]
					  HAL_GPIO_WritePin(GPIOA, VIBRO_PIN, GPIO_PIN_SET); // Vibro on.
					  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Vibro
				  }
			  }
		  }
		  break;
 80022a2:	e089      	b.n	80023b8 <TIM6_IRQHandler+0x16c>
			  if (alarmCount > 2) {
 80022a4:	4b4b      	ldr	r3, [pc, #300]	; (80023d4 <TIM6_IRQHandler+0x188>)
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	f240 8085 	bls.w	80023b8 <TIM6_IRQHandler+0x16c>
				  if ((cfgData & 0x1) != 0) { // Check enabled flag sound level 1
 80022ae:	4b47      	ldr	r3, [pc, #284]	; (80023cc <TIM6_IRQHandler+0x180>)
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <TIM6_IRQHandler+0x84>
					  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_3);
 80022ba:	2108      	movs	r1, #8
 80022bc:	4846      	ldr	r0, [pc, #280]	; (80023d8 <TIM6_IRQHandler+0x18c>)
 80022be:	f005 f8a5 	bl	800740c <HAL_TIM_OC_Start>
					  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
 80022c2:	210c      	movs	r1, #12
 80022c4:	4844      	ldr	r0, [pc, #272]	; (80023d8 <TIM6_IRQHandler+0x18c>)
 80022c6:	f005 f8a1 	bl	800740c <HAL_TIM_OC_Start>
					  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 80022ca:	4844      	ldr	r0, [pc, #272]	; (80023dc <TIM6_IRQHandler+0x190>)
 80022cc:	f004 ffba 	bl	8007244 <HAL_TIM_Base_Start_IT>
				  if ((cfgData & 0x2) != 0) { // Check enabled flag vibro level 1
 80022d0:	4b3e      	ldr	r3, [pc, #248]	; (80023cc <TIM6_IRQHandler+0x180>)
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d06d      	beq.n	80023b8 <TIM6_IRQHandler+0x16c>
					  HAL_GPIO_WritePin(GPIOA, VIBRO_PIN, GPIO_PIN_SET); // Vibro on.
 80022dc:	2201      	movs	r2, #1
 80022de:	2102      	movs	r1, #2
 80022e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e4:	f003 fac4 	bl	8005870 <HAL_GPIO_WritePin>
					  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Vibro
 80022e8:	483c      	ldr	r0, [pc, #240]	; (80023dc <TIM6_IRQHandler+0x190>)
 80022ea:	f004 ffab 	bl	8007244 <HAL_TIM_Base_Start_IT>
		  break;
 80022ee:	e063      	b.n	80023b8 <TIM6_IRQHandler+0x16c>
	  case 2:
			  if (alarmCount-- <= 0) {
 80022f0:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <TIM6_IRQHandler+0x188>)
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	1e5a      	subs	r2, r3, #1
 80022f6:	b291      	uxth	r1, r2
 80022f8:	4a36      	ldr	r2, [pc, #216]	; (80023d4 <TIM6_IRQHandler+0x188>)
 80022fa:	8011      	strh	r1, [r2, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d103      	bne.n	8002308 <TIM6_IRQHandler+0xbc>
				  alarmCount = 5;
 8002300:	4b34      	ldr	r3, [pc, #208]	; (80023d4 <TIM6_IRQHandler+0x188>)
 8002302:	2205      	movs	r2, #5
 8002304:	801a      	strh	r2, [r3, #0]
						  HAL_GPIO_WritePin(GPIOA, VIBRO_PIN, GPIO_PIN_SET); // Vibro on.
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Vibro
					  }
				  }
			  }
		  break;
 8002306:	e059      	b.n	80023bc <TIM6_IRQHandler+0x170>
				  if (alarmCount > 2) {
 8002308:	4b32      	ldr	r3, [pc, #200]	; (80023d4 <TIM6_IRQHandler+0x188>)
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d955      	bls.n	80023bc <TIM6_IRQHandler+0x170>
					  if ((cfgData & 0x4) != 0) {  // Check enabled flag sound level 2
 8002310:	4b2e      	ldr	r3, [pc, #184]	; (80023cc <TIM6_IRQHandler+0x180>)
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <TIM6_IRQHandler+0xe6>
						  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_3);
 800231c:	2108      	movs	r1, #8
 800231e:	482e      	ldr	r0, [pc, #184]	; (80023d8 <TIM6_IRQHandler+0x18c>)
 8002320:	f005 f874 	bl	800740c <HAL_TIM_OC_Start>
						  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
 8002324:	210c      	movs	r1, #12
 8002326:	482c      	ldr	r0, [pc, #176]	; (80023d8 <TIM6_IRQHandler+0x18c>)
 8002328:	f005 f870 	bl	800740c <HAL_TIM_OC_Start>
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 800232c:	482b      	ldr	r0, [pc, #172]	; (80023dc <TIM6_IRQHandler+0x190>)
 800232e:	f004 ff89 	bl	8007244 <HAL_TIM_Base_Start_IT>
					  if ((cfgData & 0x8) != 0) { // Check enabled flag vibro level 2
 8002332:	4b26      	ldr	r3, [pc, #152]	; (80023cc <TIM6_IRQHandler+0x180>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d03e      	beq.n	80023bc <TIM6_IRQHandler+0x170>
						  HAL_GPIO_WritePin(GPIOA, VIBRO_PIN, GPIO_PIN_SET); // Vibro on.
 800233e:	2201      	movs	r2, #1
 8002340:	2102      	movs	r1, #2
 8002342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002346:	f003 fa93 	bl	8005870 <HAL_GPIO_WritePin>
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Vibro
 800234a:	4824      	ldr	r0, [pc, #144]	; (80023dc <TIM6_IRQHandler+0x190>)
 800234c:	f004 ff7a 	bl	8007244 <HAL_TIM_Base_Start_IT>
		  break;
 8002350:	e034      	b.n	80023bc <TIM6_IRQHandler+0x170>
	  case 3:
			  if (alarmCount-- <= 0) {
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <TIM6_IRQHandler+0x188>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	1e5a      	subs	r2, r3, #1
 8002358:	b291      	uxth	r1, r2
 800235a:	4a1e      	ldr	r2, [pc, #120]	; (80023d4 <TIM6_IRQHandler+0x188>)
 800235c:	8011      	strh	r1, [r2, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d103      	bne.n	800236a <TIM6_IRQHandler+0x11e>
				  alarmCount = 6;
 8002362:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <TIM6_IRQHandler+0x188>)
 8002364:	2206      	movs	r2, #6
 8002366:	801a      	strh	r2, [r3, #0]
						  HAL_GPIO_WritePin(GPIOA, VIBRO_PIN, GPIO_PIN_SET); // Vibro on.
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Vibro
					  }
				  }
			  }
		  break;
 8002368:	e02a      	b.n	80023c0 <TIM6_IRQHandler+0x174>
				  if (alarmCount > 2) {
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <TIM6_IRQHandler+0x188>)
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d926      	bls.n	80023c0 <TIM6_IRQHandler+0x174>
					  if ((cfgData & 0x10) != 0) { // Check enabled flag sound level 3
 8002372:	4b16      	ldr	r3, [pc, #88]	; (80023cc <TIM6_IRQHandler+0x180>)
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <TIM6_IRQHandler+0x148>
						  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_3);
 800237e:	2108      	movs	r1, #8
 8002380:	4815      	ldr	r0, [pc, #84]	; (80023d8 <TIM6_IRQHandler+0x18c>)
 8002382:	f005 f843 	bl	800740c <HAL_TIM_OC_Start>
						  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
 8002386:	210c      	movs	r1, #12
 8002388:	4813      	ldr	r0, [pc, #76]	; (80023d8 <TIM6_IRQHandler+0x18c>)
 800238a:	f005 f83f 	bl	800740c <HAL_TIM_OC_Start>
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 800238e:	4813      	ldr	r0, [pc, #76]	; (80023dc <TIM6_IRQHandler+0x190>)
 8002390:	f004 ff58 	bl	8007244 <HAL_TIM_Base_Start_IT>
					  if ((cfgData & 0x20) != 0) { // Check enabled flag vibro level 3
 8002394:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <TIM6_IRQHandler+0x180>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00f      	beq.n	80023c0 <TIM6_IRQHandler+0x174>
						  HAL_GPIO_WritePin(GPIOA, VIBRO_PIN, GPIO_PIN_SET); // Vibro on.
 80023a0:	2201      	movs	r2, #1
 80023a2:	2102      	movs	r1, #2
 80023a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a8:	f003 fa62 	bl	8005870 <HAL_GPIO_WritePin>
						  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Vibro
 80023ac:	480b      	ldr	r0, [pc, #44]	; (80023dc <TIM6_IRQHandler+0x190>)
 80023ae:	f004 ff49 	bl	8007244 <HAL_TIM_Base_Start_IT>
		  break;
 80023b2:	e005      	b.n	80023c0 <TIM6_IRQHandler+0x174>
	  }
  }
 80023b4:	bf00      	nop
 80023b6:	e004      	b.n	80023c2 <TIM6_IRQHandler+0x176>
		  break;
 80023b8:	bf00      	nop
 80023ba:	e002      	b.n	80023c2 <TIM6_IRQHandler+0x176>
		  break;
 80023bc:	bf00      	nop
 80023be:	e000      	b.n	80023c2 <TIM6_IRQHandler+0x176>
		  break;
 80023c0:	bf00      	nop

  /* USER CODE END TIM6_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20004d58 	.word	0x20004d58
 80023cc:	20004e04 	.word	0x20004e04
 80023d0:	20004224 	.word	0x20004224
 80023d4:	20004dfc 	.word	0x20004dfc
 80023d8:	20004db0 	.word	0x20004db0
 80023dc:	20004e0c 	.word	0x20004e0c

080023e0 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */
  uint32_t realCount;

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 80023e6:	4859      	ldr	r0, [pc, #356]	; (800254c <LPTIM2_IRQHandler+0x16c>)
 80023e8:	f003 fc02 	bl	8005bf0 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */
  avgRadInterval = 0;	// Average interval
 80023ec:	4b58      	ldr	r3, [pc, #352]	; (8002550 <LPTIM2_IRQHandler+0x170>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
  realCount = 0;		// Counter real data interval
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
  for ( int i = 0; i < radBufferSize; i++) {
 80023f6:	2300      	movs	r3, #0
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	e014      	b.n	8002426 <LPTIM2_IRQHandler+0x46>
	  if (radBuffer[i] > 0) {	// Calculate only positive interval
 80023fc:	4a55      	ldr	r2, [pc, #340]	; (8002554 <LPTIM2_IRQHandler+0x174>)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00b      	beq.n	8002420 <LPTIM2_IRQHandler+0x40>
		  realCount++;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3301      	adds	r3, #1
 800240c:	607b      	str	r3, [r7, #4]
		  avgRadInterval = avgRadInterval + radBuffer[i];
 800240e:	4a51      	ldr	r2, [pc, #324]	; (8002554 <LPTIM2_IRQHandler+0x174>)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002416:	4b4e      	ldr	r3, [pc, #312]	; (8002550 <LPTIM2_IRQHandler+0x170>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4413      	add	r3, r2
 800241c:	4a4c      	ldr	r2, [pc, #304]	; (8002550 <LPTIM2_IRQHandler+0x170>)
 800241e:	6013      	str	r3, [r2, #0]
  for ( int i = 0; i < radBufferSize; i++) {
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	3301      	adds	r3, #1
 8002424:	603b      	str	r3, [r7, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b31      	cmp	r3, #49	; 0x31
 800242a:	dde7      	ble.n	80023fc <LPTIM2_IRQHandler+0x1c>
	  }
  }
  if (realCount > 0) {
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d036      	beq.n	80024a0 <LPTIM2_IRQHandler+0xc0>
	  avgRadInterval = avgRadInterval / realCount;
 8002432:	4b47      	ldr	r3, [pc, #284]	; (8002550 <LPTIM2_IRQHandler+0x170>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	fbb2 f3f3 	udiv	r3, r2, r3
 800243c:	4a44      	ldr	r2, [pc, #272]	; (8002550 <LPTIM2_IRQHandler+0x170>)
 800243e:	6013      	str	r3, [r2, #0]
	  if (avgRadInterval < Thr3) {
 8002440:	4b43      	ldr	r3, [pc, #268]	; (8002550 <LPTIM2_IRQHandler+0x170>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b44      	ldr	r3, [pc, #272]	; (8002558 <LPTIM2_IRQHandler+0x178>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d208      	bcs.n	800245e <LPTIM2_IRQHandler+0x7e>
			  alarmLevel = 3;			// Activate 3 alarm level
 800244c:	4b43      	ldr	r3, [pc, #268]	; (800255c <LPTIM2_IRQHandler+0x17c>)
 800244e:	2203      	movs	r2, #3
 8002450:	801a      	strh	r2, [r3, #0]
			  alarmTime++;
 8002452:	4b43      	ldr	r3, [pc, #268]	; (8002560 <LPTIM2_IRQHandler+0x180>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	3301      	adds	r3, #1
 8002458:	4a41      	ldr	r2, [pc, #260]	; (8002560 <LPTIM2_IRQHandler+0x180>)
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	e020      	b.n	80024a0 <LPTIM2_IRQHandler+0xc0>
	  } else {
		  if (avgRadInterval < Thr2) {
 800245e:	4b3c      	ldr	r3, [pc, #240]	; (8002550 <LPTIM2_IRQHandler+0x170>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	4b40      	ldr	r3, [pc, #256]	; (8002564 <LPTIM2_IRQHandler+0x184>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d208      	bcs.n	800247c <LPTIM2_IRQHandler+0x9c>
				  alarmLevel = 2;		// Activate 2 alarm level
 800246a:	4b3c      	ldr	r3, [pc, #240]	; (800255c <LPTIM2_IRQHandler+0x17c>)
 800246c:	2202      	movs	r2, #2
 800246e:	801a      	strh	r2, [r3, #0]
				  alarmTime++;
 8002470:	4b3b      	ldr	r3, [pc, #236]	; (8002560 <LPTIM2_IRQHandler+0x180>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	3301      	adds	r3, #1
 8002476:	4a3a      	ldr	r2, [pc, #232]	; (8002560 <LPTIM2_IRQHandler+0x180>)
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e011      	b.n	80024a0 <LPTIM2_IRQHandler+0xc0>
		  } else {
			  if (avgRadInterval < Thr1) {
 800247c:	4b34      	ldr	r3, [pc, #208]	; (8002550 <LPTIM2_IRQHandler+0x170>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b39      	ldr	r3, [pc, #228]	; (8002568 <LPTIM2_IRQHandler+0x188>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d208      	bcs.n	800249a <LPTIM2_IRQHandler+0xba>
					  alarmLevel = 1;	// Activate 1 alarm level
 8002488:	4b34      	ldr	r3, [pc, #208]	; (800255c <LPTIM2_IRQHandler+0x17c>)
 800248a:	2201      	movs	r2, #1
 800248c:	801a      	strh	r2, [r3, #0]
					  alarmTime++;
 800248e:	4b34      	ldr	r3, [pc, #208]	; (8002560 <LPTIM2_IRQHandler+0x180>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	3301      	adds	r3, #1
 8002494:	4a32      	ldr	r2, [pc, #200]	; (8002560 <LPTIM2_IRQHandler+0x180>)
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	e002      	b.n	80024a0 <LPTIM2_IRQHandler+0xc0>
			  } else {
				  alarmLevel = 0;		// Disable alarm sound
 800249a:	4b30      	ldr	r3, [pc, #192]	; (800255c <LPTIM2_IRQHandler+0x17c>)
 800249c:	2200      	movs	r2, #0
 800249e:	801a      	strh	r2, [r3, #0]
			  }
		  }
	  }
  }
  /* Record log data */
  if (oldAlarmLevel != alarmLevel) {
 80024a0:	4b32      	ldr	r3, [pc, #200]	; (800256c <LPTIM2_IRQHandler+0x18c>)
 80024a2:	881a      	ldrh	r2, [r3, #0]
 80024a4:	4b2d      	ldr	r3, [pc, #180]	; (800255c <LPTIM2_IRQHandler+0x17c>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d04b      	beq.n	8002544 <LPTIM2_IRQHandler+0x164>
	  logDat[logIndex].timeData = HAL_GetTick() / 1000;
 80024ac:	f000 f930 	bl	8002710 <HAL_GetTick>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4a2f      	ldr	r2, [pc, #188]	; (8002570 <LPTIM2_IRQHandler+0x190>)
 80024b4:	7812      	ldrb	r2, [r2, #0]
 80024b6:	4610      	mov	r0, r2
 80024b8:	4a2e      	ldr	r2, [pc, #184]	; (8002574 <LPTIM2_IRQHandler+0x194>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	099a      	lsrs	r2, r3, #6
 80024c0:	492d      	ldr	r1, [pc, #180]	; (8002578 <LPTIM2_IRQHandler+0x198>)
 80024c2:	4603      	mov	r3, r0
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4403      	add	r3, r0
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	601a      	str	r2, [r3, #0]
	  logDat[logIndex].eventType = alarmLevel;
 80024ce:	4b23      	ldr	r3, [pc, #140]	; (800255c <LPTIM2_IRQHandler+0x17c>)
 80024d0:	881a      	ldrh	r2, [r3, #0]
 80024d2:	4b27      	ldr	r3, [pc, #156]	; (8002570 <LPTIM2_IRQHandler+0x190>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	4619      	mov	r1, r3
 80024d8:	b2d0      	uxtb	r0, r2
 80024da:	4a27      	ldr	r2, [pc, #156]	; (8002578 <LPTIM2_IRQHandler+0x198>)
 80024dc:	460b      	mov	r3, r1
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	440b      	add	r3, r1
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	3304      	adds	r3, #4
 80024e8:	4602      	mov	r2, r0
 80024ea:	701a      	strb	r2, [r3, #0]
	  logDat[logIndex].event_data = avgRadInterval;
 80024ec:	4b20      	ldr	r3, [pc, #128]	; (8002570 <LPTIM2_IRQHandler+0x190>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	4b17      	ldr	r3, [pc, #92]	; (8002550 <LPTIM2_IRQHandler+0x170>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4920      	ldr	r1, [pc, #128]	; (8002578 <LPTIM2_IRQHandler+0x198>)
 80024f8:	4603      	mov	r3, r0
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4403      	add	r3, r0
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	3308      	adds	r3, #8
 8002504:	601a      	str	r2, [r3, #0]
	  if (logIndex < logSize - 1) {
 8002506:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <LPTIM2_IRQHandler+0x190>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2bc6      	cmp	r3, #198	; 0xc6
 800250c:	d806      	bhi.n	800251c <LPTIM2_IRQHandler+0x13c>
		  logIndex++;
 800250e:	4b18      	ldr	r3, [pc, #96]	; (8002570 <LPTIM2_IRQHandler+0x190>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	3301      	adds	r3, #1
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4b16      	ldr	r3, [pc, #88]	; (8002570 <LPTIM2_IRQHandler+0x190>)
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	e002      	b.n	8002522 <LPTIM2_IRQHandler+0x142>
	  } else {
		  logIndex = 0;
 800251c:	4b14      	ldr	r3, [pc, #80]	; (8002570 <LPTIM2_IRQHandler+0x190>)
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
	  }
	  if (++logRecords > logSize) {
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <LPTIM2_IRQHandler+0x19c>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	3301      	adds	r3, #1
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4b14      	ldr	r3, [pc, #80]	; (800257c <LPTIM2_IRQHandler+0x19c>)
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <LPTIM2_IRQHandler+0x19c>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2bc8      	cmp	r3, #200	; 0xc8
 8002534:	d902      	bls.n	800253c <LPTIM2_IRQHandler+0x15c>
		  logRecords = logSize;
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <LPTIM2_IRQHandler+0x19c>)
 8002538:	22c8      	movs	r2, #200	; 0xc8
 800253a:	701a      	strb	r2, [r3, #0]
	  }
	  oldAlarmLevel = alarmLevel;
 800253c:	4b07      	ldr	r3, [pc, #28]	; (800255c <LPTIM2_IRQHandler+0x17c>)
 800253e:	881a      	ldrh	r2, [r3, #0]
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <LPTIM2_IRQHandler+0x18c>)
 8002542:	801a      	strh	r2, [r3, #0]
  }
  //uint8_t s[100];
  //sprintf(s, "Avg: %d, Cnt: %d, alarm: %d\r\n", avgRadInterval, realCount, alarmLevel);
  //HAL_UART_Transmit(&huart1, s, strlen((char *)s), 1000);
  /* USER CODE END LPTIM2_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	200042f0 	.word	0x200042f0
 8002550:	20004170 	.word	0x20004170
 8002554:	2000408c 	.word	0x2000408c
 8002558:	2000006c 	.word	0x2000006c
 800255c:	20004224 	.word	0x20004224
 8002560:	2000005c 	.word	0x2000005c
 8002564:	20000068 	.word	0x20000068
 8002568:	20000064 	.word	0x20000064
 800256c:	20000000 	.word	0x20000000
 8002570:	20004156 	.word	0x20004156
 8002574:	10624dd3 	.word	0x10624dd3
 8002578:	200043b0 	.word	0x200043b0
 800257c:	20004157 	.word	0x20004157

08002580 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002584:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <SystemInit+0x64>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	4a16      	ldr	r2, [pc, #88]	; (80025e4 <SystemInit+0x64>)
 800258c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <SystemInit+0x68>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <SystemInit+0x68>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <SystemInit+0x68>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <SystemInit+0x68>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a0f      	ldr	r2, [pc, #60]	; (80025e8 <SystemInit+0x68>)
 80025ac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80025b0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80025b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80025b6:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <SystemInit+0x68>)
 80025b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025bc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <SystemInit+0x68>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <SystemInit+0x68>)
 80025c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <SystemInit+0x68>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <SystemInit+0x64>)
 80025d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025d6:	609a      	str	r2, [r3, #8]
#endif
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00
 80025e8:	40021000 	.word	0x40021000

080025ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002624 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025f0:	f7ff ffc6 	bl	8002580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80025f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80025f6:	e003      	b.n	8002600 <LoopCopyDataInit>

080025f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80025fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80025fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80025fe:	3104      	adds	r1, #4

08002600 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002600:	480a      	ldr	r0, [pc, #40]	; (800262c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002602:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002604:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002606:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002608:	d3f6      	bcc.n	80025f8 <CopyDataInit>
	ldr	r2, =_sbss
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <LoopForever+0x12>)
	b	LoopFillZerobss
 800260c:	e002      	b.n	8002614 <LoopFillZerobss>

0800260e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800260e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002610:	f842 3b04 	str.w	r3, [r2], #4

08002614 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <LoopForever+0x16>)
	cmp	r2, r3
 8002616:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002618:	d3f9      	bcc.n	800260e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800261a:	f006 fde7 	bl	80091ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800261e:	f7fe f8df 	bl	80007e0 <main>

08002622 <LoopForever>:

LoopForever:
    b LoopForever
 8002622:	e7fe      	b.n	8002622 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002624:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002628:	080092d0 	.word	0x080092d0
	ldr	r0, =_sdata
 800262c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002630:	20000034 	.word	0x20000034
	ldr	r2, =_sbss
 8002634:	20000034 	.word	0x20000034
	ldr	r3, = _ebss
 8002638:	20004e74 	.word	0x20004e74

0800263c <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800263c:	e7fe      	b.n	800263c <COMP_IRQHandler>

0800263e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002648:	2003      	movs	r0, #3
 800264a:	f002 f935 	bl	80048b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800264e:	2000      	movs	r0, #0
 8002650:	f000 f80e 	bl	8002670 <HAL_InitTick>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	71fb      	strb	r3, [r7, #7]
 800265e:	e001      	b.n	8002664 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002660:	f7ff fa24 	bl	8001aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002664:	79fb      	ldrb	r3, [r7, #7]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800267c:	4b17      	ldr	r3, [pc, #92]	; (80026dc <HAL_InitTick+0x6c>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d023      	beq.n	80026cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002684:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <HAL_InitTick+0x70>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <HAL_InitTick+0x6c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4619      	mov	r1, r3
 800268e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002692:	fbb3 f3f1 	udiv	r3, r3, r1
 8002696:	fbb2 f3f3 	udiv	r3, r2, r3
 800269a:	4618      	mov	r0, r3
 800269c:	f002 f941 	bl	8004922 <HAL_SYSTICK_Config>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10f      	bne.n	80026c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b0f      	cmp	r3, #15
 80026aa:	d809      	bhi.n	80026c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ac:	2200      	movs	r2, #0
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026b4:	f002 f90b 	bl	80048ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026b8:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <HAL_InitTick+0x74>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e007      	b.n	80026d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
 80026c4:	e004      	b.n	80026d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
 80026ca:	e001      	b.n	80026d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000010 	.word	0x20000010
 80026e0:	20000008 	.word	0x20000008
 80026e4:	2000000c 	.word	0x2000000c

080026e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_IncTick+0x20>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_IncTick+0x24>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4413      	add	r3, r2
 80026f8:	4a04      	ldr	r2, [pc, #16]	; (800270c <HAL_IncTick+0x24>)
 80026fa:	6013      	str	r3, [r2, #0]
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20000010 	.word	0x20000010
 800270c:	20004e70 	.word	0x20004e70

08002710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return uwTick;
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <HAL_GetTick+0x14>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20004e70 	.word	0x20004e70

08002728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002730:	f7ff ffee 	bl	8002710 <HAL_GetTick>
 8002734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002740:	d005      	beq.n	800274e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_Delay+0x44>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4413      	add	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800274e:	bf00      	nop
 8002750:	f7ff ffde 	bl	8002710 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	429a      	cmp	r2, r3
 800275e:	d8f7      	bhi.n	8002750 <HAL_Delay+0x28>
  {
  }
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000010 	.word	0x20000010

08002770 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	609a      	str	r2, [r3, #8]
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	609a      	str	r2, [r3, #8]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	3360      	adds	r3, #96	; 0x60
 80027ea:	461a      	mov	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <LL_ADC_SetOffset+0x44>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	4313      	orrs	r3, r2
 8002808:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002810:	bf00      	nop
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	03fff000 	.word	0x03fff000

08002820 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3360      	adds	r3, #96	; 0x60
 800282e:	461a      	mov	r2, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3360      	adds	r3, #96	; 0x60
 800285c:	461a      	mov	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	431a      	orrs	r2, r3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002876:	bf00      	nop
 8002878:	371c      	adds	r7, #28
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	615a      	str	r2, [r3, #20]
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b087      	sub	sp, #28
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3330      	adds	r3, #48	; 0x30
 80028de:	461a      	mov	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	4413      	add	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f003 031f 	and.w	r3, r3, #31
 80028f8:	211f      	movs	r1, #31
 80028fa:	fa01 f303 	lsl.w	r3, r1, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	401a      	ands	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0e9b      	lsrs	r3, r3, #26
 8002906:	f003 011f 	and.w	r1, r3, #31
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	fa01 f303 	lsl.w	r3, r1, r3
 8002914:	431a      	orrs	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800291a:	bf00      	nop
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002932:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	3314      	adds	r3, #20
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	0e5b      	lsrs	r3, r3, #25
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	4413      	add	r3, r2
 800296a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	0d1b      	lsrs	r3, r3, #20
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	2107      	movs	r1, #7
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	401a      	ands	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	0d1b      	lsrs	r3, r3, #20
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	fa01 f303 	lsl.w	r3, r1, r3
 8002990:	431a      	orrs	r2, r3
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002996:	bf00      	nop
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029bc:	43db      	mvns	r3, r3
 80029be:	401a      	ands	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f003 0318 	and.w	r3, r3, #24
 80029c6:	4908      	ldr	r1, [pc, #32]	; (80029e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80029c8:	40d9      	lsrs	r1, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	400b      	ands	r3, r1
 80029ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d2:	431a      	orrs	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	0007ffff 	.word	0x0007ffff

080029ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 031f 	and.w	r3, r3, #31
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6093      	str	r3, [r2, #8]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a5c:	d101      	bne.n	8002a62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aac:	d101      	bne.n	8002ab2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ad0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ad4:	f043 0201 	orr.w	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002af8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002afc:	f043 0202 	orr.w	r2, r3, #2
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <LL_ADC_IsEnabled+0x18>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <LL_ADC_IsEnabled+0x1a>
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d101      	bne.n	8002b4e <LL_ADC_IsDisableOngoing+0x18>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <LL_ADC_IsDisableOngoing+0x1a>
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b70:	f043 0204 	orr.w	r2, r3, #4
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b98:	f043 0210 	orr.w	r2, r3, #16
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d101      	bne.n	8002bc4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002be2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002be6:	f043 0220 	orr.w	r2, r3, #32
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d101      	bne.n	8002c12 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e131      	b.n	8002e9e <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7fe ff53 	bl	8001af4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fef1 	bl	8002a48 <LL_ADC_IsDeepPowerDownEnabled>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d004      	beq.n	8002c76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fed7 	bl	8002a24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff ff0c 	bl	8002a98 <LL_ADC_IsInternalRegulatorEnabled>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d115      	bne.n	8002cb2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fef0 	bl	8002a70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c90:	4b85      	ldr	r3, [pc, #532]	; (8002ea8 <HAL_ADC_Init+0x288>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	099b      	lsrs	r3, r3, #6
 8002c96:	4a85      	ldr	r2, [pc, #532]	; (8002eac <HAL_ADC_Init+0x28c>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	099b      	lsrs	r3, r3, #6
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ca4:	e002      	b.n	8002cac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f9      	bne.n	8002ca6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff feee 	bl	8002a98 <LL_ADC_IsInternalRegulatorEnabled>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10d      	bne.n	8002cde <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc6:	f043 0210 	orr.w	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd2:	f043 0201 	orr.w	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ff62 	bl	8002bac <LL_ADC_REG_IsConversionOngoing>
 8002ce8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 80ca 	bne.w	8002e8c <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 80c6 	bne.w	8002e8c <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d04:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d08:	f043 0202 	orr.w	r2, r3, #2
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fefb 	bl	8002b10 <LL_ADC_IsEnabled>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d110      	bne.n	8002d42 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d20:	4863      	ldr	r0, [pc, #396]	; (8002eb0 <HAL_ADC_Init+0x290>)
 8002d22:	f7ff fef5 	bl	8002b10 <LL_ADC_IsEnabled>
 8002d26:	4604      	mov	r4, r0
 8002d28:	4862      	ldr	r0, [pc, #392]	; (8002eb4 <HAL_ADC_Init+0x294>)
 8002d2a:	f7ff fef1 	bl	8002b10 <LL_ADC_IsEnabled>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4323      	orrs	r3, r4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d105      	bne.n	8002d42 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	485e      	ldr	r0, [pc, #376]	; (8002eb8 <HAL_ADC_Init+0x298>)
 8002d3e:	f7ff fd17 	bl	8002770 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	7e5b      	ldrb	r3, [r3, #25]
 8002d46:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d4c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d52:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d58:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d60:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d106      	bne.n	8002d7e <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	3b01      	subs	r3, #1
 8002d76:	045b      	lsls	r3, r3, #17
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d009      	beq.n	8002d9a <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	4b46      	ldr	r3, [pc, #280]	; (8002ebc <HAL_ADC_Init+0x29c>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	69b9      	ldr	r1, [r7, #24]
 8002daa:	430b      	orrs	r3, r1
 8002dac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fefa 	bl	8002bac <LL_ADC_REG_IsConversionOngoing>
 8002db8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ff1b 	bl	8002bfa <LL_ADC_INJ_IsConversionOngoing>
 8002dc4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d13d      	bne.n	8002e48 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d13a      	bne.n	8002e48 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dd6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dde:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dee:	f023 0302 	bic.w	r3, r3, #2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	69b9      	ldr	r1, [r7, #24]
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d118      	bne.n	8002e38 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e10:	f023 0304 	bic.w	r3, r3, #4
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e1c:	4311      	orrs	r1, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e22:	4311      	orrs	r1, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0201 	orr.w	r2, r2, #1
 8002e34:	611a      	str	r2, [r3, #16]
 8002e36:	e007      	b.n	8002e48 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d10c      	bne.n	8002e6a <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f023 010f 	bic.w	r1, r3, #15
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	1e5a      	subs	r2, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
 8002e68:	e007      	b.n	8002e7a <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 020f 	bic.w	r2, r2, #15
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7e:	f023 0303 	bic.w	r3, r3, #3
 8002e82:	f043 0201 	orr.w	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54
 8002e8a:	e007      	b.n	8002e9c <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	f043 0210 	orr.w	r2, r3, #16
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3724      	adds	r7, #36	; 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd90      	pop	{r4, r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000008 	.word	0x20000008
 8002eac:	053e2d63 	.word	0x053e2d63
 8002eb0:	50040000 	.word	0x50040000
 8002eb4:	50040100 	.word	0x50040100
 8002eb8:	50040300 	.word	0x50040300
 8002ebc:	fff0c007 	.word	0xfff0c007

08002ec0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ec8:	4893      	ldr	r0, [pc, #588]	; (8003118 <HAL_ADC_Start_IT+0x258>)
 8002eca:	f7ff fd8f 	bl	80029ec <LL_ADC_GetMultimode>
 8002ece:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fe69 	bl	8002bac <LL_ADC_REG_IsConversionOngoing>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f040 8111 	bne.w	8003104 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_ADC_Start_IT+0x30>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e10e      	b.n	800310e <HAL_ADC_Start_IT+0x24e>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f001 f92f 	bl	800415c <ADC_Enable>
 8002efe:	4603      	mov	r3, r0
 8002f00:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f040 80f8 	bne.w	80030fa <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a7e      	ldr	r2, [pc, #504]	; (800311c <HAL_ADC_Start_IT+0x25c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d002      	beq.n	8002f2e <HAL_ADC_Start_IT+0x6e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	e000      	b.n	8002f30 <HAL_ADC_Start_IT+0x70>
 8002f2e:	4b7c      	ldr	r3, [pc, #496]	; (8003120 <HAL_ADC_Start_IT+0x260>)
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d002      	beq.n	8002f3e <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d105      	bne.n	8002f4a <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d006      	beq.n	8002f64 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	f023 0206 	bic.w	r2, r3, #6
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	659a      	str	r2, [r3, #88]	; 0x58
 8002f62:	e002      	b.n	8002f6a <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	221c      	movs	r2, #28
 8002f70:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 021c 	bic.w	r2, r2, #28
 8002f88:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d108      	bne.n	8002fa4 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0208 	orr.w	r2, r2, #8
 8002fa0:	605a      	str	r2, [r3, #4]
          break;
 8002fa2:	e008      	b.n	8002fb6 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0204 	orr.w	r2, r2, #4
 8002fb2:	605a      	str	r2, [r3, #4]
          break;
 8002fb4:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d107      	bne.n	8002fce <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0210 	orr.w	r2, r2, #16
 8002fcc:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a52      	ldr	r2, [pc, #328]	; (800311c <HAL_ADC_Start_IT+0x25c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d002      	beq.n	8002fde <HAL_ADC_Start_IT+0x11e>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	e000      	b.n	8002fe0 <HAL_ADC_Start_IT+0x120>
 8002fde:	4b50      	ldr	r3, [pc, #320]	; (8003120 <HAL_ADC_Start_IT+0x260>)
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d008      	beq.n	8002ffa <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b05      	cmp	r3, #5
 8002ff2:	d002      	beq.n	8002ffa <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b09      	cmp	r3, #9
 8002ff8:	d13b      	bne.n	8003072 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d02d      	beq.n	8003064 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003010:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	2b08      	cmp	r3, #8
 800301e:	d110      	bne.n	8003042 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0220 	bic.w	r2, r2, #32
 800302e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800303e:	605a      	str	r2, [r3, #4]
              break;
 8003040:	e011      	b.n	8003066 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003050:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0220 	orr.w	r2, r2, #32
 8003060:	605a      	str	r2, [r3, #4]
              break;
 8003062:	e000      	b.n	8003066 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8003064:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fd76 	bl	8002b5c <LL_ADC_REG_StartConversion>
 8003070:	e04c      	b.n	800310c <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003076:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a26      	ldr	r2, [pc, #152]	; (800311c <HAL_ADC_Start_IT+0x25c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d002      	beq.n	800308e <HAL_ADC_Start_IT+0x1ce>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	e000      	b.n	8003090 <HAL_ADC_Start_IT+0x1d0>
 800308e:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_ADC_Start_IT+0x260>)
 8003090:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d035      	beq.n	800310a <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d110      	bne.n	80030d8 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0220 	bic.w	r2, r2, #32
 80030c4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030d4:	605a      	str	r2, [r3, #4]
              break;
 80030d6:	e019      	b.n	800310c <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030e6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0220 	orr.w	r2, r2, #32
 80030f6:	605a      	str	r2, [r3, #4]
              break;
 80030f8:	e008      	b.n	800310c <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003102:	e003      	b.n	800310c <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003104:	2302      	movs	r3, #2
 8003106:	75fb      	strb	r3, [r7, #23]
 8003108:	e000      	b.n	800310c <HAL_ADC_Start_IT+0x24c>
        }
 800310a:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 800310c:	7dfb      	ldrb	r3, [r7, #23]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	50040300 	.word	0x50040300
 800311c:	50040100 	.word	0x50040100
 8003120:	50040000 	.word	0x50040000

08003124 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003130:	4850      	ldr	r0, [pc, #320]	; (8003274 <HAL_ADC_Start_DMA+0x150>)
 8003132:	f7ff fc5b 	bl	80029ec <LL_ADC_GetMultimode>
 8003136:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff fd35 	bl	8002bac <LL_ADC_REG_IsConversionOngoing>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	f040 808e 	bne.w	8003266 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_ADC_Start_DMA+0x34>
 8003154:	2302      	movs	r3, #2
 8003156:	e089      	b.n	800326c <HAL_ADC_Start_DMA+0x148>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2b05      	cmp	r3, #5
 800316a:	d002      	beq.n	8003172 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	2b09      	cmp	r3, #9
 8003170:	d172      	bne.n	8003258 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 fff2 	bl	800415c <ADC_Enable>
 8003178:	4603      	mov	r3, r0
 800317a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800317c:	7dfb      	ldrb	r3, [r7, #23]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d165      	bne.n	800324e <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800318a:	f023 0301 	bic.w	r3, r3, #1
 800318e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a37      	ldr	r2, [pc, #220]	; (8003278 <HAL_ADC_Start_DMA+0x154>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d002      	beq.n	80031a6 <HAL_ADC_Start_DMA+0x82>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	e000      	b.n	80031a8 <HAL_ADC_Start_DMA+0x84>
 80031a6:	4b35      	ldr	r3, [pc, #212]	; (800327c <HAL_ADC_Start_DMA+0x158>)
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d002      	beq.n	80031b6 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d105      	bne.n	80031c2 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d006      	beq.n	80031dc <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d2:	f023 0206 	bic.w	r2, r3, #6
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	659a      	str	r2, [r3, #88]	; 0x58
 80031da:	e002      	b.n	80031e2 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e6:	4a26      	ldr	r2, [pc, #152]	; (8003280 <HAL_ADC_Start_DMA+0x15c>)
 80031e8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ee:	4a25      	ldr	r2, [pc, #148]	; (8003284 <HAL_ADC_Start_DMA+0x160>)
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f6:	4a24      	ldr	r2, [pc, #144]	; (8003288 <HAL_ADC_Start_DMA+0x164>)
 80031f8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	221c      	movs	r2, #28
 8003200:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0210 	orr.w	r2, r2, #16
 8003218:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0201 	orr.w	r2, r2, #1
 8003228:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3340      	adds	r3, #64	; 0x40
 8003234:	4619      	mov	r1, r3
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f001 fcc9 	bl	8004bd0 <HAL_DMA_Start_IT>
 800323e:	4603      	mov	r3, r0
 8003240:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fc88 	bl	8002b5c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800324c:	e00d      	b.n	800326a <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003256:	e008      	b.n	800326a <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003264:	e001      	b.n	800326a <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003266:	2302      	movs	r3, #2
 8003268:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800326a:	7dfb      	ldrb	r3, [r7, #23]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	50040300 	.word	0x50040300
 8003278:	50040100 	.word	0x50040100
 800327c:	50040000 	.word	0x50040000
 8003280:	080042df 	.word	0x080042df
 8003284:	080043b7 	.word	0x080043b7
 8003288:	080043d3 	.word	0x080043d3

0800328c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_ADC_Stop_DMA+0x16>
 800329e:	2302      	movs	r3, #2
 80032a0:	e051      	b.n	8003346 <HAL_ADC_Stop_DMA+0xba>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80032aa:	2103      	movs	r1, #3
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fe99 	bl	8003fe4 <ADC_ConversionStop>
 80032b2:	4603      	mov	r3, r0
 80032b4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d13f      	bne.n	800333c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0201 	bic.w	r2, r2, #1
 80032ca:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d10f      	bne.n	80032fa <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032de:	4618      	mov	r0, r3
 80032e0:	f001 fcd6 	bl	8004c90 <HAL_DMA_Abort>
 80032e4:	4603      	mov	r3, r0
 80032e6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0210 	bic.w	r2, r2, #16
 8003308:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d105      	bne.n	800331c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 ff85 	bl	8004220 <ADC_Disable>
 8003316:	4603      	mov	r3, r0
 8003318:	73fb      	strb	r3, [r7, #15]
 800331a:	e002      	b.n	8003322 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 ff7f 	bl	8004220 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003330:	f023 0301 	bic.w	r3, r3, #1
 8003334:	f043 0201 	orr.w	r2, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	; 0x28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003370:	2300      	movs	r3, #0
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003384:	4882      	ldr	r0, [pc, #520]	; (8003590 <HAL_ADC_IRQHandler+0x228>)
 8003386:	f7ff fb31 	bl	80029ec <LL_ADC_GetMultimode>
 800338a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d017      	beq.n	80033c6 <HAL_ADC_IRQHandler+0x5e>
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d012      	beq.n	80033c6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d105      	bne.n	80033b8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f001 f8ff 	bl	80045bc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2202      	movs	r2, #2
 80033c4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d004      	beq.n	80033da <HAL_ADC_IRQHandler+0x72>
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10a      	bne.n	80033f0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 8083 	beq.w	80034ec <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d07d      	beq.n	80034ec <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d105      	bne.n	8003408 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003400:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fa4b 	bl	80028a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d062      	beq.n	80034de <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a5d      	ldr	r2, [pc, #372]	; (8003594 <HAL_ADC_IRQHandler+0x22c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d002      	beq.n	8003428 <HAL_ADC_IRQHandler+0xc0>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	e000      	b.n	800342a <HAL_ADC_IRQHandler+0xc2>
 8003428:	4b5b      	ldr	r3, [pc, #364]	; (8003598 <HAL_ADC_IRQHandler+0x230>)
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6812      	ldr	r2, [r2, #0]
 800342e:	4293      	cmp	r3, r2
 8003430:	d008      	beq.n	8003444 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2b05      	cmp	r3, #5
 800343c:	d002      	beq.n	8003444 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2b09      	cmp	r3, #9
 8003442:	d104      	bne.n	800344e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	623b      	str	r3, [r7, #32]
 800344c:	e00c      	b.n	8003468 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a50      	ldr	r2, [pc, #320]	; (8003594 <HAL_ADC_IRQHandler+0x22c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d002      	beq.n	800345e <HAL_ADC_IRQHandler+0xf6>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	e000      	b.n	8003460 <HAL_ADC_IRQHandler+0xf8>
 800345e:	4b4e      	ldr	r3, [pc, #312]	; (8003598 <HAL_ADC_IRQHandler+0x230>)
 8003460:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d135      	bne.n	80034de <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b08      	cmp	r3, #8
 800347e:	d12e      	bne.n	80034de <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff fb91 	bl	8002bac <LL_ADC_REG_IsConversionOngoing>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d11a      	bne.n	80034c6 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 020c 	bic.w	r2, r2, #12
 800349e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d112      	bne.n	80034de <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034bc:	f043 0201 	orr.w	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	655a      	str	r2, [r3, #84]	; 0x54
 80034c4:	e00b      	b.n	80034de <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ca:	f043 0210 	orr.w	r2, r3, #16
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	f043 0201 	orr.w	r2, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f95c 	bl	800379c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	220c      	movs	r2, #12
 80034ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d004      	beq.n	8003500 <HAL_ADC_IRQHandler+0x198>
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10b      	bne.n	8003518 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 809f 	beq.w	800364a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 8099 	beq.w	800364a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	2b00      	cmp	r3, #0
 8003522:	d105      	bne.n	8003530 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003528:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff f9f6 	bl	8002926 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800353a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff f9b1 	bl	80028a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003546:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a11      	ldr	r2, [pc, #68]	; (8003594 <HAL_ADC_IRQHandler+0x22c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d002      	beq.n	8003558 <HAL_ADC_IRQHandler+0x1f0>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	e000      	b.n	800355a <HAL_ADC_IRQHandler+0x1f2>
 8003558:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <HAL_ADC_IRQHandler+0x230>)
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	4293      	cmp	r3, r2
 8003560:	d008      	beq.n	8003574 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2b06      	cmp	r3, #6
 800356c:	d002      	beq.n	8003574 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2b07      	cmp	r3, #7
 8003572:	d104      	bne.n	800357e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	623b      	str	r3, [r7, #32]
 800357c:	e013      	b.n	80035a6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a04      	ldr	r2, [pc, #16]	; (8003594 <HAL_ADC_IRQHandler+0x22c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d009      	beq.n	800359c <HAL_ADC_IRQHandler+0x234>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	e007      	b.n	800359e <HAL_ADC_IRQHandler+0x236>
 800358e:	bf00      	nop
 8003590:	50040300 	.word	0x50040300
 8003594:	50040100 	.word	0x50040100
 8003598:	50040000 	.word	0x50040000
 800359c:	4b7d      	ldr	r3, [pc, #500]	; (8003794 <HAL_ADC_IRQHandler+0x42c>)
 800359e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d047      	beq.n	800363c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d007      	beq.n	80035c6 <HAL_ADC_IRQHandler+0x25e>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d03f      	beq.n	800363c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d13a      	bne.n	800363c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d0:	2b40      	cmp	r3, #64	; 0x40
 80035d2:	d133      	bne.n	800363c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d12e      	bne.n	800363c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff fb09 	bl	8002bfa <LL_ADC_INJ_IsConversionOngoing>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d11a      	bne.n	8003624 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035fc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d112      	bne.n	800363c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361a:	f043 0201 	orr.w	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	655a      	str	r2, [r3, #84]	; 0x54
 8003622:	e00b      	b.n	800363c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	f043 0210 	orr.w	r2, r3, #16
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003634:	f043 0201 	orr.w	r2, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 ff95 	bl	800456c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2260      	movs	r2, #96	; 0x60
 8003648:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003650:	2b00      	cmp	r3, #0
 8003652:	d011      	beq.n	8003678 <HAL_ADC_IRQHandler+0x310>
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00c      	beq.n	8003678 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f8aa 	bl	80037c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2280      	movs	r2, #128	; 0x80
 8003676:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d012      	beq.n	80036a8 <HAL_ADC_IRQHandler+0x340>
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00d      	beq.n	80036a8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003690:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 ff7b 	bl	8004594 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d012      	beq.n	80036d8 <HAL_ADC_IRQHandler+0x370>
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00d      	beq.n	80036d8 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 ff6d 	bl	80045a8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d036      	beq.n	8003750 <HAL_ADC_IRQHandler+0x3e8>
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d031      	beq.n	8003750 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d102      	bne.n	80036fa <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80036f4:	2301      	movs	r3, #1
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
 80036f8:	e014      	b.n	8003724 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003700:	4825      	ldr	r0, [pc, #148]	; (8003798 <HAL_ADC_IRQHandler+0x430>)
 8003702:	f7ff f981 	bl	8002a08 <LL_ADC_GetMultiDMATransfer>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00b      	beq.n	8003724 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800370c:	2301      	movs	r3, #1
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
 8003710:	e008      	b.n	8003724 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003720:	2301      	movs	r3, #1
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	2b01      	cmp	r3, #1
 8003728:	d10e      	bne.n	8003748 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	f043 0202 	orr.w	r2, r3, #2
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f848 	bl	80037d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2210      	movs	r2, #16
 800374e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003756:	2b00      	cmp	r3, #0
 8003758:	d018      	beq.n	800378c <HAL_ADC_IRQHandler+0x424>
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003760:	2b00      	cmp	r3, #0
 8003762:	d013      	beq.n	800378c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003774:	f043 0208 	orr.w	r2, r3, #8
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003784:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fefa 	bl	8004580 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800378c:	bf00      	nop
 800378e:	3728      	adds	r7, #40	; 0x28
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	50040000 	.word	0x50040000
 8003798:	50040300 	.word	0x50040300

0800379c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b0b6      	sub	sp, #216	; 0xd8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_ADC_ConfigChannel+0x22>
 800380a:	2302      	movs	r3, #2
 800380c:	e3d5      	b.n	8003fba <HAL_ADC_ConfigChannel+0x7ce>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff f9c6 	bl	8002bac <LL_ADC_REG_IsConversionOngoing>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	f040 83ba 	bne.w	8003f9c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b05      	cmp	r3, #5
 800382e:	d824      	bhi.n	800387a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	3b02      	subs	r3, #2
 8003836:	2b03      	cmp	r3, #3
 8003838:	d81b      	bhi.n	8003872 <HAL_ADC_ConfigChannel+0x86>
 800383a:	a201      	add	r2, pc, #4	; (adr r2, 8003840 <HAL_ADC_ConfigChannel+0x54>)
 800383c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003840:	08003851 	.word	0x08003851
 8003844:	08003859 	.word	0x08003859
 8003848:	08003861 	.word	0x08003861
 800384c:	08003869 	.word	0x08003869
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	220c      	movs	r2, #12
 8003854:	605a      	str	r2, [r3, #4]
          break;
 8003856:	e011      	b.n	800387c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2212      	movs	r2, #18
 800385c:	605a      	str	r2, [r3, #4]
          break;
 800385e:	e00d      	b.n	800387c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2218      	movs	r2, #24
 8003864:	605a      	str	r2, [r3, #4]
          break;
 8003866:	e009      	b.n	800387c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800386e:	605a      	str	r2, [r3, #4]
          break;
 8003870:	e004      	b.n	800387c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2206      	movs	r2, #6
 8003876:	605a      	str	r2, [r3, #4]
          break;
 8003878:	e000      	b.n	800387c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800387a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	f7ff f820 	bl	80028ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff f98a 	bl	8002bac <LL_ADC_REG_IsConversionOngoing>
 8003898:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff f9aa 	bl	8002bfa <LL_ADC_INJ_IsConversionOngoing>
 80038a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f040 81c1 	bne.w	8003c36 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f040 81bc 	bne.w	8003c36 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038c6:	d10f      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6818      	ldr	r0, [r3, #0]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2200      	movs	r2, #0
 80038d2:	4619      	mov	r1, r3
 80038d4:	f7ff f83a 	bl	800294c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fe ffce 	bl	8002882 <LL_ADC_SetSamplingTimeCommonConfig>
 80038e6:	e00e      	b.n	8003906 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6818      	ldr	r0, [r3, #0]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	6819      	ldr	r1, [r3, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	461a      	mov	r2, r3
 80038f6:	f7ff f829 	bl	800294c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f7fe ffbe 	bl	8002882 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	695a      	ldr	r2, [r3, #20]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	08db      	lsrs	r3, r3, #3
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	2b04      	cmp	r3, #4
 8003926:	d00a      	beq.n	800393e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	6919      	ldr	r1, [r3, #16]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003938:	f7fe ff4e 	bl	80027d8 <LL_ADC_SetOffset>
 800393c:	e17b      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f7fe ff6b 	bl	8002820 <LL_ADC_GetOffsetChannel>
 800394a:	4603      	mov	r3, r0
 800394c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10a      	bne.n	800396a <HAL_ADC_ConfigChannel+0x17e>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2100      	movs	r1, #0
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe ff60 	bl	8002820 <LL_ADC_GetOffsetChannel>
 8003960:	4603      	mov	r3, r0
 8003962:	0e9b      	lsrs	r3, r3, #26
 8003964:	f003 021f 	and.w	r2, r3, #31
 8003968:	e01e      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x1bc>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2100      	movs	r1, #0
 8003970:	4618      	mov	r0, r3
 8003972:	f7fe ff55 	bl	8002820 <LL_ADC_GetOffsetChannel>
 8003976:	4603      	mov	r3, r0
 8003978:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003980:	fa93 f3a3 	rbit	r3, r3
 8003984:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003988:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800398c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003990:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003998:	2320      	movs	r3, #32
 800399a:	e004      	b.n	80039a6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800399c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039a0:	fab3 f383 	clz	r3, r3
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d105      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x1d4>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	0e9b      	lsrs	r3, r3, #26
 80039ba:	f003 031f 	and.w	r3, r3, #31
 80039be:	e018      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x206>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80039cc:	fa93 f3a3 	rbit	r3, r3
 80039d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80039d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80039dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80039e4:	2320      	movs	r3, #32
 80039e6:	e004      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80039e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039ec:	fab3 f383 	clz	r3, r3
 80039f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d106      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2200      	movs	r2, #0
 80039fc:	2100      	movs	r1, #0
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe ff24 	bl	800284c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe ff08 	bl	8002820 <LL_ADC_GetOffsetChannel>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10a      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x244>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fe fefd 	bl	8002820 <LL_ADC_GetOffsetChannel>
 8003a26:	4603      	mov	r3, r0
 8003a28:	0e9b      	lsrs	r3, r3, #26
 8003a2a:	f003 021f 	and.w	r2, r3, #31
 8003a2e:	e01e      	b.n	8003a6e <HAL_ADC_ConfigChannel+0x282>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2101      	movs	r1, #1
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe fef2 	bl	8002820 <LL_ADC_GetOffsetChannel>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a46:	fa93 f3a3 	rbit	r3, r3
 8003a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003a56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003a5e:	2320      	movs	r3, #32
 8003a60:	e004      	b.n	8003a6c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003a62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a66:	fab3 f383 	clz	r3, r3
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d105      	bne.n	8003a86 <HAL_ADC_ConfigChannel+0x29a>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	0e9b      	lsrs	r3, r3, #26
 8003a80:	f003 031f 	and.w	r3, r3, #31
 8003a84:	e018      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x2cc>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003a9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003aa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003aaa:	2320      	movs	r3, #32
 8003aac:	e004      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003aae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ab2:	fab3 f383 	clz	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d106      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fe fec1 	bl	800284c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2102      	movs	r1, #2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe fea5 	bl	8002820 <LL_ADC_GetOffsetChannel>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10a      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x30a>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fe fe9a 	bl	8002820 <LL_ADC_GetOffsetChannel>
 8003aec:	4603      	mov	r3, r0
 8003aee:	0e9b      	lsrs	r3, r3, #26
 8003af0:	f003 021f 	and.w	r2, r3, #31
 8003af4:	e01e      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x348>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2102      	movs	r1, #2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fe fe8f 	bl	8002820 <LL_ADC_GetOffsetChannel>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b0c:	fa93 f3a3 	rbit	r3, r3
 8003b10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003b1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003b24:	2320      	movs	r3, #32
 8003b26:	e004      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003b28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b2c:	fab3 f383 	clz	r3, r3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d105      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x360>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	0e9b      	lsrs	r3, r3, #26
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	e016      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x38e>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b58:	fa93 f3a3 	rbit	r3, r3
 8003b5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003b5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003b64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003b6c:	2320      	movs	r3, #32
 8003b6e:	e004      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003b70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b74:	fab3 f383 	clz	r3, r3
 8003b78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d106      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2200      	movs	r2, #0
 8003b84:	2102      	movs	r1, #2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe fe60 	bl	800284c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2103      	movs	r1, #3
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe fe44 	bl	8002820 <LL_ADC_GetOffsetChannel>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x3cc>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2103      	movs	r1, #3
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe fe39 	bl	8002820 <LL_ADC_GetOffsetChannel>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	0e9b      	lsrs	r3, r3, #26
 8003bb2:	f003 021f 	and.w	r2, r3, #31
 8003bb6:	e017      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x3fc>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2103      	movs	r1, #3
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fe fe2e 	bl	8002820 <LL_ADC_GetOffsetChannel>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bca:	fa93 f3a3 	rbit	r3, r3
 8003bce:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003bd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bd2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003bda:	2320      	movs	r3, #32
 8003bdc:	e003      	b.n	8003be6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003be0:	fab3 f383 	clz	r3, r3
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d105      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x414>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	0e9b      	lsrs	r3, r3, #26
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	e011      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x438>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c08:	fa93 f3a3 	rbit	r3, r3
 8003c0c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003c0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c10:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003c18:	2320      	movs	r3, #32
 8003c1a:	e003      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c1e:	fab3 f383 	clz	r3, r3
 8003c22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d106      	bne.n	8003c36 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2103      	movs	r1, #3
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fe fe0b 	bl	800284c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fe ff68 	bl	8002b10 <LL_ADC_IsEnabled>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f040 8140 	bne.w	8003ec8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	6819      	ldr	r1, [r3, #0]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	461a      	mov	r2, r3
 8003c56:	f7fe fea5 	bl	80029a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	4a8f      	ldr	r2, [pc, #572]	; (8003e9c <HAL_ADC_ConfigChannel+0x6b0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	f040 8131 	bne.w	8003ec8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10b      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x4a2>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	0e9b      	lsrs	r3, r3, #26
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	2b09      	cmp	r3, #9
 8003c84:	bf94      	ite	ls
 8003c86:	2301      	movls	r3, #1
 8003c88:	2300      	movhi	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	e019      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x4d6>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c96:	fa93 f3a3 	rbit	r3, r3
 8003c9a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003c9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c9e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003ca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003ca6:	2320      	movs	r3, #32
 8003ca8:	e003      	b.n	8003cb2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003caa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cac:	fab3 f383 	clz	r3, r3
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	f003 031f 	and.w	r3, r3, #31
 8003cb8:	2b09      	cmp	r3, #9
 8003cba:	bf94      	ite	ls
 8003cbc:	2301      	movls	r3, #1
 8003cbe:	2300      	movhi	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d079      	beq.n	8003dba <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d107      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x4f6>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	0e9b      	lsrs	r3, r3, #26
 8003cd8:	3301      	adds	r3, #1
 8003cda:	069b      	lsls	r3, r3, #26
 8003cdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ce0:	e015      	b.n	8003d0e <HAL_ADC_ConfigChannel+0x522>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003cfa:	2320      	movs	r3, #32
 8003cfc:	e003      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	3301      	adds	r3, #1
 8003d08:	069b      	lsls	r3, r3, #26
 8003d0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d109      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x542>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	0e9b      	lsrs	r3, r3, #26
 8003d20:	3301      	adds	r3, #1
 8003d22:	f003 031f 	and.w	r3, r3, #31
 8003d26:	2101      	movs	r1, #1
 8003d28:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2c:	e017      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x572>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d36:	fa93 f3a3 	rbit	r3, r3
 8003d3a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d3e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003d46:	2320      	movs	r3, #32
 8003d48:	e003      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d4c:	fab3 f383 	clz	r3, r3
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	3301      	adds	r3, #1
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	2101      	movs	r1, #1
 8003d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5e:	ea42 0103 	orr.w	r1, r2, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10a      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x598>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	0e9b      	lsrs	r3, r3, #26
 8003d74:	3301      	adds	r3, #1
 8003d76:	f003 021f 	and.w	r2, r3, #31
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	4413      	add	r3, r2
 8003d80:	051b      	lsls	r3, r3, #20
 8003d82:	e018      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x5ca>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8c:	fa93 f3a3 	rbit	r3, r3
 8003d90:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d94:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003d9c:	2320      	movs	r3, #32
 8003d9e:	e003      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da2:	fab3 f383 	clz	r3, r3
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	3301      	adds	r3, #1
 8003daa:	f003 021f 	and.w	r2, r3, #31
 8003dae:	4613      	mov	r3, r2
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4413      	add	r3, r2
 8003db4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003db6:	430b      	orrs	r3, r1
 8003db8:	e081      	b.n	8003ebe <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d107      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x5ea>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	0e9b      	lsrs	r3, r3, #26
 8003dcc:	3301      	adds	r3, #1
 8003dce:	069b      	lsls	r3, r3, #26
 8003dd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dd4:	e015      	b.n	8003e02 <HAL_ADC_ConfigChannel+0x616>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	fa93 f3a3 	rbit	r3, r3
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003dee:	2320      	movs	r3, #32
 8003df0:	e003      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	fab3 f383 	clz	r3, r3
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	069b      	lsls	r3, r3, #26
 8003dfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x636>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	0e9b      	lsrs	r3, r3, #26
 8003e14:	3301      	adds	r3, #1
 8003e16:	f003 031f 	and.w	r3, r3, #31
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e20:	e017      	b.n	8003e52 <HAL_ADC_ConfigChannel+0x666>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	fa93 f3a3 	rbit	r3, r3
 8003e2e:	61fb      	str	r3, [r7, #28]
  return result;
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003e3a:	2320      	movs	r3, #32
 8003e3c:	e003      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	fab3 f383 	clz	r3, r3
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	3301      	adds	r3, #1
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e52:	ea42 0103 	orr.w	r1, r2, r3
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10d      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x692>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	0e9b      	lsrs	r3, r3, #26
 8003e68:	3301      	adds	r3, #1
 8003e6a:	f003 021f 	and.w	r2, r3, #31
 8003e6e:	4613      	mov	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4413      	add	r3, r2
 8003e74:	3b1e      	subs	r3, #30
 8003e76:	051b      	lsls	r3, r3, #20
 8003e78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e7c:	e01e      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x6d0>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	fa93 f3a3 	rbit	r3, r3
 8003e8a:	613b      	str	r3, [r7, #16]
  return result;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d104      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003e96:	2320      	movs	r3, #32
 8003e98:	e006      	b.n	8003ea8 <HAL_ADC_ConfigChannel+0x6bc>
 8003e9a:	bf00      	nop
 8003e9c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	fab3 f383 	clz	r3, r3
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	f003 021f 	and.w	r2, r3, #31
 8003eae:	4613      	mov	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3b1e      	subs	r3, #30
 8003eb6:	051b      	lsls	r3, r3, #20
 8003eb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	6892      	ldr	r2, [r2, #8]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	f7fe fd42 	bl	800294c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4b3d      	ldr	r3, [pc, #244]	; (8003fc4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d06c      	beq.n	8003fae <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ed4:	483c      	ldr	r0, [pc, #240]	; (8003fc8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003ed6:	f7fe fc71 	bl	80027bc <LL_ADC_GetCommonPathInternalCh>
 8003eda:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a3a      	ldr	r2, [pc, #232]	; (8003fcc <HAL_ADC_ConfigChannel+0x7e0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d127      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ee8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003eec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d121      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a35      	ldr	r2, [pc, #212]	; (8003fd0 <HAL_ADC_ConfigChannel+0x7e4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d157      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003efe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f06:	4619      	mov	r1, r3
 8003f08:	482f      	ldr	r0, [pc, #188]	; (8003fc8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003f0a:	f7fe fc44 	bl	8002796 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f0e:	4b31      	ldr	r3, [pc, #196]	; (8003fd4 <HAL_ADC_ConfigChannel+0x7e8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	099b      	lsrs	r3, r3, #6
 8003f14:	4a30      	ldr	r2, [pc, #192]	; (8003fd8 <HAL_ADC_ConfigChannel+0x7ec>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	099b      	lsrs	r3, r3, #6
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	4613      	mov	r3, r2
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f28:	e002      	b.n	8003f30 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f9      	bne.n	8003f2a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f36:	e03a      	b.n	8003fae <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a27      	ldr	r2, [pc, #156]	; (8003fdc <HAL_ADC_ConfigChannel+0x7f0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d113      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x77e>
 8003f42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10d      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1f      	ldr	r2, [pc, #124]	; (8003fd0 <HAL_ADC_ConfigChannel+0x7e4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d12a      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f60:	4619      	mov	r1, r3
 8003f62:	4819      	ldr	r0, [pc, #100]	; (8003fc8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003f64:	f7fe fc17 	bl	8002796 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f68:	e021      	b.n	8003fae <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <HAL_ADC_ConfigChannel+0x7f4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d11c      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d116      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a12      	ldr	r2, [pc, #72]	; (8003fd0 <HAL_ADC_ConfigChannel+0x7e4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d111      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f92:	4619      	mov	r1, r3
 8003f94:	480c      	ldr	r0, [pc, #48]	; (8003fc8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003f96:	f7fe fbfe 	bl	8002796 <LL_ADC_SetCommonPathInternalCh>
 8003f9a:	e008      	b.n	8003fae <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa0:	f043 0220 	orr.w	r2, r3, #32
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003fb6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	37d8      	adds	r7, #216	; 0xd8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	80080000 	.word	0x80080000
 8003fc8:	50040300 	.word	0x50040300
 8003fcc:	c7520000 	.word	0xc7520000
 8003fd0:	50040000 	.word	0x50040000
 8003fd4:	20000008 	.word	0x20000008
 8003fd8:	053e2d63 	.word	0x053e2d63
 8003fdc:	cb840000 	.word	0xcb840000
 8003fe0:	80000001 	.word	0x80000001

08003fe4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe fdd6 	bl	8002bac <LL_ADC_REG_IsConversionOngoing>
 8004000:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe fdf7 	bl	8002bfa <LL_ADC_INJ_IsConversionOngoing>
 800400c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d103      	bne.n	800401c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 8098 	beq.w	800414c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d02a      	beq.n	8004080 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	7e5b      	ldrb	r3, [r3, #25]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d126      	bne.n	8004080 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	7e1b      	ldrb	r3, [r3, #24]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d122      	bne.n	8004080 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800403a:	2301      	movs	r3, #1
 800403c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800403e:	e014      	b.n	800406a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	4a45      	ldr	r2, [pc, #276]	; (8004158 <ADC_ConversionStop+0x174>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d90d      	bls.n	8004064 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404c:	f043 0210 	orr.w	r2, r3, #16
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004058:	f043 0201 	orr.w	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e074      	b.n	800414e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	3301      	adds	r3, #1
 8004068:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004074:	2b40      	cmp	r3, #64	; 0x40
 8004076:	d1e3      	bne.n	8004040 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2240      	movs	r2, #64	; 0x40
 800407e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d014      	beq.n	80040b0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f7fe fd8e 	bl	8002bac <LL_ADC_REG_IsConversionOngoing>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00c      	beq.n	80040b0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe fd4b 	bl	8002b36 <LL_ADC_IsDisableOngoing>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d104      	bne.n	80040b0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fe fd6a 	bl	8002b84 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d014      	beq.n	80040e0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe fd9d 	bl	8002bfa <LL_ADC_INJ_IsConversionOngoing>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00c      	beq.n	80040e0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fe fd33 	bl	8002b36 <LL_ADC_IsDisableOngoing>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d104      	bne.n	80040e0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fe fd79 	bl	8002bd2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d005      	beq.n	80040f2 <ADC_ConversionStop+0x10e>
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d105      	bne.n	80040f8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80040ec:	230c      	movs	r3, #12
 80040ee:	617b      	str	r3, [r7, #20]
        break;
 80040f0:	e005      	b.n	80040fe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80040f2:	2308      	movs	r3, #8
 80040f4:	617b      	str	r3, [r7, #20]
        break;
 80040f6:	e002      	b.n	80040fe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80040f8:	2304      	movs	r3, #4
 80040fa:	617b      	str	r3, [r7, #20]
        break;
 80040fc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80040fe:	f7fe fb07 	bl	8002710 <HAL_GetTick>
 8004102:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004104:	e01b      	b.n	800413e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004106:	f7fe fb03 	bl	8002710 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b05      	cmp	r3, #5
 8004112:	d914      	bls.n	800413e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	4013      	ands	r3, r2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00d      	beq.n	800413e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004126:	f043 0210 	orr.w	r2, r3, #16
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	f043 0201 	orr.w	r2, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e007      	b.n	800414e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	4013      	ands	r3, r2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1dc      	bne.n	8004106 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3720      	adds	r7, #32
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	a33fffff 	.word	0xa33fffff

0800415c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f7fe fcd1 	bl	8002b10 <LL_ADC_IsEnabled>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d14d      	bne.n	8004210 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	4b28      	ldr	r3, [pc, #160]	; (800421c <ADC_Enable+0xc0>)
 800417c:	4013      	ands	r3, r2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00d      	beq.n	800419e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004186:	f043 0210 	orr.w	r2, r3, #16
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004192:	f043 0201 	orr.w	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e039      	b.n	8004212 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fe fc8c 	bl	8002ac0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80041a8:	f7fe fab2 	bl	8002710 <HAL_GetTick>
 80041ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041ae:	e028      	b.n	8004202 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fe fcab 	bl	8002b10 <LL_ADC_IsEnabled>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d104      	bne.n	80041ca <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fe fc7b 	bl	8002ac0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80041ca:	f7fe faa1 	bl	8002710 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d914      	bls.n	8004202 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d00d      	beq.n	8004202 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ea:	f043 0210 	orr.w	r2, r3, #16
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f6:	f043 0201 	orr.w	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e007      	b.n	8004212 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b01      	cmp	r3, #1
 800420e:	d1cf      	bne.n	80041b0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	8000003f 	.word	0x8000003f

08004220 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f7fe fc82 	bl	8002b36 <LL_ADC_IsDisableOngoing>
 8004232:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7fe fc69 	bl	8002b10 <LL_ADC_IsEnabled>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d047      	beq.n	80042d4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d144      	bne.n	80042d4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 030d 	and.w	r3, r3, #13
 8004254:	2b01      	cmp	r3, #1
 8004256:	d10c      	bne.n	8004272 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f7fe fc43 	bl	8002ae8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2203      	movs	r2, #3
 8004268:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800426a:	f7fe fa51 	bl	8002710 <HAL_GetTick>
 800426e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004270:	e029      	b.n	80042c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	f043 0210 	orr.w	r2, r3, #16
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004282:	f043 0201 	orr.w	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e023      	b.n	80042d6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800428e:	f7fe fa3f 	bl	8002710 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d914      	bls.n	80042c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00d      	beq.n	80042c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ae:	f043 0210 	orr.w	r2, r3, #16
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ba:	f043 0201 	orr.w	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e007      	b.n	80042d6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1dc      	bne.n	800428e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d14b      	bne.n	8004390 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d021      	beq.n	8004356 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7fe fac6 	bl	80028a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d032      	beq.n	8004388 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d12b      	bne.n	8004388 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004334:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d11f      	bne.n	8004388 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434c:	f043 0201 	orr.w	r2, r3, #1
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	655a      	str	r2, [r3, #84]	; 0x54
 8004354:	e018      	b.n	8004388 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d111      	bne.n	8004388 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004368:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d105      	bne.n	8004388 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004380:	f043 0201 	orr.w	r2, r3, #1
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f7ff fa07 	bl	800379c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800438e:	e00e      	b.n	80043ae <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7ff fa1b 	bl	80037d8 <HAL_ADC_ErrorCallback>
}
 80043a2:	e004      	b.n	80043ae <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	4798      	blx	r3
}
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f7ff f9f3 	bl	80037b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f0:	f043 0204 	orr.w	r2, r3, #4
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7ff f9ed 	bl	80037d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <LL_ADC_IsEnabled>:
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <LL_ADC_IsEnabled+0x18>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <LL_ADC_IsEnabled+0x1a>
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <LL_ADC_StartCalibration>:
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800443e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004448:	4313      	orrs	r3, r2
 800444a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	609a      	str	r2, [r3, #8]
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <LL_ADC_IsCalibrationOnGoing>:
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800446e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004472:	d101      	bne.n	8004478 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <LL_ADC_REG_IsConversionOngoing>:
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b04      	cmp	r3, #4
 8004498:	d101      	bne.n	800449e <LL_ADC_REG_IsConversionOngoing+0x18>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_ADCEx_Calibration_Start+0x1c>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e04d      	b.n	8004564 <HAL_ADCEx_Calibration_Start+0xb8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff fea5 	bl	8004220 <ADC_Disable>
 80044d6:	4603      	mov	r3, r0
 80044d8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80044da:	7bfb      	ldrb	r3, [r7, #15]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d136      	bne.n	800454e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80044e8:	f023 0302 	bic.w	r3, r3, #2
 80044ec:	f043 0202 	orr.w	r2, r3, #2
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6839      	ldr	r1, [r7, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff ff96 	bl	800442c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004500:	e014      	b.n	800452c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	3301      	adds	r3, #1
 8004506:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800450e:	d30d      	bcc.n	800452c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004514:	f023 0312 	bic.w	r3, r3, #18
 8004518:	f043 0210 	orr.w	r2, r3, #16
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e01b      	b.n	8004564 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff ff94 	bl	800445e <LL_ADC_IsCalibrationOnGoing>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e2      	bne.n	8004502 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004540:	f023 0303 	bic.w	r3, r3, #3
 8004544:	f043 0201 	orr.w	r2, r3, #1
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	655a      	str	r2, [r3, #84]	; 0x54
 800454c:	e005      	b.n	800455a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004552:	f043 0210 	orr.w	r2, r3, #16
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004562:	7bfb      	ldrb	r3, [r7, #15]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80045d0:	b590      	push	{r4, r7, lr}
 80045d2:	b09f      	sub	sp, #124	; 0x7c
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e089      	b.n	8004702 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80045f6:	2300      	movs	r3, #0
 80045f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80045fa:	2300      	movs	r3, #0
 80045fc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a42      	ldr	r2, [pc, #264]	; (800470c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d102      	bne.n	800460e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004608:	4b41      	ldr	r3, [pc, #260]	; (8004710 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800460a:	60bb      	str	r3, [r7, #8]
 800460c:	e001      	b.n	8004612 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800460e:	2300      	movs	r3, #0
 8004610:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10b      	bne.n	8004630 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	f043 0220 	orr.w	r2, r3, #32
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e068      	b.n	8004702 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff ff27 	bl	8004486 <LL_ADC_REG_IsConversionOngoing>
 8004638:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff ff21 	bl	8004486 <LL_ADC_REG_IsConversionOngoing>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d14a      	bne.n	80046e0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800464a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800464c:	2b00      	cmp	r3, #0
 800464e:	d147      	bne.n	80046e0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004650:	4b30      	ldr	r3, [pc, #192]	; (8004714 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004652:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d027      	beq.n	80046ac <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800465c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	6859      	ldr	r1, [r3, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800466e:	035b      	lsls	r3, r3, #13
 8004670:	430b      	orrs	r3, r1
 8004672:	431a      	orrs	r2, r3
 8004674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004676:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004678:	4824      	ldr	r0, [pc, #144]	; (800470c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800467a:	f7ff fec4 	bl	8004406 <LL_ADC_IsEnabled>
 800467e:	4604      	mov	r4, r0
 8004680:	4823      	ldr	r0, [pc, #140]	; (8004710 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004682:	f7ff fec0 	bl	8004406 <LL_ADC_IsEnabled>
 8004686:	4603      	mov	r3, r0
 8004688:	4323      	orrs	r3, r4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d132      	bne.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800468e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004696:	f023 030f 	bic.w	r3, r3, #15
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	6811      	ldr	r1, [r2, #0]
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	6892      	ldr	r2, [r2, #8]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	431a      	orrs	r2, r3
 80046a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046aa:	e023      	b.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80046ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046b8:	4814      	ldr	r0, [pc, #80]	; (800470c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80046ba:	f7ff fea4 	bl	8004406 <LL_ADC_IsEnabled>
 80046be:	4604      	mov	r4, r0
 80046c0:	4813      	ldr	r0, [pc, #76]	; (8004710 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80046c2:	f7ff fea0 	bl	8004406 <LL_ADC_IsEnabled>
 80046c6:	4603      	mov	r3, r0
 80046c8:	4323      	orrs	r3, r4
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d112      	bne.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80046ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80046d6:	f023 030f 	bic.w	r3, r3, #15
 80046da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046dc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046de:	e009      	b.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e4:	f043 0220 	orr.w	r2, r3, #32
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80046f2:	e000      	b.n	80046f6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80046fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004702:	4618      	mov	r0, r3
 8004704:	377c      	adds	r7, #124	; 0x7c
 8004706:	46bd      	mov	sp, r7
 8004708:	bd90      	pop	{r4, r7, pc}
 800470a:	bf00      	nop
 800470c:	50040000 	.word	0x50040000
 8004710:	50040100 	.word	0x50040100
 8004714:	50040300 	.word	0x50040300

08004718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004728:	4b0c      	ldr	r3, [pc, #48]	; (800475c <__NVIC_SetPriorityGrouping+0x44>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004734:	4013      	ands	r3, r2
 8004736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800474a:	4a04      	ldr	r2, [pc, #16]	; (800475c <__NVIC_SetPriorityGrouping+0x44>)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	60d3      	str	r3, [r2, #12]
}
 8004750:	bf00      	nop
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	e000ed00 	.word	0xe000ed00

08004760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004764:	4b04      	ldr	r3, [pc, #16]	; (8004778 <__NVIC_GetPriorityGrouping+0x18>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	0a1b      	lsrs	r3, r3, #8
 800476a:	f003 0307 	and.w	r3, r3, #7
}
 800476e:	4618      	mov	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	e000ed00 	.word	0xe000ed00

0800477c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478a:	2b00      	cmp	r3, #0
 800478c:	db0b      	blt.n	80047a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800478e:	79fb      	ldrb	r3, [r7, #7]
 8004790:	f003 021f 	and.w	r2, r3, #31
 8004794:	4907      	ldr	r1, [pc, #28]	; (80047b4 <__NVIC_EnableIRQ+0x38>)
 8004796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	2001      	movs	r0, #1
 800479e:	fa00 f202 	lsl.w	r2, r0, r2
 80047a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	e000e100 	.word	0xe000e100

080047b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	6039      	str	r1, [r7, #0]
 80047c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	db0a      	blt.n	80047e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	490c      	ldr	r1, [pc, #48]	; (8004804 <__NVIC_SetPriority+0x4c>)
 80047d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d6:	0112      	lsls	r2, r2, #4
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	440b      	add	r3, r1
 80047dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047e0:	e00a      	b.n	80047f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	4908      	ldr	r1, [pc, #32]	; (8004808 <__NVIC_SetPriority+0x50>)
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	3b04      	subs	r3, #4
 80047f0:	0112      	lsls	r2, r2, #4
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	440b      	add	r3, r1
 80047f6:	761a      	strb	r2, [r3, #24]
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	e000e100 	.word	0xe000e100
 8004808:	e000ed00 	.word	0xe000ed00

0800480c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800480c:	b480      	push	{r7}
 800480e:	b089      	sub	sp, #36	; 0x24
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f1c3 0307 	rsb	r3, r3, #7
 8004826:	2b04      	cmp	r3, #4
 8004828:	bf28      	it	cs
 800482a:	2304      	movcs	r3, #4
 800482c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	3304      	adds	r3, #4
 8004832:	2b06      	cmp	r3, #6
 8004834:	d902      	bls.n	800483c <NVIC_EncodePriority+0x30>
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	3b03      	subs	r3, #3
 800483a:	e000      	b.n	800483e <NVIC_EncodePriority+0x32>
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43da      	mvns	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	401a      	ands	r2, r3
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004854:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	fa01 f303 	lsl.w	r3, r1, r3
 800485e:	43d9      	mvns	r1, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004864:	4313      	orrs	r3, r2
         );
}
 8004866:	4618      	mov	r0, r3
 8004868:	3724      	adds	r7, #36	; 0x24
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
	...

08004874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3b01      	subs	r3, #1
 8004880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004884:	d301      	bcc.n	800488a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004886:	2301      	movs	r3, #1
 8004888:	e00f      	b.n	80048aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800488a:	4a0a      	ldr	r2, [pc, #40]	; (80048b4 <SysTick_Config+0x40>)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3b01      	subs	r3, #1
 8004890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004892:	210f      	movs	r1, #15
 8004894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004898:	f7ff ff8e 	bl	80047b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800489c:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <SysTick_Config+0x40>)
 800489e:	2200      	movs	r2, #0
 80048a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048a2:	4b04      	ldr	r3, [pc, #16]	; (80048b4 <SysTick_Config+0x40>)
 80048a4:	2207      	movs	r2, #7
 80048a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	e000e010 	.word	0xe000e010

080048b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff ff29 	bl	8004718 <__NVIC_SetPriorityGrouping>
}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b086      	sub	sp, #24
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	4603      	mov	r3, r0
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	607a      	str	r2, [r7, #4]
 80048da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80048dc:	2300      	movs	r3, #0
 80048de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048e0:	f7ff ff3e 	bl	8004760 <__NVIC_GetPriorityGrouping>
 80048e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	6978      	ldr	r0, [r7, #20]
 80048ec:	f7ff ff8e 	bl	800480c <NVIC_EncodePriority>
 80048f0:	4602      	mov	r2, r0
 80048f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048f6:	4611      	mov	r1, r2
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff ff5d 	bl	80047b8 <__NVIC_SetPriority>
}
 80048fe:	bf00      	nop
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	4603      	mov	r3, r0
 800490e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff ff31 	bl	800477c <__NVIC_EnableIRQ>
}
 800491a:	bf00      	nop
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7ff ffa2 	bl	8004874 <SysTick_Config>
 8004930:	4603      	mov	r3, r0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e098      	b.n	8004a80 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	4b4d      	ldr	r3, [pc, #308]	; (8004a8c <HAL_DMA_Init+0x150>)
 8004956:	429a      	cmp	r2, r3
 8004958:	d80f      	bhi.n	800497a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	4b4b      	ldr	r3, [pc, #300]	; (8004a90 <HAL_DMA_Init+0x154>)
 8004962:	4413      	add	r3, r2
 8004964:	4a4b      	ldr	r2, [pc, #300]	; (8004a94 <HAL_DMA_Init+0x158>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	091b      	lsrs	r3, r3, #4
 800496c:	009a      	lsls	r2, r3, #2
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a48      	ldr	r2, [pc, #288]	; (8004a98 <HAL_DMA_Init+0x15c>)
 8004976:	641a      	str	r2, [r3, #64]	; 0x40
 8004978:	e00e      	b.n	8004998 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	4b46      	ldr	r3, [pc, #280]	; (8004a9c <HAL_DMA_Init+0x160>)
 8004982:	4413      	add	r3, r2
 8004984:	4a43      	ldr	r2, [pc, #268]	; (8004a94 <HAL_DMA_Init+0x158>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	091b      	lsrs	r3, r3, #4
 800498c:	009a      	lsls	r2, r3, #2
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a42      	ldr	r2, [pc, #264]	; (8004aa0 <HAL_DMA_Init+0x164>)
 8004996:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80049ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80049bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049f2:	d039      	beq.n	8004a68 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	4a27      	ldr	r2, [pc, #156]	; (8004a98 <HAL_DMA_Init+0x15c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d11a      	bne.n	8004a34 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80049fe:	4b29      	ldr	r3, [pc, #164]	; (8004aa4 <HAL_DMA_Init+0x168>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a06:	f003 031c 	and.w	r3, r3, #28
 8004a0a:	210f      	movs	r1, #15
 8004a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	4924      	ldr	r1, [pc, #144]	; (8004aa4 <HAL_DMA_Init+0x168>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004a18:	4b22      	ldr	r3, [pc, #136]	; (8004aa4 <HAL_DMA_Init+0x168>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6859      	ldr	r1, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a24:	f003 031c 	and.w	r3, r3, #28
 8004a28:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2c:	491d      	ldr	r1, [pc, #116]	; (8004aa4 <HAL_DMA_Init+0x168>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	600b      	str	r3, [r1, #0]
 8004a32:	e019      	b.n	8004a68 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a34:	4b1c      	ldr	r3, [pc, #112]	; (8004aa8 <HAL_DMA_Init+0x16c>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3c:	f003 031c 	and.w	r3, r3, #28
 8004a40:	210f      	movs	r1, #15
 8004a42:	fa01 f303 	lsl.w	r3, r1, r3
 8004a46:	43db      	mvns	r3, r3
 8004a48:	4917      	ldr	r1, [pc, #92]	; (8004aa8 <HAL_DMA_Init+0x16c>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004a4e:	4b16      	ldr	r3, [pc, #88]	; (8004aa8 <HAL_DMA_Init+0x16c>)
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6859      	ldr	r1, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5a:	f003 031c 	and.w	r3, r3, #28
 8004a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a62:	4911      	ldr	r1, [pc, #68]	; (8004aa8 <HAL_DMA_Init+0x16c>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	40020407 	.word	0x40020407
 8004a90:	bffdfff8 	.word	0xbffdfff8
 8004a94:	cccccccd 	.word	0xcccccccd
 8004a98:	40020000 	.word	0x40020000
 8004a9c:	bffdfbf8 	.word	0xbffdfbf8
 8004aa0:	40020400 	.word	0x40020400
 8004aa4:	400200a8 	.word	0x400200a8
 8004aa8:	400204a8 	.word	0x400204a8

08004aac <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e072      	b.n	8004ba4 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	4b36      	ldr	r3, [pc, #216]	; (8004bb0 <HAL_DMA_DeInit+0x104>)
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d80f      	bhi.n	8004afa <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	4b34      	ldr	r3, [pc, #208]	; (8004bb4 <HAL_DMA_DeInit+0x108>)
 8004ae2:	4413      	add	r3, r2
 8004ae4:	4a34      	ldr	r2, [pc, #208]	; (8004bb8 <HAL_DMA_DeInit+0x10c>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	091b      	lsrs	r3, r3, #4
 8004aec:	009a      	lsls	r2, r3, #2
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a31      	ldr	r2, [pc, #196]	; (8004bbc <HAL_DMA_DeInit+0x110>)
 8004af6:	641a      	str	r2, [r3, #64]	; 0x40
 8004af8:	e00e      	b.n	8004b18 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	4b2f      	ldr	r3, [pc, #188]	; (8004bc0 <HAL_DMA_DeInit+0x114>)
 8004b02:	4413      	add	r3, r2
 8004b04:	4a2c      	ldr	r2, [pc, #176]	; (8004bb8 <HAL_DMA_DeInit+0x10c>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	009a      	lsls	r2, r3, #2
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a2b      	ldr	r2, [pc, #172]	; (8004bc4 <HAL_DMA_DeInit+0x118>)
 8004b16:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b24:	f003 021c 	and.w	r2, r3, #28
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b32:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	4a20      	ldr	r2, [pc, #128]	; (8004bbc <HAL_DMA_DeInit+0x110>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d10d      	bne.n	8004b5a <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004b3e:	4b22      	ldr	r3, [pc, #136]	; (8004bc8 <HAL_DMA_DeInit+0x11c>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b46:	f003 031c 	and.w	r3, r3, #28
 8004b4a:	210f      	movs	r1, #15
 8004b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	491d      	ldr	r1, [pc, #116]	; (8004bc8 <HAL_DMA_DeInit+0x11c>)
 8004b54:	4013      	ands	r3, r2
 8004b56:	600b      	str	r3, [r1, #0]
 8004b58:	e00c      	b.n	8004b74 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004b5a:	4b1c      	ldr	r3, [pc, #112]	; (8004bcc <HAL_DMA_DeInit+0x120>)
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b62:	f003 031c 	and.w	r3, r3, #28
 8004b66:	210f      	movs	r1, #15
 8004b68:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	4917      	ldr	r1, [pc, #92]	; (8004bcc <HAL_DMA_DeInit+0x120>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	40020407 	.word	0x40020407
 8004bb4:	bffdfff8 	.word	0xbffdfff8
 8004bb8:	cccccccd 	.word	0xcccccccd
 8004bbc:	40020000 	.word	0x40020000
 8004bc0:	bffdfbf8 	.word	0xbffdfbf8
 8004bc4:	40020400 	.word	0x40020400
 8004bc8:	400200a8 	.word	0x400200a8
 8004bcc:	400204a8 	.word	0x400204a8

08004bd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <HAL_DMA_Start_IT+0x20>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e04b      	b.n	8004c88 <HAL_DMA_Start_IT+0xb8>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d13a      	bne.n	8004c7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0201 	bic.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f91e 	bl	8004e6a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d008      	beq.n	8004c48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 020e 	orr.w	r2, r2, #14
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	e00f      	b.n	8004c68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0204 	bic.w	r2, r2, #4
 8004c56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 020a 	orr.w	r2, r2, #10
 8004c66:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	e005      	b.n	8004c86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c82:	2302      	movs	r3, #2
 8004c84:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d008      	beq.n	8004cba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2204      	movs	r2, #4
 8004cac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e022      	b.n	8004d00 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 020e 	bic.w	r2, r2, #14
 8004cc8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0201 	bic.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cde:	f003 021c 	and.w	r2, r3, #28
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8004cec:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d28:	f003 031c 	and.w	r3, r3, #28
 8004d2c:	2204      	movs	r2, #4
 8004d2e:	409a      	lsls	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4013      	ands	r3, r2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d026      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x7a>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d021      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d107      	bne.n	8004d60 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0204 	bic.w	r2, r2, #4
 8004d5e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d64:	f003 021c 	and.w	r2, r3, #28
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	2104      	movs	r1, #4
 8004d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d72:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d071      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004d84:	e06c      	b.n	8004e60 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8a:	f003 031c 	and.w	r3, r3, #28
 8004d8e:	2202      	movs	r2, #2
 8004d90:	409a      	lsls	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4013      	ands	r3, r2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d02e      	beq.n	8004df8 <HAL_DMA_IRQHandler+0xec>
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d029      	beq.n	8004df8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10b      	bne.n	8004dca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 020a 	bic.w	r2, r2, #10
 8004dc0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dce:	f003 021c 	and.w	r2, r3, #28
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	2102      	movs	r1, #2
 8004dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8004ddc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d038      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004df6:	e033      	b.n	8004e60 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfc:	f003 031c 	and.w	r3, r3, #28
 8004e00:	2208      	movs	r2, #8
 8004e02:	409a      	lsls	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d02a      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x156>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d025      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 020e 	bic.w	r2, r2, #14
 8004e24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2a:	f003 021c 	and.w	r2, r3, #28
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	2101      	movs	r1, #1
 8004e34:	fa01 f202 	lsl.w	r2, r1, r2
 8004e38:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d004      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004e60:	bf00      	nop
 8004e62:	bf00      	nop
}
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	607a      	str	r2, [r7, #4]
 8004e76:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7c:	f003 021c 	and.w	r2, r3, #28
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	2101      	movs	r1, #1
 8004e86:	fa01 f202 	lsl.w	r2, r1, r2
 8004e8a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	2b10      	cmp	r3, #16
 8004e9a:	d108      	bne.n	8004eae <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004eac:	e007      	b.n	8004ebe <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	60da      	str	r2, [r3, #12]
}
 8004ebe:	bf00      	nop
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
	...

08004ecc <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004ede:	4b2f      	ldr	r3, [pc, #188]	; (8004f9c <HAL_FLASH_Program+0xd0>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_FLASH_Program+0x1e>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e053      	b.n	8004f92 <HAL_FLASH_Program+0xc6>
 8004eea:	4b2c      	ldr	r3, [pc, #176]	; (8004f9c <HAL_FLASH_Program+0xd0>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ef0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ef4:	f000 f888 	bl	8005008 <FLASH_WaitForLastOperation>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8004efc:	7dfb      	ldrb	r3, [r7, #23]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d143      	bne.n	8004f8a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f02:	4b26      	ldr	r3, [pc, #152]	; (8004f9c <HAL_FLASH_Program+0xd0>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004f08:	4b25      	ldr	r3, [pc, #148]	; (8004fa0 <HAL_FLASH_Program+0xd4>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d009      	beq.n	8004f28 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004f14:	4b22      	ldr	r3, [pc, #136]	; (8004fa0 <HAL_FLASH_Program+0xd4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a21      	ldr	r2, [pc, #132]	; (8004fa0 <HAL_FLASH_Program+0xd4>)
 8004f1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f1e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004f20:	4b1e      	ldr	r3, [pc, #120]	; (8004f9c <HAL_FLASH_Program+0xd0>)
 8004f22:	2202      	movs	r2, #2
 8004f24:	771a      	strb	r2, [r3, #28]
 8004f26:	e002      	b.n	8004f2e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004f28:	4b1c      	ldr	r3, [pc, #112]	; (8004f9c <HAL_FLASH_Program+0xd0>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d107      	bne.n	8004f44 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f38:	68b8      	ldr	r0, [r7, #8]
 8004f3a:	f000 f8bd 	bl	80050b8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	613b      	str	r3, [r7, #16]
 8004f42:	e010      	b.n	8004f66 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d002      	beq.n	8004f50 <HAL_FLASH_Program+0x84>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d10a      	bne.n	8004f66 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	4619      	mov	r1, r3
 8004f54:	68b8      	ldr	r0, [r7, #8]
 8004f56:	f000 f8d5 	bl	8005104 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d102      	bne.n	8004f66 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8004f60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f64:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f66:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f6a:	f000 f84d 	bl	8005008 <FLASH_WaitForLastOperation>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d006      	beq.n	8004f86 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8004f78:	4b09      	ldr	r3, [pc, #36]	; (8004fa0 <HAL_FLASH_Program+0xd4>)
 8004f7a:	695a      	ldr	r2, [r3, #20]
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	4907      	ldr	r1, [pc, #28]	; (8004fa0 <HAL_FLASH_Program+0xd4>)
 8004f82:	4013      	ands	r3, r2
 8004f84:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004f86:	f000 f9d3 	bl	8005330 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004f8a:	4b04      	ldr	r3, [pc, #16]	; (8004f9c <HAL_FLASH_Program+0xd0>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	701a      	strb	r2, [r3, #0]

  return status;
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000014 	.word	0x20000014
 8004fa0:	40022000 	.word	0x40022000

08004fa4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004fae:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <HAL_FLASH_Unlock+0x38>)
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	da0b      	bge.n	8004fce <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004fb6:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <HAL_FLASH_Unlock+0x38>)
 8004fb8:	4a09      	ldr	r2, [pc, #36]	; (8004fe0 <HAL_FLASH_Unlock+0x3c>)
 8004fba:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004fbc:	4b07      	ldr	r3, [pc, #28]	; (8004fdc <HAL_FLASH_Unlock+0x38>)
 8004fbe:	4a09      	ldr	r2, [pc, #36]	; (8004fe4 <HAL_FLASH_Unlock+0x40>)
 8004fc0:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004fc2:	4b06      	ldr	r3, [pc, #24]	; (8004fdc <HAL_FLASH_Unlock+0x38>)
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	da01      	bge.n	8004fce <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004fce:	79fb      	ldrb	r3, [r7, #7]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	40022000 	.word	0x40022000
 8004fe0:	45670123 	.word	0x45670123
 8004fe4:	cdef89ab 	.word	0xcdef89ab

08004fe8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004fec:	4b05      	ldr	r3, [pc, #20]	; (8005004 <HAL_FLASH_Lock+0x1c>)
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	4a04      	ldr	r2, [pc, #16]	; (8005004 <HAL_FLASH_Lock+0x1c>)
 8004ff2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ff6:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	40022000 	.word	0x40022000

08005008 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8005010:	f7fd fb7e 	bl	8002710 <HAL_GetTick>
 8005014:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005016:	e00d      	b.n	8005034 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800501e:	d009      	beq.n	8005034 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8005020:	f7fd fb76 	bl	8002710 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	429a      	cmp	r2, r3
 800502e:	d801      	bhi.n	8005034 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e036      	b.n	80050a2 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005034:	4b1d      	ldr	r3, [pc, #116]	; (80050ac <FLASH_WaitForLastOperation+0xa4>)
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1eb      	bne.n	8005018 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005040:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <FLASH_WaitForLastOperation+0xa4>)
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	4b1a      	ldr	r3, [pc, #104]	; (80050b0 <FLASH_WaitForLastOperation+0xa8>)
 8005046:	4013      	ands	r3, r2
 8005048:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01e      	beq.n	800508e <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8005050:	4b18      	ldr	r3, [pc, #96]	; (80050b4 <FLASH_WaitForLastOperation+0xac>)
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4313      	orrs	r3, r2
 8005058:	4a16      	ldr	r2, [pc, #88]	; (80050b4 <FLASH_WaitForLastOperation+0xac>)
 800505a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d007      	beq.n	8005076 <FLASH_WaitForLastOperation+0x6e>
 8005066:	4b11      	ldr	r3, [pc, #68]	; (80050ac <FLASH_WaitForLastOperation+0xa4>)
 8005068:	699a      	ldr	r2, [r3, #24]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005070:	490e      	ldr	r1, [pc, #56]	; (80050ac <FLASH_WaitForLastOperation+0xa4>)
 8005072:	4313      	orrs	r3, r2
 8005074:	618b      	str	r3, [r1, #24]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d004      	beq.n	800508a <FLASH_WaitForLastOperation+0x82>
 8005080:	4a0a      	ldr	r2, [pc, #40]	; (80050ac <FLASH_WaitForLastOperation+0xa4>)
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005088:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e009      	b.n	80050a2 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800508e:	4b07      	ldr	r3, [pc, #28]	; (80050ac <FLASH_WaitForLastOperation+0xa4>)
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800509a:	4b04      	ldr	r3, [pc, #16]	; (80050ac <FLASH_WaitForLastOperation+0xa4>)
 800509c:	2201      	movs	r2, #1
 800509e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	40022000 	.word	0x40022000
 80050b0:	0002c3fa 	.word	0x0002c3fa
 80050b4:	20000014 	.word	0x20000014

080050b8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80050c4:	4b0e      	ldr	r3, [pc, #56]	; (8005100 <FLASH_Program_DoubleWord+0x48>)
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	4a0d      	ldr	r2, [pc, #52]	; (8005100 <FLASH_Program_DoubleWord+0x48>)
 80050ca:	f043 0301 	orr.w	r3, r3, #1
 80050ce:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80050d6:	f3bf 8f6f 	isb	sy
}
 80050da:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80050dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050e0:	f04f 0200 	mov.w	r2, #0
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	000a      	movs	r2, r1
 80050ea:	2300      	movs	r3, #0
 80050ec:	68f9      	ldr	r1, [r7, #12]
 80050ee:	3104      	adds	r1, #4
 80050f0:	4613      	mov	r3, r2
 80050f2:	600b      	str	r3, [r1, #0]
}
 80050f4:	bf00      	nop
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	40022000 	.word	0x40022000

08005104 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005104:	b480      	push	{r7}
 8005106:	b089      	sub	sp, #36	; 0x24
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800510e:	2340      	movs	r3, #64	; 0x40
 8005110:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800511a:	4b14      	ldr	r3, [pc, #80]	; (800516c <FLASH_Program_Fast+0x68>)
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	4a13      	ldr	r2, [pc, #76]	; (800516c <FLASH_Program_Fast+0x68>)
 8005120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005124:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005126:	f3ef 8310 	mrs	r3, PRIMASK
 800512a:	60fb      	str	r3, [r7, #12]
  return(result);
 800512c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800512e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005130:	b672      	cpsid	i
}
 8005132:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	3304      	adds	r3, #4
 8005140:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	3304      	adds	r3, #4
 8005146:	617b      	str	r3, [r7, #20]
    row_index--;
 8005148:	7ffb      	ldrb	r3, [r7, #31]
 800514a:	3b01      	subs	r3, #1
 800514c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800514e:	7ffb      	ldrb	r3, [r7, #31]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1ef      	bne.n	8005134 <FLASH_Program_Fast+0x30>
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f383 8810 	msr	PRIMASK, r3
}
 800515e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8005160:	bf00      	nop
 8005162:	3724      	adds	r7, #36	; 0x24
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	40022000 	.word	0x40022000

08005170 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800517a:	4b4a      	ldr	r3, [pc, #296]	; (80052a4 <HAL_FLASHEx_Erase+0x134>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_FLASHEx_Erase+0x16>
 8005182:	2302      	movs	r3, #2
 8005184:	e089      	b.n	800529a <HAL_FLASHEx_Erase+0x12a>
 8005186:	4b47      	ldr	r3, [pc, #284]	; (80052a4 <HAL_FLASHEx_Erase+0x134>)
 8005188:	2201      	movs	r2, #1
 800518a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800518c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005190:	f7ff ff3a 	bl	8005008 <FLASH_WaitForLastOperation>
 8005194:	4603      	mov	r3, r0
 8005196:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d179      	bne.n	8005292 <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800519e:	4b41      	ldr	r3, [pc, #260]	; (80052a4 <HAL_FLASHEx_Erase+0x134>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80051a4:	4b40      	ldr	r3, [pc, #256]	; (80052a8 <HAL_FLASHEx_Erase+0x138>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d019      	beq.n	80051e4 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80051b0:	4b3d      	ldr	r3, [pc, #244]	; (80052a8 <HAL_FLASHEx_Erase+0x138>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a3c      	ldr	r2, [pc, #240]	; (80052a8 <HAL_FLASHEx_Erase+0x138>)
 80051b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051ba:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80051bc:	4b3a      	ldr	r3, [pc, #232]	; (80052a8 <HAL_FLASHEx_Erase+0x138>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d009      	beq.n	80051dc <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80051c8:	4b37      	ldr	r3, [pc, #220]	; (80052a8 <HAL_FLASHEx_Erase+0x138>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a36      	ldr	r2, [pc, #216]	; (80052a8 <HAL_FLASHEx_Erase+0x138>)
 80051ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051d2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80051d4:	4b33      	ldr	r3, [pc, #204]	; (80052a4 <HAL_FLASHEx_Erase+0x134>)
 80051d6:	2203      	movs	r2, #3
 80051d8:	771a      	strb	r2, [r3, #28]
 80051da:	e016      	b.n	800520a <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80051dc:	4b31      	ldr	r3, [pc, #196]	; (80052a4 <HAL_FLASHEx_Erase+0x134>)
 80051de:	2201      	movs	r2, #1
 80051e0:	771a      	strb	r2, [r3, #28]
 80051e2:	e012      	b.n	800520a <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80051e4:	4b30      	ldr	r3, [pc, #192]	; (80052a8 <HAL_FLASHEx_Erase+0x138>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d009      	beq.n	8005204 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80051f0:	4b2d      	ldr	r3, [pc, #180]	; (80052a8 <HAL_FLASHEx_Erase+0x138>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a2c      	ldr	r2, [pc, #176]	; (80052a8 <HAL_FLASHEx_Erase+0x138>)
 80051f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051fa:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80051fc:	4b29      	ldr	r3, [pc, #164]	; (80052a4 <HAL_FLASHEx_Erase+0x134>)
 80051fe:	2202      	movs	r2, #2
 8005200:	771a      	strb	r2, [r3, #28]
 8005202:	e002      	b.n	800520a <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005204:	4b27      	ldr	r3, [pc, #156]	; (80052a4 <HAL_FLASHEx_Erase+0x134>)
 8005206:	2200      	movs	r2, #0
 8005208:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d111      	bne.n	8005236 <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 f848 	bl	80052ac <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800521c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005220:	f7ff fef2 	bl	8005008 <FLASH_WaitForLastOperation>
 8005224:	4603      	mov	r3, r0
 8005226:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8005228:	4b1f      	ldr	r3, [pc, #124]	; (80052a8 <HAL_FLASHEx_Erase+0x138>)
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	4a1e      	ldr	r2, [pc, #120]	; (80052a8 <HAL_FLASHEx_Erase+0x138>)
 800522e:	f023 0304 	bic.w	r3, r3, #4
 8005232:	6153      	str	r3, [r2, #20]
 8005234:	e02b      	b.n	800528e <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800523c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	e01b      	b.n	800527e <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	4619      	mov	r1, r3
 800524c:	68b8      	ldr	r0, [r7, #8]
 800524e:	f000 f84b 	bl	80052e8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005252:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005256:	f7ff fed7 	bl	8005008 <FLASH_WaitForLastOperation>
 800525a:	4603      	mov	r3, r0
 800525c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800525e:	4b12      	ldr	r3, [pc, #72]	; (80052a8 <HAL_FLASHEx_Erase+0x138>)
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	4a11      	ldr	r2, [pc, #68]	; (80052a8 <HAL_FLASHEx_Erase+0x138>)
 8005264:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8005268:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800526a:	7bfb      	ldrb	r3, [r7, #15]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	601a      	str	r2, [r3, #0]
          break;
 8005276:	e00a      	b.n	800528e <HAL_FLASHEx_Erase+0x11e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	3301      	adds	r3, #1
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	4413      	add	r3, r2
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	429a      	cmp	r2, r3
 800528c:	d3db      	bcc.n	8005246 <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800528e:	f000 f84f 	bl	8005330 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005292:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <HAL_FLASHEx_Erase+0x134>)
 8005294:	2200      	movs	r2, #0
 8005296:	701a      	strb	r2, [r3, #0]

  return status;
 8005298:	7bfb      	ldrb	r3, [r7, #15]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20000014 	.word	0x20000014
 80052a8:	40022000 	.word	0x40022000

080052ac <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d005      	beq.n	80052ca <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80052be:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <FLASH_MassErase+0x38>)
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	4a08      	ldr	r2, [pc, #32]	; (80052e4 <FLASH_MassErase+0x38>)
 80052c4:	f043 0304 	orr.w	r3, r3, #4
 80052c8:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80052ca:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <FLASH_MassErase+0x38>)
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	4a05      	ldr	r2, [pc, #20]	; (80052e4 <FLASH_MassErase+0x38>)
 80052d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d4:	6153      	str	r3, [r2, #20]
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40022000 	.word	0x40022000

080052e8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80052f2:	4b0e      	ldr	r3, [pc, #56]	; (800532c <FLASH_PageErase+0x44>)
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005302:	490a      	ldr	r1, [pc, #40]	; (800532c <FLASH_PageErase+0x44>)
 8005304:	4313      	orrs	r3, r2
 8005306:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005308:	4b08      	ldr	r3, [pc, #32]	; (800532c <FLASH_PageErase+0x44>)
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	4a07      	ldr	r2, [pc, #28]	; (800532c <FLASH_PageErase+0x44>)
 800530e:	f043 0302 	orr.w	r3, r3, #2
 8005312:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005314:	4b05      	ldr	r3, [pc, #20]	; (800532c <FLASH_PageErase+0x44>)
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	4a04      	ldr	r2, [pc, #16]	; (800532c <FLASH_PageErase+0x44>)
 800531a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800531e:	6153      	str	r3, [r2, #20]
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	40022000 	.word	0x40022000

08005330 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005336:	4b1e      	ldr	r3, [pc, #120]	; (80053b0 <FLASH_FlushCaches+0x80>)
 8005338:	7f1b      	ldrb	r3, [r3, #28]
 800533a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800533c:	79fb      	ldrb	r3, [r7, #7]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d002      	beq.n	8005348 <FLASH_FlushCaches+0x18>
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	2b03      	cmp	r3, #3
 8005346:	d111      	bne.n	800536c <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005348:	4b1a      	ldr	r3, [pc, #104]	; (80053b4 <FLASH_FlushCaches+0x84>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a19      	ldr	r2, [pc, #100]	; (80053b4 <FLASH_FlushCaches+0x84>)
 800534e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	4b17      	ldr	r3, [pc, #92]	; (80053b4 <FLASH_FlushCaches+0x84>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a16      	ldr	r2, [pc, #88]	; (80053b4 <FLASH_FlushCaches+0x84>)
 800535a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800535e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005360:	4b14      	ldr	r3, [pc, #80]	; (80053b4 <FLASH_FlushCaches+0x84>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a13      	ldr	r2, [pc, #76]	; (80053b4 <FLASH_FlushCaches+0x84>)
 8005366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800536a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800536c:	79fb      	ldrb	r3, [r7, #7]
 800536e:	2b02      	cmp	r3, #2
 8005370:	d002      	beq.n	8005378 <FLASH_FlushCaches+0x48>
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	2b03      	cmp	r3, #3
 8005376:	d111      	bne.n	800539c <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005378:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <FLASH_FlushCaches+0x84>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a0d      	ldr	r2, [pc, #52]	; (80053b4 <FLASH_FlushCaches+0x84>)
 800537e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <FLASH_FlushCaches+0x84>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a0a      	ldr	r2, [pc, #40]	; (80053b4 <FLASH_FlushCaches+0x84>)
 800538a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800538e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005390:	4b08      	ldr	r3, [pc, #32]	; (80053b4 <FLASH_FlushCaches+0x84>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a07      	ldr	r2, [pc, #28]	; (80053b4 <FLASH_FlushCaches+0x84>)
 8005396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800539a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800539c:	4b04      	ldr	r3, [pc, #16]	; (80053b0 <FLASH_FlushCaches+0x80>)
 800539e:	2200      	movs	r2, #0
 80053a0:	771a      	strb	r2, [r3, #28]
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	20000014 	.word	0x20000014
 80053b4:	40022000 	.word	0x40022000

080053b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053c6:	e14e      	b.n	8005666 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	2101      	movs	r1, #1
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	fa01 f303 	lsl.w	r3, r1, r3
 80053d4:	4013      	ands	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 8140 	beq.w	8005660 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d00b      	beq.n	8005400 <HAL_GPIO_Init+0x48>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d007      	beq.n	8005400 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053f4:	2b11      	cmp	r3, #17
 80053f6:	d003      	beq.n	8005400 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b12      	cmp	r3, #18
 80053fe:	d130      	bne.n	8005462 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	2203      	movs	r2, #3
 800540c:	fa02 f303 	lsl.w	r3, r2, r3
 8005410:	43db      	mvns	r3, r3
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	4013      	ands	r3, r2
 8005416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	68da      	ldr	r2, [r3, #12]
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	fa02 f303 	lsl.w	r3, r2, r3
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005436:	2201      	movs	r2, #1
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	43db      	mvns	r3, r3
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	4013      	ands	r3, r2
 8005444:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	091b      	lsrs	r3, r3, #4
 800544c:	f003 0201 	and.w	r2, r3, #1
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	2203      	movs	r2, #3
 800546e:	fa02 f303 	lsl.w	r3, r2, r3
 8005472:	43db      	mvns	r3, r3
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4013      	ands	r3, r2
 8005478:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b02      	cmp	r3, #2
 8005498:	d003      	beq.n	80054a2 <HAL_GPIO_Init+0xea>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2b12      	cmp	r3, #18
 80054a0:	d123      	bne.n	80054ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	08da      	lsrs	r2, r3, #3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3208      	adds	r2, #8
 80054aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	220f      	movs	r2, #15
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	43db      	mvns	r3, r3
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4013      	ands	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	4313      	orrs	r3, r2
 80054da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	08da      	lsrs	r2, r3, #3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3208      	adds	r2, #8
 80054e4:	6939      	ldr	r1, [r7, #16]
 80054e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	2203      	movs	r2, #3
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	43db      	mvns	r3, r3
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4013      	ands	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f003 0203 	and.w	r2, r3, #3
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 809a 	beq.w	8005660 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800552c:	4b55      	ldr	r3, [pc, #340]	; (8005684 <HAL_GPIO_Init+0x2cc>)
 800552e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005530:	4a54      	ldr	r2, [pc, #336]	; (8005684 <HAL_GPIO_Init+0x2cc>)
 8005532:	f043 0301 	orr.w	r3, r3, #1
 8005536:	6613      	str	r3, [r2, #96]	; 0x60
 8005538:	4b52      	ldr	r3, [pc, #328]	; (8005684 <HAL_GPIO_Init+0x2cc>)
 800553a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005544:	4a50      	ldr	r2, [pc, #320]	; (8005688 <HAL_GPIO_Init+0x2d0>)
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	089b      	lsrs	r3, r3, #2
 800554a:	3302      	adds	r3, #2
 800554c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005550:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f003 0303 	and.w	r3, r3, #3
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	220f      	movs	r2, #15
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	43db      	mvns	r3, r3
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4013      	ands	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800556e:	d013      	beq.n	8005598 <HAL_GPIO_Init+0x1e0>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a46      	ldr	r2, [pc, #280]	; (800568c <HAL_GPIO_Init+0x2d4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00d      	beq.n	8005594 <HAL_GPIO_Init+0x1dc>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a45      	ldr	r2, [pc, #276]	; (8005690 <HAL_GPIO_Init+0x2d8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d007      	beq.n	8005590 <HAL_GPIO_Init+0x1d8>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a44      	ldr	r2, [pc, #272]	; (8005694 <HAL_GPIO_Init+0x2dc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d101      	bne.n	800558c <HAL_GPIO_Init+0x1d4>
 8005588:	2303      	movs	r3, #3
 800558a:	e006      	b.n	800559a <HAL_GPIO_Init+0x1e2>
 800558c:	2307      	movs	r3, #7
 800558e:	e004      	b.n	800559a <HAL_GPIO_Init+0x1e2>
 8005590:	2302      	movs	r3, #2
 8005592:	e002      	b.n	800559a <HAL_GPIO_Init+0x1e2>
 8005594:	2301      	movs	r3, #1
 8005596:	e000      	b.n	800559a <HAL_GPIO_Init+0x1e2>
 8005598:	2300      	movs	r3, #0
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	f002 0203 	and.w	r2, r2, #3
 80055a0:	0092      	lsls	r2, r2, #2
 80055a2:	4093      	lsls	r3, r2
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80055aa:	4937      	ldr	r1, [pc, #220]	; (8005688 <HAL_GPIO_Init+0x2d0>)
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	089b      	lsrs	r3, r3, #2
 80055b0:	3302      	adds	r3, #2
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80055b8:	4b37      	ldr	r3, [pc, #220]	; (8005698 <HAL_GPIO_Init+0x2e0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	43db      	mvns	r3, r3
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4013      	ands	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4313      	orrs	r3, r2
 80055da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80055dc:	4a2e      	ldr	r2, [pc, #184]	; (8005698 <HAL_GPIO_Init+0x2e0>)
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80055e2:	4b2d      	ldr	r3, [pc, #180]	; (8005698 <HAL_GPIO_Init+0x2e0>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	43db      	mvns	r3, r3
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4013      	ands	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4313      	orrs	r3, r2
 8005604:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005606:	4a24      	ldr	r2, [pc, #144]	; (8005698 <HAL_GPIO_Init+0x2e0>)
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800560c:	4b22      	ldr	r3, [pc, #136]	; (8005698 <HAL_GPIO_Init+0x2e0>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	43db      	mvns	r3, r3
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4013      	ands	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4313      	orrs	r3, r2
 800562e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005630:	4a19      	ldr	r2, [pc, #100]	; (8005698 <HAL_GPIO_Init+0x2e0>)
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005636:	4b18      	ldr	r3, [pc, #96]	; (8005698 <HAL_GPIO_Init+0x2e0>)
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	43db      	mvns	r3, r3
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4013      	ands	r3, r2
 8005644:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800565a:	4a0f      	ldr	r2, [pc, #60]	; (8005698 <HAL_GPIO_Init+0x2e0>)
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	3301      	adds	r3, #1
 8005664:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	f47f aea9 	bne.w	80053c8 <HAL_GPIO_Init+0x10>
  }
}
 8005676:	bf00      	nop
 8005678:	bf00      	nop
 800567a:	371c      	adds	r7, #28
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	40021000 	.word	0x40021000
 8005688:	40010000 	.word	0x40010000
 800568c:	48000400 	.word	0x48000400
 8005690:	48000800 	.word	0x48000800
 8005694:	48000c00 	.word	0x48000c00
 8005698:	40010400 	.word	0x40010400

0800569c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80056aa:	e0b1      	b.n	8005810 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80056ac:	2201      	movs	r2, #1
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	4013      	ands	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 80a4 	beq.w	800580a <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80056c2:	4a5a      	ldr	r2, [pc, #360]	; (800582c <HAL_GPIO_DeInit+0x190>)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	089b      	lsrs	r3, r3, #2
 80056c8:	3302      	adds	r3, #2
 80056ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	220f      	movs	r2, #15
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4013      	ands	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80056ea:	d013      	beq.n	8005714 <HAL_GPIO_DeInit+0x78>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a50      	ldr	r2, [pc, #320]	; (8005830 <HAL_GPIO_DeInit+0x194>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00d      	beq.n	8005710 <HAL_GPIO_DeInit+0x74>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a4f      	ldr	r2, [pc, #316]	; (8005834 <HAL_GPIO_DeInit+0x198>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d007      	beq.n	800570c <HAL_GPIO_DeInit+0x70>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a4e      	ldr	r2, [pc, #312]	; (8005838 <HAL_GPIO_DeInit+0x19c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d101      	bne.n	8005708 <HAL_GPIO_DeInit+0x6c>
 8005704:	2303      	movs	r3, #3
 8005706:	e006      	b.n	8005716 <HAL_GPIO_DeInit+0x7a>
 8005708:	2307      	movs	r3, #7
 800570a:	e004      	b.n	8005716 <HAL_GPIO_DeInit+0x7a>
 800570c:	2302      	movs	r3, #2
 800570e:	e002      	b.n	8005716 <HAL_GPIO_DeInit+0x7a>
 8005710:	2301      	movs	r3, #1
 8005712:	e000      	b.n	8005716 <HAL_GPIO_DeInit+0x7a>
 8005714:	2300      	movs	r3, #0
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	f002 0203 	and.w	r2, r2, #3
 800571c:	0092      	lsls	r2, r2, #2
 800571e:	4093      	lsls	r3, r2
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	429a      	cmp	r2, r3
 8005724:	d132      	bne.n	800578c <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005726:	4b45      	ldr	r3, [pc, #276]	; (800583c <HAL_GPIO_DeInit+0x1a0>)
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	43db      	mvns	r3, r3
 800572e:	4943      	ldr	r1, [pc, #268]	; (800583c <HAL_GPIO_DeInit+0x1a0>)
 8005730:	4013      	ands	r3, r2
 8005732:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005734:	4b41      	ldr	r3, [pc, #260]	; (800583c <HAL_GPIO_DeInit+0x1a0>)
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	43db      	mvns	r3, r3
 800573c:	493f      	ldr	r1, [pc, #252]	; (800583c <HAL_GPIO_DeInit+0x1a0>)
 800573e:	4013      	ands	r3, r2
 8005740:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005742:	4b3e      	ldr	r3, [pc, #248]	; (800583c <HAL_GPIO_DeInit+0x1a0>)
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	43db      	mvns	r3, r3
 800574a:	493c      	ldr	r1, [pc, #240]	; (800583c <HAL_GPIO_DeInit+0x1a0>)
 800574c:	4013      	ands	r3, r2
 800574e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8005750:	4b3a      	ldr	r3, [pc, #232]	; (800583c <HAL_GPIO_DeInit+0x1a0>)
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	43db      	mvns	r3, r3
 8005758:	4938      	ldr	r1, [pc, #224]	; (800583c <HAL_GPIO_DeInit+0x1a0>)
 800575a:	4013      	ands	r3, r2
 800575c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f003 0303 	and.w	r3, r3, #3
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	220f      	movs	r2, #15
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800576e:	4a2f      	ldr	r2, [pc, #188]	; (800582c <HAL_GPIO_DeInit+0x190>)
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	089b      	lsrs	r3, r3, #2
 8005774:	3302      	adds	r3, #2
 8005776:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	43da      	mvns	r2, r3
 800577e:	482b      	ldr	r0, [pc, #172]	; (800582c <HAL_GPIO_DeInit+0x190>)
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	089b      	lsrs	r3, r3, #2
 8005784:	400a      	ands	r2, r1
 8005786:	3302      	adds	r3, #2
 8005788:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	2103      	movs	r1, #3
 8005796:	fa01 f303 	lsl.w	r3, r1, r3
 800579a:	431a      	orrs	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	08da      	lsrs	r2, r3, #3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3208      	adds	r2, #8
 80057a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f003 0307 	and.w	r3, r3, #7
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	220f      	movs	r2, #15
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	43db      	mvns	r3, r3
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	08d2      	lsrs	r2, r2, #3
 80057c0:	4019      	ands	r1, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3208      	adds	r2, #8
 80057c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	2103      	movs	r1, #3
 80057d4:	fa01 f303 	lsl.w	r3, r1, r3
 80057d8:	43db      	mvns	r3, r3
 80057da:	401a      	ands	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	2101      	movs	r1, #1
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	fa01 f303 	lsl.w	r3, r1, r3
 80057ec:	43db      	mvns	r3, r3
 80057ee:	401a      	ands	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	2103      	movs	r1, #3
 80057fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005802:	43db      	mvns	r3, r3
 8005804:	401a      	ands	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	3301      	adds	r3, #1
 800580e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	f47f af47 	bne.w	80056ac <HAL_GPIO_DeInit+0x10>
  }
}
 800581e:	bf00      	nop
 8005820:	bf00      	nop
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	40010000 	.word	0x40010000
 8005830:	48000400 	.word	0x48000400
 8005834:	48000800 	.word	0x48000800
 8005838:	48000c00 	.word	0x48000c00
 800583c:	40010400 	.word	0x40010400

08005840 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	887b      	ldrh	r3, [r7, #2]
 8005852:	4013      	ands	r3, r2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005858:	2301      	movs	r3, #1
 800585a:	73fb      	strb	r3, [r7, #15]
 800585c:	e001      	b.n	8005862 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800585e:	2300      	movs	r3, #0
 8005860:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005862:	7bfb      	ldrb	r3, [r7, #15]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	807b      	strh	r3, [r7, #2]
 800587c:	4613      	mov	r3, r2
 800587e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005880:	787b      	ldrb	r3, [r7, #1]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005886:	887a      	ldrh	r2, [r7, #2]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800588c:	e002      	b.n	8005894 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800588e:	887a      	ldrh	r2, [r7, #2]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e0b6      	b.n	8005a20 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d106      	bne.n	80058d2 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7fc f9d1 	bl	8001c74 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if defined(LPTIM_RCR_REP)

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	691a      	ldr	r2, [r3, #16]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0201 	orr.w	r2, r2, #1
 80058e8:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058f2:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80058fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 faa4 	bl	8005e50 <LPTIM_WaitForFlag>
 8005908:	4603      	mov	r3, r0
 800590a:	2b03      	cmp	r3, #3
 800590c:	d101      	bne.n	8005912 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e086      	b.n	8005a20 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 facc 	bl	8005eb0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fa8b 	bl	8005e34 <HAL_LPTIM_GetState>
 800591e:	4603      	mov	r3, r0
 8005920:	2b03      	cmp	r3, #3
 8005922:	d101      	bne.n	8005928 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e07b      	b.n	8005a20 <HAL_LPTIM_Init+0x180>
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d004      	beq.n	8005942 <HAL_LPTIM_Init+0xa2>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005940:	d103      	bne.n	800594a <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f023 031e 	bic.w	r3, r3, #30
 8005948:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005952:	4293      	cmp	r3, r2
 8005954:	d005      	beq.n	8005962 <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800595c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005960:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4b30      	ldr	r3, [pc, #192]	; (8005a28 <HAL_LPTIM_Init+0x188>)
 8005966:	4013      	ands	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005972:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8005978:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800597e:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8005984:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d107      	bne.n	80059a4 <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800599c:	4313      	orrs	r3, r2
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d004      	beq.n	80059b6 <HAL_LPTIM_Init+0x116>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059b4:	d107      	bne.n	80059c6 <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80059be:	4313      	orrs	r3, r2
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00a      	beq.n	80059e8 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80059da:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80059e0:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a0d      	ldr	r2, [pc, #52]	; (8005a2c <HAL_LPTIM_Init+0x18c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d108      	bne.n	8005a0c <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	621a      	str	r2, [r3, #32]
 8005a0a:	e004      	b.n	8005a16 <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a14:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	ff19f1fe 	.word	0xff19f1fe
 8005a2c:	40007c00 	.word	0x40007c00

08005a30 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a3f      	ldr	r2, [pc, #252]	; (8005b44 <HAL_LPTIM_Counter_Start_IT+0x114>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d106      	bne.n	8005a5a <HAL_LPTIM_Counter_Start_IT+0x2a>
 8005a4c:	4b3e      	ldr	r3, [pc, #248]	; (8005b48 <HAL_LPTIM_Counter_Start_IT+0x118>)
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	4a3d      	ldr	r2, [pc, #244]	; (8005b48 <HAL_LPTIM_Counter_Start_IT+0x118>)
 8005a52:	f043 0301 	orr.w	r3, r3, #1
 8005a56:	6213      	str	r3, [r2, #32]
 8005a58:	e005      	b.n	8005a66 <HAL_LPTIM_Counter_Start_IT+0x36>
 8005a5a:	4b3b      	ldr	r3, [pc, #236]	; (8005b48 <HAL_LPTIM_Counter_Start_IT+0x118>)
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	4a3a      	ldr	r2, [pc, #232]	; (8005b48 <HAL_LPTIM_Counter_Start_IT+0x118>)
 8005a60:	f043 0302 	orr.w	r3, r3, #2
 8005a64:	6213      	str	r3, [r2, #32]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d00c      	beq.n	8005a88 <HAL_LPTIM_Counter_Start_IT+0x58>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a76:	d107      	bne.n	8005a88 <HAL_LPTIM_Counter_Start_IT+0x58>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8005a86:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0201 	orr.w	r2, r2, #1
 8005a96:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2210      	movs	r2, #16
 8005a9e:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005aa8:	2110      	movs	r1, #16
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f9d0 	bl	8005e50 <LPTIM_WaitForFlag>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d101      	bne.n	8005aba <HAL_LPTIM_Counter_Start_IT+0x8a>
  {
    return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e03f      	b.n	8005b3a <HAL_LPTIM_Counter_Start_IT+0x10a>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f9f8 	bl	8005eb0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f9b7 	bl	8005e34 <HAL_LPTIM_GetState>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d101      	bne.n	8005ad0 <HAL_LPTIM_Counter_Start_IT+0xa0>
  {
    return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e034      	b.n	8005b3a <HAL_LPTIM_Counter_Start_IT+0x10a>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0210 	orr.w	r2, r2, #16
 8005ade:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0202 	orr.w	r2, r2, #2
 8005aee:	609a      	str	r2, [r3, #8]

#if defined(LPTIM_RCR_REP)
  /* Enable Rep Update Ok interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005afe:	609a      	str	r2, [r3, #8]

  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b0e:	609a      	str	r2, [r3, #8]

#endif
  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691a      	ldr	r2, [r3, #16]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0204 	orr.w	r2, r2, #4
 8005b2e:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	40007c00 	.word	0x40007c00
 8005b48:	40010400 	.word	0x40010400

08005b4c <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a21      	ldr	r2, [pc, #132]	; (8005be8 <HAL_LPTIM_Counter_Stop_IT+0x9c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d106      	bne.n	8005b74 <HAL_LPTIM_Counter_Stop_IT+0x28>
 8005b66:	4b21      	ldr	r3, [pc, #132]	; (8005bec <HAL_LPTIM_Counter_Stop_IT+0xa0>)
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	4a20      	ldr	r2, [pc, #128]	; (8005bec <HAL_LPTIM_Counter_Stop_IT+0xa0>)
 8005b6c:	f023 0301 	bic.w	r3, r3, #1
 8005b70:	6213      	str	r3, [r2, #32]
 8005b72:	e005      	b.n	8005b80 <HAL_LPTIM_Counter_Stop_IT+0x34>
 8005b74:	4b1d      	ldr	r3, [pc, #116]	; (8005bec <HAL_LPTIM_Counter_Stop_IT+0xa0>)
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	4a1c      	ldr	r2, [pc, #112]	; (8005bec <HAL_LPTIM_Counter_Stop_IT+0xa0>)
 8005b7a:	f023 0302 	bic.w	r3, r3, #2
 8005b7e:	6213      	str	r3, [r2, #32]

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f995 	bl	8005eb0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f954 	bl	8005e34 <HAL_LPTIM_GetState>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d101      	bne.n	8005b96 <HAL_LPTIM_Counter_Stop_IT+0x4a>
  {
    return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e024      	b.n	8005be0 <HAL_LPTIM_Counter_Stop_IT+0x94>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0210 	bic.w	r2, r2, #16
 8005ba4:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0202 	bic.w	r2, r2, #2
 8005bb4:	609a      	str	r2, [r3, #8]
#if defined(LPTIM_RCR_REP)

  /* Disable Rep Update Ok interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_REPOK);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bc4:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bd4:	609a      	str	r2, [r3, #8]
#endif
  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	40007c00 	.word	0x40007c00
 8005bec:	40010400 	.word	0x40010400

08005bf0 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d10d      	bne.n	8005c22 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d106      	bne.n	8005c22 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f8af 	bl	8005d80 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d10d      	bne.n	8005c4c <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d106      	bne.n	8005c4c <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2202      	movs	r2, #2
 8005c44:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f8a4 	bl	8005d94 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d10d      	bne.n	8005c76 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d106      	bne.n	8005c76 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2204      	movs	r2, #4
 8005c6e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f899 	bl	8005da8 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0308 	and.w	r3, r3, #8
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d10d      	bne.n	8005ca0 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	2b08      	cmp	r3, #8
 8005c90:	d106      	bne.n	8005ca0 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2208      	movs	r2, #8
 8005c98:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f88e 	bl	8005dbc <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0310 	and.w	r3, r3, #16
 8005caa:	2b10      	cmp	r3, #16
 8005cac:	d10d      	bne.n	8005cca <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f003 0310 	and.w	r3, r3, #16
 8005cb8:	2b10      	cmp	r3, #16
 8005cba:	d106      	bne.n	8005cca <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2210      	movs	r2, #16
 8005cc2:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f883 	bl	8005dd0 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	d10d      	bne.n	8005cf4 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b20      	cmp	r3, #32
 8005ce4:	d106      	bne.n	8005cf4 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2220      	movs	r2, #32
 8005cec:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f878 	bl	8005de4 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfe:	2b40      	cmp	r3, #64	; 0x40
 8005d00:	d10d      	bne.n	8005d1e <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0c:	2b40      	cmp	r3, #64	; 0x40
 8005d0e:	d106      	bne.n	8005d1e <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2240      	movs	r2, #64	; 0x40
 8005d16:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f86d 	bl	8005df8 <HAL_LPTIM_DirectionDownCallback>
  }
#if defined(LPTIM_RCR_REP)

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d28:	2b80      	cmp	r3, #128	; 0x80
 8005d2a:	d10d      	bne.n	8005d48 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d36:	2b80      	cmp	r3, #128	; 0x80
 8005d38:	d106      	bne.n	8005d48 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2280      	movs	r2, #128	; 0x80
 8005d40:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f862 	bl	8005e0c <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d56:	d10f      	bne.n	8005d78 <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d66:	d107      	bne.n	8005d78 <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d70:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f854 	bl	8005e20 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8005d78:	bf00      	nop
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005e42:	b2db      	uxtb	r3, r3
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8005e5e:	4b12      	ldr	r3, [pc, #72]	; (8005ea8 <LPTIM_WaitForFlag+0x58>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a12      	ldr	r2, [pc, #72]	; (8005eac <LPTIM_WaitForFlag+0x5c>)
 8005e64:	fba2 2303 	umull	r2, r3, r2, r3
 8005e68:	0b9b      	lsrs	r3, r3, #14
 8005e6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e6e:	fb02 f303 	mul.w	r3, r2, r3
 8005e72:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d002      	beq.n	8005e9a <LPTIM_WaitForFlag+0x4a>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1ec      	bne.n	8005e74 <LPTIM_WaitForFlag+0x24>

  return result;
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	20000008 	.word	0x20000008
 8005eac:	d1b71759 	.word	0xd1b71759

08005eb0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08a      	sub	sp, #40	; 0x28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8005ebc:	b672      	cpsid	i
}
 8005ebe:	bf00      	nop

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a85      	ldr	r2, [pc, #532]	; (80060dc <LPTIM_Disable+0x22c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d003      	beq.n	8005ed2 <LPTIM_Disable+0x22>
 8005eca:	4a85      	ldr	r2, [pc, #532]	; (80060e0 <LPTIM_Disable+0x230>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d007      	beq.n	8005ee0 <LPTIM_Disable+0x30>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8005ed0:	e00d      	b.n	8005eee <LPTIM_Disable+0x3e>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005ed2:	4b84      	ldr	r3, [pc, #528]	; (80060e4 <LPTIM_Disable+0x234>)
 8005ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005ede:	e006      	b.n	8005eee <LPTIM_Disable+0x3e>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005ee0:	4b80      	ldr	r3, [pc, #512]	; (80060e4 <LPTIM_Disable+0x234>)
 8005ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005eec:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	623b      	str	r3, [r7, #32]
  tmpCFGR = hlptim->Instance->CFGR;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	61fb      	str	r3, [r7, #28]
  tmpCMP = hlptim->Instance->CMP;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	61bb      	str	r3, [r7, #24]
  tmpARR = hlptim->Instance->ARR;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	617b      	str	r3, [r7, #20]
  tmpOR = hlptim->Instance->OR;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	613b      	str	r3, [r7, #16]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1c:	60fb      	str	r3, [r7, #12]
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a6e      	ldr	r2, [pc, #440]	; (80060dc <LPTIM_Disable+0x22c>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d003      	beq.n	8005f30 <LPTIM_Disable+0x80>
 8005f28:	4a6d      	ldr	r2, [pc, #436]	; (80060e0 <LPTIM_Disable+0x230>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00d      	beq.n	8005f4a <LPTIM_Disable+0x9a>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8005f2e:	e019      	b.n	8005f64 <LPTIM_Disable+0xb4>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8005f30:	4b6c      	ldr	r3, [pc, #432]	; (80060e4 <LPTIM_Disable+0x234>)
 8005f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f34:	4a6b      	ldr	r2, [pc, #428]	; (80060e4 <LPTIM_Disable+0x234>)
 8005f36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f3a:	6393      	str	r3, [r2, #56]	; 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8005f3c:	4b69      	ldr	r3, [pc, #420]	; (80060e4 <LPTIM_Disable+0x234>)
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f40:	4a68      	ldr	r2, [pc, #416]	; (80060e4 <LPTIM_Disable+0x234>)
 8005f42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f46:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 8005f48:	e00c      	b.n	8005f64 <LPTIM_Disable+0xb4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8005f4a:	4b66      	ldr	r3, [pc, #408]	; (80060e4 <LPTIM_Disable+0x234>)
 8005f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4e:	4a65      	ldr	r2, [pc, #404]	; (80060e4 <LPTIM_Disable+0x234>)
 8005f50:	f043 0320 	orr.w	r3, r3, #32
 8005f54:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8005f56:	4b63      	ldr	r3, [pc, #396]	; (80060e4 <LPTIM_Disable+0x234>)
 8005f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5a:	4a62      	ldr	r2, [pc, #392]	; (80060e4 <LPTIM_Disable+0x234>)
 8005f5c:	f023 0320 	bic.w	r3, r3, #32
 8005f60:	63d3      	str	r3, [r2, #60]	; 0x3c
      break;
 8005f62:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <LPTIM_Disable+0xc8>
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d103      	bne.n	8005f78 <LPTIM_Disable+0xc8>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 8096 	beq.w	80060a4 <LPTIM_Disable+0x1f4>
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a57      	ldr	r2, [pc, #348]	; (80060dc <LPTIM_Disable+0x22c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d003      	beq.n	8005f8a <LPTIM_Disable+0xda>
 8005f82:	4a57      	ldr	r2, [pc, #348]	; (80060e0 <LPTIM_Disable+0x230>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d009      	beq.n	8005f9c <LPTIM_Disable+0xec>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8005f88:	e011      	b.n	8005fae <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8005f8a:	4b56      	ldr	r3, [pc, #344]	; (80060e4 <LPTIM_Disable+0x234>)
 8005f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f90:	4a54      	ldr	r2, [pc, #336]	; (80060e4 <LPTIM_Disable+0x234>)
 8005f92:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8005f96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8005f9a:	e008      	b.n	8005fae <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8005f9c:	4b51      	ldr	r3, [pc, #324]	; (80060e4 <LPTIM_Disable+0x234>)
 8005f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa2:	4a50      	ldr	r2, [pc, #320]	; (80060e4 <LPTIM_Disable+0x234>)
 8005fa4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8005fac:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01a      	beq.n	8005fea <LPTIM_Disable+0x13a>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691a      	ldr	r2, [r3, #16]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0201 	orr.w	r2, r2, #1
 8005fc2:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005fcc:	2108      	movs	r1, #8
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7ff ff3e 	bl	8005e50 <LPTIM_WaitForFlag>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d103      	bne.n	8005fe2 <LPTIM_Disable+0x132>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2203      	movs	r2, #3
 8005fde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2208      	movs	r2, #8
 8005fe8:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01a      	beq.n	8006026 <LPTIM_Disable+0x176>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0201 	orr.w	r2, r2, #1
 8005ffe:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8006008:	2110      	movs	r1, #16
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff ff20 	bl	8005e50 <LPTIM_WaitForFlag>
 8006010:	4603      	mov	r3, r0
 8006012:	2b03      	cmp	r3, #3
 8006014:	d103      	bne.n	800601e <LPTIM_Disable+0x16e>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2203      	movs	r2, #3
 800601a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2210      	movs	r2, #16
 8006024:	605a      	str	r2, [r3, #4]
    }
#if defined(LPTIM_RCR_REP)

    if (tmpRCR != 0UL)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01c      	beq.n	8006066 <LPTIM_Disable+0x1b6>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691a      	ldr	r2, [r3, #16]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8006044:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7ff ff01 	bl	8005e50 <LPTIM_WaitForFlag>
 800604e:	4603      	mov	r3, r0
 8006050:	2b03      	cmp	r3, #3
 8006052:	d103      	bne.n	800605c <LPTIM_Disable+0x1ac>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2203      	movs	r2, #3
 8006058:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006064:	605a      	str	r2, [r3, #4]
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a1c      	ldr	r2, [pc, #112]	; (80060dc <LPTIM_Disable+0x22c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d003      	beq.n	8006078 <LPTIM_Disable+0x1c8>
 8006070:	4a1b      	ldr	r2, [pc, #108]	; (80060e0 <LPTIM_Disable+0x230>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00b      	beq.n	800608e <LPTIM_Disable+0x1de>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8006076:	e016      	b.n	80060a6 <LPTIM_Disable+0x1f6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8006078:	4b1a      	ldr	r3, [pc, #104]	; (80060e4 <LPTIM_Disable+0x234>)
 800607a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006082:	4918      	ldr	r1, [pc, #96]	; (80060e4 <LPTIM_Disable+0x234>)
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	4313      	orrs	r3, r2
 8006088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 800608c:	e00b      	b.n	80060a6 <LPTIM_Disable+0x1f6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 800608e:	4b15      	ldr	r3, [pc, #84]	; (80060e4 <LPTIM_Disable+0x234>)
 8006090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006094:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006098:	4912      	ldr	r1, [pc, #72]	; (80060e4 <LPTIM_Disable+0x234>)
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	4313      	orrs	r3, r2
 800609e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 80060a2:	e000      	b.n	80060a6 <LPTIM_Disable+0x1f6>
    }
  }
 80060a4:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	691a      	ldr	r2, [r3, #16]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6a3a      	ldr	r2, [r7, #32]
 80060bc:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 80060ce:	b662      	cpsie	i
}
 80060d0:	bf00      	nop

  __enable_irq();
}
 80060d2:	bf00      	nop
 80060d4:	3728      	adds	r7, #40	; 0x28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	40007c00 	.word	0x40007c00
 80060e0:	40009400 	.word	0x40009400
 80060e4:	40021000 	.word	0x40021000

080060e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80060ec:	4b04      	ldr	r3, [pc, #16]	; (8006100 <HAL_PWREx_GetVoltageRange+0x18>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	40007000 	.word	0x40007000

08006104 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006112:	d130      	bne.n	8006176 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006114:	4b23      	ldr	r3, [pc, #140]	; (80061a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800611c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006120:	d038      	beq.n	8006194 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006122:	4b20      	ldr	r3, [pc, #128]	; (80061a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800612a:	4a1e      	ldr	r2, [pc, #120]	; (80061a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800612c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006130:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006132:	4b1d      	ldr	r3, [pc, #116]	; (80061a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2232      	movs	r2, #50	; 0x32
 8006138:	fb02 f303 	mul.w	r3, r2, r3
 800613c:	4a1b      	ldr	r2, [pc, #108]	; (80061ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800613e:	fba2 2303 	umull	r2, r3, r2, r3
 8006142:	0c9b      	lsrs	r3, r3, #18
 8006144:	3301      	adds	r3, #1
 8006146:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006148:	e002      	b.n	8006150 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3b01      	subs	r3, #1
 800614e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006150:	4b14      	ldr	r3, [pc, #80]	; (80061a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800615c:	d102      	bne.n	8006164 <HAL_PWREx_ControlVoltageScaling+0x60>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1f2      	bne.n	800614a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006164:	4b0f      	ldr	r3, [pc, #60]	; (80061a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800616c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006170:	d110      	bne.n	8006194 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e00f      	b.n	8006196 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006176:	4b0b      	ldr	r3, [pc, #44]	; (80061a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800617e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006182:	d007      	beq.n	8006194 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006184:	4b07      	ldr	r3, [pc, #28]	; (80061a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800618c:	4a05      	ldr	r2, [pc, #20]	; (80061a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800618e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006192:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	40007000 	.word	0x40007000
 80061a8:	20000008 	.word	0x20000008
 80061ac:	431bde83 	.word	0x431bde83

080061b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08a      	sub	sp, #40	; 0x28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d102      	bne.n	80061c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	f000 bc56 	b.w	8006a70 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061c4:	4ba1      	ldr	r3, [pc, #644]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f003 030c 	and.w	r3, r3, #12
 80061cc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061ce:	4b9f      	ldr	r3, [pc, #636]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f003 0303 	and.w	r3, r3, #3
 80061d6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0310 	and.w	r3, r3, #16
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 80e6 	beq.w	80063b2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d007      	beq.n	80061fc <HAL_RCC_OscConfig+0x4c>
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	2b0c      	cmp	r3, #12
 80061f0:	f040 808d 	bne.w	800630e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	f040 8089 	bne.w	800630e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80061fc:	4b93      	ldr	r3, [pc, #588]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d006      	beq.n	8006216 <HAL_RCC_OscConfig+0x66>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d102      	bne.n	8006216 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	f000 bc2d 	b.w	8006a70 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800621a:	4b8c      	ldr	r3, [pc, #560]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d004      	beq.n	8006230 <HAL_RCC_OscConfig+0x80>
 8006226:	4b89      	ldr	r3, [pc, #548]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800622e:	e005      	b.n	800623c <HAL_RCC_OscConfig+0x8c>
 8006230:	4b86      	ldr	r3, [pc, #536]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006236:	091b      	lsrs	r3, r3, #4
 8006238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800623c:	4293      	cmp	r3, r2
 800623e:	d224      	bcs.n	800628a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fdbf 	bl	8006dc8 <RCC_SetFlashLatencyFromMSIRange>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	f000 bc0d 	b.w	8006a70 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006256:	4b7d      	ldr	r3, [pc, #500]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a7c      	ldr	r2, [pc, #496]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 800625c:	f043 0308 	orr.w	r3, r3, #8
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	4b7a      	ldr	r3, [pc, #488]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	4977      	ldr	r1, [pc, #476]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006270:	4313      	orrs	r3, r2
 8006272:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006274:	4b75      	ldr	r3, [pc, #468]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	021b      	lsls	r3, r3, #8
 8006282:	4972      	ldr	r1, [pc, #456]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006284:	4313      	orrs	r3, r2
 8006286:	604b      	str	r3, [r1, #4]
 8006288:	e025      	b.n	80062d6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800628a:	4b70      	ldr	r3, [pc, #448]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a6f      	ldr	r2, [pc, #444]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006290:	f043 0308 	orr.w	r3, r3, #8
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	4b6d      	ldr	r3, [pc, #436]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	496a      	ldr	r1, [pc, #424]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062a8:	4b68      	ldr	r3, [pc, #416]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	4965      	ldr	r1, [pc, #404]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d109      	bne.n	80062d6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fd7e 	bl	8006dc8 <RCC_SetFlashLatencyFromMSIRange>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e3cc      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062d6:	f000 fcb3 	bl	8006c40 <HAL_RCC_GetSysClockFreq>
 80062da:	4602      	mov	r2, r0
 80062dc:	4b5b      	ldr	r3, [pc, #364]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	091b      	lsrs	r3, r3, #4
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	495a      	ldr	r1, [pc, #360]	; (8006450 <HAL_RCC_OscConfig+0x2a0>)
 80062e8:	5ccb      	ldrb	r3, [r1, r3]
 80062ea:	f003 031f 	and.w	r3, r3, #31
 80062ee:	fa22 f303 	lsr.w	r3, r2, r3
 80062f2:	4a58      	ldr	r2, [pc, #352]	; (8006454 <HAL_RCC_OscConfig+0x2a4>)
 80062f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80062f6:	4b58      	ldr	r3, [pc, #352]	; (8006458 <HAL_RCC_OscConfig+0x2a8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fc f9b8 	bl	8002670 <HAL_InitTick>
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d052      	beq.n	80063b0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800630a:	7dfb      	ldrb	r3, [r7, #23]
 800630c:	e3b0      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d032      	beq.n	800637c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006316:	4b4d      	ldr	r3, [pc, #308]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a4c      	ldr	r2, [pc, #304]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 800631c:	f043 0301 	orr.w	r3, r3, #1
 8006320:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006322:	f7fc f9f5 	bl	8002710 <HAL_GetTick>
 8006326:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006328:	e008      	b.n	800633c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800632a:	f7fc f9f1 	bl	8002710 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e399      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800633c:	4b43      	ldr	r3, [pc, #268]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0f0      	beq.n	800632a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006348:	4b40      	ldr	r3, [pc, #256]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a3f      	ldr	r2, [pc, #252]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 800634e:	f043 0308 	orr.w	r3, r3, #8
 8006352:	6013      	str	r3, [r2, #0]
 8006354:	4b3d      	ldr	r3, [pc, #244]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	493a      	ldr	r1, [pc, #232]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006362:	4313      	orrs	r3, r2
 8006364:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006366:	4b39      	ldr	r3, [pc, #228]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	021b      	lsls	r3, r3, #8
 8006374:	4935      	ldr	r1, [pc, #212]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006376:	4313      	orrs	r3, r2
 8006378:	604b      	str	r3, [r1, #4]
 800637a:	e01a      	b.n	80063b2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800637c:	4b33      	ldr	r3, [pc, #204]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a32      	ldr	r2, [pc, #200]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006382:	f023 0301 	bic.w	r3, r3, #1
 8006386:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006388:	f7fc f9c2 	bl	8002710 <HAL_GetTick>
 800638c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800638e:	e008      	b.n	80063a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006390:	f7fc f9be 	bl	8002710 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e366      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80063a2:	4b2a      	ldr	r3, [pc, #168]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1f0      	bne.n	8006390 <HAL_RCC_OscConfig+0x1e0>
 80063ae:	e000      	b.n	80063b2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80063b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d073      	beq.n	80064a6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d005      	beq.n	80063d0 <HAL_RCC_OscConfig+0x220>
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	2b0c      	cmp	r3, #12
 80063c8:	d10e      	bne.n	80063e8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d10b      	bne.n	80063e8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063d0:	4b1e      	ldr	r3, [pc, #120]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d063      	beq.n	80064a4 <HAL_RCC_OscConfig+0x2f4>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d15f      	bne.n	80064a4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e343      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f0:	d106      	bne.n	8006400 <HAL_RCC_OscConfig+0x250>
 80063f2:	4b16      	ldr	r3, [pc, #88]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a15      	ldr	r2, [pc, #84]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 80063f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	e01d      	b.n	800643c <HAL_RCC_OscConfig+0x28c>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006408:	d10c      	bne.n	8006424 <HAL_RCC_OscConfig+0x274>
 800640a:	4b10      	ldr	r3, [pc, #64]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a0f      	ldr	r2, [pc, #60]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	4b0d      	ldr	r3, [pc, #52]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a0c      	ldr	r2, [pc, #48]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 800641c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	e00b      	b.n	800643c <HAL_RCC_OscConfig+0x28c>
 8006424:	4b09      	ldr	r3, [pc, #36]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a08      	ldr	r2, [pc, #32]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 800642a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	4b06      	ldr	r3, [pc, #24]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a05      	ldr	r2, [pc, #20]	; (800644c <HAL_RCC_OscConfig+0x29c>)
 8006436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800643a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d01b      	beq.n	800647c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006444:	f7fc f964 	bl	8002710 <HAL_GetTick>
 8006448:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800644a:	e010      	b.n	800646e <HAL_RCC_OscConfig+0x2be>
 800644c:	40021000 	.word	0x40021000
 8006450:	08009278 	.word	0x08009278
 8006454:	20000008 	.word	0x20000008
 8006458:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800645c:	f7fc f958 	bl	8002710 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b64      	cmp	r3, #100	; 0x64
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e300      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800646e:	4ba0      	ldr	r3, [pc, #640]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0f0      	beq.n	800645c <HAL_RCC_OscConfig+0x2ac>
 800647a:	e014      	b.n	80064a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647c:	f7fc f948 	bl	8002710 <HAL_GetTick>
 8006480:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006484:	f7fc f944 	bl	8002710 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b64      	cmp	r3, #100	; 0x64
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e2ec      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006496:	4b96      	ldr	r3, [pc, #600]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f0      	bne.n	8006484 <HAL_RCC_OscConfig+0x2d4>
 80064a2:	e000      	b.n	80064a6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d060      	beq.n	8006574 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	2b04      	cmp	r3, #4
 80064b6:	d005      	beq.n	80064c4 <HAL_RCC_OscConfig+0x314>
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	2b0c      	cmp	r3, #12
 80064bc:	d119      	bne.n	80064f2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d116      	bne.n	80064f2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064c4:	4b8a      	ldr	r3, [pc, #552]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <HAL_RCC_OscConfig+0x32c>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e2c9      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064dc:	4b84      	ldr	r3, [pc, #528]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	061b      	lsls	r3, r3, #24
 80064ea:	4981      	ldr	r1, [pc, #516]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064f0:	e040      	b.n	8006574 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d023      	beq.n	8006542 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064fa:	4b7d      	ldr	r3, [pc, #500]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a7c      	ldr	r2, [pc, #496]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 8006500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006506:	f7fc f903 	bl	8002710 <HAL_GetTick>
 800650a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800650c:	e008      	b.n	8006520 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800650e:	f7fc f8ff 	bl	8002710 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	2b02      	cmp	r3, #2
 800651a:	d901      	bls.n	8006520 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e2a7      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006520:	4b73      	ldr	r3, [pc, #460]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0f0      	beq.n	800650e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652c:	4b70      	ldr	r3, [pc, #448]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	061b      	lsls	r3, r3, #24
 800653a:	496d      	ldr	r1, [pc, #436]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 800653c:	4313      	orrs	r3, r2
 800653e:	604b      	str	r3, [r1, #4]
 8006540:	e018      	b.n	8006574 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006542:	4b6b      	ldr	r3, [pc, #428]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a6a      	ldr	r2, [pc, #424]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 8006548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800654c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654e:	f7fc f8df 	bl	8002710 <HAL_GetTick>
 8006552:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006554:	e008      	b.n	8006568 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006556:	f7fc f8db 	bl	8002710 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d901      	bls.n	8006568 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e283      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006568:	4b61      	ldr	r3, [pc, #388]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1f0      	bne.n	8006556 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0308 	and.w	r3, r3, #8
 800657c:	2b00      	cmp	r3, #0
 800657e:	d07f      	beq.n	8006680 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d05f      	beq.n	8006648 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8006588:	4b59      	ldr	r3, [pc, #356]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 800658a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800658e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	699a      	ldr	r2, [r3, #24]
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f003 0310 	and.w	r3, r3, #16
 800659a:	429a      	cmp	r2, r3
 800659c:	d037      	beq.n	800660e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d006      	beq.n	80065b6 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e25c      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d01b      	beq.n	80065f8 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80065c0:	4b4b      	ldr	r3, [pc, #300]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 80065c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065c6:	4a4a      	ldr	r2, [pc, #296]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 80065c8:	f023 0301 	bic.w	r3, r3, #1
 80065cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80065d0:	f7fc f89e 	bl	8002710 <HAL_GetTick>
 80065d4:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065d8:	f7fc f89a 	bl	8002710 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b11      	cmp	r3, #17
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e242      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065ea:	4b41      	ldr	r3, [pc, #260]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 80065ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1ef      	bne.n	80065d8 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80065f8:	4b3d      	ldr	r3, [pc, #244]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 80065fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065fe:	f023 0210 	bic.w	r2, r3, #16
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	493a      	ldr	r1, [pc, #232]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 8006608:	4313      	orrs	r3, r2
 800660a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800660e:	4b38      	ldr	r3, [pc, #224]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 8006610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006614:	4a36      	ldr	r2, [pc, #216]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 8006616:	f043 0301 	orr.w	r3, r3, #1
 800661a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800661e:	f7fc f877 	bl	8002710 <HAL_GetTick>
 8006622:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006624:	e008      	b.n	8006638 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006626:	f7fc f873 	bl	8002710 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b11      	cmp	r3, #17
 8006632:	d901      	bls.n	8006638 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e21b      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006638:	4b2d      	ldr	r3, [pc, #180]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 800663a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d0ef      	beq.n	8006626 <HAL_RCC_OscConfig+0x476>
 8006646:	e01b      	b.n	8006680 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006648:	4b29      	ldr	r3, [pc, #164]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 800664a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800664e:	4a28      	ldr	r2, [pc, #160]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 8006650:	f023 0301 	bic.w	r3, r3, #1
 8006654:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006658:	f7fc f85a 	bl	8002710 <HAL_GetTick>
 800665c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006660:	f7fc f856 	bl	8002710 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b11      	cmp	r3, #17
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e1fe      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006672:	4b1f      	ldr	r3, [pc, #124]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 8006674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1ef      	bne.n	8006660 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 80c1 	beq.w	8006810 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800668e:	2300      	movs	r3, #0
 8006690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006694:	4b16      	ldr	r3, [pc, #88]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 8006696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10e      	bne.n	80066be <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066a0:	4b13      	ldr	r3, [pc, #76]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 80066a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a4:	4a12      	ldr	r2, [pc, #72]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 80066a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066aa:	6593      	str	r3, [r2, #88]	; 0x58
 80066ac:	4b10      	ldr	r3, [pc, #64]	; (80066f0 <HAL_RCC_OscConfig+0x540>)
 80066ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80066b8:	2301      	movs	r3, #1
 80066ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066be:	4b0d      	ldr	r3, [pc, #52]	; (80066f4 <HAL_RCC_OscConfig+0x544>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d11c      	bne.n	8006704 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066ca:	4b0a      	ldr	r3, [pc, #40]	; (80066f4 <HAL_RCC_OscConfig+0x544>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a09      	ldr	r2, [pc, #36]	; (80066f4 <HAL_RCC_OscConfig+0x544>)
 80066d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066d6:	f7fc f81b 	bl	8002710 <HAL_GetTick>
 80066da:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066dc:	e00c      	b.n	80066f8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066de:	f7fc f817 	bl	8002710 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d905      	bls.n	80066f8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e1bf      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
 80066f0:	40021000 	.word	0x40021000
 80066f4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066f8:	4bb1      	ldr	r3, [pc, #708]	; (80069c0 <HAL_RCC_OscConfig+0x810>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006700:	2b00      	cmp	r3, #0
 8006702:	d0ec      	beq.n	80066de <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d02c      	beq.n	800676a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8006710:	4bac      	ldr	r3, [pc, #688]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 8006712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006716:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006722:	49a8      	ldr	r1, [pc, #672]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 8006724:	4313      	orrs	r3, r2
 8006726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 0304 	and.w	r3, r3, #4
 8006732:	2b00      	cmp	r3, #0
 8006734:	d010      	beq.n	8006758 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006736:	4ba3      	ldr	r3, [pc, #652]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 8006738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800673c:	4aa1      	ldr	r2, [pc, #644]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 800673e:	f043 0304 	orr.w	r3, r3, #4
 8006742:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006746:	4b9f      	ldr	r3, [pc, #636]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 8006748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674c:	4a9d      	ldr	r2, [pc, #628]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 800674e:	f043 0301 	orr.w	r3, r3, #1
 8006752:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006756:	e018      	b.n	800678a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006758:	4b9a      	ldr	r3, [pc, #616]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 800675a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675e:	4a99      	ldr	r2, [pc, #612]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 8006760:	f043 0301 	orr.w	r3, r3, #1
 8006764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006768:	e00f      	b.n	800678a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800676a:	4b96      	ldr	r3, [pc, #600]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 800676c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006770:	4a94      	ldr	r2, [pc, #592]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 8006772:	f023 0301 	bic.w	r3, r3, #1
 8006776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800677a:	4b92      	ldr	r3, [pc, #584]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 800677c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006780:	4a90      	ldr	r2, [pc, #576]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 8006782:	f023 0304 	bic.w	r3, r3, #4
 8006786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d016      	beq.n	80067c0 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006792:	f7fb ffbd 	bl	8002710 <HAL_GetTick>
 8006796:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006798:	e00a      	b.n	80067b0 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800679a:	f7fb ffb9 	bl	8002710 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d901      	bls.n	80067b0 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e15f      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067b0:	4b84      	ldr	r3, [pc, #528]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 80067b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0ed      	beq.n	800679a <HAL_RCC_OscConfig+0x5ea>
 80067be:	e01d      	b.n	80067fc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c0:	f7fb ffa6 	bl	8002710 <HAL_GetTick>
 80067c4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067c6:	e00a      	b.n	80067de <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067c8:	f7fb ffa2 	bl	8002710 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d901      	bls.n	80067de <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e148      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067de:	4b79      	ldr	r3, [pc, #484]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 80067e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1ed      	bne.n	80067c8 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80067ec:	4b75      	ldr	r3, [pc, #468]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 80067ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f2:	4a74      	ldr	r2, [pc, #464]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 80067f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006800:	2b01      	cmp	r3, #1
 8006802:	d105      	bne.n	8006810 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006804:	4b6f      	ldr	r3, [pc, #444]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 8006806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006808:	4a6e      	ldr	r2, [pc, #440]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 800680a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800680e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0320 	and.w	r3, r3, #32
 8006818:	2b00      	cmp	r3, #0
 800681a:	d03c      	beq.n	8006896 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01c      	beq.n	800685e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006824:	4b67      	ldr	r3, [pc, #412]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 8006826:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800682a:	4a66      	ldr	r2, [pc, #408]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 800682c:	f043 0301 	orr.w	r3, r3, #1
 8006830:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006834:	f7fb ff6c 	bl	8002710 <HAL_GetTick>
 8006838:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800683a:	e008      	b.n	800684e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800683c:	f7fb ff68 	bl	8002710 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b02      	cmp	r3, #2
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e110      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800684e:	4b5d      	ldr	r3, [pc, #372]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 8006850:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0ef      	beq.n	800683c <HAL_RCC_OscConfig+0x68c>
 800685c:	e01b      	b.n	8006896 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800685e:	4b59      	ldr	r3, [pc, #356]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 8006860:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006864:	4a57      	ldr	r2, [pc, #348]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 8006866:	f023 0301 	bic.w	r3, r3, #1
 800686a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686e:	f7fb ff4f 	bl	8002710 <HAL_GetTick>
 8006872:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006874:	e008      	b.n	8006888 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006876:	f7fb ff4b 	bl	8002710 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d901      	bls.n	8006888 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e0f3      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006888:	4b4e      	ldr	r3, [pc, #312]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 800688a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1ef      	bne.n	8006876 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80e7 	beq.w	8006a6e <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	f040 80b7 	bne.w	8006a18 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80068aa:	4b46      	ldr	r3, [pc, #280]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	f003 0203 	and.w	r2, r3, #3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d124      	bne.n	8006908 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c8:	3b01      	subs	r3, #1
 80068ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d11b      	bne.n	8006908 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068dc:	429a      	cmp	r2, r3
 80068de:	d113      	bne.n	8006908 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ea:	085b      	lsrs	r3, r3, #1
 80068ec:	3b01      	subs	r3, #1
 80068ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d109      	bne.n	8006908 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	085b      	lsrs	r3, r3, #1
 8006900:	3b01      	subs	r3, #1
 8006902:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006904:	429a      	cmp	r2, r3
 8006906:	d061      	beq.n	80069cc <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	2b0c      	cmp	r3, #12
 800690c:	d056      	beq.n	80069bc <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800690e:	4b2d      	ldr	r3, [pc, #180]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a2c      	ldr	r2, [pc, #176]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 8006914:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006918:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800691a:	f7fb fef9 	bl	8002710 <HAL_GetTick>
 800691e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006920:	e008      	b.n	8006934 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006922:	f7fb fef5 	bl	8002710 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e09d      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006934:	4b23      	ldr	r3, [pc, #140]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1f0      	bne.n	8006922 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006940:	4b20      	ldr	r3, [pc, #128]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	4b20      	ldr	r3, [pc, #128]	; (80069c8 <HAL_RCC_OscConfig+0x818>)
 8006946:	4013      	ands	r3, r2
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006950:	3a01      	subs	r2, #1
 8006952:	0112      	lsls	r2, r2, #4
 8006954:	4311      	orrs	r1, r2
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800695a:	0212      	lsls	r2, r2, #8
 800695c:	4311      	orrs	r1, r2
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006962:	0852      	lsrs	r2, r2, #1
 8006964:	3a01      	subs	r2, #1
 8006966:	0552      	lsls	r2, r2, #21
 8006968:	4311      	orrs	r1, r2
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800696e:	0852      	lsrs	r2, r2, #1
 8006970:	3a01      	subs	r2, #1
 8006972:	0652      	lsls	r2, r2, #25
 8006974:	430a      	orrs	r2, r1
 8006976:	4913      	ldr	r1, [pc, #76]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 8006978:	4313      	orrs	r3, r2
 800697a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800697c:	4b11      	ldr	r3, [pc, #68]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a10      	ldr	r2, [pc, #64]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 8006982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006986:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006988:	4b0e      	ldr	r3, [pc, #56]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	4a0d      	ldr	r2, [pc, #52]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 800698e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006992:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006994:	f7fb febc 	bl	8002710 <HAL_GetTick>
 8006998:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800699c:	f7fb feb8 	bl	8002710 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e060      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069ae:	4b05      	ldr	r3, [pc, #20]	; (80069c4 <HAL_RCC_OscConfig+0x814>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0f0      	beq.n	800699c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80069ba:	e058      	b.n	8006a6e <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e057      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
 80069c0:	40007000 	.word	0x40007000
 80069c4:	40021000 	.word	0x40021000
 80069c8:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069cc:	4b2a      	ldr	r3, [pc, #168]	; (8006a78 <HAL_RCC_OscConfig+0x8c8>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d14a      	bne.n	8006a6e <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80069d8:	4b27      	ldr	r3, [pc, #156]	; (8006a78 <HAL_RCC_OscConfig+0x8c8>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a26      	ldr	r2, [pc, #152]	; (8006a78 <HAL_RCC_OscConfig+0x8c8>)
 80069de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069e4:	4b24      	ldr	r3, [pc, #144]	; (8006a78 <HAL_RCC_OscConfig+0x8c8>)
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	4a23      	ldr	r2, [pc, #140]	; (8006a78 <HAL_RCC_OscConfig+0x8c8>)
 80069ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80069f0:	f7fb fe8e 	bl	8002710 <HAL_GetTick>
 80069f4:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f8:	f7fb fe8a 	bl	8002710 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e032      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a0a:	4b1b      	ldr	r3, [pc, #108]	; (8006a78 <HAL_RCC_OscConfig+0x8c8>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0f0      	beq.n	80069f8 <HAL_RCC_OscConfig+0x848>
 8006a16:	e02a      	b.n	8006a6e <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	2b0c      	cmp	r3, #12
 8006a1c:	d025      	beq.n	8006a6a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a1e:	4b16      	ldr	r3, [pc, #88]	; (8006a78 <HAL_RCC_OscConfig+0x8c8>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a15      	ldr	r2, [pc, #84]	; (8006a78 <HAL_RCC_OscConfig+0x8c8>)
 8006a24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a28:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006a2a:	4b13      	ldr	r3, [pc, #76]	; (8006a78 <HAL_RCC_OscConfig+0x8c8>)
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	4a12      	ldr	r2, [pc, #72]	; (8006a78 <HAL_RCC_OscConfig+0x8c8>)
 8006a30:	f023 0303 	bic.w	r3, r3, #3
 8006a34:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8006a36:	4b10      	ldr	r3, [pc, #64]	; (8006a78 <HAL_RCC_OscConfig+0x8c8>)
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	4a0f      	ldr	r2, [pc, #60]	; (8006a78 <HAL_RCC_OscConfig+0x8c8>)
 8006a3c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006a40:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a42:	f7fb fe65 	bl	8002710 <HAL_GetTick>
 8006a46:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a48:	e008      	b.n	8006a5c <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a4a:	f7fb fe61 	bl	8002710 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d901      	bls.n	8006a5c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e009      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a5c:	4b06      	ldr	r3, [pc, #24]	; (8006a78 <HAL_RCC_OscConfig+0x8c8>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1f0      	bne.n	8006a4a <HAL_RCC_OscConfig+0x89a>
 8006a68:	e001      	b.n	8006a6e <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e000      	b.n	8006a70 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3728      	adds	r7, #40	; 0x28
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	40021000 	.word	0x40021000

08006a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e0c8      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a90:	4b66      	ldr	r3, [pc, #408]	; (8006c2c <HAL_RCC_ClockConfig+0x1b0>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d910      	bls.n	8006ac0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a9e:	4b63      	ldr	r3, [pc, #396]	; (8006c2c <HAL_RCC_ClockConfig+0x1b0>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f023 0207 	bic.w	r2, r3, #7
 8006aa6:	4961      	ldr	r1, [pc, #388]	; (8006c2c <HAL_RCC_ClockConfig+0x1b0>)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aae:	4b5f      	ldr	r3, [pc, #380]	; (8006c2c <HAL_RCC_ClockConfig+0x1b0>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0307 	and.w	r3, r3, #7
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d001      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e0b0      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d04c      	beq.n	8006b66 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d107      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ad4:	4b56      	ldr	r3, [pc, #344]	; (8006c30 <HAL_RCC_ClockConfig+0x1b4>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d121      	bne.n	8006b24 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e09e      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d107      	bne.n	8006afc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006aec:	4b50      	ldr	r3, [pc, #320]	; (8006c30 <HAL_RCC_ClockConfig+0x1b4>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d115      	bne.n	8006b24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e092      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d107      	bne.n	8006b14 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b04:	4b4a      	ldr	r3, [pc, #296]	; (8006c30 <HAL_RCC_ClockConfig+0x1b4>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d109      	bne.n	8006b24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e086      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b14:	4b46      	ldr	r3, [pc, #280]	; (8006c30 <HAL_RCC_ClockConfig+0x1b4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e07e      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b24:	4b42      	ldr	r3, [pc, #264]	; (8006c30 <HAL_RCC_ClockConfig+0x1b4>)
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f023 0203 	bic.w	r2, r3, #3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	493f      	ldr	r1, [pc, #252]	; (8006c30 <HAL_RCC_ClockConfig+0x1b4>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b36:	f7fb fdeb 	bl	8002710 <HAL_GetTick>
 8006b3a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b3c:	e00a      	b.n	8006b54 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b3e:	f7fb fde7 	bl	8002710 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e066      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b54:	4b36      	ldr	r3, [pc, #216]	; (8006c30 <HAL_RCC_ClockConfig+0x1b4>)
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f003 020c 	and.w	r2, r3, #12
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d1eb      	bne.n	8006b3e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d008      	beq.n	8006b84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b72:	4b2f      	ldr	r3, [pc, #188]	; (8006c30 <HAL_RCC_ClockConfig+0x1b4>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	492c      	ldr	r1, [pc, #176]	; (8006c30 <HAL_RCC_ClockConfig+0x1b4>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b84:	4b29      	ldr	r3, [pc, #164]	; (8006c2c <HAL_RCC_ClockConfig+0x1b0>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0307 	and.w	r3, r3, #7
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d210      	bcs.n	8006bb4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b92:	4b26      	ldr	r3, [pc, #152]	; (8006c2c <HAL_RCC_ClockConfig+0x1b0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f023 0207 	bic.w	r2, r3, #7
 8006b9a:	4924      	ldr	r1, [pc, #144]	; (8006c2c <HAL_RCC_ClockConfig+0x1b0>)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ba2:	4b22      	ldr	r3, [pc, #136]	; (8006c2c <HAL_RCC_ClockConfig+0x1b0>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d001      	beq.n	8006bb4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e036      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0304 	and.w	r3, r3, #4
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d008      	beq.n	8006bd2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bc0:	4b1b      	ldr	r3, [pc, #108]	; (8006c30 <HAL_RCC_ClockConfig+0x1b4>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	4918      	ldr	r1, [pc, #96]	; (8006c30 <HAL_RCC_ClockConfig+0x1b4>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0308 	and.w	r3, r3, #8
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d009      	beq.n	8006bf2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bde:	4b14      	ldr	r3, [pc, #80]	; (8006c30 <HAL_RCC_ClockConfig+0x1b4>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	4910      	ldr	r1, [pc, #64]	; (8006c30 <HAL_RCC_ClockConfig+0x1b4>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006bf2:	f000 f825 	bl	8006c40 <HAL_RCC_GetSysClockFreq>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	4b0d      	ldr	r3, [pc, #52]	; (8006c30 <HAL_RCC_ClockConfig+0x1b4>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	091b      	lsrs	r3, r3, #4
 8006bfe:	f003 030f 	and.w	r3, r3, #15
 8006c02:	490c      	ldr	r1, [pc, #48]	; (8006c34 <HAL_RCC_ClockConfig+0x1b8>)
 8006c04:	5ccb      	ldrb	r3, [r1, r3]
 8006c06:	f003 031f 	and.w	r3, r3, #31
 8006c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c0e:	4a0a      	ldr	r2, [pc, #40]	; (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006c12:	4b0a      	ldr	r3, [pc, #40]	; (8006c3c <HAL_RCC_ClockConfig+0x1c0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fb fd2a 	bl	8002670 <HAL_InitTick>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	72fb      	strb	r3, [r7, #11]

  return status;
 8006c20:	7afb      	ldrb	r3, [r7, #11]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	40022000 	.word	0x40022000
 8006c30:	40021000 	.word	0x40021000
 8006c34:	08009278 	.word	0x08009278
 8006c38:	20000008 	.word	0x20000008
 8006c3c:	2000000c 	.word	0x2000000c

08006c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b089      	sub	sp, #36	; 0x24
 8006c44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	61fb      	str	r3, [r7, #28]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c4e:	4b3e      	ldr	r3, [pc, #248]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 030c 	and.w	r3, r3, #12
 8006c56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c58:	4b3b      	ldr	r3, [pc, #236]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	f003 0303 	and.w	r3, r3, #3
 8006c60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d005      	beq.n	8006c74 <HAL_RCC_GetSysClockFreq+0x34>
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	2b0c      	cmp	r3, #12
 8006c6c:	d121      	bne.n	8006cb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d11e      	bne.n	8006cb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006c74:	4b34      	ldr	r3, [pc, #208]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d107      	bne.n	8006c90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006c80:	4b31      	ldr	r3, [pc, #196]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c86:	0a1b      	lsrs	r3, r3, #8
 8006c88:	f003 030f 	and.w	r3, r3, #15
 8006c8c:	61fb      	str	r3, [r7, #28]
 8006c8e:	e005      	b.n	8006c9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006c90:	4b2d      	ldr	r3, [pc, #180]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	091b      	lsrs	r3, r3, #4
 8006c96:	f003 030f 	and.w	r3, r3, #15
 8006c9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006c9c:	4a2b      	ldr	r2, [pc, #172]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ca4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10d      	bne.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006cb0:	e00a      	b.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	2b04      	cmp	r3, #4
 8006cb6:	d102      	bne.n	8006cbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006cb8:	4b25      	ldr	r3, [pc, #148]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x110>)
 8006cba:	61bb      	str	r3, [r7, #24]
 8006cbc:	e004      	b.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	d101      	bne.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006cc4:	4b23      	ldr	r3, [pc, #140]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x114>)
 8006cc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	2b0c      	cmp	r3, #12
 8006ccc:	d134      	bne.n	8006d38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006cce:	4b1e      	ldr	r3, [pc, #120]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f003 0303 	and.w	r3, r3, #3
 8006cd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d003      	beq.n	8006ce6 <HAL_RCC_GetSysClockFreq+0xa6>
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2b03      	cmp	r3, #3
 8006ce2:	d003      	beq.n	8006cec <HAL_RCC_GetSysClockFreq+0xac>
 8006ce4:	e005      	b.n	8006cf2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006ce6:	4b1a      	ldr	r3, [pc, #104]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x110>)
 8006ce8:	617b      	str	r3, [r7, #20]
      break;
 8006cea:	e005      	b.n	8006cf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006cec:	4b19      	ldr	r3, [pc, #100]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x114>)
 8006cee:	617b      	str	r3, [r7, #20]
      break;
 8006cf0:	e002      	b.n	8006cf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	617b      	str	r3, [r7, #20]
      break;
 8006cf6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cf8:	4b13      	ldr	r3, [pc, #76]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	091b      	lsrs	r3, r3, #4
 8006cfe:	f003 0307 	and.w	r3, r3, #7
 8006d02:	3301      	adds	r3, #1
 8006d04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006d06:	4b10      	ldr	r3, [pc, #64]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	0a1b      	lsrs	r3, r3, #8
 8006d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	fb02 f203 	mul.w	r2, r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d1e:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	0e5b      	lsrs	r3, r3, #25
 8006d24:	f003 0303 	and.w	r3, r3, #3
 8006d28:	3301      	adds	r3, #1
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006d38:	69bb      	ldr	r3, [r7, #24]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3724      	adds	r7, #36	; 0x24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	40021000 	.word	0x40021000
 8006d4c:	08009290 	.word	0x08009290
 8006d50:	00f42400 	.word	0x00f42400
 8006d54:	007a1200 	.word	0x007a1200

08006d58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d5c:	4b03      	ldr	r3, [pc, #12]	; (8006d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	20000008 	.word	0x20000008

08006d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006d74:	f7ff fff0 	bl	8006d58 <HAL_RCC_GetHCLKFreq>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	0a1b      	lsrs	r3, r3, #8
 8006d80:	f003 0307 	and.w	r3, r3, #7
 8006d84:	4904      	ldr	r1, [pc, #16]	; (8006d98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d86:	5ccb      	ldrb	r3, [r1, r3]
 8006d88:	f003 031f 	and.w	r3, r3, #31
 8006d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	40021000 	.word	0x40021000
 8006d98:	08009288 	.word	0x08009288

08006d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006da0:	f7ff ffda 	bl	8006d58 <HAL_RCC_GetHCLKFreq>
 8006da4:	4602      	mov	r2, r0
 8006da6:	4b06      	ldr	r3, [pc, #24]	; (8006dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	0adb      	lsrs	r3, r3, #11
 8006dac:	f003 0307 	and.w	r3, r3, #7
 8006db0:	4904      	ldr	r1, [pc, #16]	; (8006dc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006db2:	5ccb      	ldrb	r3, [r1, r3]
 8006db4:	f003 031f 	and.w	r3, r3, #31
 8006db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	40021000 	.word	0x40021000
 8006dc4:	08009288 	.word	0x08009288

08006dc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006dd4:	4b2a      	ldr	r3, [pc, #168]	; (8006e80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006de0:	f7ff f982 	bl	80060e8 <HAL_PWREx_GetVoltageRange>
 8006de4:	6178      	str	r0, [r7, #20]
 8006de6:	e014      	b.n	8006e12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006de8:	4b25      	ldr	r3, [pc, #148]	; (8006e80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dec:	4a24      	ldr	r2, [pc, #144]	; (8006e80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006df2:	6593      	str	r3, [r2, #88]	; 0x58
 8006df4:	4b22      	ldr	r3, [pc, #136]	; (8006e80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006e00:	f7ff f972 	bl	80060e8 <HAL_PWREx_GetVoltageRange>
 8006e04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006e06:	4b1e      	ldr	r3, [pc, #120]	; (8006e80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0a:	4a1d      	ldr	r2, [pc, #116]	; (8006e80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e18:	d10b      	bne.n	8006e32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b80      	cmp	r3, #128	; 0x80
 8006e1e:	d919      	bls.n	8006e54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2ba0      	cmp	r3, #160	; 0xa0
 8006e24:	d902      	bls.n	8006e2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e26:	2302      	movs	r3, #2
 8006e28:	613b      	str	r3, [r7, #16]
 8006e2a:	e013      	b.n	8006e54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	613b      	str	r3, [r7, #16]
 8006e30:	e010      	b.n	8006e54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b80      	cmp	r3, #128	; 0x80
 8006e36:	d902      	bls.n	8006e3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006e38:	2303      	movs	r3, #3
 8006e3a:	613b      	str	r3, [r7, #16]
 8006e3c:	e00a      	b.n	8006e54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b80      	cmp	r3, #128	; 0x80
 8006e42:	d102      	bne.n	8006e4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e44:	2302      	movs	r3, #2
 8006e46:	613b      	str	r3, [r7, #16]
 8006e48:	e004      	b.n	8006e54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b70      	cmp	r3, #112	; 0x70
 8006e4e:	d101      	bne.n	8006e54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e50:	2301      	movs	r3, #1
 8006e52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006e54:	4b0b      	ldr	r3, [pc, #44]	; (8006e84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f023 0207 	bic.w	r2, r3, #7
 8006e5c:	4909      	ldr	r1, [pc, #36]	; (8006e84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006e64:	4b07      	ldr	r3, [pc, #28]	; (8006e84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d001      	beq.n	8006e76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e000      	b.n	8006e78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3718      	adds	r7, #24
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	40021000 	.word	0x40021000
 8006e84:	40022000 	.word	0x40022000

08006e88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e90:	2300      	movs	r3, #0
 8006e92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e94:	2300      	movs	r3, #0
 8006e96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 809e 	beq.w	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006eaa:	4b46      	ldr	r3, [pc, #280]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e000      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x34>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00d      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ec0:	4b40      	ldr	r3, [pc, #256]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec4:	4a3f      	ldr	r2, [pc, #252]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eca:	6593      	str	r3, [r2, #88]	; 0x58
 8006ecc:	4b3d      	ldr	r3, [pc, #244]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ed4:	60bb      	str	r3, [r7, #8]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006edc:	4b3a      	ldr	r3, [pc, #232]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a39      	ldr	r2, [pc, #228]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ee6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ee8:	f7fb fc12 	bl	8002710 <HAL_GetTick>
 8006eec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006eee:	e009      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ef0:	f7fb fc0e 	bl	8002710 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d902      	bls.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	74fb      	strb	r3, [r7, #19]
        break;
 8006f02:	e005      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f04:	4b30      	ldr	r3, [pc, #192]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0ef      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8006f10:	7cfb      	ldrb	r3, [r7, #19]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d15a      	bne.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f16:	4b2b      	ldr	r3, [pc, #172]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d01e      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d019      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f32:	4b24      	ldr	r3, [pc, #144]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f3c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f3e:	4b21      	ldr	r3, [pc, #132]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f44:	4a1f      	ldr	r2, [pc, #124]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f4e:	4b1d      	ldr	r3, [pc, #116]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f54:	4a1b      	ldr	r2, [pc, #108]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f5e:	4a19      	ldr	r2, [pc, #100]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d016      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f70:	f7fb fbce 	bl	8002710 <HAL_GetTick>
 8006f74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f76:	e00b      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f78:	f7fb fbca 	bl	8002710 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d902      	bls.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	74fb      	strb	r3, [r7, #19]
            break;
 8006f8e:	e006      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f90:	4b0c      	ldr	r3, [pc, #48]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0ec      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8006f9e:	7cfb      	ldrb	r3, [r7, #19]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10b      	bne.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fa4:	4b07      	ldr	r3, [pc, #28]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006faa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb2:	4904      	ldr	r1, [pc, #16]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006fba:	e009      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fbc:	7cfb      	ldrb	r3, [r7, #19]
 8006fbe:	74bb      	strb	r3, [r7, #18]
 8006fc0:	e006      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8006fc2:	bf00      	nop
 8006fc4:	40021000 	.word	0x40021000
 8006fc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fcc:	7cfb      	ldrb	r3, [r7, #19]
 8006fce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fd0:	7c7b      	ldrb	r3, [r7, #17]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d105      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fd6:	4b6e      	ldr	r3, [pc, #440]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fda:	4a6d      	ldr	r2, [pc, #436]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fe0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fee:	4b68      	ldr	r3, [pc, #416]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff4:	f023 0203 	bic.w	r2, r3, #3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	4964      	ldr	r1, [pc, #400]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00a      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007010:	4b5f      	ldr	r3, [pc, #380]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007016:	f023 020c 	bic.w	r2, r3, #12
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	495c      	ldr	r1, [pc, #368]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007020:	4313      	orrs	r3, r2
 8007022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0304 	and.w	r3, r3, #4
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007032:	4b57      	ldr	r3, [pc, #348]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007038:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	4953      	ldr	r1, [pc, #332]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007042:	4313      	orrs	r3, r2
 8007044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00a      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007054:	4b4e      	ldr	r3, [pc, #312]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800705a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	494b      	ldr	r1, [pc, #300]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007064:	4313      	orrs	r3, r2
 8007066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00a      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007076:	4b46      	ldr	r3, [pc, #280]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	4942      	ldr	r1, [pc, #264]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007086:	4313      	orrs	r3, r2
 8007088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00a      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007098:	4b3d      	ldr	r3, [pc, #244]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800709a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800709e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	493a      	ldr	r1, [pc, #232]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00a      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070ba:	4b35      	ldr	r3, [pc, #212]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80070bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	4931      	ldr	r1, [pc, #196]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00a      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070dc:	4b2c      	ldr	r3, [pc, #176]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80070de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	4929      	ldr	r1, [pc, #164]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80070fe:	4b24      	ldr	r3, [pc, #144]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007104:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	69db      	ldr	r3, [r3, #28]
 800710c:	4920      	ldr	r1, [pc, #128]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800710e:	4313      	orrs	r3, r2
 8007110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d015      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007120:	4b1b      	ldr	r3, [pc, #108]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007126:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712e:	4918      	ldr	r1, [pc, #96]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007130:	4313      	orrs	r3, r2
 8007132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800713e:	d105      	bne.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007140:	4b13      	ldr	r3, [pc, #76]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	4a12      	ldr	r2, [pc, #72]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800714a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d015      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007158:	4b0d      	ldr	r3, [pc, #52]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800715a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800715e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	490a      	ldr	r1, [pc, #40]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007168:	4313      	orrs	r3, r2
 800716a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007172:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007176:	d105      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007178:	4b05      	ldr	r3, [pc, #20]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	4a04      	ldr	r2, [pc, #16]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800717e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007182:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007184:	7cbb      	ldrb	r3, [r7, #18]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	40021000 	.word	0x40021000

08007194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e049      	b.n	800723a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d106      	bne.n	80071c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7fa fd80 	bl	8001cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2202      	movs	r2, #2
 80071c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3304      	adds	r3, #4
 80071d0:	4619      	mov	r1, r3
 80071d2:	4610      	mov	r0, r2
 80071d4:	f000 fd68 	bl	8007ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b01      	cmp	r3, #1
 8007256:	d001      	beq.n	800725c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e03b      	b.n	80072d4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2202      	movs	r2, #2
 8007260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68da      	ldr	r2, [r3, #12]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 0201 	orr.w	r2, r2, #1
 8007272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a19      	ldr	r2, [pc, #100]	; (80072e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d009      	beq.n	8007292 <HAL_TIM_Base_Start_IT+0x4e>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007286:	d004      	beq.n	8007292 <HAL_TIM_Base_Start_IT+0x4e>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a15      	ldr	r2, [pc, #84]	; (80072e4 <HAL_TIM_Base_Start_IT+0xa0>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d115      	bne.n	80072be <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <HAL_TIM_Base_Start_IT+0xa4>)
 800729a:	4013      	ands	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b06      	cmp	r3, #6
 80072a2:	d015      	beq.n	80072d0 <HAL_TIM_Base_Start_IT+0x8c>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072aa:	d011      	beq.n	80072d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0201 	orr.w	r2, r2, #1
 80072ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072bc:	e008      	b.n	80072d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f042 0201 	orr.w	r2, r2, #1
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	e000      	b.n	80072d2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	40012c00 	.word	0x40012c00
 80072e4:	40014000 	.word	0x40014000
 80072e8:	00010007 	.word	0x00010007

080072ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 0201 	bic.w	r2, r2, #1
 8007302:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6a1a      	ldr	r2, [r3, #32]
 800730a:	f241 1311 	movw	r3, #4369	; 0x1111
 800730e:	4013      	ands	r3, r2
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10f      	bne.n	8007334 <HAL_TIM_Base_Stop_IT+0x48>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6a1a      	ldr	r2, [r3, #32]
 800731a:	f240 4344 	movw	r3, #1092	; 0x444
 800731e:	4013      	ands	r3, r2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d107      	bne.n	8007334 <HAL_TIM_Base_Stop_IT+0x48>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 0201 	bic.w	r2, r2, #1
 8007332:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e049      	b.n	80073f0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	d106      	bne.n	8007376 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f841 	bl	80073f8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2202      	movs	r2, #2
 800737a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3304      	adds	r3, #4
 8007386:	4619      	mov	r1, r3
 8007388:	4610      	mov	r0, r2
 800738a:	f000 fc8d 	bl	8007ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d109      	bne.n	8007430 <HAL_TIM_OC_Start+0x24>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007422:	b2db      	uxtb	r3, r3
 8007424:	2b01      	cmp	r3, #1
 8007426:	bf14      	ite	ne
 8007428:	2301      	movne	r3, #1
 800742a:	2300      	moveq	r3, #0
 800742c:	b2db      	uxtb	r3, r3
 800742e:	e03c      	b.n	80074aa <HAL_TIM_OC_Start+0x9e>
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2b04      	cmp	r3, #4
 8007434:	d109      	bne.n	800744a <HAL_TIM_OC_Start+0x3e>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b01      	cmp	r3, #1
 8007440:	bf14      	ite	ne
 8007442:	2301      	movne	r3, #1
 8007444:	2300      	moveq	r3, #0
 8007446:	b2db      	uxtb	r3, r3
 8007448:	e02f      	b.n	80074aa <HAL_TIM_OC_Start+0x9e>
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	2b08      	cmp	r3, #8
 800744e:	d109      	bne.n	8007464 <HAL_TIM_OC_Start+0x58>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b01      	cmp	r3, #1
 800745a:	bf14      	ite	ne
 800745c:	2301      	movne	r3, #1
 800745e:	2300      	moveq	r3, #0
 8007460:	b2db      	uxtb	r3, r3
 8007462:	e022      	b.n	80074aa <HAL_TIM_OC_Start+0x9e>
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	2b0c      	cmp	r3, #12
 8007468:	d109      	bne.n	800747e <HAL_TIM_OC_Start+0x72>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b01      	cmp	r3, #1
 8007474:	bf14      	ite	ne
 8007476:	2301      	movne	r3, #1
 8007478:	2300      	moveq	r3, #0
 800747a:	b2db      	uxtb	r3, r3
 800747c:	e015      	b.n	80074aa <HAL_TIM_OC_Start+0x9e>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b10      	cmp	r3, #16
 8007482:	d109      	bne.n	8007498 <HAL_TIM_OC_Start+0x8c>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b01      	cmp	r3, #1
 800748e:	bf14      	ite	ne
 8007490:	2301      	movne	r3, #1
 8007492:	2300      	moveq	r3, #0
 8007494:	b2db      	uxtb	r3, r3
 8007496:	e008      	b.n	80074aa <HAL_TIM_OC_Start+0x9e>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	bf14      	ite	ne
 80074a4:	2301      	movne	r3, #1
 80074a6:	2300      	moveq	r3, #0
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d001      	beq.n	80074b2 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e07e      	b.n	80075b0 <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d104      	bne.n	80074c2 <HAL_TIM_OC_Start+0xb6>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2202      	movs	r2, #2
 80074bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074c0:	e023      	b.n	800750a <HAL_TIM_OC_Start+0xfe>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b04      	cmp	r3, #4
 80074c6:	d104      	bne.n	80074d2 <HAL_TIM_OC_Start+0xc6>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074d0:	e01b      	b.n	800750a <HAL_TIM_OC_Start+0xfe>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b08      	cmp	r3, #8
 80074d6:	d104      	bne.n	80074e2 <HAL_TIM_OC_Start+0xd6>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074e0:	e013      	b.n	800750a <HAL_TIM_OC_Start+0xfe>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b0c      	cmp	r3, #12
 80074e6:	d104      	bne.n	80074f2 <HAL_TIM_OC_Start+0xe6>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074f0:	e00b      	b.n	800750a <HAL_TIM_OC_Start+0xfe>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b10      	cmp	r3, #16
 80074f6:	d104      	bne.n	8007502 <HAL_TIM_OC_Start+0xf6>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007500:	e003      	b.n	800750a <HAL_TIM_OC_Start+0xfe>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2202      	movs	r2, #2
 8007506:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2201      	movs	r2, #1
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	4618      	mov	r0, r3
 8007514:	f000 ff44 	bl	80083a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a26      	ldr	r2, [pc, #152]	; (80075b8 <HAL_TIM_OC_Start+0x1ac>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d009      	beq.n	8007536 <HAL_TIM_OC_Start+0x12a>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a25      	ldr	r2, [pc, #148]	; (80075bc <HAL_TIM_OC_Start+0x1b0>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d004      	beq.n	8007536 <HAL_TIM_OC_Start+0x12a>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a23      	ldr	r2, [pc, #140]	; (80075c0 <HAL_TIM_OC_Start+0x1b4>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d101      	bne.n	800753a <HAL_TIM_OC_Start+0x12e>
 8007536:	2301      	movs	r3, #1
 8007538:	e000      	b.n	800753c <HAL_TIM_OC_Start+0x130>
 800753a:	2300      	movs	r3, #0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d007      	beq.n	8007550 <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800754e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a18      	ldr	r2, [pc, #96]	; (80075b8 <HAL_TIM_OC_Start+0x1ac>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d009      	beq.n	800756e <HAL_TIM_OC_Start+0x162>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007562:	d004      	beq.n	800756e <HAL_TIM_OC_Start+0x162>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a14      	ldr	r2, [pc, #80]	; (80075bc <HAL_TIM_OC_Start+0x1b0>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d115      	bne.n	800759a <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	4b13      	ldr	r3, [pc, #76]	; (80075c4 <HAL_TIM_OC_Start+0x1b8>)
 8007576:	4013      	ands	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b06      	cmp	r3, #6
 800757e:	d015      	beq.n	80075ac <HAL_TIM_OC_Start+0x1a0>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007586:	d011      	beq.n	80075ac <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f042 0201 	orr.w	r2, r2, #1
 8007596:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007598:	e008      	b.n	80075ac <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f042 0201 	orr.w	r2, r2, #1
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	e000      	b.n	80075ae <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	40012c00 	.word	0x40012c00
 80075bc:	40014000 	.word	0x40014000
 80075c0:	40014400 	.word	0x40014400
 80075c4:	00010007 	.word	0x00010007

080075c8 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2200      	movs	r2, #0
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fee0 	bl	80083a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a39      	ldr	r2, [pc, #228]	; (80076cc <HAL_TIM_OC_Stop+0x104>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d009      	beq.n	80075fe <HAL_TIM_OC_Stop+0x36>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a38      	ldr	r2, [pc, #224]	; (80076d0 <HAL_TIM_OC_Stop+0x108>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d004      	beq.n	80075fe <HAL_TIM_OC_Stop+0x36>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a36      	ldr	r2, [pc, #216]	; (80076d4 <HAL_TIM_OC_Stop+0x10c>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d101      	bne.n	8007602 <HAL_TIM_OC_Stop+0x3a>
 80075fe:	2301      	movs	r3, #1
 8007600:	e000      	b.n	8007604 <HAL_TIM_OC_Stop+0x3c>
 8007602:	2300      	movs	r3, #0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d017      	beq.n	8007638 <HAL_TIM_OC_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6a1a      	ldr	r2, [r3, #32]
 800760e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007612:	4013      	ands	r3, r2
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10f      	bne.n	8007638 <HAL_TIM_OC_Stop+0x70>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6a1a      	ldr	r2, [r3, #32]
 800761e:	f240 4344 	movw	r3, #1092	; 0x444
 8007622:	4013      	ands	r3, r2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d107      	bne.n	8007638 <HAL_TIM_OC_Stop+0x70>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007636:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6a1a      	ldr	r2, [r3, #32]
 800763e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007642:	4013      	ands	r3, r2
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10f      	bne.n	8007668 <HAL_TIM_OC_Stop+0xa0>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6a1a      	ldr	r2, [r3, #32]
 800764e:	f240 4344 	movw	r3, #1092	; 0x444
 8007652:	4013      	ands	r3, r2
 8007654:	2b00      	cmp	r3, #0
 8007656:	d107      	bne.n	8007668 <HAL_TIM_OC_Stop+0xa0>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 0201 	bic.w	r2, r2, #1
 8007666:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d104      	bne.n	8007678 <HAL_TIM_OC_Stop+0xb0>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007676:	e023      	b.n	80076c0 <HAL_TIM_OC_Stop+0xf8>
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2b04      	cmp	r3, #4
 800767c:	d104      	bne.n	8007688 <HAL_TIM_OC_Stop+0xc0>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007686:	e01b      	b.n	80076c0 <HAL_TIM_OC_Stop+0xf8>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b08      	cmp	r3, #8
 800768c:	d104      	bne.n	8007698 <HAL_TIM_OC_Stop+0xd0>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007696:	e013      	b.n	80076c0 <HAL_TIM_OC_Stop+0xf8>
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b0c      	cmp	r3, #12
 800769c:	d104      	bne.n	80076a8 <HAL_TIM_OC_Stop+0xe0>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076a6:	e00b      	b.n	80076c0 <HAL_TIM_OC_Stop+0xf8>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	2b10      	cmp	r3, #16
 80076ac:	d104      	bne.n	80076b8 <HAL_TIM_OC_Stop+0xf0>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076b6:	e003      	b.n	80076c0 <HAL_TIM_OC_Stop+0xf8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	40012c00 	.word	0x40012c00
 80076d0:	40014000 	.word	0x40014000
 80076d4:	40014400 	.word	0x40014400

080076d8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e041      	b.n	8007770 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d106      	bne.n	8007706 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f839 	bl	8007778 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2202      	movs	r2, #2
 800770a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3304      	adds	r3, #4
 8007716:	4619      	mov	r1, r3
 8007718:	4610      	mov	r0, r2
 800771a:	f000 fac5 	bl	8007ca8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f022 0208 	bic.w	r2, r2, #8
 800772c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6819      	ldr	r1, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d122      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d11b      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f06f 0202 	mvn.w	r2, #2
 80077b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	f003 0303 	and.w	r3, r3, #3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fa4c 	bl	8007c6c <HAL_TIM_IC_CaptureCallback>
 80077d4:	e005      	b.n	80077e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fa3e 	bl	8007c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fa4f 	bl	8007c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f003 0304 	and.w	r3, r3, #4
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d122      	bne.n	800783c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b04      	cmp	r3, #4
 8007802:	d11b      	bne.n	800783c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f06f 0204 	mvn.w	r2, #4
 800780c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2202      	movs	r2, #2
 8007812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fa22 	bl	8007c6c <HAL_TIM_IC_CaptureCallback>
 8007828:	e005      	b.n	8007836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fa14 	bl	8007c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fa25 	bl	8007c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	f003 0308 	and.w	r3, r3, #8
 8007846:	2b08      	cmp	r3, #8
 8007848:	d122      	bne.n	8007890 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f003 0308 	and.w	r3, r3, #8
 8007854:	2b08      	cmp	r3, #8
 8007856:	d11b      	bne.n	8007890 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f06f 0208 	mvn.w	r2, #8
 8007860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2204      	movs	r2, #4
 8007866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	69db      	ldr	r3, [r3, #28]
 800786e:	f003 0303 	and.w	r3, r3, #3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f9f8 	bl	8007c6c <HAL_TIM_IC_CaptureCallback>
 800787c:	e005      	b.n	800788a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f9ea 	bl	8007c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f9fb 	bl	8007c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	f003 0310 	and.w	r3, r3, #16
 800789a:	2b10      	cmp	r3, #16
 800789c:	d122      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f003 0310 	and.w	r3, r3, #16
 80078a8:	2b10      	cmp	r3, #16
 80078aa:	d11b      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f06f 0210 	mvn.w	r2, #16
 80078b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2208      	movs	r2, #8
 80078ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f9ce 	bl	8007c6c <HAL_TIM_IC_CaptureCallback>
 80078d0:	e005      	b.n	80078de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f9c0 	bl	8007c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f9d1 	bl	8007c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d10e      	bne.n	8007910 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d107      	bne.n	8007910 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f06f 0201 	mvn.w	r2, #1
 8007908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f99a 	bl	8007c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800791a:	2b80      	cmp	r3, #128	; 0x80
 800791c:	d10e      	bne.n	800793c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007928:	2b80      	cmp	r3, #128	; 0x80
 800792a:	d107      	bne.n	800793c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fdc8 	bl	80084cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800794a:	d10e      	bne.n	800796a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007956:	2b80      	cmp	r3, #128	; 0x80
 8007958:	d107      	bne.n	800796a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fdbb 	bl	80084e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007974:	2b40      	cmp	r3, #64	; 0x40
 8007976:	d10e      	bne.n	8007996 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007982:	2b40      	cmp	r3, #64	; 0x40
 8007984:	d107      	bne.n	8007996 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800798e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f97f 	bl	8007c94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	f003 0320 	and.w	r3, r3, #32
 80079a0:	2b20      	cmp	r3, #32
 80079a2:	d10e      	bne.n	80079c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b20      	cmp	r3, #32
 80079b0:	d107      	bne.n	80079c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f06f 0220 	mvn.w	r2, #32
 80079ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fd7b 	bl	80084b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079c2:	bf00      	nop
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d101      	bne.n	80079e6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80079e2:	2302      	movs	r3, #2
 80079e4:	e064      	b.n	8007ab0 <HAL_TIM_OC_ConfigChannel+0xe4>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b14      	cmp	r3, #20
 80079f2:	d857      	bhi.n	8007aa4 <HAL_TIM_OC_ConfigChannel+0xd8>
 80079f4:	a201      	add	r2, pc, #4	; (adr r2, 80079fc <HAL_TIM_OC_ConfigChannel+0x30>)
 80079f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fa:	bf00      	nop
 80079fc:	08007a51 	.word	0x08007a51
 8007a00:	08007aa5 	.word	0x08007aa5
 8007a04:	08007aa5 	.word	0x08007aa5
 8007a08:	08007aa5 	.word	0x08007aa5
 8007a0c:	08007a5f 	.word	0x08007a5f
 8007a10:	08007aa5 	.word	0x08007aa5
 8007a14:	08007aa5 	.word	0x08007aa5
 8007a18:	08007aa5 	.word	0x08007aa5
 8007a1c:	08007a6d 	.word	0x08007a6d
 8007a20:	08007aa5 	.word	0x08007aa5
 8007a24:	08007aa5 	.word	0x08007aa5
 8007a28:	08007aa5 	.word	0x08007aa5
 8007a2c:	08007a7b 	.word	0x08007a7b
 8007a30:	08007aa5 	.word	0x08007aa5
 8007a34:	08007aa5 	.word	0x08007aa5
 8007a38:	08007aa5 	.word	0x08007aa5
 8007a3c:	08007a89 	.word	0x08007a89
 8007a40:	08007aa5 	.word	0x08007aa5
 8007a44:	08007aa5 	.word	0x08007aa5
 8007a48:	08007aa5 	.word	0x08007aa5
 8007a4c:	08007a97 	.word	0x08007a97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68b9      	ldr	r1, [r7, #8]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 f98a 	bl	8007d70 <TIM_OC1_SetConfig>
      break;
 8007a5c:	e023      	b.n	8007aa6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68b9      	ldr	r1, [r7, #8]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 f9ff 	bl	8007e68 <TIM_OC2_SetConfig>
      break;
 8007a6a:	e01c      	b.n	8007aa6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68b9      	ldr	r1, [r7, #8]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 fa72 	bl	8007f5c <TIM_OC3_SetConfig>
      break;
 8007a78:	e015      	b.n	8007aa6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68b9      	ldr	r1, [r7, #8]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 fae3 	bl	800804c <TIM_OC4_SetConfig>
      break;
 8007a86:	e00e      	b.n	8007aa6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68b9      	ldr	r1, [r7, #8]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fb3a 	bl	8008108 <TIM_OC5_SetConfig>
      break;
 8007a94:	e007      	b.n	8007aa6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68b9      	ldr	r1, [r7, #8]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 fb8b 	bl	80081b8 <TIM_OC6_SetConfig>
      break;
 8007aa2:	e000      	b.n	8007aa6 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8007aa4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d101      	bne.n	8007ad0 <HAL_TIM_ConfigClockSource+0x18>
 8007acc:	2302      	movs	r3, #2
 8007ace:	e0b5      	b.n	8007c3c <HAL_TIM_ConfigClockSource+0x184>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2202      	movs	r2, #2
 8007adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007af2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007afa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b0c:	d03e      	beq.n	8007b8c <HAL_TIM_ConfigClockSource+0xd4>
 8007b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b12:	f200 8087 	bhi.w	8007c24 <HAL_TIM_ConfigClockSource+0x16c>
 8007b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b1a:	f000 8085 	beq.w	8007c28 <HAL_TIM_ConfigClockSource+0x170>
 8007b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b22:	d87f      	bhi.n	8007c24 <HAL_TIM_ConfigClockSource+0x16c>
 8007b24:	2b70      	cmp	r3, #112	; 0x70
 8007b26:	d01a      	beq.n	8007b5e <HAL_TIM_ConfigClockSource+0xa6>
 8007b28:	2b70      	cmp	r3, #112	; 0x70
 8007b2a:	d87b      	bhi.n	8007c24 <HAL_TIM_ConfigClockSource+0x16c>
 8007b2c:	2b60      	cmp	r3, #96	; 0x60
 8007b2e:	d050      	beq.n	8007bd2 <HAL_TIM_ConfigClockSource+0x11a>
 8007b30:	2b60      	cmp	r3, #96	; 0x60
 8007b32:	d877      	bhi.n	8007c24 <HAL_TIM_ConfigClockSource+0x16c>
 8007b34:	2b50      	cmp	r3, #80	; 0x50
 8007b36:	d03c      	beq.n	8007bb2 <HAL_TIM_ConfigClockSource+0xfa>
 8007b38:	2b50      	cmp	r3, #80	; 0x50
 8007b3a:	d873      	bhi.n	8007c24 <HAL_TIM_ConfigClockSource+0x16c>
 8007b3c:	2b40      	cmp	r3, #64	; 0x40
 8007b3e:	d058      	beq.n	8007bf2 <HAL_TIM_ConfigClockSource+0x13a>
 8007b40:	2b40      	cmp	r3, #64	; 0x40
 8007b42:	d86f      	bhi.n	8007c24 <HAL_TIM_ConfigClockSource+0x16c>
 8007b44:	2b30      	cmp	r3, #48	; 0x30
 8007b46:	d064      	beq.n	8007c12 <HAL_TIM_ConfigClockSource+0x15a>
 8007b48:	2b30      	cmp	r3, #48	; 0x30
 8007b4a:	d86b      	bhi.n	8007c24 <HAL_TIM_ConfigClockSource+0x16c>
 8007b4c:	2b20      	cmp	r3, #32
 8007b4e:	d060      	beq.n	8007c12 <HAL_TIM_ConfigClockSource+0x15a>
 8007b50:	2b20      	cmp	r3, #32
 8007b52:	d867      	bhi.n	8007c24 <HAL_TIM_ConfigClockSource+0x16c>
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d05c      	beq.n	8007c12 <HAL_TIM_ConfigClockSource+0x15a>
 8007b58:	2b10      	cmp	r3, #16
 8007b5a:	d05a      	beq.n	8007c12 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007b5c:	e062      	b.n	8007c24 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6818      	ldr	r0, [r3, #0]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	6899      	ldr	r1, [r3, #8]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	f000 fbf7 	bl	8008360 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b80:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	609a      	str	r2, [r3, #8]
      break;
 8007b8a:	e04e      	b.n	8007c2a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6818      	ldr	r0, [r3, #0]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	6899      	ldr	r1, [r3, #8]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	f000 fbe0 	bl	8008360 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	689a      	ldr	r2, [r3, #8]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bae:	609a      	str	r2, [r3, #8]
      break;
 8007bb0:	e03b      	b.n	8007c2a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6818      	ldr	r0, [r3, #0]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	6859      	ldr	r1, [r3, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	f000 fb54 	bl	800826c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2150      	movs	r1, #80	; 0x50
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f000 fbad 	bl	800832a <TIM_ITRx_SetConfig>
      break;
 8007bd0:	e02b      	b.n	8007c2a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6818      	ldr	r0, [r3, #0]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	6859      	ldr	r1, [r3, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	461a      	mov	r2, r3
 8007be0:	f000 fb73 	bl	80082ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2160      	movs	r1, #96	; 0x60
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 fb9d 	bl	800832a <TIM_ITRx_SetConfig>
      break;
 8007bf0:	e01b      	b.n	8007c2a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6818      	ldr	r0, [r3, #0]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	6859      	ldr	r1, [r3, #4]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f000 fb34 	bl	800826c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2140      	movs	r1, #64	; 0x40
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 fb8d 	bl	800832a <TIM_ITRx_SetConfig>
      break;
 8007c10:	e00b      	b.n	8007c2a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	f000 fb84 	bl	800832a <TIM_ITRx_SetConfig>
        break;
 8007c22:	e002      	b.n	8007c2a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8007c24:	bf00      	nop
 8007c26:	e000      	b.n	8007c2a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8007c28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a2a      	ldr	r2, [pc, #168]	; (8007d64 <TIM_Base_SetConfig+0xbc>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d003      	beq.n	8007cc8 <TIM_Base_SetConfig+0x20>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc6:	d108      	bne.n	8007cda <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a21      	ldr	r2, [pc, #132]	; (8007d64 <TIM_Base_SetConfig+0xbc>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d00b      	beq.n	8007cfa <TIM_Base_SetConfig+0x52>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ce8:	d007      	beq.n	8007cfa <TIM_Base_SetConfig+0x52>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a1e      	ldr	r2, [pc, #120]	; (8007d68 <TIM_Base_SetConfig+0xc0>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d003      	beq.n	8007cfa <TIM_Base_SetConfig+0x52>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a1d      	ldr	r2, [pc, #116]	; (8007d6c <TIM_Base_SetConfig+0xc4>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d108      	bne.n	8007d0c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a0c      	ldr	r2, [pc, #48]	; (8007d64 <TIM_Base_SetConfig+0xbc>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d007      	beq.n	8007d48 <TIM_Base_SetConfig+0xa0>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a0b      	ldr	r2, [pc, #44]	; (8007d68 <TIM_Base_SetConfig+0xc0>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d003      	beq.n	8007d48 <TIM_Base_SetConfig+0xa0>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a0a      	ldr	r2, [pc, #40]	; (8007d6c <TIM_Base_SetConfig+0xc4>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d103      	bne.n	8007d50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	691a      	ldr	r2, [r3, #16]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	615a      	str	r2, [r3, #20]
}
 8007d56:	bf00      	nop
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	40012c00 	.word	0x40012c00
 8007d68:	40014000 	.word	0x40014000
 8007d6c:	40014400 	.word	0x40014400

08007d70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	f023 0201 	bic.w	r2, r3, #1
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f023 0303 	bic.w	r3, r3, #3
 8007daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f023 0302 	bic.w	r3, r3, #2
 8007dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a24      	ldr	r2, [pc, #144]	; (8007e5c <TIM_OC1_SetConfig+0xec>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d007      	beq.n	8007de0 <TIM_OC1_SetConfig+0x70>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a23      	ldr	r2, [pc, #140]	; (8007e60 <TIM_OC1_SetConfig+0xf0>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d003      	beq.n	8007de0 <TIM_OC1_SetConfig+0x70>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a22      	ldr	r2, [pc, #136]	; (8007e64 <TIM_OC1_SetConfig+0xf4>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d10c      	bne.n	8007dfa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f023 0308 	bic.w	r3, r3, #8
 8007de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f023 0304 	bic.w	r3, r3, #4
 8007df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a17      	ldr	r2, [pc, #92]	; (8007e5c <TIM_OC1_SetConfig+0xec>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d007      	beq.n	8007e12 <TIM_OC1_SetConfig+0xa2>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a16      	ldr	r2, [pc, #88]	; (8007e60 <TIM_OC1_SetConfig+0xf0>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d003      	beq.n	8007e12 <TIM_OC1_SetConfig+0xa2>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a15      	ldr	r2, [pc, #84]	; (8007e64 <TIM_OC1_SetConfig+0xf4>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d111      	bne.n	8007e36 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	621a      	str	r2, [r3, #32]
}
 8007e50:	bf00      	nop
 8007e52:	371c      	adds	r7, #28
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	40012c00 	.word	0x40012c00
 8007e60:	40014000 	.word	0x40014000
 8007e64:	40014400 	.word	0x40014400

08007e68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	f023 0210 	bic.w	r2, r3, #16
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	021b      	lsls	r3, r3, #8
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f023 0320 	bic.w	r3, r3, #32
 8007eb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	011b      	lsls	r3, r3, #4
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a22      	ldr	r2, [pc, #136]	; (8007f50 <TIM_OC2_SetConfig+0xe8>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d10d      	bne.n	8007ee8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	011b      	lsls	r3, r3, #4
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ee6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a19      	ldr	r2, [pc, #100]	; (8007f50 <TIM_OC2_SetConfig+0xe8>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d007      	beq.n	8007f00 <TIM_OC2_SetConfig+0x98>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a18      	ldr	r2, [pc, #96]	; (8007f54 <TIM_OC2_SetConfig+0xec>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d003      	beq.n	8007f00 <TIM_OC2_SetConfig+0x98>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a17      	ldr	r2, [pc, #92]	; (8007f58 <TIM_OC2_SetConfig+0xf0>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d113      	bne.n	8007f28 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	695b      	ldr	r3, [r3, #20]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	621a      	str	r2, [r3, #32]
}
 8007f42:	bf00      	nop
 8007f44:	371c      	adds	r7, #28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	40012c00 	.word	0x40012c00
 8007f54:	40014000 	.word	0x40014000
 8007f58:	40014400 	.word	0x40014400

08007f5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b087      	sub	sp, #28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f023 0303 	bic.w	r3, r3, #3
 8007f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	021b      	lsls	r3, r3, #8
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a21      	ldr	r2, [pc, #132]	; (8008040 <TIM_OC3_SetConfig+0xe4>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d10d      	bne.n	8007fda <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	021b      	lsls	r3, r3, #8
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a18      	ldr	r2, [pc, #96]	; (8008040 <TIM_OC3_SetConfig+0xe4>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d007      	beq.n	8007ff2 <TIM_OC3_SetConfig+0x96>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a17      	ldr	r2, [pc, #92]	; (8008044 <TIM_OC3_SetConfig+0xe8>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d003      	beq.n	8007ff2 <TIM_OC3_SetConfig+0x96>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a16      	ldr	r2, [pc, #88]	; (8008048 <TIM_OC3_SetConfig+0xec>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d113      	bne.n	800801a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	011b      	lsls	r3, r3, #4
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	4313      	orrs	r3, r2
 800800c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	011b      	lsls	r3, r3, #4
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	4313      	orrs	r3, r2
 8008018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	685a      	ldr	r2, [r3, #4]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	621a      	str	r2, [r3, #32]
}
 8008034:	bf00      	nop
 8008036:	371c      	adds	r7, #28
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	40012c00 	.word	0x40012c00
 8008044:	40014000 	.word	0x40014000
 8008048:	40014400 	.word	0x40014400

0800804c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800804c:	b480      	push	{r7}
 800804e:	b087      	sub	sp, #28
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800807a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800807e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	021b      	lsls	r3, r3, #8
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	4313      	orrs	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800809a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	031b      	lsls	r3, r3, #12
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a14      	ldr	r2, [pc, #80]	; (80080fc <TIM_OC4_SetConfig+0xb0>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d007      	beq.n	80080c0 <TIM_OC4_SetConfig+0x74>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a13      	ldr	r2, [pc, #76]	; (8008100 <TIM_OC4_SetConfig+0xb4>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d003      	beq.n	80080c0 <TIM_OC4_SetConfig+0x74>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a12      	ldr	r2, [pc, #72]	; (8008104 <TIM_OC4_SetConfig+0xb8>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d109      	bne.n	80080d4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	019b      	lsls	r3, r3, #6
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	621a      	str	r2, [r3, #32]
}
 80080ee:	bf00      	nop
 80080f0:	371c      	adds	r7, #28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	40012c00 	.word	0x40012c00
 8008100:	40014000 	.word	0x40014000
 8008104:	40014400 	.word	0x40014400

08008108 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800812e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800813a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	4313      	orrs	r3, r2
 8008144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800814c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	041b      	lsls	r3, r3, #16
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	4313      	orrs	r3, r2
 8008158:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a13      	ldr	r2, [pc, #76]	; (80081ac <TIM_OC5_SetConfig+0xa4>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d007      	beq.n	8008172 <TIM_OC5_SetConfig+0x6a>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a12      	ldr	r2, [pc, #72]	; (80081b0 <TIM_OC5_SetConfig+0xa8>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d003      	beq.n	8008172 <TIM_OC5_SetConfig+0x6a>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a11      	ldr	r2, [pc, #68]	; (80081b4 <TIM_OC5_SetConfig+0xac>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d109      	bne.n	8008186 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008178:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	021b      	lsls	r3, r3, #8
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	4313      	orrs	r3, r2
 8008184:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	621a      	str	r2, [r3, #32]
}
 80081a0:	bf00      	nop
 80081a2:	371c      	adds	r7, #28
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	40012c00 	.word	0x40012c00
 80081b0:	40014000 	.word	0x40014000
 80081b4:	40014400 	.word	0x40014400

080081b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	021b      	lsls	r3, r3, #8
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80081fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	051b      	lsls	r3, r3, #20
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	4313      	orrs	r3, r2
 800820a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a14      	ldr	r2, [pc, #80]	; (8008260 <TIM_OC6_SetConfig+0xa8>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d007      	beq.n	8008224 <TIM_OC6_SetConfig+0x6c>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a13      	ldr	r2, [pc, #76]	; (8008264 <TIM_OC6_SetConfig+0xac>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d003      	beq.n	8008224 <TIM_OC6_SetConfig+0x6c>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a12      	ldr	r2, [pc, #72]	; (8008268 <TIM_OC6_SetConfig+0xb0>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d109      	bne.n	8008238 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800822a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	029b      	lsls	r3, r3, #10
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	4313      	orrs	r3, r2
 8008236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	621a      	str	r2, [r3, #32]
}
 8008252:	bf00      	nop
 8008254:	371c      	adds	r7, #28
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	40012c00 	.word	0x40012c00
 8008264:	40014000 	.word	0x40014000
 8008268:	40014400 	.word	0x40014400

0800826c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800826c:	b480      	push	{r7}
 800826e:	b087      	sub	sp, #28
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6a1b      	ldr	r3, [r3, #32]
 8008282:	f023 0201 	bic.w	r2, r3, #1
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	011b      	lsls	r3, r3, #4
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	4313      	orrs	r3, r2
 80082a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f023 030a 	bic.w	r3, r3, #10
 80082a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	621a      	str	r2, [r3, #32]
}
 80082be:	bf00      	nop
 80082c0:	371c      	adds	r7, #28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b087      	sub	sp, #28
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	60f8      	str	r0, [r7, #12]
 80082d2:	60b9      	str	r1, [r7, #8]
 80082d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6a1b      	ldr	r3, [r3, #32]
 80082da:	f023 0210 	bic.w	r2, r3, #16
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6a1b      	ldr	r3, [r3, #32]
 80082ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	031b      	lsls	r3, r3, #12
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008306:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	011b      	lsls	r3, r3, #4
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	4313      	orrs	r3, r2
 8008310:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	621a      	str	r2, [r3, #32]
}
 800831e:	bf00      	nop
 8008320:	371c      	adds	r7, #28
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800832a:	b480      	push	{r7}
 800832c:	b085      	sub	sp, #20
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008340:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4313      	orrs	r3, r2
 8008348:	f043 0307 	orr.w	r3, r3, #7
 800834c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	609a      	str	r2, [r3, #8]
}
 8008354:	bf00      	nop
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800837a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	021a      	lsls	r2, r3, #8
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	431a      	orrs	r2, r3
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	4313      	orrs	r3, r2
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	4313      	orrs	r3, r2
 800838c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	609a      	str	r2, [r3, #8]
}
 8008394:	bf00      	nop
 8008396:	371c      	adds	r7, #28
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f003 031f 	and.w	r3, r3, #31
 80083b2:	2201      	movs	r2, #1
 80083b4:	fa02 f303 	lsl.w	r3, r2, r3
 80083b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6a1a      	ldr	r2, [r3, #32]
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	43db      	mvns	r3, r3
 80083c2:	401a      	ands	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a1a      	ldr	r2, [r3, #32]
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	f003 031f 	and.w	r3, r3, #31
 80083d2:	6879      	ldr	r1, [r7, #4]
 80083d4:	fa01 f303 	lsl.w	r3, r1, r3
 80083d8:	431a      	orrs	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	621a      	str	r2, [r3, #32]
}
 80083de:	bf00      	nop
 80083e0:	371c      	adds	r7, #28
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
	...

080083ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d101      	bne.n	8008404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008400:	2302      	movs	r3, #2
 8008402:	e04f      	b.n	80084a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2202      	movs	r2, #2
 8008410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a21      	ldr	r2, [pc, #132]	; (80084b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d108      	bne.n	8008440 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008434:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4313      	orrs	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a14      	ldr	r2, [pc, #80]	; (80084b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d009      	beq.n	8008478 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800846c:	d004      	beq.n	8008478 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a10      	ldr	r2, [pc, #64]	; (80084b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d10c      	bne.n	8008492 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800847e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	4313      	orrs	r3, r2
 8008488:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	40012c00 	.word	0x40012c00
 80084b4:	40014000 	.word	0x40014000

080084b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e040      	b.n	8008588 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800850a:	2b00      	cmp	r3, #0
 800850c:	d106      	bne.n	800851c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7f9 fc76 	bl	8001e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2224      	movs	r2, #36	; 0x24
 8008520:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f022 0201 	bic.w	r2, r2, #1
 8008530:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f968 	bl	8008808 <UART_SetConfig>
 8008538:	4603      	mov	r3, r0
 800853a:	2b01      	cmp	r3, #1
 800853c:	d101      	bne.n	8008542 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e022      	b.n	8008588 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fb90 	bl	8008c70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800855e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	689a      	ldr	r2, [r3, #8]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800856e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f042 0201 	orr.w	r2, r2, #1
 800857e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fc17 	bl	8008db4 <UART_CheckIdleState>
 8008586:	4603      	mov	r3, r0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e02b      	b.n	80085fa <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2224      	movs	r2, #36	; 0x24
 80085a6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f022 0201 	bic.w	r2, r2, #1
 80085b6:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2200      	movs	r2, #0
 80085be:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2200      	movs	r2, #0
 80085c6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2200      	movs	r2, #0
 80085ce:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7f9 fc89 	bl	8001ee8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b08a      	sub	sp, #40	; 0x28
 8008606:	af02      	add	r7, sp, #8
 8008608:	60f8      	str	r0, [r7, #12]
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	603b      	str	r3, [r7, #0]
 800860e:	4613      	mov	r3, r2
 8008610:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008616:	2b20      	cmp	r3, #32
 8008618:	f040 8082 	bne.w	8008720 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d002      	beq.n	8008628 <HAL_UART_Transmit+0x26>
 8008622:	88fb      	ldrh	r3, [r7, #6]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d101      	bne.n	800862c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e07a      	b.n	8008722 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008632:	2b01      	cmp	r3, #1
 8008634:	d101      	bne.n	800863a <HAL_UART_Transmit+0x38>
 8008636:	2302      	movs	r3, #2
 8008638:	e073      	b.n	8008722 <HAL_UART_Transmit+0x120>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2221      	movs	r2, #33	; 0x21
 800864e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008650:	f7fa f85e 	bl	8002710 <HAL_GetTick>
 8008654:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	88fa      	ldrh	r2, [r7, #6]
 800865a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	88fa      	ldrh	r2, [r7, #6]
 8008662:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800866e:	d108      	bne.n	8008682 <HAL_UART_Transmit+0x80>
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d104      	bne.n	8008682 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008678:	2300      	movs	r3, #0
 800867a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	61bb      	str	r3, [r7, #24]
 8008680:	e003      	b.n	800868a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008686:	2300      	movs	r3, #0
 8008688:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008692:	e02d      	b.n	80086f0 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	2200      	movs	r2, #0
 800869c:	2180      	movs	r1, #128	; 0x80
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f000 fbd1 	bl	8008e46 <UART_WaitOnFlagUntilTimeout>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e039      	b.n	8008722 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10b      	bne.n	80086cc <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	881a      	ldrh	r2, [r3, #0]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086c0:	b292      	uxth	r2, r2
 80086c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	3302      	adds	r3, #2
 80086c8:	61bb      	str	r3, [r7, #24]
 80086ca:	e008      	b.n	80086de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	781a      	ldrb	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	b292      	uxth	r2, r2
 80086d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	3301      	adds	r3, #1
 80086dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	3b01      	subs	r3, #1
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1cb      	bne.n	8008694 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	2200      	movs	r2, #0
 8008704:	2140      	movs	r1, #64	; 0x40
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f000 fb9d 	bl	8008e46 <UART_WaitOnFlagUntilTimeout>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e005      	b.n	8008722 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2220      	movs	r2, #32
 800871a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	e000      	b.n	8008722 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008720:	2302      	movs	r3, #2
  }
}
 8008722:	4618      	mov	r0, r3
 8008724:	3720      	adds	r7, #32
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
	...

0800872c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	4613      	mov	r3, r2
 8008738:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800873e:	2b20      	cmp	r3, #32
 8008740:	d131      	bne.n	80087a6 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <HAL_UART_Receive_DMA+0x22>
 8008748:	88fb      	ldrh	r3, [r7, #6]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e02a      	b.n	80087a8 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008758:	2b01      	cmp	r3, #1
 800875a:	d101      	bne.n	8008760 <HAL_UART_Receive_DMA+0x34>
 800875c:	2302      	movs	r3, #2
 800875e:	e023      	b.n	80087a8 <HAL_UART_Receive_DMA+0x7c>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a0f      	ldr	r2, [pc, #60]	; (80087b0 <HAL_UART_Receive_DMA+0x84>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d00e      	beq.n	8008796 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d007      	beq.n	8008796 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008794:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8008796:	88fb      	ldrh	r3, [r7, #6]
 8008798:	461a      	mov	r2, r3
 800879a:	68b9      	ldr	r1, [r7, #8]
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f000 fbcf 	bl	8008f40 <UART_Start_Receive_DMA>
 80087a2:	4603      	mov	r3, r0
 80087a4:	e000      	b.n	80087a8 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80087a6:	2302      	movs	r3, #2
  }
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	40008000 	.word	0x40008000

080087b4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008808:	b5b0      	push	{r4, r5, r7, lr}
 800880a:	b088      	sub	sp, #32
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008810:	2300      	movs	r3, #0
 8008812:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	689a      	ldr	r2, [r3, #8]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	431a      	orrs	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	431a      	orrs	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	69db      	ldr	r3, [r3, #28]
 8008828:	4313      	orrs	r3, r2
 800882a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	4baa      	ldr	r3, [pc, #680]	; (8008adc <UART_SetConfig+0x2d4>)
 8008834:	4013      	ands	r3, r2
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	6812      	ldr	r2, [r2, #0]
 800883a:	69f9      	ldr	r1, [r7, #28]
 800883c:	430b      	orrs	r3, r1
 800883e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68da      	ldr	r2, [r3, #12]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	430a      	orrs	r2, r1
 8008854:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a9f      	ldr	r2, [pc, #636]	; (8008ae0 <UART_SetConfig+0x2d8>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d004      	beq.n	8008870 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a1b      	ldr	r3, [r3, #32]
 800886a:	69fa      	ldr	r2, [r7, #28]
 800886c:	4313      	orrs	r3, r2
 800886e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	69fa      	ldr	r2, [r7, #28]
 8008880:	430a      	orrs	r2, r1
 8008882:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a96      	ldr	r2, [pc, #600]	; (8008ae4 <UART_SetConfig+0x2dc>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d121      	bne.n	80088d2 <UART_SetConfig+0xca>
 800888e:	4b96      	ldr	r3, [pc, #600]	; (8008ae8 <UART_SetConfig+0x2e0>)
 8008890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008894:	f003 0303 	and.w	r3, r3, #3
 8008898:	2b03      	cmp	r3, #3
 800889a:	d817      	bhi.n	80088cc <UART_SetConfig+0xc4>
 800889c:	a201      	add	r2, pc, #4	; (adr r2, 80088a4 <UART_SetConfig+0x9c>)
 800889e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a2:	bf00      	nop
 80088a4:	080088b5 	.word	0x080088b5
 80088a8:	080088c1 	.word	0x080088c1
 80088ac:	080088bb 	.word	0x080088bb
 80088b0:	080088c7 	.word	0x080088c7
 80088b4:	2301      	movs	r3, #1
 80088b6:	76fb      	strb	r3, [r7, #27]
 80088b8:	e096      	b.n	80089e8 <UART_SetConfig+0x1e0>
 80088ba:	2302      	movs	r3, #2
 80088bc:	76fb      	strb	r3, [r7, #27]
 80088be:	e093      	b.n	80089e8 <UART_SetConfig+0x1e0>
 80088c0:	2304      	movs	r3, #4
 80088c2:	76fb      	strb	r3, [r7, #27]
 80088c4:	e090      	b.n	80089e8 <UART_SetConfig+0x1e0>
 80088c6:	2308      	movs	r3, #8
 80088c8:	76fb      	strb	r3, [r7, #27]
 80088ca:	e08d      	b.n	80089e8 <UART_SetConfig+0x1e0>
 80088cc:	2310      	movs	r3, #16
 80088ce:	76fb      	strb	r3, [r7, #27]
 80088d0:	e08a      	b.n	80089e8 <UART_SetConfig+0x1e0>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a85      	ldr	r2, [pc, #532]	; (8008aec <UART_SetConfig+0x2e4>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d132      	bne.n	8008942 <UART_SetConfig+0x13a>
 80088dc:	4b82      	ldr	r3, [pc, #520]	; (8008ae8 <UART_SetConfig+0x2e0>)
 80088de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e2:	f003 030c 	and.w	r3, r3, #12
 80088e6:	2b0c      	cmp	r3, #12
 80088e8:	d828      	bhi.n	800893c <UART_SetConfig+0x134>
 80088ea:	a201      	add	r2, pc, #4	; (adr r2, 80088f0 <UART_SetConfig+0xe8>)
 80088ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f0:	08008925 	.word	0x08008925
 80088f4:	0800893d 	.word	0x0800893d
 80088f8:	0800893d 	.word	0x0800893d
 80088fc:	0800893d 	.word	0x0800893d
 8008900:	08008931 	.word	0x08008931
 8008904:	0800893d 	.word	0x0800893d
 8008908:	0800893d 	.word	0x0800893d
 800890c:	0800893d 	.word	0x0800893d
 8008910:	0800892b 	.word	0x0800892b
 8008914:	0800893d 	.word	0x0800893d
 8008918:	0800893d 	.word	0x0800893d
 800891c:	0800893d 	.word	0x0800893d
 8008920:	08008937 	.word	0x08008937
 8008924:	2300      	movs	r3, #0
 8008926:	76fb      	strb	r3, [r7, #27]
 8008928:	e05e      	b.n	80089e8 <UART_SetConfig+0x1e0>
 800892a:	2302      	movs	r3, #2
 800892c:	76fb      	strb	r3, [r7, #27]
 800892e:	e05b      	b.n	80089e8 <UART_SetConfig+0x1e0>
 8008930:	2304      	movs	r3, #4
 8008932:	76fb      	strb	r3, [r7, #27]
 8008934:	e058      	b.n	80089e8 <UART_SetConfig+0x1e0>
 8008936:	2308      	movs	r3, #8
 8008938:	76fb      	strb	r3, [r7, #27]
 800893a:	e055      	b.n	80089e8 <UART_SetConfig+0x1e0>
 800893c:	2310      	movs	r3, #16
 800893e:	76fb      	strb	r3, [r7, #27]
 8008940:	e052      	b.n	80089e8 <UART_SetConfig+0x1e0>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a6a      	ldr	r2, [pc, #424]	; (8008af0 <UART_SetConfig+0x2e8>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d120      	bne.n	800898e <UART_SetConfig+0x186>
 800894c:	4b66      	ldr	r3, [pc, #408]	; (8008ae8 <UART_SetConfig+0x2e0>)
 800894e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008952:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008956:	2b30      	cmp	r3, #48	; 0x30
 8008958:	d013      	beq.n	8008982 <UART_SetConfig+0x17a>
 800895a:	2b30      	cmp	r3, #48	; 0x30
 800895c:	d814      	bhi.n	8008988 <UART_SetConfig+0x180>
 800895e:	2b20      	cmp	r3, #32
 8008960:	d009      	beq.n	8008976 <UART_SetConfig+0x16e>
 8008962:	2b20      	cmp	r3, #32
 8008964:	d810      	bhi.n	8008988 <UART_SetConfig+0x180>
 8008966:	2b00      	cmp	r3, #0
 8008968:	d002      	beq.n	8008970 <UART_SetConfig+0x168>
 800896a:	2b10      	cmp	r3, #16
 800896c:	d006      	beq.n	800897c <UART_SetConfig+0x174>
 800896e:	e00b      	b.n	8008988 <UART_SetConfig+0x180>
 8008970:	2300      	movs	r3, #0
 8008972:	76fb      	strb	r3, [r7, #27]
 8008974:	e038      	b.n	80089e8 <UART_SetConfig+0x1e0>
 8008976:	2302      	movs	r3, #2
 8008978:	76fb      	strb	r3, [r7, #27]
 800897a:	e035      	b.n	80089e8 <UART_SetConfig+0x1e0>
 800897c:	2304      	movs	r3, #4
 800897e:	76fb      	strb	r3, [r7, #27]
 8008980:	e032      	b.n	80089e8 <UART_SetConfig+0x1e0>
 8008982:	2308      	movs	r3, #8
 8008984:	76fb      	strb	r3, [r7, #27]
 8008986:	e02f      	b.n	80089e8 <UART_SetConfig+0x1e0>
 8008988:	2310      	movs	r3, #16
 800898a:	76fb      	strb	r3, [r7, #27]
 800898c:	e02c      	b.n	80089e8 <UART_SetConfig+0x1e0>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a53      	ldr	r2, [pc, #332]	; (8008ae0 <UART_SetConfig+0x2d8>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d125      	bne.n	80089e4 <UART_SetConfig+0x1dc>
 8008998:	4b53      	ldr	r3, [pc, #332]	; (8008ae8 <UART_SetConfig+0x2e0>)
 800899a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800899e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80089a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089a6:	d017      	beq.n	80089d8 <UART_SetConfig+0x1d0>
 80089a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089ac:	d817      	bhi.n	80089de <UART_SetConfig+0x1d6>
 80089ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089b2:	d00b      	beq.n	80089cc <UART_SetConfig+0x1c4>
 80089b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089b8:	d811      	bhi.n	80089de <UART_SetConfig+0x1d6>
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <UART_SetConfig+0x1be>
 80089be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089c2:	d006      	beq.n	80089d2 <UART_SetConfig+0x1ca>
 80089c4:	e00b      	b.n	80089de <UART_SetConfig+0x1d6>
 80089c6:	2300      	movs	r3, #0
 80089c8:	76fb      	strb	r3, [r7, #27]
 80089ca:	e00d      	b.n	80089e8 <UART_SetConfig+0x1e0>
 80089cc:	2302      	movs	r3, #2
 80089ce:	76fb      	strb	r3, [r7, #27]
 80089d0:	e00a      	b.n	80089e8 <UART_SetConfig+0x1e0>
 80089d2:	2304      	movs	r3, #4
 80089d4:	76fb      	strb	r3, [r7, #27]
 80089d6:	e007      	b.n	80089e8 <UART_SetConfig+0x1e0>
 80089d8:	2308      	movs	r3, #8
 80089da:	76fb      	strb	r3, [r7, #27]
 80089dc:	e004      	b.n	80089e8 <UART_SetConfig+0x1e0>
 80089de:	2310      	movs	r3, #16
 80089e0:	76fb      	strb	r3, [r7, #27]
 80089e2:	e001      	b.n	80089e8 <UART_SetConfig+0x1e0>
 80089e4:	2310      	movs	r3, #16
 80089e6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a3c      	ldr	r2, [pc, #240]	; (8008ae0 <UART_SetConfig+0x2d8>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	f040 8082 	bne.w	8008af8 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089f4:	7efb      	ldrb	r3, [r7, #27]
 80089f6:	2b08      	cmp	r3, #8
 80089f8:	d823      	bhi.n	8008a42 <UART_SetConfig+0x23a>
 80089fa:	a201      	add	r2, pc, #4	; (adr r2, 8008a00 <UART_SetConfig+0x1f8>)
 80089fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a00:	08008a25 	.word	0x08008a25
 8008a04:	08008a43 	.word	0x08008a43
 8008a08:	08008a2d 	.word	0x08008a2d
 8008a0c:	08008a43 	.word	0x08008a43
 8008a10:	08008a33 	.word	0x08008a33
 8008a14:	08008a43 	.word	0x08008a43
 8008a18:	08008a43 	.word	0x08008a43
 8008a1c:	08008a43 	.word	0x08008a43
 8008a20:	08008a3b 	.word	0x08008a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a24:	f7fe f9a4 	bl	8006d70 <HAL_RCC_GetPCLK1Freq>
 8008a28:	6178      	str	r0, [r7, #20]
        break;
 8008a2a:	e00f      	b.n	8008a4c <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a2c:	4b31      	ldr	r3, [pc, #196]	; (8008af4 <UART_SetConfig+0x2ec>)
 8008a2e:	617b      	str	r3, [r7, #20]
        break;
 8008a30:	e00c      	b.n	8008a4c <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a32:	f7fe f905 	bl	8006c40 <HAL_RCC_GetSysClockFreq>
 8008a36:	6178      	str	r0, [r7, #20]
        break;
 8008a38:	e008      	b.n	8008a4c <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a3e:	617b      	str	r3, [r7, #20]
        break;
 8008a40:	e004      	b.n	8008a4c <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	76bb      	strb	r3, [r7, #26]
        break;
 8008a4a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 8100 	beq.w	8008c54 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	005b      	lsls	r3, r3, #1
 8008a5c:	4413      	add	r3, r2
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d305      	bcc.n	8008a70 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a6a:	697a      	ldr	r2, [r7, #20]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d902      	bls.n	8008a76 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	76bb      	strb	r3, [r7, #26]
 8008a74:	e0ee      	b.n	8008c54 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f04f 0100 	mov.w	r1, #0
 8008a7e:	f04f 0200 	mov.w	r2, #0
 8008a82:	f04f 0300 	mov.w	r3, #0
 8008a86:	020b      	lsls	r3, r1, #8
 8008a88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a8c:	0202      	lsls	r2, r0, #8
 8008a8e:	6879      	ldr	r1, [r7, #4]
 8008a90:	6849      	ldr	r1, [r1, #4]
 8008a92:	0849      	lsrs	r1, r1, #1
 8008a94:	4608      	mov	r0, r1
 8008a96:	f04f 0100 	mov.w	r1, #0
 8008a9a:	1814      	adds	r4, r2, r0
 8008a9c:	eb43 0501 	adc.w	r5, r3, r1
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	f04f 0300 	mov.w	r3, #0
 8008aaa:	4620      	mov	r0, r4
 8008aac:	4629      	mov	r1, r5
 8008aae:	f7f7 fb8d 	bl	80001cc <__aeabi_uldivmod>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ac0:	d308      	bcc.n	8008ad4 <UART_SetConfig+0x2cc>
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ac8:	d204      	bcs.n	8008ad4 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	60da      	str	r2, [r3, #12]
 8008ad2:	e0bf      	b.n	8008c54 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	76bb      	strb	r3, [r7, #26]
 8008ad8:	e0bc      	b.n	8008c54 <UART_SetConfig+0x44c>
 8008ada:	bf00      	nop
 8008adc:	efff69f3 	.word	0xefff69f3
 8008ae0:	40008000 	.word	0x40008000
 8008ae4:	40013800 	.word	0x40013800
 8008ae8:	40021000 	.word	0x40021000
 8008aec:	40004400 	.word	0x40004400
 8008af0:	40004800 	.word	0x40004800
 8008af4:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	69db      	ldr	r3, [r3, #28]
 8008afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b00:	d15c      	bne.n	8008bbc <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 8008b02:	7efb      	ldrb	r3, [r7, #27]
 8008b04:	2b08      	cmp	r3, #8
 8008b06:	d828      	bhi.n	8008b5a <UART_SetConfig+0x352>
 8008b08:	a201      	add	r2, pc, #4	; (adr r2, 8008b10 <UART_SetConfig+0x308>)
 8008b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0e:	bf00      	nop
 8008b10:	08008b35 	.word	0x08008b35
 8008b14:	08008b3d 	.word	0x08008b3d
 8008b18:	08008b45 	.word	0x08008b45
 8008b1c:	08008b5b 	.word	0x08008b5b
 8008b20:	08008b4b 	.word	0x08008b4b
 8008b24:	08008b5b 	.word	0x08008b5b
 8008b28:	08008b5b 	.word	0x08008b5b
 8008b2c:	08008b5b 	.word	0x08008b5b
 8008b30:	08008b53 	.word	0x08008b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b34:	f7fe f91c 	bl	8006d70 <HAL_RCC_GetPCLK1Freq>
 8008b38:	6178      	str	r0, [r7, #20]
        break;
 8008b3a:	e013      	b.n	8008b64 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b3c:	f7fe f92e 	bl	8006d9c <HAL_RCC_GetPCLK2Freq>
 8008b40:	6178      	str	r0, [r7, #20]
        break;
 8008b42:	e00f      	b.n	8008b64 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b44:	4b49      	ldr	r3, [pc, #292]	; (8008c6c <UART_SetConfig+0x464>)
 8008b46:	617b      	str	r3, [r7, #20]
        break;
 8008b48:	e00c      	b.n	8008b64 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b4a:	f7fe f879 	bl	8006c40 <HAL_RCC_GetSysClockFreq>
 8008b4e:	6178      	str	r0, [r7, #20]
        break;
 8008b50:	e008      	b.n	8008b64 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b56:	617b      	str	r3, [r7, #20]
        break;
 8008b58:	e004      	b.n	8008b64 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	76bb      	strb	r3, [r7, #26]
        break;
 8008b62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d074      	beq.n	8008c54 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	005a      	lsls	r2, r3, #1
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	085b      	lsrs	r3, r3, #1
 8008b74:	441a      	add	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	2b0f      	cmp	r3, #15
 8008b86:	d916      	bls.n	8008bb6 <UART_SetConfig+0x3ae>
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b8e:	d212      	bcs.n	8008bb6 <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	f023 030f 	bic.w	r3, r3, #15
 8008b98:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	085b      	lsrs	r3, r3, #1
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	f003 0307 	and.w	r3, r3, #7
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	89fb      	ldrh	r3, [r7, #14]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	89fa      	ldrh	r2, [r7, #14]
 8008bb2:	60da      	str	r2, [r3, #12]
 8008bb4:	e04e      	b.n	8008c54 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	76bb      	strb	r3, [r7, #26]
 8008bba:	e04b      	b.n	8008c54 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bbc:	7efb      	ldrb	r3, [r7, #27]
 8008bbe:	2b08      	cmp	r3, #8
 8008bc0:	d827      	bhi.n	8008c12 <UART_SetConfig+0x40a>
 8008bc2:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <UART_SetConfig+0x3c0>)
 8008bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc8:	08008bed 	.word	0x08008bed
 8008bcc:	08008bf5 	.word	0x08008bf5
 8008bd0:	08008bfd 	.word	0x08008bfd
 8008bd4:	08008c13 	.word	0x08008c13
 8008bd8:	08008c03 	.word	0x08008c03
 8008bdc:	08008c13 	.word	0x08008c13
 8008be0:	08008c13 	.word	0x08008c13
 8008be4:	08008c13 	.word	0x08008c13
 8008be8:	08008c0b 	.word	0x08008c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bec:	f7fe f8c0 	bl	8006d70 <HAL_RCC_GetPCLK1Freq>
 8008bf0:	6178      	str	r0, [r7, #20]
        break;
 8008bf2:	e013      	b.n	8008c1c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bf4:	f7fe f8d2 	bl	8006d9c <HAL_RCC_GetPCLK2Freq>
 8008bf8:	6178      	str	r0, [r7, #20]
        break;
 8008bfa:	e00f      	b.n	8008c1c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bfc:	4b1b      	ldr	r3, [pc, #108]	; (8008c6c <UART_SetConfig+0x464>)
 8008bfe:	617b      	str	r3, [r7, #20]
        break;
 8008c00:	e00c      	b.n	8008c1c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c02:	f7fe f81d 	bl	8006c40 <HAL_RCC_GetSysClockFreq>
 8008c06:	6178      	str	r0, [r7, #20]
        break;
 8008c08:	e008      	b.n	8008c1c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c0e:	617b      	str	r3, [r7, #20]
        break;
 8008c10:	e004      	b.n	8008c1c <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8008c12:	2300      	movs	r3, #0
 8008c14:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	76bb      	strb	r3, [r7, #26]
        break;
 8008c1a:	bf00      	nop
    }

    if (pclk != 0U)
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d018      	beq.n	8008c54 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	085a      	lsrs	r2, r3, #1
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	441a      	add	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	2b0f      	cmp	r3, #15
 8008c3c:	d908      	bls.n	8008c50 <UART_SetConfig+0x448>
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c44:	d204      	bcs.n	8008c50 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	60da      	str	r2, [r3, #12]
 8008c4e:	e001      	b.n	8008c54 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008c60:	7ebb      	ldrb	r3, [r7, #26]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3720      	adds	r7, #32
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bdb0      	pop	{r4, r5, r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	00f42400 	.word	0x00f42400

08008c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00a      	beq.n	8008c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00a      	beq.n	8008cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	430a      	orrs	r2, r1
 8008cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00a      	beq.n	8008cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	f003 0308 	and.w	r3, r3, #8
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00a      	beq.n	8008d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	f003 0310 	and.w	r3, r3, #16
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00a      	beq.n	8008d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	f003 0320 	and.w	r3, r3, #32
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00a      	beq.n	8008d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d01a      	beq.n	8008d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d6e:	d10a      	bne.n	8008d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	430a      	orrs	r2, r1
 8008d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00a      	beq.n	8008da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	430a      	orrs	r2, r1
 8008da6:	605a      	str	r2, [r3, #4]
  }
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b086      	sub	sp, #24
 8008db8:	af02      	add	r7, sp, #8
 8008dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dc4:	f7f9 fca4 	bl	8002710 <HAL_GetTick>
 8008dc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 0308 	and.w	r3, r3, #8
 8008dd4:	2b08      	cmp	r3, #8
 8008dd6:	d10e      	bne.n	8008df6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f82d 	bl	8008e46 <UART_WaitOnFlagUntilTimeout>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e023      	b.n	8008e3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0304 	and.w	r3, r3, #4
 8008e00:	2b04      	cmp	r3, #4
 8008e02:	d10e      	bne.n	8008e22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f817 	bl	8008e46 <UART_WaitOnFlagUntilTimeout>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e00d      	b.n	8008e3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2220      	movs	r2, #32
 8008e26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b084      	sub	sp, #16
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	60f8      	str	r0, [r7, #12]
 8008e4e:	60b9      	str	r1, [r7, #8]
 8008e50:	603b      	str	r3, [r7, #0]
 8008e52:	4613      	mov	r3, r2
 8008e54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e56:	e05e      	b.n	8008f16 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e5e:	d05a      	beq.n	8008f16 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e60:	f7f9 fc56 	bl	8002710 <HAL_GetTick>
 8008e64:	4602      	mov	r2, r0
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	69ba      	ldr	r2, [r7, #24]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d302      	bcc.n	8008e76 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d11b      	bne.n	8008eae <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008e84:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	689a      	ldr	r2, [r3, #8]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f022 0201 	bic.w	r2, r2, #1
 8008e94:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2220      	movs	r2, #32
 8008e9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2220      	movs	r2, #32
 8008ea0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e043      	b.n	8008f36 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0304 	and.w	r3, r3, #4
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d02c      	beq.n	8008f16 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	69db      	ldr	r3, [r3, #28]
 8008ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eca:	d124      	bne.n	8008f16 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ed4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ee4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	689a      	ldr	r2, [r3, #8]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f022 0201 	bic.w	r2, r2, #1
 8008ef4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2220      	movs	r2, #32
 8008f00:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2220      	movs	r2, #32
 8008f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e00f      	b.n	8008f36 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	69da      	ldr	r2, [r3, #28]
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	4013      	ands	r3, r2
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	bf0c      	ite	eq
 8008f26:	2301      	moveq	r3, #1
 8008f28:	2300      	movne	r3, #0
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	79fb      	ldrb	r3, [r7, #7]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d091      	beq.n	8008e58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
	...

08008f40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	88fa      	ldrh	r2, [r7, #6]
 8008f58:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2222      	movs	r2, #34	; 0x22
 8008f68:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d02b      	beq.n	8008fca <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f76:	4a25      	ldr	r2, [pc, #148]	; (800900c <UART_Start_Receive_DMA+0xcc>)
 8008f78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f7e:	4a24      	ldr	r2, [pc, #144]	; (8009010 <UART_Start_Receive_DMA+0xd0>)
 8008f80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f86:	4a23      	ldr	r2, [pc, #140]	; (8009014 <UART_Start_Receive_DMA+0xd4>)
 8008f88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f8e:	2200      	movs	r2, #0
 8008f90:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	3324      	adds	r3, #36	; 0x24
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	88fb      	ldrh	r3, [r7, #6]
 8008fa6:	f7fb fe13 	bl	8004bd0 <HAL_DMA_Start_IT>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00c      	beq.n	8008fca <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2210      	movs	r2, #16
 8008fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2220      	movs	r2, #32
 8008fc4:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e01c      	b.n	8009004 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fe0:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	689a      	ldr	r2, [r3, #8]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f042 0201 	orr.w	r2, r2, #1
 8008ff0:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	689a      	ldr	r2, [r3, #8]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009000:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	080090a1 	.word	0x080090a1
 8009010:	08009139 	.word	0x08009139
 8009014:	08009171 	.word	0x08009171

08009018 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800902e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2220      	movs	r2, #32
 8009034:	679a      	str	r2, [r3, #120]	; 0x78
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009042:	b480      	push	{r7}
 8009044:	b083      	sub	sp, #12
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009058:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	689a      	ldr	r2, [r3, #8]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f022 0201 	bic.w	r2, r2, #1
 8009068:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800906e:	2b01      	cmp	r3, #1
 8009070:	d107      	bne.n	8009082 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f022 0210 	bic.w	r2, r2, #16
 8009080:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2220      	movs	r2, #32
 8009086:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009094:	bf00      	nop
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ac:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 0320 	and.w	r3, r3, #32
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d12a      	bne.n	8009112 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2200      	movs	r2, #0
 80090c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090d2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	689a      	ldr	r2, [r3, #8]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f022 0201 	bic.w	r2, r2, #1
 80090e2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	689a      	ldr	r2, [r3, #8]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090f2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2220      	movs	r2, #32
 80090f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d107      	bne.n	8009112 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f022 0210 	bic.w	r2, r2, #16
 8009110:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009116:	2b01      	cmp	r3, #1
 8009118:	d107      	bne.n	800912a <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009120:	4619      	mov	r1, r3
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f7ff fb64 	bl	80087f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009128:	e002      	b.n	8009130 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f7ff fb42 	bl	80087b4 <HAL_UART_RxCpltCallback>
}
 8009130:	bf00      	nop
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009144:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800914a:	2b01      	cmp	r3, #1
 800914c:	d109      	bne.n	8009162 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009154:	085b      	lsrs	r3, r3, #1
 8009156:	b29b      	uxth	r3, r3
 8009158:	4619      	mov	r1, r3
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f7ff fb48 	bl	80087f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009160:	e002      	b.n	8009168 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f7ff fb30 	bl	80087c8 <HAL_UART_RxHalfCpltCallback>
}
 8009168:	bf00      	nop
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009182:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009188:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009194:	2b80      	cmp	r3, #128	; 0x80
 8009196:	d109      	bne.n	80091ac <UART_DMAError+0x3c>
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	2b21      	cmp	r3, #33	; 0x21
 800919c:	d106      	bne.n	80091ac <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80091a6:	6978      	ldr	r0, [r7, #20]
 80091a8:	f7ff ff36 	bl	8009018 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b6:	2b40      	cmp	r3, #64	; 0x40
 80091b8:	d109      	bne.n	80091ce <UART_DMAError+0x5e>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2b22      	cmp	r3, #34	; 0x22
 80091be:	d106      	bne.n	80091ce <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80091c8:	6978      	ldr	r0, [r7, #20]
 80091ca:	f7ff ff3a 	bl	8009042 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091d4:	f043 0210 	orr.w	r2, r3, #16
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091de:	6978      	ldr	r0, [r7, #20]
 80091e0:	f7ff fafc 	bl	80087dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091e4:	bf00      	nop
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <__libc_init_array>:
 80091ec:	b570      	push	{r4, r5, r6, lr}
 80091ee:	4d0d      	ldr	r5, [pc, #52]	; (8009224 <__libc_init_array+0x38>)
 80091f0:	4c0d      	ldr	r4, [pc, #52]	; (8009228 <__libc_init_array+0x3c>)
 80091f2:	1b64      	subs	r4, r4, r5
 80091f4:	10a4      	asrs	r4, r4, #2
 80091f6:	2600      	movs	r6, #0
 80091f8:	42a6      	cmp	r6, r4
 80091fa:	d109      	bne.n	8009210 <__libc_init_array+0x24>
 80091fc:	4d0b      	ldr	r5, [pc, #44]	; (800922c <__libc_init_array+0x40>)
 80091fe:	4c0c      	ldr	r4, [pc, #48]	; (8009230 <__libc_init_array+0x44>)
 8009200:	f000 f820 	bl	8009244 <_init>
 8009204:	1b64      	subs	r4, r4, r5
 8009206:	10a4      	asrs	r4, r4, #2
 8009208:	2600      	movs	r6, #0
 800920a:	42a6      	cmp	r6, r4
 800920c:	d105      	bne.n	800921a <__libc_init_array+0x2e>
 800920e:	bd70      	pop	{r4, r5, r6, pc}
 8009210:	f855 3b04 	ldr.w	r3, [r5], #4
 8009214:	4798      	blx	r3
 8009216:	3601      	adds	r6, #1
 8009218:	e7ee      	b.n	80091f8 <__libc_init_array+0xc>
 800921a:	f855 3b04 	ldr.w	r3, [r5], #4
 800921e:	4798      	blx	r3
 8009220:	3601      	adds	r6, #1
 8009222:	e7f2      	b.n	800920a <__libc_init_array+0x1e>
 8009224:	080092c8 	.word	0x080092c8
 8009228:	080092c8 	.word	0x080092c8
 800922c:	080092c8 	.word	0x080092c8
 8009230:	080092cc 	.word	0x080092cc

08009234 <memset>:
 8009234:	4402      	add	r2, r0
 8009236:	4603      	mov	r3, r0
 8009238:	4293      	cmp	r3, r2
 800923a:	d100      	bne.n	800923e <memset+0xa>
 800923c:	4770      	bx	lr
 800923e:	f803 1b01 	strb.w	r1, [r3], #1
 8009242:	e7f9      	b.n	8009238 <memset+0x4>

08009244 <_init>:
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009246:	bf00      	nop
 8009248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924a:	bc08      	pop	{r3}
 800924c:	469e      	mov	lr, r3
 800924e:	4770      	bx	lr

08009250 <_fini>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	bf00      	nop
 8009254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009256:	bc08      	pop	{r3}
 8009258:	469e      	mov	lr, r3
 800925a:	4770      	bx	lr
