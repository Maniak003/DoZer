
STM32L412K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075e4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08007770  08007770  00017770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d4  080077d4  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  080077d4  080077d4  000177d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077dc  080077dc  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077dc  080077dc  000177dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080077e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001338  20000030  08007814  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001368  08007814  00021368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014dc0  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002681  00000000  00000000  00034e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013b0  00000000  00000000  000374a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001288  00000000  00000000  00038858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c946  00000000  00000000  00039ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ef7e  00000000  00000000  00056426  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bd5d0  00000000  00000000  000653a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122974  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005468  00000000  00000000  001229f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000030 	.word	0x20000030
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08007758 	.word	0x08007758

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000034 	.word	0x20000034
 80001c8:	08007758 	.word	0x08007758

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <bebe>:
uint32_t counterCC = 0, counterALL = 0, sleepDelay;
uint16_t adcResult = 0;
uint16_t spectrData[2050] = {0};
uint16_t spectrCRC;

void bebe(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4); // Start timer for turn off Buzzer
 80004d0:	210c      	movs	r1, #12
 80004d2:	480d      	ldr	r0, [pc, #52]	; (8000508 <bebe+0x3c>)
 80004d4:	f005 faa8 	bl	8005a28 <HAL_TIM_OC_Start>
	HAL_Delay(200);
 80004d8:	20c8      	movs	r0, #200	; 0xc8
 80004da:	f001 fa8f 	bl	80019fc <HAL_Delay>
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);
 80004de:	210c      	movs	r1, #12
 80004e0:	4809      	ldr	r0, [pc, #36]	; (8000508 <bebe+0x3c>)
 80004e2:	f005 fb7f 	bl	8005be4 <HAL_TIM_OC_Stop>
	HAL_Delay(200);
 80004e6:	20c8      	movs	r0, #200	; 0xc8
 80004e8:	f001 fa88 	bl	80019fc <HAL_Delay>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4); // Start timer for turn off Buzzer
 80004ec:	210c      	movs	r1, #12
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <bebe+0x3c>)
 80004f0:	f005 fa9a 	bl	8005a28 <HAL_TIM_OC_Start>
	HAL_Delay(200);
 80004f4:	20c8      	movs	r0, #200	; 0xc8
 80004f6:	f001 fa81 	bl	80019fc <HAL_Delay>
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);
 80004fa:	210c      	movs	r1, #12
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <bebe+0x3c>)
 80004fe:	f005 fb71 	bl	8005be4 <HAL_TIM_OC_Stop>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	200012a8 	.word	0x200012a8

0800050c <rwFlash>:

/*
 * read/write config data from/to flash
 */
void rwFlash(uint8_t rwFlag) {
 800050c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8000510:	b08c      	sub	sp, #48	; 0x30
 8000512:	af00      	add	r7, sp, #0
 8000514:	4603      	mov	r3, r0
 8000516:	71fb      	strb	r3, [r7, #7]
	uint32_t pageAdr = 0x800F800; // Begin of 31 page, last page flash for STM32L412K8.
 8000518:	4b51      	ldr	r3, [pc, #324]	; (8000660 <rwFlash+0x154>)
 800051a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t magicKey;
	uint64_t dataForSave;
	magicKey = *(__IO uint32_t*) pageAdr;
 800051c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	62bb      	str	r3, [r7, #40]	; 0x28
	if ((magicKey != 0x1234) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 8000522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000524:	f241 2234 	movw	r2, #4660	; 0x1234
 8000528:	4293      	cmp	r3, r2
 800052a:	d102      	bne.n	8000532 <rwFlash+0x26>
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	2b01      	cmp	r3, #1
 8000530:	d179      	bne.n	8000626 <rwFlash+0x11a>
		magicKey = 0x1234;
 8000532:	f241 2334 	movw	r3, #4660	; 0x1234
 8000536:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rwFlag == 0) { // For first init
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d10b      	bne.n	8000556 <rwFlash+0x4a>
			cfgData = 0;
 800053e:	4b49      	ldr	r3, [pc, #292]	; (8000664 <rwFlash+0x158>)
 8000540:	2200      	movs	r2, #0
 8000542:	801a      	strh	r2, [r3, #0]
			cfgLevel1 = 0;
 8000544:	4b48      	ldr	r3, [pc, #288]	; (8000668 <rwFlash+0x15c>)
 8000546:	2200      	movs	r2, #0
 8000548:	801a      	strh	r2, [r3, #0]
			cfgLevel2 = 0;
 800054a:	4b48      	ldr	r3, [pc, #288]	; (800066c <rwFlash+0x160>)
 800054c:	2200      	movs	r2, #0
 800054e:	801a      	strh	r2, [r3, #0]
			cfgLevel3 = 0;
 8000550:	4b47      	ldr	r3, [pc, #284]	; (8000670 <rwFlash+0x164>)
 8000552:	2200      	movs	r2, #0
 8000554:	801a      	strh	r2, [r3, #0]
		}
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t PAGEError = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
		EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800055a:	2300      	movs	r3, #0
 800055c:	613b      	str	r3, [r7, #16]
		EraseInitStruct.Page = 31; // Page size for STM32L412K8 is 2KB
 800055e:	231f      	movs	r3, #31
 8000560:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.NbPages     = 1;
 8000562:	2301      	movs	r3, #1
 8000564:	61fb      	str	r3, [r7, #28]

		flash_ok = HAL_ERROR;
 8000566:	4b43      	ldr	r3, [pc, #268]	; (8000674 <rwFlash+0x168>)
 8000568:	2201      	movs	r2, #1
 800056a:	701a      	strb	r2, [r3, #0]
		// Unlock flash
		while(flash_ok != HAL_OK) {
 800056c:	e005      	b.n	800057a <rwFlash+0x6e>
		  flash_ok = HAL_FLASH_Unlock();
 800056e:	f003 fc51 	bl	8003e14 <HAL_FLASH_Unlock>
 8000572:	4603      	mov	r3, r0
 8000574:	461a      	mov	r2, r3
 8000576:	4b3f      	ldr	r3, [pc, #252]	; (8000674 <rwFlash+0x168>)
 8000578:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK) {
 800057a:	4b3e      	ldr	r3, [pc, #248]	; (8000674 <rwFlash+0x168>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d1f5      	bne.n	800056e <rwFlash+0x62>
		}
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) == HAL_OK) {
 8000582:	f107 020c 	add.w	r2, r7, #12
 8000586:	f107 0310 	add.w	r3, r7, #16
 800058a:	4611      	mov	r1, r2
 800058c:	4618      	mov	r0, r3
 800058e:	f003 fd23 	bl	8003fd8 <HAL_FLASHEx_Erase>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d137      	bne.n	8000608 <rwFlash+0xfc>
			dataForSave = (uint64_t) (magicKey | (((uint64_t) cfgData << 32) & 0xFFFFFFFF00000000) | (((uint64_t) cfgLevel1 << 48) & 0xFFFF000000000000));
 8000598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800059a:	469b      	mov	fp, r3
 800059c:	f04f 0c00 	mov.w	ip, #0
 80005a0:	4b30      	ldr	r3, [pc, #192]	; (8000664 <rwFlash+0x158>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	b29d      	uxth	r5, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	f04f 0300 	mov.w	r3, #0
 80005ae:	f04f 0400 	mov.w	r4, #0
 80005b2:	002c      	movs	r4, r5
 80005b4:	2300      	movs	r3, #0
 80005b6:	ea4b 0103 	orr.w	r1, fp, r3
 80005ba:	ea4c 0204 	orr.w	r2, ip, r4
 80005be:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <rwFlash+0x15c>)
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	f04f 0600 	mov.w	r6, #0
 80005c8:	f04f 0b00 	mov.w	fp, #0
 80005cc:	f04f 0c00 	mov.w	ip, #0
 80005d0:	ea4f 4c05 	mov.w	ip, r5, lsl #16
 80005d4:	f04f 0b00 	mov.w	fp, #0
 80005d8:	ea4b 0301 	orr.w	r3, fp, r1
 80005dc:	ea4c 0402 	orr.w	r4, ip, r2
 80005e0:	e9c7 3408 	strd	r3, r4, [r7, #32]
			flash_ok = HAL_ERROR;
 80005e4:	4b23      	ldr	r3, [pc, #140]	; (8000674 <rwFlash+0x168>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80005ea:	e009      	b.n	8000600 <rwFlash+0xf4>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr, dataForSave); // Write  magic key into Flash
 80005ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80005f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80005f2:	2000      	movs	r0, #0
 80005f4:	f003 fba2 	bl	8003d3c <HAL_FLASH_Program>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <rwFlash+0x168>)
 80005fe:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <rwFlash+0x168>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d1f1      	bne.n	80005ec <rwFlash+0xe0>
			}
		}
		// Lock flash
		flash_ok = HAL_ERROR;
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <rwFlash+0x168>)
 800060a:	2201      	movs	r2, #1
 800060c:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 800060e:	e005      	b.n	800061c <rwFlash+0x110>
			flash_ok = HAL_FLASH_Lock();
 8000610:	f003 fc22 	bl	8003e58 <HAL_FLASH_Lock>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <rwFlash+0x168>)
 800061a:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <rwFlash+0x168>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d1f5      	bne.n	8000610 <rwFlash+0x104>
	if ((magicKey != 0x1234) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 8000624:	e017      	b.n	8000656 <rwFlash+0x14a>
		}
	} else {
		cfgData = *(__IO uint16_t*) (pageAdr + 4);
 8000626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000628:	3304      	adds	r3, #4
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	b29a      	uxth	r2, r3
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <rwFlash+0x158>)
 8000630:	801a      	strh	r2, [r3, #0]
		cfgLevel1 = *(__IO uint16_t*) (pageAdr + 6);
 8000632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000634:	3306      	adds	r3, #6
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	b29a      	uxth	r2, r3
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <rwFlash+0x15c>)
 800063c:	801a      	strh	r2, [r3, #0]
		cfgLevel2 = *(__IO uint16_t*) (pageAdr + 8);
 800063e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000640:	3308      	adds	r3, #8
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	b29a      	uxth	r2, r3
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <rwFlash+0x160>)
 8000648:	801a      	strh	r2, [r3, #0]
		cfgLevel3 = *(__IO uint16_t*) (pageAdr + 10);
 800064a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800064c:	330a      	adds	r3, #10
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	b29a      	uxth	r2, r3
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <rwFlash+0x164>)
 8000654:	801a      	strh	r2, [r3, #0]
	}
}
 8000656:	bf00      	nop
 8000658:	3730      	adds	r7, #48	; 0x30
 800065a:	46bd      	mov	sp, r7
 800065c:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8000660:	0800f800 	.word	0x0800f800
 8000664:	200012f6 	.word	0x200012f6
 8000668:	200012fc 	.word	0x200012fc
 800066c:	200012fa 	.word	0x200012fa
 8000670:	20001112 	.word	0x20001112
 8000674:	20001360 	.word	0x20001360

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b092      	sub	sp, #72	; 0x48
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f001 f948 	bl	8001912 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 fa4b 	bl	8000b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 fd15 	bl	80010b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800068a:	f000 fcf5 	bl	8001078 <MX_DMA_Init>
  MX_ADC1_Init();
 800068e:	f000 faa1 	bl	8000bd4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000692:	f000 fcbd 	bl	8001010 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 8000696:	f000 fc31 	bl	8000efc <MX_TIM15_Init>
  MX_ADC2_Init();
 800069a:	f000 fb17 	bl	8000ccc <MX_ADC2_Init>
  MX_TIM2_Init();
 800069e:	f000 fb79 	bl	8000d94 <MX_TIM2_Init>
  MX_TIM16_Init();
 80006a2:	f000 fc85 	bl	8000fb0 <MX_TIM16_Init>
  MX_TIM6_Init();
 80006a6:	f000 fbf3 	bl	8000e90 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int j = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t btCommand[sizeCommand];
  uint8_t prefix[3] = {'<', 'B', '>'};
 80006ae:	4aaa      	ldr	r2, [pc, #680]	; (8000958 <main+0x2e0>)
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	6812      	ldr	r2, [r2, #0]
 80006b6:	4611      	mov	r1, r2
 80006b8:	8019      	strh	r1, [r3, #0]
 80006ba:	3302      	adds	r3, #2
 80006bc:	0c12      	lsrs	r2, r2, #16
 80006be:	701a      	strb	r2, [r3, #0]
  uint8_t lowSpectr, highSpectr;
  #ifdef DISPLAY_ENABLE
  ssd1306_Init();
  #endif
  //uint16_t tmpData;
  uint32_t initDelay, oldTime = HAL_GetTick();
 80006c0:	f001 f990 	bl	80019e4 <HAL_GetTick>
 80006c4:	62b8      	str	r0, [r7, #40]	; 0x28
  initDelay = oldTime;
 80006c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  oldTimeAll = oldTime;
 80006ca:	4aa4      	ldr	r2, [pc, #656]	; (800095c <main+0x2e4>)
 80006cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ce:	6013      	str	r3, [r2, #0]
  sleepFlag = oldTime;
 80006d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	bf14      	ite	ne
 80006d6:	2301      	movne	r3, #1
 80006d8:	2300      	moveq	r3, #0
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4ba0      	ldr	r3, [pc, #640]	; (8000960 <main+0x2e8>)
 80006de:	701a      	strb	r2, [r3, #0]
  counterCC = 0;
 80006e0:	4ba0      	ldr	r3, [pc, #640]	; (8000964 <main+0x2ec>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]

  rwFlash(0); // Read config from flash.
 80006e6:	2000      	movs	r0, #0
 80006e8:	f7ff ff10 	bl	800050c <rwFlash>

  HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_SET); // LED on.
 80006ec:	2201      	movs	r2, #1
 80006ee:	2108      	movs	r1, #8
 80006f0:	489d      	ldr	r0, [pc, #628]	; (8000968 <main+0x2f0>)
 80006f2:	f003 fff1 	bl	80046d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, COM_PIN, GPIO_PIN_SET); // Com pin disable
 80006f6:	2201      	movs	r2, #1
 80006f8:	2140      	movs	r1, #64	; 0x40
 80006fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fe:	f003 ffeb 	bl	80046d8 <HAL_GPIO_WritePin>
  __HAL_TIM_CLEAR_FLAG(&htim15, TIM_SR_UIF); // Clear flags
 8000702:	4b9a      	ldr	r3, [pc, #616]	; (800096c <main+0x2f4>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f06f 0201 	mvn.w	r2, #1
 800070a:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim15); // Start timer for turn off LED
 800070c:	4897      	ldr	r0, [pc, #604]	; (800096c <main+0x2f4>)
 800070e:	f005 f8a7 	bl	8005860 <HAL_TIM_Base_Start_IT>
  //
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
 8000712:	210c      	movs	r1, #12
 8000714:	4896      	ldr	r0, [pc, #600]	; (8000970 <main+0x2f8>)
 8000716:	f005 f987 	bl	8005a28 <HAL_TIM_OC_Start>
  __HAL_TIM_CLEAR_FLAG(&htim16, TIM_SR_UIF); // Clear flags
 800071a:	4b96      	ldr	r3, [pc, #600]	; (8000974 <main+0x2fc>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f06f 0201 	mvn.w	r2, #1
 8000722:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 8000724:	4893      	ldr	r0, [pc, #588]	; (8000974 <main+0x2fc>)
 8000726:	f005 f89b 	bl	8005860 <HAL_TIM_Base_Start_IT>

  /* Test alarm */
  alarmLevel = 1;
 800072a:	4b93      	ldr	r3, [pc, #588]	; (8000978 <main+0x300>)
 800072c:	2201      	movs	r2, #1
 800072e:	801a      	strh	r2, [r3, #0]
  alarmCount = 0;
 8000730:	4b92      	ldr	r3, [pc, #584]	; (800097c <main+0x304>)
 8000732:	2200      	movs	r2, #0
 8000734:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim6); // Alarm timer.
 8000736:	4892      	ldr	r0, [pc, #584]	; (8000980 <main+0x308>)
 8000738:	f005 f892 	bl	8005860 <HAL_TIM_Base_Start_IT>
	  counterCC = 0;
	  oldTime = HAL_GetTick();
	  ssd1306_SetCursor(0, 0);
	  ssd1306_WriteString(counterPP, Font_6x8, 0x01);
	#endif
	  int ttt, max = 1;
 800073c:	2301      	movs	r3, #1
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
	  for ( int i = 2; i < 2050; i++) {
 8000740:	2302      	movs	r3, #2
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000744:	e018      	b.n	8000778 <main+0x100>
		  ttt = spectrData[i];
 8000746:	4a8f      	ldr	r2, [pc, #572]	; (8000984 <main+0x30c>)
 8000748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800074a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800074e:	623b      	str	r3, [r7, #32]
		  if ((float) ttt > max)
 8000750:	6a3b      	ldr	r3, [r7, #32]
 8000752:	ee07 3a90 	vmov	s15, r3
 8000756:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800075a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800075c:	ee07 3a90 	vmov	s15, r3
 8000760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000764:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076c:	dd01      	ble.n	8000772 <main+0xfa>
			  max = ttt;
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	643b      	str	r3, [r7, #64]	; 0x40
	  for ( int i = 2; i < 2050; i++) {
 8000772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000774:	3301      	adds	r3, #1
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800077a:	f640 0201 	movw	r2, #2049	; 0x801
 800077e:	4293      	cmp	r3, r2
 8000780:	dde1      	ble.n	8000746 <main+0xce>
	  */
	#ifdef DISPLAY_ENABLE
	  ssd1306_UpdateScreen();
	#endif
	  // Delay after on.
	  if (initFlag && (HAL_GetTick() - initDelay > INIT_TIME)) {
 8000782:	4b81      	ldr	r3, [pc, #516]	; (8000988 <main+0x310>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d012      	beq.n	80007b0 <main+0x138>
 800078a:	f001 f92b 	bl	80019e4 <HAL_GetTick>
 800078e:	4602      	mov	r2, r0
 8000790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000798:	d90a      	bls.n	80007b0 <main+0x138>
		  initFlag = 0;
 800079a:	4b7b      	ldr	r3, [pc, #492]	; (8000988 <main+0x310>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_IT(&hadc1);  // Init ADC.
 80007a0:	487a      	ldr	r0, [pc, #488]	; (800098c <main+0x314>)
 80007a2:	f001 fd85 	bl	80022b0 <HAL_ADC_Start_IT>
		  oldTimeAll = HAL_GetTick();
 80007a6:	f001 f91d 	bl	80019e4 <HAL_GetTick>
 80007aa:	4602      	mov	r2, r0
 80007ac:	4b6b      	ldr	r3, [pc, #428]	; (800095c <main+0x2e4>)
 80007ae:	601a      	str	r2, [r3, #0]
	  }
	#ifdef DISPLAY_ENABLE
	  ssd1306_SetCursor(0, 24);
	#endif
	  /* Status JDY-19, BT connected ? */
	  if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == 1 ) { // BT State active ?
 80007b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b8:	f003 ff76 	bl	80046a8 <HAL_GPIO_ReadPin>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b01      	cmp	r3, #1
 80007c0:	f040 8161 	bne.w	8000a86 <main+0x40e>
	#ifdef DISPLAY_ENABLE
		  ssd1306_WriteString("BT: connect   ", Font_6x8, 0x01);
	#endif
		  /* Init uart after sleep */
		  if (initUART) {
 80007c4:	4b72      	ldr	r3, [pc, #456]	; (8000990 <main+0x318>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d00c      	beq.n	80007e6 <main+0x16e>
			  HAL_UART_Init(&huart1);
 80007cc:	4871      	ldr	r0, [pc, #452]	; (8000994 <main+0x31c>)
 80007ce:	f006 f993 	bl	8006af8 <HAL_UART_Init>
			  HAL_UART_Receive_DMA(&huart1, btCommand, sizeCommand);
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	2214      	movs	r2, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	486e      	ldr	r0, [pc, #440]	; (8000994 <main+0x31c>)
 80007dc:	f006 faa2 	bl	8006d24 <HAL_UART_Receive_DMA>
			  initUART = 0;
 80007e0:	4b6b      	ldr	r3, [pc, #428]	; (8000990 <main+0x318>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
		  }

		  if (hdma_usart1_rx.State == HAL_DMA_STATE_READY) {
 80007e6:	4b6c      	ldr	r3, [pc, #432]	; (8000998 <main+0x320>)
 80007e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d178      	bne.n	80008e4 <main+0x26c>
			  HAL_UART_Receive_DMA(&huart1, btCommand, sizeCommand);
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	2214      	movs	r2, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4866      	ldr	r0, [pc, #408]	; (8000994 <main+0x31c>)
 80007fc:	f006 fa92 	bl	8006d24 <HAL_UART_Receive_DMA>
			  if (btCommand[0] == '<' && btCommand[2] == '>') {
 8000800:	7b3b      	ldrb	r3, [r7, #12]
 8000802:	2b3c      	cmp	r3, #60	; 0x3c
 8000804:	d16e      	bne.n	80008e4 <main+0x26c>
 8000806:	7bbb      	ldrb	r3, [r7, #14]
 8000808:	2b3e      	cmp	r3, #62	; 0x3e
 800080a:	d16b      	bne.n	80008e4 <main+0x26c>
				  uint16_t CS = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	877b      	strh	r3, [r7, #58]	; 0x3a
				  for (int i = 0; i < 18; i++) {
 8000810:	2300      	movs	r3, #0
 8000812:	637b      	str	r3, [r7, #52]	; 0x34
 8000814:	e00b      	b.n	800082e <main+0x1b6>
					  CS = CS + btCommand[i];
 8000816:	f107 020c 	add.w	r2, r7, #12
 800081a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800081c:	4413      	add	r3, r2
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	b29a      	uxth	r2, r3
 8000822:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000824:	4413      	add	r3, r2
 8000826:	877b      	strh	r3, [r7, #58]	; 0x3a
				  for (int i = 0; i < 18; i++) {
 8000828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800082a:	3301      	adds	r3, #1
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
 800082e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000830:	2b11      	cmp	r3, #17
 8000832:	ddf0      	ble.n	8000816 <main+0x19e>
				  }
				  if (((CS & 0xFF) == btCommand[18]) && (((CS >> 8) & 0xFF) == btCommand[19])) {
 8000834:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000836:	b2db      	uxtb	r3, r3
 8000838:	7fba      	ldrb	r2, [r7, #30]
 800083a:	4293      	cmp	r3, r2
 800083c:	d152      	bne.n	80008e4 <main+0x26c>
 800083e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000840:	0a1b      	lsrs	r3, r3, #8
 8000842:	b29b      	uxth	r3, r3
 8000844:	b2db      	uxtb	r3, r3
 8000846:	7ffa      	ldrb	r2, [r7, #31]
 8000848:	4293      	cmp	r3, r2
 800084a:	d14b      	bne.n	80008e4 <main+0x26c>
					  //HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
					  //HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
					  if (btCommand[1] == '1')  { // Clear statistics
 800084c:	7b7b      	ldrb	r3, [r7, #13]
 800084e:	2b31      	cmp	r3, #49	; 0x31
 8000850:	d118      	bne.n	8000884 <main+0x20c>
						  for (int i = 0; i < 2050; i++) {
 8000852:	2300      	movs	r3, #0
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
 8000856:	e007      	b.n	8000868 <main+0x1f0>
							  spectrData[i] = 0;
 8000858:	4a4a      	ldr	r2, [pc, #296]	; (8000984 <main+0x30c>)
 800085a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800085c:	2100      	movs	r1, #0
 800085e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						  for (int i = 0; i < 2050; i++) {
 8000862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000864:	3301      	adds	r3, #1
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
 8000868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800086a:	f640 0201 	movw	r2, #2049	; 0x801
 800086e:	4293      	cmp	r3, r2
 8000870:	ddf2      	ble.n	8000858 <main+0x1e0>
						  }
						  oldTimeAll = HAL_GetTick();
 8000872:	f001 f8b7 	bl	80019e4 <HAL_GetTick>
 8000876:	4602      	mov	r2, r0
 8000878:	4b38      	ldr	r3, [pc, #224]	; (800095c <main+0x2e4>)
 800087a:	601a      	str	r2, [r3, #0]
						  counterALL = 0;
 800087c:	4b47      	ldr	r3, [pc, #284]	; (800099c <main+0x324>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	e02f      	b.n	80008e4 <main+0x26c>
					  } else if (btCommand[1] == '2') { // Write config data
 8000884:	7b7b      	ldrb	r3, [r7, #13]
 8000886:	2b32      	cmp	r3, #50	; 0x32
 8000888:	d12c      	bne.n	80008e4 <main+0x26c>
						  bebe();
 800088a:	f7ff fe1f 	bl	80004cc <bebe>
						  cfgData = ((btCommand[4] << 8) & 0xFF00) | btCommand[3];
 800088e:	7c3b      	ldrb	r3, [r7, #16]
 8000890:	021b      	lsls	r3, r3, #8
 8000892:	b21a      	sxth	r2, r3
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	b21b      	sxth	r3, r3
 8000898:	4313      	orrs	r3, r2
 800089a:	b21b      	sxth	r3, r3
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b40      	ldr	r3, [pc, #256]	; (80009a0 <main+0x328>)
 80008a0:	801a      	strh	r2, [r3, #0]
						  cfgLevel1 = ((btCommand[6] << 8) & 0xFF00) | btCommand[5];
 80008a2:	7cbb      	ldrb	r3, [r7, #18]
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	b21a      	sxth	r2, r3
 80008a8:	7c7b      	ldrb	r3, [r7, #17]
 80008aa:	b21b      	sxth	r3, r3
 80008ac:	4313      	orrs	r3, r2
 80008ae:	b21b      	sxth	r3, r3
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4b3c      	ldr	r3, [pc, #240]	; (80009a4 <main+0x32c>)
 80008b4:	801a      	strh	r2, [r3, #0]
						  cfgLevel2 = ((btCommand[8] << 8) & 0xFF00) | btCommand[7];
 80008b6:	7d3b      	ldrb	r3, [r7, #20]
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	7cfb      	ldrb	r3, [r7, #19]
 80008be:	b21b      	sxth	r3, r3
 80008c0:	4313      	orrs	r3, r2
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <main+0x330>)
 80008c8:	801a      	strh	r2, [r3, #0]
						  cfgLevel3 = ((btCommand[10] << 8) & 0xFF00) | btCommand[9];
 80008ca:	7dbb      	ldrb	r3, [r7, #22]
 80008cc:	021b      	lsls	r3, r3, #8
 80008ce:	b21a      	sxth	r2, r3
 80008d0:	7d7b      	ldrb	r3, [r7, #21]
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	4313      	orrs	r3, r2
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	b29a      	uxth	r2, r3
 80008da:	4b34      	ldr	r3, [pc, #208]	; (80009ac <main+0x334>)
 80008dc:	801a      	strh	r2, [r3, #0]
						  rwFlash(1); // Write to flash
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff fe14 	bl	800050c <rwFlash>
					  }
				  }
			  }
		  }

		  j = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	647b      	str	r3, [r7, #68]	; 0x44
		  // Transmit data over BT.
		  HAL_UART_Transmit(&huart1, prefix, 3, 1000); // Start sequence.
 80008e8:	f107 0108 	add.w	r1, r7, #8
 80008ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f0:	2203      	movs	r2, #3
 80008f2:	4828      	ldr	r0, [pc, #160]	; (8000994 <main+0x31c>)
 80008f4:	f006 f983 	bl	8006bfe <HAL_UART_Transmit>
		  spectrData[0] = (uint16_t) ((HAL_GetTick() - oldTimeAll) / 1000); // Specter collection time.
 80008f8:	f001 f874 	bl	80019e4 <HAL_GetTick>
 80008fc:	4602      	mov	r2, r0
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <main+0x2e4>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	4a2a      	ldr	r2, [pc, #168]	; (80009b0 <main+0x338>)
 8000906:	fba2 2303 	umull	r2, r3, r2, r3
 800090a:	099b      	lsrs	r3, r3, #6
 800090c:	b29a      	uxth	r2, r3
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <main+0x30c>)
 8000910:	801a      	strh	r2, [r3, #0]
		  spectrData[1] = (uint16_t) (((HAL_GetTick() - oldTimeAll) / 1000) >> 16);
 8000912:	f001 f867 	bl	80019e4 <HAL_GetTick>
 8000916:	4602      	mov	r2, r0
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <main+0x2e4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	4a24      	ldr	r2, [pc, #144]	; (80009b0 <main+0x338>)
 8000920:	fba2 2303 	umull	r2, r3, r2, r3
 8000924:	099b      	lsrs	r3, r3, #6
 8000926:	0c1b      	lsrs	r3, r3, #16
 8000928:	b29a      	uxth	r2, r3
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <main+0x30c>)
 800092c:	805a      	strh	r2, [r3, #2]
		  spectrData[2] = (uint16_t) (counterALL & 0xFFFF);
 800092e:	4b1b      	ldr	r3, [pc, #108]	; (800099c <main+0x324>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	b29a      	uxth	r2, r3
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <main+0x30c>)
 8000936:	809a      	strh	r2, [r3, #4]
		  spectrData[3] = (uint16_t) (counterALL >> 16);
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <main+0x324>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	0c1b      	lsrs	r3, r3, #16
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <main+0x30c>)
 8000942:	80da      	strh	r2, [r3, #6]
		  spectrCRC = 0;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <main+0x33c>)
 8000946:	2200      	movs	r2, #0
 8000948:	801a      	strh	r2, [r3, #0]
		  HAL_Delay(TRANSMIT_DALAY);  // Increase time delay if transmit error.
 800094a:	2014      	movs	r0, #20
 800094c:	f001 f856 	bl	80019fc <HAL_Delay>
		  for ( int i = 0; i < 1042; i++) {
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000954:	e065      	b.n	8000a22 <main+0x3aa>
 8000956:	bf00      	nop
 8000958:	08007788 	.word	0x08007788
 800095c:	200012a4 	.word	0x200012a4
 8000960:	20000001 	.word	0x20000001
 8000964:	2000004c 	.word	0x2000004c
 8000968:	48000400 	.word	0x48000400
 800096c:	200010c4 	.word	0x200010c4
 8000970:	200012a8 	.word	0x200012a8
 8000974:	20001300 	.word	0x20001300
 8000978:	20001110 	.word	0x20001110
 800097c:	200012f4 	.word	0x200012f4
 8000980:	20001258 	.word	0x20001258
 8000984:	20000058 	.word	0x20000058
 8000988:	20000000 	.word	0x20000000
 800098c:	2000112c 	.word	0x2000112c
 8000990:	20000002 	.word	0x20000002
 8000994:	200011d8 	.word	0x200011d8
 8000998:	20001190 	.word	0x20001190
 800099c:	20000050 	.word	0x20000050
 80009a0:	200012f6 	.word	0x200012f6
 80009a4:	200012fc 	.word	0x200012fc
 80009a8:	200012fa 	.word	0x200012fa
 80009ac:	20001112 	.word	0x20001112
 80009b0:	10624dd3 	.word	0x10624dd3
 80009b4:	200012f8 	.word	0x200012f8
			  lowSpectr = spectrData[i] & 0xFF;
 80009b8:	4a4d      	ldr	r2, [pc, #308]	; (8000af0 <main+0x478>)
 80009ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	71fb      	strb	r3, [r7, #7]
			  highSpectr = (spectrData[i] & 0xFF00) >> 8;
 80009c4:	4a4a      	ldr	r2, [pc, #296]	; (8000af0 <main+0x478>)
 80009c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009cc:	0a1b      	lsrs	r3, r3, #8
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	71bb      	strb	r3, [r7, #6]
			  spectrCRC = spectrCRC + lowSpectr + highSpectr;
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	4b46      	ldr	r3, [pc, #280]	; (8000af4 <main+0x47c>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	4413      	add	r3, r2
 80009de:	b29a      	uxth	r2, r3
 80009e0:	79bb      	ldrb	r3, [r7, #6]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	4413      	add	r3, r2
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	4b42      	ldr	r3, [pc, #264]	; (8000af4 <main+0x47c>)
 80009ea:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 80009ec:	1db9      	adds	r1, r7, #6
 80009ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f2:	2201      	movs	r2, #1
 80009f4:	4840      	ldr	r0, [pc, #256]	; (8000af8 <main+0x480>)
 80009f6:	f006 f902 	bl	8006bfe <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 80009fa:	1df9      	adds	r1, r7, #7
 80009fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a00:	2201      	movs	r2, #1
 8000a02:	483d      	ldr	r0, [pc, #244]	; (8000af8 <main+0x480>)
 8000a04:	f006 f8fb 	bl	8006bfe <HAL_UART_Transmit>
			  if ( j++ >= 9) {
 8000a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	647a      	str	r2, [r7, #68]	; 0x44
 8000a0e:	2b08      	cmp	r3, #8
 8000a10:	dd04      	ble.n	8000a1c <main+0x3a4>
				  HAL_Delay(TRANSMIT_DALAY);  // Increase time delay if transmit error.
 8000a12:	2014      	movs	r0, #20
 8000a14:	f000 fff2 	bl	80019fc <HAL_Delay>
				  j = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	647b      	str	r3, [r7, #68]	; 0x44
		  for ( int i = 0; i < 1042; i++) {
 8000a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a1e:	3301      	adds	r3, #1
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a24:	f240 4211 	movw	r2, #1041	; 0x411
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	ddc5      	ble.n	80009b8 <main+0x340>
			  }
		  }
		  /* Transmit CRC */
		  HAL_Delay(TRANSMIT_DALAY);
 8000a2c:	2014      	movs	r0, #20
 8000a2e:	f000 ffe5 	bl	80019fc <HAL_Delay>
		  lowSpectr = spectrCRC & 0xFF;
 8000a32:	4b30      	ldr	r3, [pc, #192]	; (8000af4 <main+0x47c>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	71fb      	strb	r3, [r7, #7]
		  highSpectr = (spectrCRC & 0xFF00) >> 8;
 8000a3a:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <main+0x47c>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	71bb      	strb	r3, [r7, #6]
		  HAL_UART_Transmit(&huart1, &highSpectr, 1, 1000);
 8000a46:	1db9      	adds	r1, r7, #6
 8000a48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	482a      	ldr	r0, [pc, #168]	; (8000af8 <main+0x480>)
 8000a50:	f006 f8d5 	bl	8006bfe <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &lowSpectr, 1, 1000);
 8000a54:	1df9      	adds	r1, r7, #7
 8000a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4826      	ldr	r0, [pc, #152]	; (8000af8 <main+0x480>)
 8000a5e:	f006 f8ce 	bl	8006bfe <HAL_UART_Transmit>
		  sleepDelay = HAL_GetTick();
 8000a62:	f000 ffbf 	bl	80019e4 <HAL_GetTick>
 8000a66:	4602      	mov	r2, r0
 8000a68:	4b24      	ldr	r3, [pc, #144]	; (8000afc <main+0x484>)
 8000a6a:	601a      	str	r2, [r3, #0]
		  sleepFlag = 1;
 8000a6c:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <main+0x488>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	701a      	strb	r2, [r3, #0]
		  /* Measure battery voltage */
		  HAL_GPIO_WritePin(GPIOA, COM_PIN, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2140      	movs	r1, #64	; 0x40
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f003 fe2d 	bl	80046d8 <HAL_GPIO_WritePin>
		  HAL_ADC_Start(&hadc2);
 8000a7e:	4821      	ldr	r0, [pc, #132]	; (8000b04 <main+0x48c>)
 8000a80:	f001 fb5c 	bl	800213c <HAL_ADC_Start>
 8000a84:	e02e      	b.n	8000ae4 <main+0x46c>
	#ifdef DISPLAY_ENABLE
		  HAL_Delay(500);
		  ssd1306_WriteString("BT: disconnect", Font_6x8, 0x01);
	#endif
		  // BT sleep control
		  if (sleepFlag && (HAL_GetTick() - sleepDelay > SLEEPDALAY)) {
 8000a86:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <main+0x488>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d02a      	beq.n	8000ae4 <main+0x46c>
 8000a8e:	f000 ffa9 	bl	80019e4 <HAL_GetTick>
 8000a92:	4602      	mov	r2, r0
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <main+0x484>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a9e:	d921      	bls.n	8000ae4 <main+0x46c>
			  sleepFlag = 0;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <main+0x488>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, (uint8_t*) "AT+SLEEP\n", 9, 1000);    //For JDY-10
 8000aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aaa:	2209      	movs	r2, #9
 8000aac:	4916      	ldr	r1, [pc, #88]	; (8000b08 <main+0x490>)
 8000aae:	4812      	ldr	r0, [pc, #72]	; (8000af8 <main+0x480>)
 8000ab0:	f006 f8a5 	bl	8006bfe <HAL_UART_Transmit>
			  HAL_Delay(200);
 8000ab4:	20c8      	movs	r0, #200	; 0xc8
 8000ab6:	f000 ffa1 	bl	80019fc <HAL_Delay>
			  HAL_UART_Transmit(&huart1, (uint8_t*) "AT+SLEEP\r\n", 10, 1000); //For JDY-19
 8000aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abe:	220a      	movs	r2, #10
 8000ac0:	4912      	ldr	r1, [pc, #72]	; (8000b0c <main+0x494>)
 8000ac2:	480d      	ldr	r0, [pc, #52]	; (8000af8 <main+0x480>)
 8000ac4:	f006 f89b 	bl	8006bfe <HAL_UART_Transmit>
			  HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_SET); // LED on.
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2108      	movs	r1, #8
 8000acc:	4810      	ldr	r0, [pc, #64]	; (8000b10 <main+0x498>)
 8000ace:	f003 fe03 	bl	80046d8 <HAL_GPIO_WritePin>
			  HAL_TIM_Base_Start_IT(&htim15); // Start timer for turn off LED.
 8000ad2:	4810      	ldr	r0, [pc, #64]	; (8000b14 <main+0x49c>)
 8000ad4:	f004 fec4 	bl	8005860 <HAL_TIM_Base_Start_IT>
			  HAL_UART_DeInit(&huart1);
 8000ad8:	4807      	ldr	r0, [pc, #28]	; (8000af8 <main+0x480>)
 8000ada:	f006 f85b 	bl	8006b94 <HAL_UART_DeInit>
			  initUART = 1;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <main+0x4a0>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  HAL_Delay(500);
 8000ae4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ae8:	f000 ff88 	bl	80019fc <HAL_Delay>
  {
 8000aec:	e626      	b.n	800073c <main+0xc4>
 8000aee:	bf00      	nop
 8000af0:	20000058 	.word	0x20000058
 8000af4:	200012f8 	.word	0x200012f8
 8000af8:	200011d8 	.word	0x200011d8
 8000afc:	20001128 	.word	0x20001128
 8000b00:	20000001 	.word	0x20000001
 8000b04:	20001060 	.word	0x20001060
 8000b08:	08007770 	.word	0x08007770
 8000b0c:	0800777c 	.word	0x0800777c
 8000b10:	48000400 	.word	0x48000400
 8000b14:	200010c4 	.word	0x200010c4
 8000b18:	20000002 	.word	0x20000002

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0a4      	sub	sp, #144	; 0x90
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b26:	2244      	movs	r2, #68	; 0x44
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f006 fe0c 	bl	8007748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2234      	movs	r2, #52	; 0x34
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f006 fdfe 	bl	8007748 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b4c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b50:	f003 fde8 	bl	8004724 <HAL_PWREx_ControlVoltageScaling>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000b5a:	f000 fb1d 	bl	8001198 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b5e:	2310      	movs	r3, #16
 8000b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b62:	2301      	movs	r3, #1
 8000b64:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8000b6a:	2370      	movs	r3, #112	; 0x70
 8000b6c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b76:	4618      	mov	r0, r3
 8000b78:	f003 fe2a 	bl	80047d0 <HAL_RCC_OscConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000b82:	f000 fb09 	bl	8001198 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b86:	230f      	movs	r3, #15
 8000b88:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8000b8e:	23b0      	movs	r3, #176	; 0xb0
 8000b90:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f004 fa7b 	bl	800509c <HAL_RCC_ClockConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bac:	f000 faf4 	bl	8001198 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 8000bb0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bb4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f004 fc71 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000bc8:	f000 fae6 	bl	8001198 <Error_Handler>
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3790      	adds	r7, #144	; 0x90
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
 8000bf4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bf6:	4b32      	ldr	r3, [pc, #200]	; (8000cc0 <MX_ADC1_Init+0xec>)
 8000bf8:	4a32      	ldr	r2, [pc, #200]	; (8000cc4 <MX_ADC1_Init+0xf0>)
 8000bfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bfc:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <MX_ADC1_Init+0xec>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c02:	4b2f      	ldr	r3, [pc, #188]	; (8000cc0 <MX_ADC1_Init+0xec>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c08:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <MX_ADC1_Init+0xec>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c0e:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <MX_ADC1_Init+0xec>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c14:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <MX_ADC1_Init+0xec>)
 8000c16:	2204      	movs	r2, #4
 8000c18:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c1a:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <MX_ADC1_Init+0xec>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c20:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <MX_ADC1_Init+0xec>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c26:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <MX_ADC1_Init+0xec>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c2c:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <MX_ADC1_Init+0xec>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8000c34:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <MX_ADC1_Init+0xec>)
 8000c36:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c3c:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <MX_ADC1_Init+0xec>)
 8000c3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <MX_ADC1_Init+0xec>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <MX_ADC1_Init+0xec>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MX_ADC1_Init+0xec>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c5a:	4819      	ldr	r0, [pc, #100]	; (8000cc0 <MX_ADC1_Init+0xec>)
 8000c5c:	f001 f920 	bl	8001ea0 <HAL_ADC_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000c66:	f000 fa97 	bl	8001198 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	4812      	ldr	r0, [pc, #72]	; (8000cc0 <MX_ADC1_Init+0xec>)
 8000c76:	f002 fc25 	bl	80034c4 <HAL_ADCEx_MultiModeConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000c80:	f000 fa8a 	bl	8001198 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_ADC1_Init+0xf4>)
 8000c86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c88:	2306      	movs	r3, #6
 8000c8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c90:	237f      	movs	r3, #127	; 0x7f
 8000c92:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 1;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <MX_ADC1_Init+0xec>)
 8000ca2:	f001 fe7d 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000cac:	f000 fa74 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000cb0:	217f      	movs	r1, #127	; 0x7f
 8000cb2:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <MX_ADC1_Init+0xec>)
 8000cb4:	f002 fb73 	bl	800339e <HAL_ADCEx_Calibration_Start>

  /* USER CODE END ADC1_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	; 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000112c 	.word	0x2000112c
 8000cc4:	50040000 	.word	0x50040000
 8000cc8:	43210000 	.word	0x43210000

08000ccc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
 8000ce0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ce2:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <MX_ADC2_Init+0xbc>)
 8000ce4:	4a29      	ldr	r2, [pc, #164]	; (8000d8c <MX_ADC2_Init+0xc0>)
 8000ce6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ce8:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <MX_ADC2_Init+0xbc>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000cee:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <MX_ADC2_Init+0xbc>)
 8000cf0:	2210      	movs	r2, #16
 8000cf2:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cf4:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <MX_ADC2_Init+0xbc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cfa:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <MX_ADC2_Init+0xbc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d00:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <MX_ADC2_Init+0xbc>)
 8000d02:	2204      	movs	r2, #4
 8000d04:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <MX_ADC2_Init+0xbc>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <MX_ADC2_Init+0xbc>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MX_ADC2_Init+0xbc>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_ADC2_Init+0xbc>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <MX_ADC2_Init+0xbc>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <MX_ADC2_Init+0xbc>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <MX_ADC2_Init+0xbc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_ADC2_Init+0xbc>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <MX_ADC2_Init+0xbc>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d42:	4811      	ldr	r0, [pc, #68]	; (8000d88 <MX_ADC2_Init+0xbc>)
 8000d44:	f001 f8ac 	bl	8001ea0 <HAL_ADC_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000d4e:	f000 fa23 	bl	8001198 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_ADC2_Init+0xc4>)
 8000d54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d56:	2306      	movs	r3, #6
 8000d58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000d5a:	2306      	movs	r3, #6
 8000d5c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d5e:	237f      	movs	r3, #127	; 0x7f
 8000d60:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d62:	2304      	movs	r3, #4
 8000d64:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 3;
 8000d66:	2303      	movs	r3, #3
 8000d68:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <MX_ADC2_Init+0xbc>)
 8000d70:	f001 fe16 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000d7a:	f000 fa0d 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20001060 	.word	0x20001060
 8000d8c:	50040100 	.word	0x50040100
 8000d90:	32601000 	.word	0x32601000

08000d94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08e      	sub	sp, #56	; 0x38
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db4:	463b      	mov	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]
 8000dc2:	615a      	str	r2, [r3, #20]
 8000dc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dc6:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <MX_TIM2_Init+0xf8>)
 8000dc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dcc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dce:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <MX_TIM2_Init+0xf8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <MX_TIM2_Init+0xf8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32;
 8000dda:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <MX_TIM2_Init+0xf8>)
 8000ddc:	2220      	movs	r2, #32
 8000dde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <MX_TIM2_Init+0xf8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000de6:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <MX_TIM2_Init+0xf8>)
 8000de8:	2280      	movs	r2, #128	; 0x80
 8000dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dec:	4827      	ldr	r0, [pc, #156]	; (8000e8c <MX_TIM2_Init+0xf8>)
 8000dee:	f004 fcdf 	bl	80057b0 <HAL_TIM_Base_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000df8:	f000 f9ce 	bl	8001198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e06:	4619      	mov	r1, r3
 8000e08:	4820      	ldr	r0, [pc, #128]	; (8000e8c <MX_TIM2_Init+0xf8>)
 8000e0a:	f005 f963 	bl	80060d4 <HAL_TIM_ConfigClockSource>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000e14:	f000 f9c0 	bl	8001198 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000e18:	481c      	ldr	r0, [pc, #112]	; (8000e8c <MX_TIM2_Init+0xf8>)
 8000e1a:	f004 fda4 	bl	8005966 <HAL_TIM_OC_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e24:	f000 f9b8 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e28:	2320      	movs	r3, #32
 8000e2a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4619      	mov	r1, r3
 8000e36:	4815      	ldr	r0, [pc, #84]	; (8000e8c <MX_TIM2_Init+0xf8>)
 8000e38:	f005 fdda 	bl	80069f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000e42:	f000 f9a9 	bl	8001198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000e46:	2330      	movs	r3, #48	; 0x30
 8000e48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	220c      	movs	r2, #12
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480b      	ldr	r0, [pc, #44]	; (8000e8c <MX_TIM2_Init+0xf8>)
 8000e5e:	f005 f8c3 	bl	8005fe8 <HAL_TIM_OC_ConfigChannel>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000e68:	f000 f996 	bl	8001198 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_4);
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <MX_TIM2_Init+0xf8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	69da      	ldr	r2, [r3, #28]
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_TIM2_Init+0xf8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e7a:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <MX_TIM2_Init+0xf8>)
 8000e7e:	f000 fab7 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 8000e82:	bf00      	nop
 8000e84:	3738      	adds	r7, #56	; 0x38
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200012a8 	.word	0x200012a8

08000e90 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_TIM6_Init+0x64>)
 8000ea2:	4a15      	ldr	r2, [pc, #84]	; (8000ef8 <MX_TIM6_Init+0x68>)
 8000ea4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <MX_TIM6_Init+0x64>)
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_TIM6_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <MX_TIM6_Init+0x64>)
 8000eb4:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000eb8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_TIM6_Init+0x64>)
 8000ebc:	2280      	movs	r2, #128	; 0x80
 8000ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ec0:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <MX_TIM6_Init+0x64>)
 8000ec2:	f004 fc75 	bl	80057b0 <HAL_TIM_Base_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ecc:	f000 f964 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	4619      	mov	r1, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_TIM6_Init+0x64>)
 8000ede:	f005 fd87 	bl	80069f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ee8:	f000 f956 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20001258 	.word	0x20001258
 8000ef8:	40001000 	.word	0x40001000

08000efc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <MX_TIM15_Init+0xac>)
 8000f1c:	4a23      	ldr	r2, [pc, #140]	; (8000fac <MX_TIM15_Init+0xb0>)
 8000f1e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <MX_TIM15_Init+0xac>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <MX_TIM15_Init+0xac>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <MX_TIM15_Init+0xac>)
 8000f2e:	2264      	movs	r2, #100	; 0x64
 8000f30:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <MX_TIM15_Init+0xac>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <MX_TIM15_Init+0xac>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_TIM15_Init+0xac>)
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000f44:	4818      	ldr	r0, [pc, #96]	; (8000fa8 <MX_TIM15_Init+0xac>)
 8000f46:	f004 fc33 	bl	80057b0 <HAL_TIM_Base_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8000f50:	f000 f922 	bl	8001198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <MX_TIM15_Init+0xac>)
 8000f62:	f005 f8b7 	bl	80060d4 <HAL_TIM_ConfigClockSource>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8000f6c:	f000 f914 	bl	8001198 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim15, TIM_OPMODE_SINGLE) != HAL_OK)
 8000f70:	2108      	movs	r1, #8
 8000f72:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <MX_TIM15_Init+0xac>)
 8000f74:	f004 febe 	bl	8005cf4 <HAL_TIM_OnePulse_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM15_Init+0x86>
  {
    Error_Handler();
 8000f7e:	f000 f90b 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f82:	2320      	movs	r3, #32
 8000f84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <MX_TIM15_Init+0xac>)
 8000f90:	f005 fd2e 	bl	80069f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM15_Init+0xa2>
  {
    Error_Handler();
 8000f9a:	f000 f8fd 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */
  /* USER CODE END TIM15_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	3720      	adds	r7, #32
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200010c4 	.word	0x200010c4
 8000fac:	40014000 	.word	0x40014000

08000fb0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_TIM16_Init+0x58>)
 8000fb6:	4a15      	ldr	r2, [pc, #84]	; (800100c <MX_TIM16_Init+0x5c>)
 8000fb8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_TIM16_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_TIM16_Init+0x58>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 30000;
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <MX_TIM16_Init+0x58>)
 8000fc8:	f247 5230 	movw	r2, #30000	; 0x7530
 8000fcc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_TIM16_Init+0x58>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_TIM16_Init+0x58>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <MX_TIM16_Init+0x58>)
 8000fdc:	2280      	movs	r2, #128	; 0x80
 8000fde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000fe0:	4809      	ldr	r0, [pc, #36]	; (8001008 <MX_TIM16_Init+0x58>)
 8000fe2:	f004 fbe5 	bl	80057b0 <HAL_TIM_Base_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000fec:	f000 f8d4 	bl	8001198 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_TIM16_Init+0x58>)
 8000ff4:	f004 fe7e 	bl	8005cf4 <HAL_TIM_OnePulse_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8000ffe:	f000 f8cb 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20001300 	.word	0x20001300
 800100c:	40014400 	.word	0x40014400

08001010 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <MX_USART1_UART_Init+0x60>)
 8001016:	4a17      	ldr	r2, [pc, #92]	; (8001074 <MX_USART1_UART_Init+0x64>)
 8001018:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_USART1_UART_Init+0x60>)
 800101c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001020:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <MX_USART1_UART_Init+0x60>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_USART1_UART_Init+0x60>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <MX_USART1_UART_Init+0x60>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_USART1_UART_Init+0x60>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <MX_USART1_UART_Init+0x60>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <MX_USART1_UART_Init+0x60>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <MX_USART1_UART_Init+0x60>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <MX_USART1_UART_Init+0x60>)
 800104e:	2220      	movs	r2, #32
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <MX_USART1_UART_Init+0x60>)
 8001054:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001058:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_USART1_UART_Init+0x60>)
 800105c:	f005 fd4c 	bl	8006af8 <HAL_UART_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001066:	f000 f897 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200011d8 	.word	0x200011d8
 8001074:	40013800 	.word	0x40013800

08001078 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <MX_DMA_Init+0x38>)
 8001080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <MX_DMA_Init+0x38>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6493      	str	r3, [r2, #72]	; 0x48
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_DMA_Init+0x38>)
 800108c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	200f      	movs	r0, #15
 800109c:	f002 fb8d 	bl	80037ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010a0:	200f      	movs	r0, #15
 80010a2:	f002 fba6 	bl	80037f2 <HAL_NVIC_EnableIRQ>

}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000

080010b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4b30      	ldr	r3, [pc, #192]	; (800118c <MX_GPIO_Init+0xd8>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	4a2f      	ldr	r2, [pc, #188]	; (800118c <MX_GPIO_Init+0xd8>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d6:	4b2d      	ldr	r3, [pc, #180]	; (800118c <MX_GPIO_Init+0xd8>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <MX_GPIO_Init+0xd8>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a29      	ldr	r2, [pc, #164]	; (800118c <MX_GPIO_Init+0xd8>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b27      	ldr	r3, [pc, #156]	; (800118c <MX_GPIO_Init+0xd8>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2140      	movs	r1, #64	; 0x40
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001102:	f003 fae9 	bl	80046d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	2108      	movs	r1, #8
 800110a:	4821      	ldr	r0, [pc, #132]	; (8001190 <MX_GPIO_Init+0xdc>)
 800110c:	f003 fae4 	bl	80046d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001110:	2340      	movs	r3, #64	; 0x40
 8001112:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001114:	2311      	movs	r3, #17
 8001116:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	4619      	mov	r1, r3
 8001126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112a:	f003 f879 	bl	8004220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800112e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001132:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_GPIO_Init+0xe0>)
 8001136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	4619      	mov	r1, r3
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f003 f86b 	bl	8004220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800114a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800114e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	4619      	mov	r1, r3
 800115e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001162:	f003 f85d 	bl	8004220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001166:	2308      	movs	r3, #8
 8001168:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	4619      	mov	r1, r3
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <MX_GPIO_Init+0xdc>)
 800117e:	f003 f84f 	bl	8004220 <HAL_GPIO_Init>

}
 8001182:	bf00      	nop
 8001184:	3720      	adds	r7, #32
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000
 8001190:	48000400 	.word	0x48000400
 8001194:	10120000 	.word	0x10120000

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_MspInit+0x44>)
 80011b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <HAL_MspInit+0x44>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_MspInit+0x44>)
 80011bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_MspInit+0x44>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_MspInit+0x44>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	6593      	str	r3, [r2, #88]	; 0x58
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_MspInit+0x44>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000

080011f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	; 0x30
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a3b      	ldr	r2, [pc, #236]	; (80012fc <HAL_ADC_MspInit+0x10c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d135      	bne.n	800127e <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001212:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <HAL_ADC_MspInit+0x110>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	4a39      	ldr	r2, [pc, #228]	; (8001300 <HAL_ADC_MspInit+0x110>)
 800121a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800121c:	4b38      	ldr	r3, [pc, #224]	; (8001300 <HAL_ADC_MspInit+0x110>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d10b      	bne.n	800123c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001224:	4b37      	ldr	r3, [pc, #220]	; (8001304 <HAL_ADC_MspInit+0x114>)
 8001226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001228:	4a36      	ldr	r2, [pc, #216]	; (8001304 <HAL_ADC_MspInit+0x114>)
 800122a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800122e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001230:	4b34      	ldr	r3, [pc, #208]	; (8001304 <HAL_ADC_MspInit+0x114>)
 8001232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001234:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	4b31      	ldr	r3, [pc, #196]	; (8001304 <HAL_ADC_MspInit+0x114>)
 800123e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001240:	4a30      	ldr	r2, [pc, #192]	; (8001304 <HAL_ADC_MspInit+0x114>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001248:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <HAL_ADC_MspInit+0x114>)
 800124a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001254:	2302      	movs	r3, #2
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001258:	230b      	movs	r3, #11
 800125a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4619      	mov	r1, r3
 8001266:	4828      	ldr	r0, [pc, #160]	; (8001308 <HAL_ADC_MspInit+0x118>)
 8001268:	f002 ffda 	bl	8004220 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2012      	movs	r0, #18
 8001272:	f002 faa2 	bl	80037ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001276:	2012      	movs	r0, #18
 8001278:	f002 fabb 	bl	80037f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800127c:	e03a      	b.n	80012f4 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a22      	ldr	r2, [pc, #136]	; (800130c <HAL_ADC_MspInit+0x11c>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d135      	bne.n	80012f4 <HAL_ADC_MspInit+0x104>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <HAL_ADC_MspInit+0x110>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <HAL_ADC_MspInit+0x110>)
 8001290:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_ADC_MspInit+0x110>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d10b      	bne.n	80012b2 <HAL_ADC_MspInit+0xc2>
      __HAL_RCC_ADC_CLK_ENABLE();
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <HAL_ADC_MspInit+0x114>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	4a19      	ldr	r2, [pc, #100]	; (8001304 <HAL_ADC_MspInit+0x114>)
 80012a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <HAL_ADC_MspInit+0x114>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <HAL_ADC_MspInit+0x114>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	4a13      	ldr	r2, [pc, #76]	; (8001304 <HAL_ADC_MspInit+0x114>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_ADC_MspInit+0x114>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012ce:	230b      	movs	r3, #11
 80012d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e0:	f002 ff9e 	bl	8004220 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	2012      	movs	r0, #18
 80012ea:	f002 fa66 	bl	80037ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012ee:	2012      	movs	r0, #18
 80012f0:	f002 fa7f 	bl	80037f2 <HAL_NVIC_EnableIRQ>
}
 80012f4:	bf00      	nop
 80012f6:	3730      	adds	r7, #48	; 0x30
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	50040000 	.word	0x50040000
 8001300:	2000105c 	.word	0x2000105c
 8001304:	40021000 	.word	0x40021000
 8001308:	48000400 	.word	0x48000400
 800130c:	50040100 	.word	0x50040100

08001310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001320:	d10c      	bne.n	800133c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001322:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <HAL_TIM_Base_MspInit+0xd0>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	4a2e      	ldr	r2, [pc, #184]	; (80013e0 <HAL_TIM_Base_MspInit+0xd0>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6593      	str	r3, [r2, #88]	; 0x58
 800132e:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <HAL_TIM_Base_MspInit+0xd0>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800133a:	e04c      	b.n	80013d6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a28      	ldr	r2, [pc, #160]	; (80013e4 <HAL_TIM_Base_MspInit+0xd4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d114      	bne.n	8001370 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001346:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <HAL_TIM_Base_MspInit+0xd0>)
 8001348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134a:	4a25      	ldr	r2, [pc, #148]	; (80013e0 <HAL_TIM_Base_MspInit+0xd0>)
 800134c:	f043 0310 	orr.w	r3, r3, #16
 8001350:	6593      	str	r3, [r2, #88]	; 0x58
 8001352:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <HAL_TIM_Base_MspInit+0xd0>)
 8001354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2036      	movs	r0, #54	; 0x36
 8001364:	f002 fa29 	bl	80037ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001368:	2036      	movs	r0, #54	; 0x36
 800136a:	f002 fa42 	bl	80037f2 <HAL_NVIC_EnableIRQ>
}
 800136e:	e032      	b.n	80013d6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM15)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a1c      	ldr	r2, [pc, #112]	; (80013e8 <HAL_TIM_Base_MspInit+0xd8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d114      	bne.n	80013a4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_TIM_Base_MspInit+0xd0>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137e:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <HAL_TIM_Base_MspInit+0xd0>)
 8001380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001384:	6613      	str	r3, [r2, #96]	; 0x60
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_TIM_Base_MspInit+0xd0>)
 8001388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	2018      	movs	r0, #24
 8001398:	f002 fa0f 	bl	80037ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800139c:	2018      	movs	r0, #24
 800139e:	f002 fa28 	bl	80037f2 <HAL_NVIC_EnableIRQ>
}
 80013a2:	e018      	b.n	80013d6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM16)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a10      	ldr	r2, [pc, #64]	; (80013ec <HAL_TIM_Base_MspInit+0xdc>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d113      	bne.n	80013d6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_TIM_Base_MspInit+0xd0>)
 80013b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <HAL_TIM_Base_MspInit+0xd0>)
 80013b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b8:	6613      	str	r3, [r2, #96]	; 0x60
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_TIM_Base_MspInit+0xd0>)
 80013bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	2019      	movs	r0, #25
 80013cc:	f002 f9f5 	bl	80037ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013d0:	2019      	movs	r0, #25
 80013d2:	f002 fa0e 	bl	80037f2 <HAL_NVIC_EnableIRQ>
}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40001000 	.word	0x40001000
 80013e8:	40014000 	.word	0x40014000
 80013ec:	40014400 	.word	0x40014400

080013f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001410:	d11c      	bne.n	800144c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_TIM_MspPostInit+0x64>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <HAL_TIM_MspPostInit+0x64>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_TIM_MspPostInit+0x64>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800142a:	2308      	movs	r3, #8
 800142c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800143a:	2301      	movs	r3, #1
 800143c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	4619      	mov	r1, r3
 8001444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001448:	f002 feea 	bl	8004220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800144c:	bf00      	nop
 800144e:	3720      	adds	r7, #32
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40021000 	.word	0x40021000

08001458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a2c      	ldr	r2, [pc, #176]	; (8001528 <HAL_UART_MspInit+0xd0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d152      	bne.n	8001520 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800147a:	4b2c      	ldr	r3, [pc, #176]	; (800152c <HAL_UART_MspInit+0xd4>)
 800147c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147e:	4a2b      	ldr	r2, [pc, #172]	; (800152c <HAL_UART_MspInit+0xd4>)
 8001480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001484:	6613      	str	r3, [r2, #96]	; 0x60
 8001486:	4b29      	ldr	r3, [pc, #164]	; (800152c <HAL_UART_MspInit+0xd4>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	4b26      	ldr	r3, [pc, #152]	; (800152c <HAL_UART_MspInit+0xd4>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	4a25      	ldr	r2, [pc, #148]	; (800152c <HAL_UART_MspInit+0xd4>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149e:	4b23      	ldr	r3, [pc, #140]	; (800152c <HAL_UART_MspInit+0xd4>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014bc:	2307      	movs	r3, #7
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ca:	f002 fea9 	bl	8004220 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <HAL_UART_MspInit+0xd8>)
 80014d0:	4a18      	ldr	r2, [pc, #96]	; (8001534 <HAL_UART_MspInit+0xdc>)
 80014d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <HAL_UART_MspInit+0xd8>)
 80014d6:	2202      	movs	r2, #2
 80014d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_UART_MspInit+0xd8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <HAL_UART_MspInit+0xd8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_UART_MspInit+0xd8>)
 80014e8:	2280      	movs	r2, #128	; 0x80
 80014ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_UART_MspInit+0xd8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_UART_MspInit+0xd8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_UART_MspInit+0xd8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_UART_MspInit+0xd8>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001504:	480a      	ldr	r0, [pc, #40]	; (8001530 <HAL_UART_MspInit+0xd8>)
 8001506:	f002 f98f 	bl	8003828 <HAL_DMA_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8001510:	f7ff fe42 	bl	8001198 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a06      	ldr	r2, [pc, #24]	; (8001530 <HAL_UART_MspInit+0xd8>)
 8001518:	66da      	str	r2, [r3, #108]	; 0x6c
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <HAL_UART_MspInit+0xd8>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40013800 	.word	0x40013800
 800152c:	40021000 	.word	0x40021000
 8001530:	20001190 	.word	0x20001190
 8001534:	40020058 	.word	0x40020058

08001538 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <HAL_UART_MspDeInit+0x3c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d110      	bne.n	800156c <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_UART_MspDeInit+0x40>)
 800154c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_UART_MspDeInit+0x40>)
 8001550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001554:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001556:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800155a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155e:	f002 ffd1 	bl	8004504 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001566:	4618      	mov	r0, r3
 8001568:	f002 fa16 	bl	8003998 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40013800 	.word	0x40013800
 8001578:	40021000 	.word	0x40021000

0800157c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <HardFault_Handler+0x4>

08001590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <MemManage_Handler+0x4>

08001596 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <BusFault_Handler+0x4>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <UsageFault_Handler+0x4>

080015a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d0:	f000 f9f4 	bl	80019bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <DMA1_Channel5_IRQHandler+0x10>)
 80015de:	f002 facd 	bl	8003b7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20001190 	.word	0x20001190

080015ec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	uint16_t batResult;
	if( __HAL_ADC_GET_FLAG(&hadc1, ADC_ISR_EOC) != RESET) {
 80015f2:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <ADC1_2_IRQHandler+0x104>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d149      	bne.n	8001694 <ADC1_2_IRQHandler+0xa8>
	  adcResult = HAL_ADC_GetValue(&hadc1);
 8001600:	483b      	ldr	r0, [pc, #236]	; (80016f0 <ADC1_2_IRQHandler+0x104>)
 8001602:	f000 ff87 	bl	8002514 <HAL_ADC_GetValue>
 8001606:	4603      	mov	r3, r0
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b3a      	ldr	r3, [pc, #232]	; (80016f4 <ADC1_2_IRQHandler+0x108>)
 800160c:	801a      	strh	r2, [r3, #0]
	  if (adcResult > 0) {
 800160e:	4b39      	ldr	r3, [pc, #228]	; (80016f4 <ADC1_2_IRQHandler+0x108>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d03e      	beq.n	8001694 <ADC1_2_IRQHandler+0xa8>
		  adcResult = adcResult & 0x0FFF;
 8001616:	4b37      	ldr	r3, [pc, #220]	; (80016f4 <ADC1_2_IRQHandler+0x108>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800161e:	b29a      	uxth	r2, r3
 8001620:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <ADC1_2_IRQHandler+0x108>)
 8001622:	801a      	strh	r2, [r3, #0]
		  adcResult = adcResult >> 2;
 8001624:	4b33      	ldr	r3, [pc, #204]	; (80016f4 <ADC1_2_IRQHandler+0x108>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	089b      	lsrs	r3, r3, #2
 800162a:	b29a      	uxth	r2, r3
 800162c:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <ADC1_2_IRQHandler+0x108>)
 800162e:	801a      	strh	r2, [r3, #0]
		  adcResult = adcResult + 6; // Reserved additional parameter in send buffer ( 12 bytes )
 8001630:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <ADC1_2_IRQHandler+0x108>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	3306      	adds	r3, #6
 8001636:	b29a      	uxth	r2, r3
 8001638:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <ADC1_2_IRQHandler+0x108>)
 800163a:	801a      	strh	r2, [r3, #0]
		  if (spectrData[adcResult] < 0xFFFF) // Check overflow in channel.
 800163c:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <ADC1_2_IRQHandler+0x108>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <ADC1_2_IRQHandler+0x10c>)
 8001644:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800164c:	4293      	cmp	r3, r2
 800164e:	d009      	beq.n	8001664 <ADC1_2_IRQHandler+0x78>
			  spectrData[adcResult]++;
 8001650:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <ADC1_2_IRQHandler+0x108>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	4a28      	ldr	r2, [pc, #160]	; (80016f8 <ADC1_2_IRQHandler+0x10c>)
 8001656:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800165a:	3201      	adds	r2, #1
 800165c:	b291      	uxth	r1, r2
 800165e:	4a26      	ldr	r2, [pc, #152]	; (80016f8 <ADC1_2_IRQHandler+0x10c>)
 8001660:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  counterCC++;
 8001664:	4b25      	ldr	r3, [pc, #148]	; (80016fc <ADC1_2_IRQHandler+0x110>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	3301      	adds	r3, #1
 800166a:	4a24      	ldr	r2, [pc, #144]	; (80016fc <ADC1_2_IRQHandler+0x110>)
 800166c:	6013      	str	r3, [r2, #0]
		  counterALL++;
 800166e:	4b24      	ldr	r3, [pc, #144]	; (8001700 <ADC1_2_IRQHandler+0x114>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	4a22      	ldr	r2, [pc, #136]	; (8001700 <ADC1_2_IRQHandler+0x114>)
 8001676:	6013      	str	r3, [r2, #0]
		  if ((cfgData & 64) > 0) { // Check config data for LED activity
 8001678:	4b22      	ldr	r3, [pc, #136]	; (8001704 <ADC1_2_IRQHandler+0x118>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001680:	2b00      	cmp	r3, #0
 8001682:	dd07      	ble.n	8001694 <ADC1_2_IRQHandler+0xa8>
			  HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_SET); // LED on.
 8001684:	2201      	movs	r2, #1
 8001686:	2108      	movs	r1, #8
 8001688:	481f      	ldr	r0, [pc, #124]	; (8001708 <ADC1_2_IRQHandler+0x11c>)
 800168a:	f003 f825 	bl	80046d8 <HAL_GPIO_WritePin>
			  HAL_TIM_Base_Start_IT(&htim15); // Start timer for turn off LED.
 800168e:	481f      	ldr	r0, [pc, #124]	; (800170c <ADC1_2_IRQHandler+0x120>)
 8001690:	f004 f8e6 	bl	8005860 <HAL_TIM_Base_Start_IT>
		  }
	  }
	}
	// Battery voltage.
	if( __HAL_ADC_GET_FLAG(&hadc2, ADC_ISR_EOC) != RESET) {
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <ADC1_2_IRQHandler+0x124>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d11c      	bne.n	80016dc <ADC1_2_IRQHandler+0xf0>
		HAL_GPIO_WritePin(GPIOA, COM_PIN, GPIO_PIN_SET);
 80016a2:	2201      	movs	r2, #1
 80016a4:	2140      	movs	r1, #64	; 0x40
 80016a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016aa:	f003 f815 	bl	80046d8 <HAL_GPIO_WritePin>
		batResult = HAL_ADC_GetValue(&hadc2);
 80016ae:	4818      	ldr	r0, [pc, #96]	; (8001710 <ADC1_2_IRQHandler+0x124>)
 80016b0:	f000 ff30 	bl	8002514 <HAL_ADC_GetValue>
 80016b4:	4603      	mov	r3, r0
 80016b6:	80fb      	strh	r3, [r7, #6]
		if ( batResult > 0 ) {
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00e      	beq.n	80016dc <ADC1_2_IRQHandler+0xf0>
			spectrData[4] = (spectrData[4] & 0xFF00) | (batResult & 0x00FF);
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <ADC1_2_IRQHandler+0x10c>)
 80016c0:	891b      	ldrh	r3, [r3, #8]
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	4313      	orrs	r3, r2
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <ADC1_2_IRQHandler+0x10c>)
 80016da:	811a      	strh	r2, [r3, #8]
		}
	}
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <ADC1_2_IRQHandler+0x104>)
 80016de:	f000 ff27 	bl	8002530 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80016e2:	480b      	ldr	r0, [pc, #44]	; (8001710 <ADC1_2_IRQHandler+0x124>)
 80016e4:	f000 ff24 	bl	8002530 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2000112c 	.word	0x2000112c
 80016f4:	20000054 	.word	0x20000054
 80016f8:	20000058 	.word	0x20000058
 80016fc:	2000004c 	.word	0x2000004c
 8001700:	20000050 	.word	0x20000050
 8001704:	200012f6 	.word	0x200012f6
 8001708:	48000400 	.word	0x48000400
 800170c:	200010c4 	.word	0x200010c4
 8001710:	20001060 	.word	0x20001060

08001714 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_RESET); // LED off.
 8001718:	2200      	movs	r2, #0
 800171a:	2108      	movs	r1, #8
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 800171e:	f002 ffdb 	bl	80046d8 <HAL_GPIO_WritePin>
	//HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001724:	f004 fb40 	bl	8005da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim15);
 8001728:	4803      	ldr	r0, [pc, #12]	; (8001738 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 800172a:	f004 f8ed 	bl	8005908 <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	48000400 	.word	0x48000400
 8001738:	200010c4 	.word	0x200010c4

0800173c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_4);
 8001740:	210c      	movs	r1, #12
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8001744:	f004 fa4e 	bl	8005be4 <HAL_TIM_OC_Stop>

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <TIM1_UP_TIM16_IRQHandler+0x20>)
 800174a:	f004 fb2d 	bl	8005da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim16);
 800174e:	4803      	ldr	r0, [pc, #12]	; (800175c <TIM1_UP_TIM16_IRQHandler+0x20>)
 8001750:	f004 f8da 	bl	8005908 <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	200012a8 	.word	0x200012a8
 800175c:	20001300 	.word	0x20001300

08001760 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001764:	4835      	ldr	r0, [pc, #212]	; (800183c <TIM6_IRQHandler+0xdc>)
 8001766:	f004 fb1f 	bl	8005da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  if ((cfgData & 0x1) > 0 ){  // Test first config bit.
 800176a:	4b35      	ldr	r3, [pc, #212]	; (8001840 <TIM6_IRQHandler+0xe0>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	dd5f      	ble.n	8001836 <TIM6_IRQHandler+0xd6>
	  switch (alarmLevel) {
 8001776:	4b33      	ldr	r3, [pc, #204]	; (8001844 <TIM6_IRQHandler+0xe4>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d85b      	bhi.n	8001836 <TIM6_IRQHandler+0xd6>
 800177e:	a201      	add	r2, pc, #4	; (adr r2, 8001784 <TIM6_IRQHandler+0x24>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	08001795 	.word	0x08001795
 8001788:	0800179d 	.word	0x0800179d
 800178c:	080017cd 	.word	0x080017cd
 8001790:	080017fd 	.word	0x080017fd
	  case 0:
		  alarmCount = 0;
 8001794:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <TIM6_IRQHandler+0xe8>)
 8001796:	2200      	movs	r2, #0
 8001798:	801a      	strh	r2, [r3, #0]
		  break;
 800179a:	e04c      	b.n	8001836 <TIM6_IRQHandler+0xd6>
	  case 1:
		  if (alarmCount-- <= 0) {
 800179c:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <TIM6_IRQHandler+0xe8>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	1e5a      	subs	r2, r3, #1
 80017a2:	b291      	uxth	r1, r2
 80017a4:	4a28      	ldr	r2, [pc, #160]	; (8001848 <TIM6_IRQHandler+0xe8>)
 80017a6:	8011      	strh	r1, [r2, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d103      	bne.n	80017b4 <TIM6_IRQHandler+0x54>
			  alarmCount = 4;
 80017ac:	4b26      	ldr	r3, [pc, #152]	; (8001848 <TIM6_IRQHandler+0xe8>)
 80017ae:	2204      	movs	r2, #4
 80017b0:	801a      	strh	r2, [r3, #0]
			  if (alarmCount > 2) {
				  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
				  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
			  }
		  }
		  break;
 80017b2:	e03b      	b.n	800182c <TIM6_IRQHandler+0xcc>
			  if (alarmCount > 2) {
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <TIM6_IRQHandler+0xe8>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d937      	bls.n	800182c <TIM6_IRQHandler+0xcc>
				  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
 80017bc:	210c      	movs	r1, #12
 80017be:	4823      	ldr	r0, [pc, #140]	; (800184c <TIM6_IRQHandler+0xec>)
 80017c0:	f004 f932 	bl	8005a28 <HAL_TIM_OC_Start>
				  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 80017c4:	4822      	ldr	r0, [pc, #136]	; (8001850 <TIM6_IRQHandler+0xf0>)
 80017c6:	f004 f84b 	bl	8005860 <HAL_TIM_Base_Start_IT>
		  break;
 80017ca:	e02f      	b.n	800182c <TIM6_IRQHandler+0xcc>
	  case 2:
		  if (alarmCount-- <= 0) {
 80017cc:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <TIM6_IRQHandler+0xe8>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	1e5a      	subs	r2, r3, #1
 80017d2:	b291      	uxth	r1, r2
 80017d4:	4a1c      	ldr	r2, [pc, #112]	; (8001848 <TIM6_IRQHandler+0xe8>)
 80017d6:	8011      	strh	r1, [r2, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d103      	bne.n	80017e4 <TIM6_IRQHandler+0x84>
			  alarmCount = 5;
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <TIM6_IRQHandler+0xe8>)
 80017de:	2205      	movs	r2, #5
 80017e0:	801a      	strh	r2, [r3, #0]
			  if (alarmCount > 2) {
				  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
				  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
			  }
		  }
		  break;
 80017e2:	e025      	b.n	8001830 <TIM6_IRQHandler+0xd0>
			  if (alarmCount > 2) {
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <TIM6_IRQHandler+0xe8>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d921      	bls.n	8001830 <TIM6_IRQHandler+0xd0>
				  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
 80017ec:	210c      	movs	r1, #12
 80017ee:	4817      	ldr	r0, [pc, #92]	; (800184c <TIM6_IRQHandler+0xec>)
 80017f0:	f004 f91a 	bl	8005a28 <HAL_TIM_OC_Start>
				  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 80017f4:	4816      	ldr	r0, [pc, #88]	; (8001850 <TIM6_IRQHandler+0xf0>)
 80017f6:	f004 f833 	bl	8005860 <HAL_TIM_Base_Start_IT>
		  break;
 80017fa:	e019      	b.n	8001830 <TIM6_IRQHandler+0xd0>
	  case 3:
		  if (alarmCount-- <= 0) {
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <TIM6_IRQHandler+0xe8>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	1e5a      	subs	r2, r3, #1
 8001802:	b291      	uxth	r1, r2
 8001804:	4a10      	ldr	r2, [pc, #64]	; (8001848 <TIM6_IRQHandler+0xe8>)
 8001806:	8011      	strh	r1, [r2, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d103      	bne.n	8001814 <TIM6_IRQHandler+0xb4>
			  alarmCount = 6;
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <TIM6_IRQHandler+0xe8>)
 800180e:	2206      	movs	r2, #6
 8001810:	801a      	strh	r2, [r3, #0]
			  if (alarmCount > 2) {
				  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
				  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
			  }
		  }
		  break;
 8001812:	e00f      	b.n	8001834 <TIM6_IRQHandler+0xd4>
			  if (alarmCount > 2) {
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <TIM6_IRQHandler+0xe8>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d90b      	bls.n	8001834 <TIM6_IRQHandler+0xd4>
				  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
 800181c:	210c      	movs	r1, #12
 800181e:	480b      	ldr	r0, [pc, #44]	; (800184c <TIM6_IRQHandler+0xec>)
 8001820:	f004 f902 	bl	8005a28 <HAL_TIM_OC_Start>
				  HAL_TIM_Base_Start_IT(&htim16); // Start timer for turn off Buzzer
 8001824:	480a      	ldr	r0, [pc, #40]	; (8001850 <TIM6_IRQHandler+0xf0>)
 8001826:	f004 f81b 	bl	8005860 <HAL_TIM_Base_Start_IT>
		  break;
 800182a:	e003      	b.n	8001834 <TIM6_IRQHandler+0xd4>
		  break;
 800182c:	bf00      	nop
 800182e:	e002      	b.n	8001836 <TIM6_IRQHandler+0xd6>
		  break;
 8001830:	bf00      	nop
 8001832:	e000      	b.n	8001836 <TIM6_IRQHandler+0xd6>
		  break;
 8001834:	bf00      	nop
	  }
  }

  /* USER CODE END TIM6_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20001258 	.word	0x20001258
 8001840:	200012f6 	.word	0x200012f6
 8001844:	20001110 	.word	0x20001110
 8001848:	200012f4 	.word	0x200012f4
 800184c:	200012a8 	.word	0x200012a8
 8001850:	20001300 	.word	0x20001300

08001854 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <SystemInit+0x64>)
 800185a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185e:	4a16      	ldr	r2, [pc, #88]	; (80018b8 <SystemInit+0x64>)
 8001860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <SystemInit+0x68>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a13      	ldr	r2, [pc, #76]	; (80018bc <SystemInit+0x68>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <SystemInit+0x68>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <SystemInit+0x68>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a0f      	ldr	r2, [pc, #60]	; (80018bc <SystemInit+0x68>)
 8001880:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001884:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001888:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <SystemInit+0x68>)
 800188c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001890:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <SystemInit+0x68>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <SystemInit+0x68>)
 8001898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <SystemInit+0x68>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <SystemInit+0x64>)
 80018a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018aa:	609a      	str	r2, [r3, #8]
#endif
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000ed00 	.word	0xe000ed00
 80018bc:	40021000 	.word	0x40021000

080018c0 <Reset_Handler>:
 80018c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f8 <LoopForever+0x2>
 80018c4:	f7ff ffc6 	bl	8001854 <SystemInit>
 80018c8:	2100      	movs	r1, #0
 80018ca:	e003      	b.n	80018d4 <LoopCopyDataInit>

080018cc <CopyDataInit>:
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <LoopForever+0x6>)
 80018ce:	585b      	ldr	r3, [r3, r1]
 80018d0:	5043      	str	r3, [r0, r1]
 80018d2:	3104      	adds	r1, #4

080018d4 <LoopCopyDataInit>:
 80018d4:	480a      	ldr	r0, [pc, #40]	; (8001900 <LoopForever+0xa>)
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <LoopForever+0xe>)
 80018d8:	1842      	adds	r2, r0, r1
 80018da:	429a      	cmp	r2, r3
 80018dc:	d3f6      	bcc.n	80018cc <CopyDataInit>
 80018de:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <LoopForever+0x12>)
 80018e0:	e002      	b.n	80018e8 <LoopFillZerobss>

080018e2 <FillZerobss>:
 80018e2:	2300      	movs	r3, #0
 80018e4:	f842 3b04 	str.w	r3, [r2], #4

080018e8 <LoopFillZerobss>:
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <LoopForever+0x16>)
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d3f9      	bcc.n	80018e2 <FillZerobss>
 80018ee:	f005 ff07 	bl	8007700 <__libc_init_array>
 80018f2:	f7fe fec1 	bl	8000678 <main>

080018f6 <LoopForever>:
 80018f6:	e7fe      	b.n	80018f6 <LoopForever>
 80018f8:	2000a000 	.word	0x2000a000
 80018fc:	080077e4 	.word	0x080077e4
 8001900:	20000000 	.word	0x20000000
 8001904:	20000030 	.word	0x20000030
 8001908:	20000030 	.word	0x20000030
 800190c:	20001368 	.word	0x20001368

08001910 <COMP_IRQHandler>:
 8001910:	e7fe      	b.n	8001910 <COMP_IRQHandler>

08001912 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191c:	2003      	movs	r0, #3
 800191e:	f001 ff41 	bl	80037a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001922:	2000      	movs	r0, #0
 8001924:	f000 f80e 	bl	8001944 <HAL_InitTick>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	71fb      	strb	r3, [r7, #7]
 8001932:	e001      	b.n	8001938 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001934:	f7ff fc38 	bl	80011a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001938:	79fb      	ldrb	r3, [r7, #7]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001950:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_InitTick+0x6c>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d023      	beq.n	80019a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <HAL_InitTick+0x70>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <HAL_InitTick+0x6c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4619      	mov	r1, r3
 8001962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001966:	fbb3 f3f1 	udiv	r3, r3, r1
 800196a:	fbb2 f3f3 	udiv	r3, r2, r3
 800196e:	4618      	mov	r0, r3
 8001970:	f001 ff4d 	bl	800380e <HAL_SYSTICK_Config>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10f      	bne.n	800199a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b0f      	cmp	r3, #15
 800197e:	d809      	bhi.n	8001994 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001980:	2200      	movs	r2, #0
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001988:	f001 ff17 	bl	80037ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800198c:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <HAL_InitTick+0x74>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	e007      	b.n	80019a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
 8001998:	e004      	b.n	80019a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	e001      	b.n	80019a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000000c 	.word	0x2000000c
 80019b4:	20000004 	.word	0x20000004
 80019b8:	20000008 	.word	0x20000008

080019bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_IncTick+0x20>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_IncTick+0x24>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <HAL_IncTick+0x24>)
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	2000000c 	.word	0x2000000c
 80019e0:	20001364 	.word	0x20001364

080019e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return uwTick;
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <HAL_GetTick+0x14>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20001364 	.word	0x20001364

080019fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff ffee 	bl	80019e4 <HAL_GetTick>
 8001a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a14:	d005      	beq.n	8001a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_Delay+0x40>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a22:	bf00      	nop
 8001a24:	f7ff ffde 	bl	80019e4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d8f7      	bhi.n	8001a24 <HAL_Delay+0x28>
  {
  }
}
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	2000000c 	.word	0x2000000c

08001a40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	609a      	str	r2, [r3, #8]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	3360      	adds	r3, #96	; 0x60
 8001aba:	461a      	mov	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <LL_ADC_SetOffset+0x44>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ae0:	bf00      	nop
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	03fff000 	.word	0x03fff000

08001af0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3360      	adds	r3, #96	; 0x60
 8001afe:	461a      	mov	r2, r3
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3360      	adds	r3, #96	; 0x60
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	431a      	orrs	r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b46:	bf00      	nop
 8001b48:	371c      	adds	r7, #28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	615a      	str	r2, [r3, #20]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b087      	sub	sp, #28
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	3330      	adds	r3, #48	; 0x30
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	0a1b      	lsrs	r3, r3, #8
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	4413      	add	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	211f      	movs	r1, #31
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	401a      	ands	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	0e9b      	lsrs	r3, r3, #26
 8001bd6:	f003 011f 	and.w	r1, r3, #31
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	431a      	orrs	r2, r3
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bea:	bf00      	nop
 8001bec:	371c      	adds	r7, #28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3314      	adds	r3, #20
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	0e5b      	lsrs	r3, r3, #25
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	4413      	add	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	0d1b      	lsrs	r3, r3, #20
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	2107      	movs	r1, #7
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	401a      	ands	r2, r3
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	0d1b      	lsrs	r3, r3, #20
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	431a      	orrs	r2, r3
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c66:	bf00      	nop
 8001c68:	371c      	adds	r7, #28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	401a      	ands	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f003 0318 	and.w	r3, r3, #24
 8001c96:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c98:	40d9      	lsrs	r1, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	400b      	ands	r3, r1
 8001c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	0007ffff 	.word	0x0007ffff

08001cbc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 031f 	and.w	r3, r3, #31
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6093      	str	r3, [r2, #8]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d2c:	d101      	bne.n	8001d32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d7c:	d101      	bne.n	8001d82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001da0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001da4:	f043 0201 	orr.w	r2, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dcc:	f043 0202 	orr.w	r2, r3, #2
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <LL_ADC_IsEnabled+0x18>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <LL_ADC_IsEnabled+0x1a>
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d101      	bne.n	8001e1e <LL_ADC_IsDisableOngoing+0x18>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <LL_ADC_IsDisableOngoing+0x1a>
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e40:	f043 0204 	orr.w	r2, r3, #4
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d101      	bne.n	8001e6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d101      	bne.n	8001e92 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e12f      	b.n	800211a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d109      	bne.n	8001edc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff f991 	bl	80011f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff19 	bl	8001d18 <LL_ADC_IsDeepPowerDownEnabled>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d004      	beq.n	8001ef6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff feff 	bl	8001cf4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff ff34 	bl	8001d68 <LL_ADC_IsInternalRegulatorEnabled>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d113      	bne.n	8001f2e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff ff18 	bl	8001d40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001f10:	4b84      	ldr	r3, [pc, #528]	; (8002124 <HAL_ADC_Init+0x284>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	099b      	lsrs	r3, r3, #6
 8001f16:	4a84      	ldr	r2, [pc, #528]	; (8002128 <HAL_ADC_Init+0x288>)
 8001f18:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1c:	099b      	lsrs	r3, r3, #6
 8001f1e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f20:	e002      	b.n	8001f28 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f9      	bne.n	8001f22 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ff18 	bl	8001d68 <LL_ADC_IsInternalRegulatorEnabled>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10d      	bne.n	8001f5a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	f043 0210 	orr.w	r2, r3, #16
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ff78 	bl	8001e54 <LL_ADC_REG_IsConversionOngoing>
 8001f64:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 80ca 	bne.w	8002108 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f040 80c6 	bne.w	8002108 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f84:	f043 0202 	orr.w	r2, r3, #2
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff25 	bl	8001de0 <LL_ADC_IsEnabled>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d110      	bne.n	8001fbe <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f9c:	4863      	ldr	r0, [pc, #396]	; (800212c <HAL_ADC_Init+0x28c>)
 8001f9e:	f7ff ff1f 	bl	8001de0 <LL_ADC_IsEnabled>
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	4862      	ldr	r0, [pc, #392]	; (8002130 <HAL_ADC_Init+0x290>)
 8001fa6:	f7ff ff1b 	bl	8001de0 <LL_ADC_IsEnabled>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4323      	orrs	r3, r4
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d105      	bne.n	8001fbe <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	485e      	ldr	r0, [pc, #376]	; (8002134 <HAL_ADC_Init+0x294>)
 8001fba:	f7ff fd41 	bl	8001a40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	7e5b      	ldrb	r3, [r3, #25]
 8001fc2:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fc8:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001fce:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001fd4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fdc:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d106      	bne.n	8001ffa <HAL_ADC_Init+0x15a>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	045b      	lsls	r3, r3, #17
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_ADC_Init+0x176>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	4b46      	ldr	r3, [pc, #280]	; (8002138 <HAL_ADC_Init+0x298>)
 800201e:	4013      	ands	r3, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	69b9      	ldr	r1, [r7, #24]
 8002026:	430b      	orrs	r3, r1
 8002028:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff10 	bl	8001e54 <LL_ADC_REG_IsConversionOngoing>
 8002034:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff1d 	bl	8001e7a <LL_ADC_INJ_IsConversionOngoing>
 8002040:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d13d      	bne.n	80020c4 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d13a      	bne.n	80020c4 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002052:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800205a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800206a:	f023 0302 	bic.w	r3, r3, #2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	69b9      	ldr	r1, [r7, #24]
 8002074:	430b      	orrs	r3, r1
 8002076:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800207e:	2b01      	cmp	r3, #1
 8002080:	d118      	bne.n	80020b4 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800208c:	f023 0304 	bic.w	r3, r3, #4
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002098:	4311      	orrs	r1, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800209e:	4311      	orrs	r1, r2
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020a4:	430a      	orrs	r2, r1
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0201 	orr.w	r2, r2, #1
 80020b0:	611a      	str	r2, [r3, #16]
 80020b2:	e007      	b.n	80020c4 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d10c      	bne.n	80020e6 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f023 010f 	bic.w	r1, r3, #15
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	1e5a      	subs	r2, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	631a      	str	r2, [r3, #48]	; 0x30
 80020e4:	e007      	b.n	80020f6 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 020f 	bic.w	r2, r2, #15
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	f023 0303 	bic.w	r3, r3, #3
 80020fe:	f043 0201 	orr.w	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	655a      	str	r2, [r3, #84]	; 0x54
 8002106:	e007      	b.n	8002118 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210c:	f043 0210 	orr.w	r2, r3, #16
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002118:	7ffb      	ldrb	r3, [r7, #31]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3724      	adds	r7, #36	; 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd90      	pop	{r4, r7, pc}
 8002122:	bf00      	nop
 8002124:	20000004 	.word	0x20000004
 8002128:	053e2d63 	.word	0x053e2d63
 800212c:	50040000 	.word	0x50040000
 8002130:	50040100 	.word	0x50040100
 8002134:	50040300 	.word	0x50040300
 8002138:	fff0c007 	.word	0xfff0c007

0800213c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002144:	4857      	ldr	r0, [pc, #348]	; (80022a4 <HAL_ADC_Start+0x168>)
 8002146:	f7ff fdb9 	bl	8001cbc <LL_ADC_GetMultimode>
 800214a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fe7f 	bl	8001e54 <LL_ADC_REG_IsConversionOngoing>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	f040 809c 	bne.w	8002296 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_ADC_Start+0x30>
 8002168:	2302      	movs	r3, #2
 800216a:	e097      	b.n	800229c <HAL_ADC_Start+0x160>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f001 f80d 	bl	8003194 <ADC_Enable>
 800217a:	4603      	mov	r3, r0
 800217c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800217e:	7dfb      	ldrb	r3, [r7, #23]
 8002180:	2b00      	cmp	r3, #0
 8002182:	f040 8083 	bne.w	800228c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a42      	ldr	r2, [pc, #264]	; (80022a8 <HAL_ADC_Start+0x16c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d002      	beq.n	80021aa <HAL_ADC_Start+0x6e>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	e000      	b.n	80021ac <HAL_ADC_Start+0x70>
 80021aa:	4b40      	ldr	r3, [pc, #256]	; (80022ac <HAL_ADC_Start+0x170>)
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d002      	beq.n	80021ba <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d105      	bne.n	80021c6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d2:	d106      	bne.n	80021e2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	f023 0206 	bic.w	r2, r3, #6
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	659a      	str	r2, [r3, #88]	; 0x58
 80021e0:	e002      	b.n	80021e8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	221c      	movs	r2, #28
 80021ee:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a2a      	ldr	r2, [pc, #168]	; (80022a8 <HAL_ADC_Start+0x16c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d002      	beq.n	8002208 <HAL_ADC_Start+0xcc>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	e000      	b.n	800220a <HAL_ADC_Start+0xce>
 8002208:	4b28      	ldr	r3, [pc, #160]	; (80022ac <HAL_ADC_Start+0x170>)
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	4293      	cmp	r3, r2
 8002210:	d008      	beq.n	8002224 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	2b05      	cmp	r3, #5
 800221c:	d002      	beq.n	8002224 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2b09      	cmp	r3, #9
 8002222:	d114      	bne.n	800224e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002236:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800223a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fdf0 	bl	8001e2c <LL_ADC_REG_StartConversion>
 800224c:	e025      	b.n	800229a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002252:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a12      	ldr	r2, [pc, #72]	; (80022a8 <HAL_ADC_Start+0x16c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d002      	beq.n	800226a <HAL_ADC_Start+0x12e>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	e000      	b.n	800226c <HAL_ADC_Start+0x130>
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <HAL_ADC_Start+0x170>)
 800226c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00f      	beq.n	800229a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002282:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	655a      	str	r2, [r3, #84]	; 0x54
 800228a:	e006      	b.n	800229a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002294:	e001      	b.n	800229a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002296:	2302      	movs	r3, #2
 8002298:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800229a:	7dfb      	ldrb	r3, [r7, #23]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	50040300 	.word	0x50040300
 80022a8:	50040100 	.word	0x50040100
 80022ac:	50040000 	.word	0x50040000

080022b0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022b8:	4893      	ldr	r0, [pc, #588]	; (8002508 <HAL_ADC_Start_IT+0x258>)
 80022ba:	f7ff fcff 	bl	8001cbc <LL_ADC_GetMultimode>
 80022be:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fdc5 	bl	8001e54 <LL_ADC_REG_IsConversionOngoing>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f040 8112 	bne.w	80024f6 <HAL_ADC_Start_IT+0x246>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_ADC_Start_IT+0x30>
 80022dc:	2302      	movs	r3, #2
 80022de:	e10f      	b.n	8002500 <HAL_ADC_Start_IT+0x250>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 ff53 	bl	8003194 <ADC_Enable>
 80022ee:	4603      	mov	r3, r0
 80022f0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022f2:	7dfb      	ldrb	r3, [r7, #23]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f040 80f9 	bne.w	80024ec <HAL_ADC_Start_IT+0x23c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a7e      	ldr	r2, [pc, #504]	; (800250c <HAL_ADC_Start_IT+0x25c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d002      	beq.n	800231e <HAL_ADC_Start_IT+0x6e>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	e000      	b.n	8002320 <HAL_ADC_Start_IT+0x70>
 800231e:	4b7c      	ldr	r3, [pc, #496]	; (8002510 <HAL_ADC_Start_IT+0x260>)
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	4293      	cmp	r3, r2
 8002326:	d002      	beq.n	800232e <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d105      	bne.n	800233a <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002332:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d006      	beq.n	8002354 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	f023 0206 	bic.w	r2, r3, #6
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	659a      	str	r2, [r3, #88]	; 0x58
 8002352:	e002      	b.n	800235a <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	221c      	movs	r2, #28
 8002360:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 021c 	bic.w	r2, r2, #28
 8002378:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	2b08      	cmp	r3, #8
 8002380:	d108      	bne.n	8002394 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0208 	orr.w	r2, r2, #8
 8002390:	605a      	str	r2, [r3, #4]
          break;
 8002392:	e008      	b.n	80023a6 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0204 	orr.w	r2, r2, #4
 80023a2:	605a      	str	r2, [r3, #4]
          break;
 80023a4:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d107      	bne.n	80023be <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0210 	orr.w	r2, r2, #16
 80023bc:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a52      	ldr	r2, [pc, #328]	; (800250c <HAL_ADC_Start_IT+0x25c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d002      	beq.n	80023ce <HAL_ADC_Start_IT+0x11e>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	e000      	b.n	80023d0 <HAL_ADC_Start_IT+0x120>
 80023ce:	4b50      	ldr	r3, [pc, #320]	; (8002510 <HAL_ADC_Start_IT+0x260>)
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d008      	beq.n	80023ea <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d002      	beq.n	80023ea <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	2b09      	cmp	r3, #9
 80023e8:	d13b      	bne.n	8002462 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d02d      	beq.n	8002454 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002400:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	2b08      	cmp	r3, #8
 800240e:	d110      	bne.n	8002432 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0220 	bic.w	r2, r2, #32
 800241e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800242e:	605a      	str	r2, [r3, #4]
              break;
 8002430:	e011      	b.n	8002456 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002440:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0220 	orr.w	r2, r2, #32
 8002450:	605a      	str	r2, [r3, #4]
              break;
 8002452:	e000      	b.n	8002456 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8002454:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fce6 	bl	8001e2c <LL_ADC_REG_StartConversion>
 8002460:	e04d      	b.n	80024fe <HAL_ADC_Start_IT+0x24e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a26      	ldr	r2, [pc, #152]	; (800250c <HAL_ADC_Start_IT+0x25c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d002      	beq.n	800247e <HAL_ADC_Start_IT+0x1ce>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	e000      	b.n	8002480 <HAL_ADC_Start_IT+0x1d0>
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_ADC_Start_IT+0x260>)
 8002480:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d036      	beq.n	80024fc <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002492:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002496:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d110      	bne.n	80024c8 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0220 	bic.w	r2, r2, #32
 80024b4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024c4:	605a      	str	r2, [r3, #4]
              break;
 80024c6:	e01a      	b.n	80024fe <HAL_ADC_Start_IT+0x24e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024d6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0220 	orr.w	r2, r2, #32
 80024e6:	605a      	str	r2, [r3, #4]
              break;
 80024e8:	bf00      	nop
 80024ea:	e008      	b.n	80024fe <HAL_ADC_Start_IT+0x24e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80024f4:	e003      	b.n	80024fe <HAL_ADC_Start_IT+0x24e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024f6:	2302      	movs	r3, #2
 80024f8:	75fb      	strb	r3, [r7, #23]
 80024fa:	e000      	b.n	80024fe <HAL_ADC_Start_IT+0x24e>
        }
 80024fc:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80024fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	50040300 	.word	0x50040300
 800250c:	50040100 	.word	0x50040100
 8002510:	50040000 	.word	0x50040000

08002514 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002522:	4618      	mov	r0, r3
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002538:	2300      	movs	r3, #0
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800254c:	4882      	ldr	r0, [pc, #520]	; (8002758 <HAL_ADC_IRQHandler+0x228>)
 800254e:	f7ff fbb5 	bl	8001cbc <LL_ADC_GetMultimode>
 8002552:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d017      	beq.n	800258e <HAL_ADC_IRQHandler+0x5e>
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d012      	beq.n	800258e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256c:	f003 0310 	and.w	r3, r3, #16
 8002570:	2b00      	cmp	r3, #0
 8002572:	d105      	bne.n	8002580 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 ff94 	bl	80034ae <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2202      	movs	r2, #2
 800258c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d004      	beq.n	80025a2 <HAL_ADC_IRQHandler+0x72>
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10a      	bne.n	80025b8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 8083 	beq.w	80026b4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d07d      	beq.n	80026b4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d105      	bne.n	80025d0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff facf 	bl	8001b78 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d062      	beq.n	80026a6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a5d      	ldr	r2, [pc, #372]	; (800275c <HAL_ADC_IRQHandler+0x22c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d002      	beq.n	80025f0 <HAL_ADC_IRQHandler+0xc0>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	e000      	b.n	80025f2 <HAL_ADC_IRQHandler+0xc2>
 80025f0:	4b5b      	ldr	r3, [pc, #364]	; (8002760 <HAL_ADC_IRQHandler+0x230>)
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d008      	beq.n	800260c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2b05      	cmp	r3, #5
 8002604:	d002      	beq.n	800260c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2b09      	cmp	r3, #9
 800260a:	d104      	bne.n	8002616 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	623b      	str	r3, [r7, #32]
 8002614:	e00c      	b.n	8002630 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a50      	ldr	r2, [pc, #320]	; (800275c <HAL_ADC_IRQHandler+0x22c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d002      	beq.n	8002626 <HAL_ADC_IRQHandler+0xf6>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	e000      	b.n	8002628 <HAL_ADC_IRQHandler+0xf8>
 8002626:	4b4e      	ldr	r3, [pc, #312]	; (8002760 <HAL_ADC_IRQHandler+0x230>)
 8002628:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d135      	bne.n	80026a6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b08      	cmp	r3, #8
 8002646:	d12e      	bne.n	80026a6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fc01 	bl	8001e54 <LL_ADC_REG_IsConversionOngoing>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d11a      	bne.n	800268e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 020c 	bic.w	r2, r2, #12
 8002666:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d112      	bne.n	80026a6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002684:	f043 0201 	orr.w	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	655a      	str	r2, [r3, #84]	; 0x54
 800268c:	e00b      	b.n	80026a6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	f043 0210 	orr.w	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	f043 0201 	orr.w	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f95c 	bl	8002964 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	220c      	movs	r2, #12
 80026b2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d004      	beq.n	80026c8 <HAL_ADC_IRQHandler+0x198>
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10b      	bne.n	80026e0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 809f 	beq.w	8002812 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 8099 	beq.w	8002812 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d105      	bne.n	80026f8 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fa7a 	bl	8001bf6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002702:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fa35 	bl	8001b78 <LL_ADC_REG_IsTriggerSourceSWStart>
 800270e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a11      	ldr	r2, [pc, #68]	; (800275c <HAL_ADC_IRQHandler+0x22c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d002      	beq.n	8002720 <HAL_ADC_IRQHandler+0x1f0>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	e000      	b.n	8002722 <HAL_ADC_IRQHandler+0x1f2>
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <HAL_ADC_IRQHandler+0x230>)
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	4293      	cmp	r3, r2
 8002728:	d008      	beq.n	800273c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b06      	cmp	r3, #6
 8002734:	d002      	beq.n	800273c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b07      	cmp	r3, #7
 800273a:	d104      	bne.n	8002746 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	623b      	str	r3, [r7, #32]
 8002744:	e013      	b.n	800276e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a04      	ldr	r2, [pc, #16]	; (800275c <HAL_ADC_IRQHandler+0x22c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d009      	beq.n	8002764 <HAL_ADC_IRQHandler+0x234>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	e007      	b.n	8002766 <HAL_ADC_IRQHandler+0x236>
 8002756:	bf00      	nop
 8002758:	50040300 	.word	0x50040300
 800275c:	50040100 	.word	0x50040100
 8002760:	50040000 	.word	0x50040000
 8002764:	4b7d      	ldr	r3, [pc, #500]	; (800295c <HAL_ADC_IRQHandler+0x42c>)
 8002766:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10c      	bne.n	800278e <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800277a:	2b00      	cmp	r3, #0
 800277c:	d142      	bne.n	8002804 <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d03f      	beq.n	8002804 <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 800278a:	2b00      	cmp	r3, #0
 800278c:	d13a      	bne.n	8002804 <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002798:	2b40      	cmp	r3, #64	; 0x40
 800279a:	d133      	bne.n	8002804 <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d12e      	bne.n	8002804 <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fb65 	bl	8001e7a <LL_ADC_INJ_IsConversionOngoing>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d11a      	bne.n	80027ec <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027c4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d112      	bne.n	8002804 <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e2:	f043 0201 	orr.w	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	655a      	str	r2, [r3, #84]	; 0x54
 80027ea:	e00b      	b.n	8002804 <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f0:	f043 0210 	orr.w	r2, r3, #16
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	f043 0201 	orr.w	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fe2a 	bl	800345e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2260      	movs	r2, #96	; 0x60
 8002810:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002818:	2b00      	cmp	r3, #0
 800281a:	d011      	beq.n	8002840 <HAL_ADC_IRQHandler+0x310>
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00c      	beq.n	8002840 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f8a0 	bl	8002978 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2280      	movs	r2, #128	; 0x80
 800283e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002846:	2b00      	cmp	r3, #0
 8002848:	d012      	beq.n	8002870 <HAL_ADC_IRQHandler+0x340>
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00d      	beq.n	8002870 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002858:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fe10 	bl	8003486 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800286e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002876:	2b00      	cmp	r3, #0
 8002878:	d012      	beq.n	80028a0 <HAL_ADC_IRQHandler+0x370>
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00d      	beq.n	80028a0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002888:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 fe02 	bl	800349a <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800289e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d036      	beq.n	8002918 <HAL_ADC_IRQHandler+0x3e8>
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d031      	beq.n	8002918 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80028bc:	2301      	movs	r3, #1
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
 80028c0:	e014      	b.n	80028ec <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028c8:	4825      	ldr	r0, [pc, #148]	; (8002960 <HAL_ADC_IRQHandler+0x430>)
 80028ca:	f7ff fa05 	bl	8001cd8 <LL_ADC_GetMultiDMATransfer>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80028d4:	2301      	movs	r3, #1
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
 80028d8:	e008      	b.n	80028ec <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80028e8:	2301      	movs	r3, #1
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d10e      	bne.n	8002910 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002902:	f043 0202 	orr.w	r2, r3, #2
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f83e 	bl	800298c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2210      	movs	r2, #16
 8002916:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291e:	2b00      	cmp	r3, #0
 8002920:	d018      	beq.n	8002954 <HAL_ADC_IRQHandler+0x424>
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002930:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293c:	f043 0208 	orr.w	r2, r3, #8
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800294c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fd8f 	bl	8003472 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002954:	bf00      	nop
 8002956:	3728      	adds	r7, #40	; 0x28
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	50040000 	.word	0x50040000
 8002960:	50040300 	.word	0x50040300

08002964 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b0b6      	sub	sp, #216	; 0xd8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x22>
 80029be:	2302      	movs	r3, #2
 80029c0:	e3d4      	b.n	800316c <HAL_ADC_ConfigChannel+0x7cc>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fa40 	bl	8001e54 <LL_ADC_REG_IsConversionOngoing>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f040 83b9 	bne.w	800314e <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b05      	cmp	r3, #5
 80029e2:	d824      	bhi.n	8002a2e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	3b02      	subs	r3, #2
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d81b      	bhi.n	8002a26 <HAL_ADC_ConfigChannel+0x86>
 80029ee:	a201      	add	r2, pc, #4	; (adr r2, 80029f4 <HAL_ADC_ConfigChannel+0x54>)
 80029f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f4:	08002a05 	.word	0x08002a05
 80029f8:	08002a0d 	.word	0x08002a0d
 80029fc:	08002a15 	.word	0x08002a15
 8002a00:	08002a1d 	.word	0x08002a1d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	220c      	movs	r2, #12
 8002a08:	605a      	str	r2, [r3, #4]
          break;
 8002a0a:	e011      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	2212      	movs	r2, #18
 8002a10:	605a      	str	r2, [r3, #4]
          break;
 8002a12:	e00d      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2218      	movs	r2, #24
 8002a18:	605a      	str	r2, [r3, #4]
          break;
 8002a1a:	e009      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a22:	605a      	str	r2, [r3, #4]
          break;
 8002a24:	e004      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2206      	movs	r2, #6
 8002a2a:	605a      	str	r2, [r3, #4]
          break;
 8002a2c:	e000      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002a2e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	6859      	ldr	r1, [r3, #4]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f7ff f8ae 	bl	8001b9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fa04 	bl	8001e54 <LL_ADC_REG_IsConversionOngoing>
 8002a4c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fa10 	bl	8001e7a <LL_ADC_INJ_IsConversionOngoing>
 8002a5a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f040 81c1 	bne.w	8002dea <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f040 81bc 	bne.w	8002dea <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a7a:	d10f      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6818      	ldr	r0, [r3, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2200      	movs	r2, #0
 8002a86:	4619      	mov	r1, r3
 8002a88:	f7ff f8c8 	bl	8001c1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff f85c 	bl	8001b52 <LL_ADC_SetSamplingTimeCommonConfig>
 8002a9a:	e00e      	b.n	8002aba <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6819      	ldr	r1, [r3, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f7ff f8b7 	bl	8001c1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff f84c 	bl	8001b52 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	08db      	lsrs	r3, r3, #3
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d00a      	beq.n	8002af2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6919      	ldr	r1, [r3, #16]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002aec:	f7fe ffdc 	bl	8001aa8 <LL_ADC_SetOffset>
 8002af0:	e17b      	b.n	8002dea <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe fff9 	bl	8001af0 <LL_ADC_GetOffsetChannel>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x17e>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe ffee 	bl	8001af0 <LL_ADC_GetOffsetChannel>
 8002b14:	4603      	mov	r3, r0
 8002b16:	0e9b      	lsrs	r3, r3, #26
 8002b18:	f003 021f 	and.w	r2, r3, #31
 8002b1c:	e01e      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x1bc>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2100      	movs	r1, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fe ffe3 	bl	8001af0 <LL_ADC_GetOffsetChannel>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	e004      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002b50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b54:	fab3 f383 	clz	r3, r3
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d105      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x1d4>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0e9b      	lsrs	r3, r3, #26
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	e018      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x206>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002b90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002b98:	2320      	movs	r3, #32
 8002b9a:	e004      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002b9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ba0:	fab3 f383 	clz	r3, r3
 8002ba4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d106      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe ffb2 	bl	8001b1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe ff96 	bl	8001af0 <LL_ADC_GetOffsetChannel>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10a      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x244>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe ff8b 	bl	8001af0 <LL_ADC_GetOffsetChannel>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	0e9b      	lsrs	r3, r3, #26
 8002bde:	f003 021f 	and.w	r2, r3, #31
 8002be2:	e01e      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x282>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2101      	movs	r1, #1
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe ff80 	bl	8001af0 <LL_ADC_GetOffsetChannel>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002c12:	2320      	movs	r3, #32
 8002c14:	e004      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002c16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d105      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x29a>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	0e9b      	lsrs	r3, r3, #26
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	e018      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x2cc>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002c5e:	2320      	movs	r3, #32
 8002c60:	e004      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002c62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d106      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2200      	movs	r2, #0
 8002c76:	2101      	movs	r1, #1
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe ff4f 	bl	8001b1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2102      	movs	r1, #2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fe ff33 	bl	8001af0 <LL_ADC_GetOffsetChannel>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10a      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x30a>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2102      	movs	r1, #2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe ff28 	bl	8001af0 <LL_ADC_GetOffsetChannel>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	0e9b      	lsrs	r3, r3, #26
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	e01e      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x348>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2102      	movs	r1, #2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fe ff1d 	bl	8001af0 <LL_ADC_GetOffsetChannel>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002cc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ccc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002cd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002cd8:	2320      	movs	r3, #32
 8002cda:	e004      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002cdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ce0:	fab3 f383 	clz	r3, r3
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d105      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x360>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	0e9b      	lsrs	r3, r3, #26
 8002cfa:	f003 031f 	and.w	r3, r3, #31
 8002cfe:	e016      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x38e>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002d20:	2320      	movs	r3, #32
 8002d22:	e004      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d106      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2200      	movs	r2, #0
 8002d38:	2102      	movs	r1, #2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fe feee 	bl	8001b1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2103      	movs	r1, #3
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe fed2 	bl	8001af0 <LL_ADC_GetOffsetChannel>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10a      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x3cc>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2103      	movs	r1, #3
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe fec7 	bl	8001af0 <LL_ADC_GetOffsetChannel>
 8002d62:	4603      	mov	r3, r0
 8002d64:	0e9b      	lsrs	r3, r3, #26
 8002d66:	f003 021f 	and.w	r2, r3, #31
 8002d6a:	e017      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x3fc>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2103      	movs	r1, #3
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe febc 	bl	8001af0 <LL_ADC_GetOffsetChannel>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d86:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002d8e:	2320      	movs	r3, #32
 8002d90:	e003      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d105      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x414>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	0e9b      	lsrs	r3, r3, #26
 8002dae:	f003 031f 	and.w	r3, r3, #31
 8002db2:	e011      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x438>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dbc:	fa93 f3a3 	rbit	r3, r3
 8002dc0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002dc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002dcc:	2320      	movs	r3, #32
 8002dce:	e003      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d106      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2200      	movs	r2, #0
 8002de2:	2103      	movs	r1, #3
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fe fe99 	bl	8001b1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe fff6 	bl	8001de0 <LL_ADC_IsEnabled>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f040 8140 	bne.w	800307c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6819      	ldr	r1, [r3, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f7fe ff33 	bl	8001c74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	4a8f      	ldr	r2, [pc, #572]	; (8003050 <HAL_ADC_ConfigChannel+0x6b0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	f040 8131 	bne.w	800307c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10b      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x4a2>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	0e9b      	lsrs	r3, r3, #26
 8002e30:	3301      	adds	r3, #1
 8002e32:	f003 031f 	and.w	r3, r3, #31
 8002e36:	2b09      	cmp	r3, #9
 8002e38:	bf94      	ite	ls
 8002e3a:	2301      	movls	r3, #1
 8002e3c:	2300      	movhi	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	e019      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x4d6>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e52:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	e003      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	3301      	adds	r3, #1
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	2b09      	cmp	r3, #9
 8002e6e:	bf94      	ite	ls
 8002e70:	2301      	movls	r3, #1
 8002e72:	2300      	movhi	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d079      	beq.n	8002f6e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d107      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x4f6>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	0e9b      	lsrs	r3, r3, #26
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	069b      	lsls	r3, r3, #26
 8002e90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e94:	e015      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x522>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002eae:	2320      	movs	r3, #32
 8002eb0:	e003      	b.n	8002eba <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eb4:	fab3 f383 	clz	r3, r3
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	3301      	adds	r3, #1
 8002ebc:	069b      	lsls	r3, r3, #26
 8002ebe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x542>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	0e9b      	lsrs	r3, r3, #26
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	2101      	movs	r1, #1
 8002edc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee0:	e017      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x572>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eea:	fa93 f3a3 	rbit	r3, r3
 8002eee:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002efa:	2320      	movs	r3, #32
 8002efc:	e003      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f00:	fab3 f383 	clz	r3, r3
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f12:	ea42 0103 	orr.w	r1, r2, r3
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10a      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x598>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	0e9b      	lsrs	r3, r3, #26
 8002f28:	3301      	adds	r3, #1
 8002f2a:	f003 021f 	and.w	r2, r3, #31
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	051b      	lsls	r3, r3, #20
 8002f36:	e018      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x5ca>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f48:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002f50:	2320      	movs	r3, #32
 8002f52:	e003      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f003 021f 	and.w	r2, r3, #31
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	e081      	b.n	8003072 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d107      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x5ea>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	0e9b      	lsrs	r3, r3, #26
 8002f80:	3301      	adds	r3, #1
 8002f82:	069b      	lsls	r3, r3, #26
 8002f84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f88:	e015      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x616>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002fa2:	2320      	movs	r3, #32
 8002fa4:	e003      	b.n	8002fae <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa8:	fab3 f383 	clz	r3, r3
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	069b      	lsls	r3, r3, #26
 8002fb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d109      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x636>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	0e9b      	lsrs	r3, r3, #26
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	2101      	movs	r1, #1
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	e017      	b.n	8003006 <HAL_ADC_ConfigChannel+0x666>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	61fb      	str	r3, [r7, #28]
  return result;
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002fee:	2320      	movs	r3, #32
 8002ff0:	e003      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	fab3 f383 	clz	r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2101      	movs	r1, #1
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	ea42 0103 	orr.w	r1, r2, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10d      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x692>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	0e9b      	lsrs	r3, r3, #26
 800301c:	3301      	adds	r3, #1
 800301e:	f003 021f 	and.w	r2, r3, #31
 8003022:	4613      	mov	r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	3b1e      	subs	r3, #30
 800302a:	051b      	lsls	r3, r3, #20
 800302c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003030:	e01e      	b.n	8003070 <HAL_ADC_ConfigChannel+0x6d0>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	fa93 f3a3 	rbit	r3, r3
 800303e:	613b      	str	r3, [r7, #16]
  return result;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d104      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800304a:	2320      	movs	r3, #32
 800304c:	e006      	b.n	800305c <HAL_ADC_ConfigChannel+0x6bc>
 800304e:	bf00      	nop
 8003050:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
 800305c:	3301      	adds	r3, #1
 800305e:	f003 021f 	and.w	r2, r3, #31
 8003062:	4613      	mov	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4413      	add	r3, r2
 8003068:	3b1e      	subs	r3, #30
 800306a:	051b      	lsls	r3, r3, #20
 800306c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003070:	430b      	orrs	r3, r1
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	6892      	ldr	r2, [r2, #8]
 8003076:	4619      	mov	r1, r3
 8003078:	f7fe fdd0 	bl	8001c1c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4b3c      	ldr	r3, [pc, #240]	; (8003174 <HAL_ADC_ConfigChannel+0x7d4>)
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d06b      	beq.n	8003160 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003088:	483b      	ldr	r0, [pc, #236]	; (8003178 <HAL_ADC_ConfigChannel+0x7d8>)
 800308a:	f7fe fcff 	bl	8001a8c <LL_ADC_GetCommonPathInternalCh>
 800308e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a39      	ldr	r2, [pc, #228]	; (800317c <HAL_ADC_ConfigChannel+0x7dc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d126      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800309c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d120      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a34      	ldr	r2, [pc, #208]	; (8003180 <HAL_ADC_ConfigChannel+0x7e0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d156      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030ba:	4619      	mov	r1, r3
 80030bc:	482e      	ldr	r0, [pc, #184]	; (8003178 <HAL_ADC_ConfigChannel+0x7d8>)
 80030be:	f7fe fcd2 	bl	8001a66 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80030c2:	4b30      	ldr	r3, [pc, #192]	; (8003184 <HAL_ADC_ConfigChannel+0x7e4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	099b      	lsrs	r3, r3, #6
 80030c8:	4a2f      	ldr	r2, [pc, #188]	; (8003188 <HAL_ADC_ConfigChannel+0x7e8>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	099a      	lsrs	r2, r3, #6
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030da:	e002      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	3b01      	subs	r3, #1
 80030e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f9      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030e8:	e03a      	b.n	8003160 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a27      	ldr	r2, [pc, #156]	; (800318c <HAL_ADC_ConfigChannel+0x7ec>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d113      	bne.n	800311c <HAL_ADC_ConfigChannel+0x77c>
 80030f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10d      	bne.n	800311c <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a1e      	ldr	r2, [pc, #120]	; (8003180 <HAL_ADC_ConfigChannel+0x7e0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d12a      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800310a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800310e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003112:	4619      	mov	r1, r3
 8003114:	4818      	ldr	r0, [pc, #96]	; (8003178 <HAL_ADC_ConfigChannel+0x7d8>)
 8003116:	f7fe fca6 	bl	8001a66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800311a:	e021      	b.n	8003160 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1b      	ldr	r2, [pc, #108]	; (8003190 <HAL_ADC_ConfigChannel+0x7f0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d11c      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003126:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800312a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d116      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a12      	ldr	r2, [pc, #72]	; (8003180 <HAL_ADC_ConfigChannel+0x7e0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d111      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800313c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003140:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003144:	4619      	mov	r1, r3
 8003146:	480c      	ldr	r0, [pc, #48]	; (8003178 <HAL_ADC_ConfigChannel+0x7d8>)
 8003148:	f7fe fc8d 	bl	8001a66 <LL_ADC_SetCommonPathInternalCh>
 800314c:	e008      	b.n	8003160 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	f043 0220 	orr.w	r2, r3, #32
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003168:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800316c:	4618      	mov	r0, r3
 800316e:	37d8      	adds	r7, #216	; 0xd8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	80080000 	.word	0x80080000
 8003178:	50040300 	.word	0x50040300
 800317c:	c7520000 	.word	0xc7520000
 8003180:	50040000 	.word	0x50040000
 8003184:	20000004 	.word	0x20000004
 8003188:	053e2d63 	.word	0x053e2d63
 800318c:	cb840000 	.word	0xcb840000
 8003190:	80000001 	.word	0x80000001

08003194 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fe fe1d 	bl	8001de0 <LL_ADC_IsEnabled>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d146      	bne.n	800323a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <ADC_Enable+0xb0>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00d      	beq.n	80031d6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	f043 0210 	orr.w	r2, r3, #16
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ca:	f043 0201 	orr.w	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e032      	b.n	800323c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fe fdd8 	bl	8001d90 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031e0:	f7fe fc00 	bl	80019e4 <HAL_GetTick>
 80031e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031e6:	e021      	b.n	800322c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fe fdf7 	bl	8001de0 <LL_ADC_IsEnabled>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d104      	bne.n	8003202 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fe fdc7 	bl	8001d90 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003202:	f7fe fbef 	bl	80019e4 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d90d      	bls.n	800322c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003214:	f043 0210 	orr.w	r2, r3, #16
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003220:	f043 0201 	orr.w	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e007      	b.n	800323c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b01      	cmp	r3, #1
 8003238:	d1d6      	bne.n	80031e8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	8000003f 	.word	0x8000003f

08003248 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe fdd6 	bl	8001e06 <LL_ADC_IsDisableOngoing>
 800325a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7fe fdbd 	bl	8001de0 <LL_ADC_IsEnabled>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d040      	beq.n	80032ee <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d13d      	bne.n	80032ee <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 030d 	and.w	r3, r3, #13
 800327c:	2b01      	cmp	r3, #1
 800327e:	d10c      	bne.n	800329a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe fd97 	bl	8001db8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2203      	movs	r2, #3
 8003290:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003292:	f7fe fba7 	bl	80019e4 <HAL_GetTick>
 8003296:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003298:	e022      	b.n	80032e0 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	f043 0210 	orr.w	r2, r3, #16
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032aa:	f043 0201 	orr.w	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e01c      	b.n	80032f0 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032b6:	f7fe fb95 	bl	80019e4 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d90d      	bls.n	80032e0 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c8:	f043 0210 	orr.w	r2, r3, #16
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d4:	f043 0201 	orr.w	r2, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e007      	b.n	80032f0 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e3      	bne.n	80032b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <LL_ADC_IsEnabled>:
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <LL_ADC_IsEnabled+0x18>
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <LL_ADC_IsEnabled+0x1a>
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <LL_ADC_StartCalibration>:
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003330:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800333a:	4313      	orrs	r3, r2
 800333c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	609a      	str	r2, [r3, #8]
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <LL_ADC_IsCalibrationOnGoing>:
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003360:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003364:	d101      	bne.n	800336a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <LL_ADC_REG_IsConversionOngoing>:
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b04      	cmp	r3, #4
 800338a:	d101      	bne.n	8003390 <LL_ADC_REG_IsConversionOngoing+0x18>
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_ADCEx_Calibration_Start+0x1c>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e04d      	b.n	8003456 <HAL_ADCEx_Calibration_Start+0xb8>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ff40 	bl	8003248 <ADC_Disable>
 80033c8:	4603      	mov	r3, r0
 80033ca:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d136      	bne.n	8003440 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033da:	f023 0302 	bic.w	r3, r3, #2
 80033de:	f043 0202 	orr.w	r2, r3, #2
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6839      	ldr	r1, [r7, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff96 	bl	800331e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033f2:	e014      	b.n	800341e <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	3301      	adds	r3, #1
 80033f8:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003400:	d30d      	bcc.n	800341e <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003406:	f023 0312 	bic.w	r3, r3, #18
 800340a:	f043 0210 	orr.w	r2, r3, #16
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e01b      	b.n	8003456 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff ff94 	bl	8003350 <LL_ADC_IsCalibrationOnGoing>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1e2      	bne.n	80033f4 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003432:	f023 0303 	bic.w	r3, r3, #3
 8003436:	f043 0201 	orr.w	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	655a      	str	r2, [r3, #84]	; 0x54
 800343e:	e005      	b.n	800344c <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	f043 0210 	orr.w	r2, r3, #16
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003454:	7bfb      	ldrb	r3, [r7, #15]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b09f      	sub	sp, #124	; 0x7c
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034de:	2302      	movs	r3, #2
 80034e0:	e085      	b.n	80035ee <HAL_ADCEx_MultiModeConfigChannel+0x12a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a42      	ldr	r2, [pc, #264]	; (80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d102      	bne.n	80034fa <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80034f4:	4b41      	ldr	r3, [pc, #260]	; (80035fc <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	e001      	b.n	80034fe <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80034fa:	2300      	movs	r3, #0
 80034fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10b      	bne.n	800351c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003508:	f043 0220 	orr.w	r2, r3, #32
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e068      	b.n	80035ee <HAL_ADCEx_MultiModeConfigChannel+0x12a>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff ff2a 	bl	8003378 <LL_ADC_REG_IsConversionOngoing>
 8003524:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff ff24 	bl	8003378 <LL_ADC_REG_IsConversionOngoing>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d14a      	bne.n	80035cc <HAL_ADCEx_MultiModeConfigChannel+0x108>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003536:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003538:	2b00      	cmp	r3, #0
 800353a:	d147      	bne.n	80035cc <HAL_ADCEx_MultiModeConfigChannel+0x108>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800353c:	4b30      	ldr	r3, [pc, #192]	; (8003600 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800353e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d027      	beq.n	8003598 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800355a:	035b      	lsls	r3, r3, #13
 800355c:	430b      	orrs	r3, r1
 800355e:	431a      	orrs	r2, r3
 8003560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003562:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003564:	4824      	ldr	r0, [pc, #144]	; (80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003566:	f7ff fec7 	bl	80032f8 <LL_ADC_IsEnabled>
 800356a:	4604      	mov	r4, r0
 800356c:	4823      	ldr	r0, [pc, #140]	; (80035fc <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800356e:	f7ff fec3 	bl	80032f8 <LL_ADC_IsEnabled>
 8003572:	4603      	mov	r3, r0
 8003574:	4323      	orrs	r3, r4
 8003576:	2b00      	cmp	r3, #0
 8003578:	d132      	bne.n	80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800357a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003582:	f023 030f 	bic.w	r3, r3, #15
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	6811      	ldr	r1, [r2, #0]
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	6892      	ldr	r2, [r2, #8]
 800358e:	430a      	orrs	r2, r1
 8003590:	431a      	orrs	r2, r3
 8003592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003594:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003596:	e023      	b.n	80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035a4:	4814      	ldr	r0, [pc, #80]	; (80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80035a6:	f7ff fea7 	bl	80032f8 <LL_ADC_IsEnabled>
 80035aa:	4604      	mov	r4, r0
 80035ac:	4813      	ldr	r0, [pc, #76]	; (80035fc <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80035ae:	f7ff fea3 	bl	80032f8 <LL_ADC_IsEnabled>
 80035b2:	4603      	mov	r3, r0
 80035b4:	4323      	orrs	r3, r4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d112      	bne.n	80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035c2:	f023 030f 	bic.w	r3, r3, #15
 80035c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035c8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035ca:	e009      	b.n	80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80035de:	e000      	b.n	80035e2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	377c      	adds	r7, #124	; 0x7c
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd90      	pop	{r4, r7, pc}
 80035f6:	bf00      	nop
 80035f8:	50040000 	.word	0x50040000
 80035fc:	50040100 	.word	0x50040100
 8003600:	50040300 	.word	0x50040300

08003604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <__NVIC_SetPriorityGrouping+0x44>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003620:	4013      	ands	r3, r2
 8003622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800362c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003636:	4a04      	ldr	r2, [pc, #16]	; (8003648 <__NVIC_SetPriorityGrouping+0x44>)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	60d3      	str	r3, [r2, #12]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003650:	4b04      	ldr	r3, [pc, #16]	; (8003664 <__NVIC_GetPriorityGrouping+0x18>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	0a1b      	lsrs	r3, r3, #8
 8003656:	f003 0307 	and.w	r3, r3, #7
}
 800365a:	4618      	mov	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	2b00      	cmp	r3, #0
 8003678:	db0b      	blt.n	8003692 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	f003 021f 	and.w	r2, r3, #31
 8003680:	4907      	ldr	r1, [pc, #28]	; (80036a0 <__NVIC_EnableIRQ+0x38>)
 8003682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	2001      	movs	r0, #1
 800368a:	fa00 f202 	lsl.w	r2, r0, r2
 800368e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	e000e100 	.word	0xe000e100

080036a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	6039      	str	r1, [r7, #0]
 80036ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	db0a      	blt.n	80036ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	490c      	ldr	r1, [pc, #48]	; (80036f0 <__NVIC_SetPriority+0x4c>)
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	0112      	lsls	r2, r2, #4
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	440b      	add	r3, r1
 80036c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036cc:	e00a      	b.n	80036e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	4908      	ldr	r1, [pc, #32]	; (80036f4 <__NVIC_SetPriority+0x50>)
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	3b04      	subs	r3, #4
 80036dc:	0112      	lsls	r2, r2, #4
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	440b      	add	r3, r1
 80036e2:	761a      	strb	r2, [r3, #24]
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	e000e100 	.word	0xe000e100
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b089      	sub	sp, #36	; 0x24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f1c3 0307 	rsb	r3, r3, #7
 8003712:	2b04      	cmp	r3, #4
 8003714:	bf28      	it	cs
 8003716:	2304      	movcs	r3, #4
 8003718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	3304      	adds	r3, #4
 800371e:	2b06      	cmp	r3, #6
 8003720:	d902      	bls.n	8003728 <NVIC_EncodePriority+0x30>
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	3b03      	subs	r3, #3
 8003726:	e000      	b.n	800372a <NVIC_EncodePriority+0x32>
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800372c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43da      	mvns	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	401a      	ands	r2, r3
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003740:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	fa01 f303 	lsl.w	r3, r1, r3
 800374a:	43d9      	mvns	r1, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003750:	4313      	orrs	r3, r2
         );
}
 8003752:	4618      	mov	r0, r3
 8003754:	3724      	adds	r7, #36	; 0x24
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
	...

08003760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3b01      	subs	r3, #1
 800376c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003770:	d301      	bcc.n	8003776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003772:	2301      	movs	r3, #1
 8003774:	e00f      	b.n	8003796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003776:	4a0a      	ldr	r2, [pc, #40]	; (80037a0 <SysTick_Config+0x40>)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3b01      	subs	r3, #1
 800377c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800377e:	210f      	movs	r1, #15
 8003780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003784:	f7ff ff8e 	bl	80036a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <SysTick_Config+0x40>)
 800378a:	2200      	movs	r2, #0
 800378c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800378e:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <SysTick_Config+0x40>)
 8003790:	2207      	movs	r2, #7
 8003792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	e000e010 	.word	0xe000e010

080037a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff ff29 	bl	8003604 <__NVIC_SetPriorityGrouping>
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b086      	sub	sp, #24
 80037be:	af00      	add	r7, sp, #0
 80037c0:	4603      	mov	r3, r0
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
 80037c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037cc:	f7ff ff3e 	bl	800364c <__NVIC_GetPriorityGrouping>
 80037d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	6978      	ldr	r0, [r7, #20]
 80037d8:	f7ff ff8e 	bl	80036f8 <NVIC_EncodePriority>
 80037dc:	4602      	mov	r2, r0
 80037de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff ff5d 	bl	80036a4 <__NVIC_SetPriority>
}
 80037ea:	bf00      	nop
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	4603      	mov	r3, r0
 80037fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff ff31 	bl	8003668 <__NVIC_EnableIRQ>
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff ffa2 	bl	8003760 <SysTick_Config>
 800381c:	4603      	mov	r3, r0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e098      	b.n	800396c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	4b4d      	ldr	r3, [pc, #308]	; (8003978 <HAL_DMA_Init+0x150>)
 8003842:	429a      	cmp	r2, r3
 8003844:	d80f      	bhi.n	8003866 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	4b4b      	ldr	r3, [pc, #300]	; (800397c <HAL_DMA_Init+0x154>)
 800384e:	4413      	add	r3, r2
 8003850:	4a4b      	ldr	r2, [pc, #300]	; (8003980 <HAL_DMA_Init+0x158>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	009a      	lsls	r2, r3, #2
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a48      	ldr	r2, [pc, #288]	; (8003984 <HAL_DMA_Init+0x15c>)
 8003862:	641a      	str	r2, [r3, #64]	; 0x40
 8003864:	e00e      	b.n	8003884 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	4b46      	ldr	r3, [pc, #280]	; (8003988 <HAL_DMA_Init+0x160>)
 800386e:	4413      	add	r3, r2
 8003870:	4a43      	ldr	r2, [pc, #268]	; (8003980 <HAL_DMA_Init+0x158>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	091b      	lsrs	r3, r3, #4
 8003878:	009a      	lsls	r2, r3, #2
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a42      	ldr	r2, [pc, #264]	; (800398c <HAL_DMA_Init+0x164>)
 8003882:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800389a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80038a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038de:	d039      	beq.n	8003954 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	4a27      	ldr	r2, [pc, #156]	; (8003984 <HAL_DMA_Init+0x15c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d11a      	bne.n	8003920 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038ea:	4b29      	ldr	r3, [pc, #164]	; (8003990 <HAL_DMA_Init+0x168>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	f003 031c 	and.w	r3, r3, #28
 80038f6:	210f      	movs	r1, #15
 80038f8:	fa01 f303 	lsl.w	r3, r1, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	4924      	ldr	r1, [pc, #144]	; (8003990 <HAL_DMA_Init+0x168>)
 8003900:	4013      	ands	r3, r2
 8003902:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003904:	4b22      	ldr	r3, [pc, #136]	; (8003990 <HAL_DMA_Init+0x168>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6859      	ldr	r1, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	f003 031c 	and.w	r3, r3, #28
 8003914:	fa01 f303 	lsl.w	r3, r1, r3
 8003918:	491d      	ldr	r1, [pc, #116]	; (8003990 <HAL_DMA_Init+0x168>)
 800391a:	4313      	orrs	r3, r2
 800391c:	600b      	str	r3, [r1, #0]
 800391e:	e019      	b.n	8003954 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003920:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <HAL_DMA_Init+0x16c>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	f003 031c 	and.w	r3, r3, #28
 800392c:	210f      	movs	r1, #15
 800392e:	fa01 f303 	lsl.w	r3, r1, r3
 8003932:	43db      	mvns	r3, r3
 8003934:	4917      	ldr	r1, [pc, #92]	; (8003994 <HAL_DMA_Init+0x16c>)
 8003936:	4013      	ands	r3, r2
 8003938:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800393a:	4b16      	ldr	r3, [pc, #88]	; (8003994 <HAL_DMA_Init+0x16c>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6859      	ldr	r1, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	f003 031c 	and.w	r3, r3, #28
 800394a:	fa01 f303 	lsl.w	r3, r1, r3
 800394e:	4911      	ldr	r1, [pc, #68]	; (8003994 <HAL_DMA_Init+0x16c>)
 8003950:	4313      	orrs	r3, r2
 8003952:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	40020407 	.word	0x40020407
 800397c:	bffdfff8 	.word	0xbffdfff8
 8003980:	cccccccd 	.word	0xcccccccd
 8003984:	40020000 	.word	0x40020000
 8003988:	bffdfbf8 	.word	0xbffdfbf8
 800398c:	40020400 	.word	0x40020400
 8003990:	400200a8 	.word	0x400200a8
 8003994:	400204a8 	.word	0x400204a8

08003998 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e072      	b.n	8003a90 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0201 	bic.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	4b36      	ldr	r3, [pc, #216]	; (8003a9c <HAL_DMA_DeInit+0x104>)
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d80f      	bhi.n	80039e6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	4b34      	ldr	r3, [pc, #208]	; (8003aa0 <HAL_DMA_DeInit+0x108>)
 80039ce:	4413      	add	r3, r2
 80039d0:	4a34      	ldr	r2, [pc, #208]	; (8003aa4 <HAL_DMA_DeInit+0x10c>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	009a      	lsls	r2, r3, #2
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a31      	ldr	r2, [pc, #196]	; (8003aa8 <HAL_DMA_DeInit+0x110>)
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40
 80039e4:	e00e      	b.n	8003a04 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	4b2f      	ldr	r3, [pc, #188]	; (8003aac <HAL_DMA_DeInit+0x114>)
 80039ee:	4413      	add	r3, r2
 80039f0:	4a2c      	ldr	r2, [pc, #176]	; (8003aa4 <HAL_DMA_DeInit+0x10c>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	091b      	lsrs	r3, r3, #4
 80039f8:	009a      	lsls	r2, r3, #2
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a2b      	ldr	r2, [pc, #172]	; (8003ab0 <HAL_DMA_DeInit+0x118>)
 8003a02:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a10:	f003 021c 	and.w	r2, r3, #28
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	2101      	movs	r1, #1
 8003a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1e:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	4a20      	ldr	r2, [pc, #128]	; (8003aa8 <HAL_DMA_DeInit+0x110>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d10d      	bne.n	8003a46 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a2a:	4b22      	ldr	r3, [pc, #136]	; (8003ab4 <HAL_DMA_DeInit+0x11c>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f003 031c 	and.w	r3, r3, #28
 8003a36:	210f      	movs	r1, #15
 8003a38:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	491d      	ldr	r1, [pc, #116]	; (8003ab4 <HAL_DMA_DeInit+0x11c>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	600b      	str	r3, [r1, #0]
 8003a44:	e00c      	b.n	8003a60 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a46:	4b1c      	ldr	r3, [pc, #112]	; (8003ab8 <HAL_DMA_DeInit+0x120>)
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	f003 031c 	and.w	r3, r3, #28
 8003a52:	210f      	movs	r1, #15
 8003a54:	fa01 f303 	lsl.w	r3, r1, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	4917      	ldr	r1, [pc, #92]	; (8003ab8 <HAL_DMA_DeInit+0x120>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40020407 	.word	0x40020407
 8003aa0:	bffdfff8 	.word	0xbffdfff8
 8003aa4:	cccccccd 	.word	0xcccccccd
 8003aa8:	40020000 	.word	0x40020000
 8003aac:	bffdfbf8 	.word	0xbffdfbf8
 8003ab0:	40020400 	.word	0x40020400
 8003ab4:	400200a8 	.word	0x400200a8
 8003ab8:	400204a8 	.word	0x400204a8

08003abc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_DMA_Start_IT+0x20>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e04b      	b.n	8003b74 <HAL_DMA_Start_IT+0xb8>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d13a      	bne.n	8003b66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0201 	bic.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	68b9      	ldr	r1, [r7, #8]
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f8e0 	bl	8003cda <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 020e 	orr.w	r2, r2, #14
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	e00f      	b.n	8003b54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0204 	bic.w	r2, r2, #4
 8003b42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 020a 	orr.w	r2, r2, #10
 8003b52:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	e005      	b.n	8003b72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	f003 031c 	and.w	r3, r3, #28
 8003b9c:	2204      	movs	r2, #4
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d026      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x7a>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d021      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d107      	bne.n	8003bd0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0204 	bic.w	r2, r2, #4
 8003bce:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	f003 021c 	and.w	r2, r3, #28
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	2104      	movs	r1, #4
 8003bde:	fa01 f202 	lsl.w	r2, r1, r2
 8003be2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d071      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003bf4:	e06c      	b.n	8003cd0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	f003 031c 	and.w	r3, r3, #28
 8003bfe:	2202      	movs	r2, #2
 8003c00:	409a      	lsls	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d02e      	beq.n	8003c68 <HAL_DMA_IRQHandler+0xec>
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d029      	beq.n	8003c68 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10b      	bne.n	8003c3a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 020a 	bic.w	r2, r2, #10
 8003c30:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	f003 021c 	and.w	r2, r3, #28
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	2102      	movs	r1, #2
 8003c48:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d038      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003c66:	e033      	b.n	8003cd0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6c:	f003 031c 	and.w	r3, r3, #28
 8003c70:	2208      	movs	r2, #8
 8003c72:	409a      	lsls	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d02a      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x156>
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d025      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 020e 	bic.w	r2, r2, #14
 8003c94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	f003 021c 	and.w	r2, r3, #28
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d004      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003cd0:	bf00      	nop
 8003cd2:	bf00      	nop
}
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b085      	sub	sp, #20
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	607a      	str	r2, [r7, #4]
 8003ce6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cec:	f003 021c 	and.w	r2, r3, #28
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cfa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	d108      	bne.n	8003d1e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d1c:	e007      	b.n	8003d2e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	60da      	str	r2, [r3, #12]
}
 8003d2e:	bf00      	nop
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003d4e:	4b2f      	ldr	r3, [pc, #188]	; (8003e0c <HAL_FLASH_Program+0xd0>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_FLASH_Program+0x1e>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e053      	b.n	8003e02 <HAL_FLASH_Program+0xc6>
 8003d5a:	4b2c      	ldr	r3, [pc, #176]	; (8003e0c <HAL_FLASH_Program+0xd0>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003d60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d64:	f000 f888 	bl	8003e78 <FLASH_WaitForLastOperation>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d143      	bne.n	8003dfa <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d72:	4b26      	ldr	r3, [pc, #152]	; (8003e0c <HAL_FLASH_Program+0xd0>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003d78:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <HAL_FLASH_Program+0xd4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d009      	beq.n	8003d98 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003d84:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <HAL_FLASH_Program+0xd4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a21      	ldr	r2, [pc, #132]	; (8003e10 <HAL_FLASH_Program+0xd4>)
 8003d8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d8e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003d90:	4b1e      	ldr	r3, [pc, #120]	; (8003e0c <HAL_FLASH_Program+0xd0>)
 8003d92:	2202      	movs	r2, #2
 8003d94:	771a      	strb	r2, [r3, #28]
 8003d96:	e002      	b.n	8003d9e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003d98:	4b1c      	ldr	r3, [pc, #112]	; (8003e0c <HAL_FLASH_Program+0xd0>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d107      	bne.n	8003db4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003da8:	68b8      	ldr	r0, [r7, #8]
 8003daa:	f000 f8bd 	bl	8003f28 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003dae:	2301      	movs	r3, #1
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	e010      	b.n	8003dd6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d002      	beq.n	8003dc0 <HAL_FLASH_Program+0x84>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d10a      	bne.n	8003dd6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	68b8      	ldr	r0, [r7, #8]
 8003dc6:	f000 f8d3 	bl	8003f70 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d102      	bne.n	8003dd6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003dd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003dd4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003dd6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003dda:	f000 f84d 	bl	8003e78 <FLASH_WaitForLastOperation>
 8003dde:	4603      	mov	r3, r0
 8003de0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d006      	beq.n	8003df6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003de8:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <HAL_FLASH_Program+0xd4>)
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	43db      	mvns	r3, r3
 8003df0:	4907      	ldr	r1, [pc, #28]	; (8003e10 <HAL_FLASH_Program+0xd4>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003df6:	f000 f9cf 	bl	8004198 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003dfa:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <HAL_FLASH_Program+0xd0>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]

  return status;
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000010 	.word	0x20000010
 8003e10:	40022000 	.word	0x40022000

08003e14 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_FLASH_Unlock+0x38>)
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	da0b      	bge.n	8003e3e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <HAL_FLASH_Unlock+0x38>)
 8003e28:	4a09      	ldr	r2, [pc, #36]	; (8003e50 <HAL_FLASH_Unlock+0x3c>)
 8003e2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003e2c:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <HAL_FLASH_Unlock+0x38>)
 8003e2e:	4a09      	ldr	r2, [pc, #36]	; (8003e54 <HAL_FLASH_Unlock+0x40>)
 8003e30:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003e32:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <HAL_FLASH_Unlock+0x38>)
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	da01      	bge.n	8003e3e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	40022000 	.word	0x40022000
 8003e50:	45670123 	.word	0x45670123
 8003e54:	cdef89ab 	.word	0xcdef89ab

08003e58 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <HAL_FLASH_Lock+0x1c>)
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	4a04      	ldr	r2, [pc, #16]	; (8003e74 <HAL_FLASH_Lock+0x1c>)
 8003e62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e66:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	40022000 	.word	0x40022000

08003e78 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003e80:	f7fd fdb0 	bl	80019e4 <HAL_GetTick>
 8003e84:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003e86:	e00d      	b.n	8003ea4 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e8e:	d009      	beq.n	8003ea4 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003e90:	f7fd fda8 	bl	80019e4 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d801      	bhi.n	8003ea4 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e036      	b.n	8003f12 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003ea4:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <FLASH_WaitForLastOperation+0xa4>)
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1eb      	bne.n	8003e88 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003eb0:	4b1a      	ldr	r3, [pc, #104]	; (8003f1c <FLASH_WaitForLastOperation+0xa4>)
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	4b1a      	ldr	r3, [pc, #104]	; (8003f20 <FLASH_WaitForLastOperation+0xa8>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01e      	beq.n	8003efe <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003ec0:	4b18      	ldr	r3, [pc, #96]	; (8003f24 <FLASH_WaitForLastOperation+0xac>)
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	4a16      	ldr	r2, [pc, #88]	; (8003f24 <FLASH_WaitForLastOperation+0xac>)
 8003eca:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <FLASH_WaitForLastOperation+0x6e>
 8003ed6:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <FLASH_WaitForLastOperation+0xa4>)
 8003ed8:	699a      	ldr	r2, [r3, #24]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003ee0:	490e      	ldr	r1, [pc, #56]	; (8003f1c <FLASH_WaitForLastOperation+0xa4>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	618b      	str	r3, [r1, #24]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d004      	beq.n	8003efa <FLASH_WaitForLastOperation+0x82>
 8003ef0:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <FLASH_WaitForLastOperation+0xa4>)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003ef8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e009      	b.n	8003f12 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003efe:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <FLASH_WaitForLastOperation+0xa4>)
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003f0a:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <FLASH_WaitForLastOperation+0xa4>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40022000 	.word	0x40022000
 8003f20:	0002c3fa 	.word	0x0002c3fa
 8003f24:	20000010 	.word	0x20000010

08003f28 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003f28:	b490      	push	{r4, r7}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003f34:	4b0d      	ldr	r3, [pc, #52]	; (8003f6c <FLASH_Program_DoubleWord+0x44>)
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	4a0c      	ldr	r2, [pc, #48]	; (8003f6c <FLASH_Program_DoubleWord+0x44>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003f46:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003f4a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	f04f 0400 	mov.w	r4, #0
 8003f56:	0013      	movs	r3, r2
 8003f58:	2400      	movs	r4, #0
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	3204      	adds	r2, #4
 8003f5e:	6013      	str	r3, [r2, #0]
}
 8003f60:	bf00      	nop
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc90      	pop	{r4, r7}
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40022000 	.word	0x40022000

08003f70 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b089      	sub	sp, #36	; 0x24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003f7a:	2340      	movs	r3, #64	; 0x40
 8003f7c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003f86:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <FLASH_Program_Fast+0x64>)
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	4a12      	ldr	r2, [pc, #72]	; (8003fd4 <FLASH_Program_Fast+0x64>)
 8003f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f90:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f92:	f3ef 8310 	mrs	r3, PRIMASK
 8003f96:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f98:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003f9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f9c:	b672      	cpsid	i
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	617b      	str	r3, [r7, #20]
    row_index--;
 8003fb2:	7ffb      	ldrb	r3, [r7, #31]
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8003fb8:	7ffb      	ldrb	r3, [r7, #31]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1ef      	bne.n	8003f9e <FLASH_Program_Fast+0x2e>
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f383 8810 	msr	PRIMASK, r3

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003fc8:	bf00      	nop
 8003fca:	3724      	adds	r7, #36	; 0x24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	40022000 	.word	0x40022000

08003fd8 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003fe2:	4b4a      	ldr	r3, [pc, #296]	; (800410c <HAL_FLASHEx_Erase+0x134>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_FLASHEx_Erase+0x16>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e089      	b.n	8004102 <HAL_FLASHEx_Erase+0x12a>
 8003fee:	4b47      	ldr	r3, [pc, #284]	; (800410c <HAL_FLASHEx_Erase+0x134>)
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ff4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ff8:	f7ff ff3e 	bl	8003e78 <FLASH_WaitForLastOperation>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d179      	bne.n	80040fa <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004006:	4b41      	ldr	r3, [pc, #260]	; (800410c <HAL_FLASHEx_Erase+0x134>)
 8004008:	2200      	movs	r2, #0
 800400a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800400c:	4b40      	ldr	r3, [pc, #256]	; (8004110 <HAL_FLASHEx_Erase+0x138>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004014:	2b00      	cmp	r3, #0
 8004016:	d019      	beq.n	800404c <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004018:	4b3d      	ldr	r3, [pc, #244]	; (8004110 <HAL_FLASHEx_Erase+0x138>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a3c      	ldr	r2, [pc, #240]	; (8004110 <HAL_FLASHEx_Erase+0x138>)
 800401e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004022:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004024:	4b3a      	ldr	r3, [pc, #232]	; (8004110 <HAL_FLASHEx_Erase+0x138>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800402c:	2b00      	cmp	r3, #0
 800402e:	d009      	beq.n	8004044 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8004030:	4b37      	ldr	r3, [pc, #220]	; (8004110 <HAL_FLASHEx_Erase+0x138>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a36      	ldr	r2, [pc, #216]	; (8004110 <HAL_FLASHEx_Erase+0x138>)
 8004036:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800403a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800403c:	4b33      	ldr	r3, [pc, #204]	; (800410c <HAL_FLASHEx_Erase+0x134>)
 800403e:	2203      	movs	r2, #3
 8004040:	771a      	strb	r2, [r3, #28]
 8004042:	e016      	b.n	8004072 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8004044:	4b31      	ldr	r3, [pc, #196]	; (800410c <HAL_FLASHEx_Erase+0x134>)
 8004046:	2201      	movs	r2, #1
 8004048:	771a      	strb	r2, [r3, #28]
 800404a:	e012      	b.n	8004072 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800404c:	4b30      	ldr	r3, [pc, #192]	; (8004110 <HAL_FLASHEx_Erase+0x138>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004054:	2b00      	cmp	r3, #0
 8004056:	d009      	beq.n	800406c <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004058:	4b2d      	ldr	r3, [pc, #180]	; (8004110 <HAL_FLASHEx_Erase+0x138>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a2c      	ldr	r2, [pc, #176]	; (8004110 <HAL_FLASHEx_Erase+0x138>)
 800405e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004062:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004064:	4b29      	ldr	r3, [pc, #164]	; (800410c <HAL_FLASHEx_Erase+0x134>)
 8004066:	2202      	movs	r2, #2
 8004068:	771a      	strb	r2, [r3, #28]
 800406a:	e002      	b.n	8004072 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800406c:	4b27      	ldr	r3, [pc, #156]	; (800410c <HAL_FLASHEx_Erase+0x134>)
 800406e:	2200      	movs	r2, #0
 8004070:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d111      	bne.n	800409e <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	4618      	mov	r0, r3
 8004080:	f000 f848 	bl	8004114 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004084:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004088:	f7ff fef6 	bl	8003e78 <FLASH_WaitForLastOperation>
 800408c:	4603      	mov	r3, r0
 800408e:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8004090:	4b1f      	ldr	r3, [pc, #124]	; (8004110 <HAL_FLASHEx_Erase+0x138>)
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	4a1e      	ldr	r2, [pc, #120]	; (8004110 <HAL_FLASHEx_Erase+0x138>)
 8004096:	f023 0304 	bic.w	r3, r3, #4
 800409a:	6153      	str	r3, [r2, #20]
 800409c:	e02b      	b.n	80040f6 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040a4:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	e01b      	b.n	80040e6 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	4619      	mov	r1, r3
 80040b4:	68b8      	ldr	r0, [r7, #8]
 80040b6:	f000 f84b 	bl	8004150 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80040ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040be:	f7ff fedb 	bl	8003e78 <FLASH_WaitForLastOperation>
 80040c2:	4603      	mov	r3, r0
 80040c4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80040c6:	4b12      	ldr	r3, [pc, #72]	; (8004110 <HAL_FLASHEx_Erase+0x138>)
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	4a11      	ldr	r2, [pc, #68]	; (8004110 <HAL_FLASHEx_Erase+0x138>)
 80040cc:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80040d0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	601a      	str	r2, [r3, #0]
          break;
 80040de:	e00a      	b.n	80040f6 <HAL_FLASHEx_Erase+0x11e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	3301      	adds	r3, #1
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	4413      	add	r3, r2
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d3db      	bcc.n	80040ae <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80040f6:	f000 f84f 	bl	8004198 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80040fa:	4b04      	ldr	r3, [pc, #16]	; (800410c <HAL_FLASHEx_Erase+0x134>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]

  return status;
 8004100:	7bfb      	ldrb	r3, [r7, #15]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000010 	.word	0x20000010
 8004110:	40022000 	.word	0x40022000

08004114 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <FLASH_MassErase+0x38>)
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	4a08      	ldr	r2, [pc, #32]	; (800414c <FLASH_MassErase+0x38>)
 800412c:	f043 0304 	orr.w	r3, r3, #4
 8004130:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <FLASH_MassErase+0x38>)
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	4a05      	ldr	r2, [pc, #20]	; (800414c <FLASH_MassErase+0x38>)
 8004138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413c:	6153      	str	r3, [r2, #20]
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40022000 	.word	0x40022000

08004150 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800415a:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <FLASH_PageErase+0x44>)
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800416a:	490a      	ldr	r1, [pc, #40]	; (8004194 <FLASH_PageErase+0x44>)
 800416c:	4313      	orrs	r3, r2
 800416e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004170:	4b08      	ldr	r3, [pc, #32]	; (8004194 <FLASH_PageErase+0x44>)
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	4a07      	ldr	r2, [pc, #28]	; (8004194 <FLASH_PageErase+0x44>)
 8004176:	f043 0302 	orr.w	r3, r3, #2
 800417a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <FLASH_PageErase+0x44>)
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	4a04      	ldr	r2, [pc, #16]	; (8004194 <FLASH_PageErase+0x44>)
 8004182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004186:	6153      	str	r3, [r2, #20]
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40022000 	.word	0x40022000

08004198 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800419e:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <FLASH_FlushCaches+0x80>)
 80041a0:	7f1b      	ldrb	r3, [r3, #28]
 80041a2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d002      	beq.n	80041b0 <FLASH_FlushCaches+0x18>
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d111      	bne.n	80041d4 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80041b0:	4b1a      	ldr	r3, [pc, #104]	; (800421c <FLASH_FlushCaches+0x84>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a19      	ldr	r2, [pc, #100]	; (800421c <FLASH_FlushCaches+0x84>)
 80041b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	4b17      	ldr	r3, [pc, #92]	; (800421c <FLASH_FlushCaches+0x84>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a16      	ldr	r2, [pc, #88]	; (800421c <FLASH_FlushCaches+0x84>)
 80041c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041c6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041c8:	4b14      	ldr	r3, [pc, #80]	; (800421c <FLASH_FlushCaches+0x84>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a13      	ldr	r2, [pc, #76]	; (800421c <FLASH_FlushCaches+0x84>)
 80041ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041d2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d002      	beq.n	80041e0 <FLASH_FlushCaches+0x48>
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d111      	bne.n	8004204 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80041e0:	4b0e      	ldr	r3, [pc, #56]	; (800421c <FLASH_FlushCaches+0x84>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a0d      	ldr	r2, [pc, #52]	; (800421c <FLASH_FlushCaches+0x84>)
 80041e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <FLASH_FlushCaches+0x84>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0a      	ldr	r2, [pc, #40]	; (800421c <FLASH_FlushCaches+0x84>)
 80041f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041f6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80041f8:	4b08      	ldr	r3, [pc, #32]	; (800421c <FLASH_FlushCaches+0x84>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a07      	ldr	r2, [pc, #28]	; (800421c <FLASH_FlushCaches+0x84>)
 80041fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004202:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004204:	4b04      	ldr	r3, [pc, #16]	; (8004218 <FLASH_FlushCaches+0x80>)
 8004206:	2200      	movs	r2, #0
 8004208:	771a      	strb	r2, [r3, #28]
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	20000010 	.word	0x20000010
 800421c:	40022000 	.word	0x40022000

08004220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800422e:	e14e      	b.n	80044ce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	2101      	movs	r1, #1
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	fa01 f303 	lsl.w	r3, r1, r3
 800423c:	4013      	ands	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8140 	beq.w	80044c8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d00b      	beq.n	8004268 <HAL_GPIO_Init+0x48>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d007      	beq.n	8004268 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800425c:	2b11      	cmp	r3, #17
 800425e:	d003      	beq.n	8004268 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b12      	cmp	r3, #18
 8004266:	d130      	bne.n	80042ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	2203      	movs	r2, #3
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	43db      	mvns	r3, r3
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4013      	ands	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4313      	orrs	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800429e:	2201      	movs	r2, #1
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43db      	mvns	r3, r3
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4013      	ands	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	091b      	lsrs	r3, r3, #4
 80042b4:	f003 0201 	and.w	r2, r3, #1
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	2203      	movs	r2, #3
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	43db      	mvns	r3, r3
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	4013      	ands	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d003      	beq.n	800430a <HAL_GPIO_Init+0xea>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b12      	cmp	r3, #18
 8004308:	d123      	bne.n	8004352 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	08da      	lsrs	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3208      	adds	r2, #8
 8004312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004316:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	220f      	movs	r2, #15
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43db      	mvns	r3, r3
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4013      	ands	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	691a      	ldr	r2, [r3, #16]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	08da      	lsrs	r2, r3, #3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3208      	adds	r2, #8
 800434c:	6939      	ldr	r1, [r7, #16]
 800434e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	2203      	movs	r2, #3
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43db      	mvns	r3, r3
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4013      	ands	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 0203 	and.w	r2, r3, #3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 809a 	beq.w	80044c8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004394:	4b55      	ldr	r3, [pc, #340]	; (80044ec <HAL_GPIO_Init+0x2cc>)
 8004396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004398:	4a54      	ldr	r2, [pc, #336]	; (80044ec <HAL_GPIO_Init+0x2cc>)
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	6613      	str	r3, [r2, #96]	; 0x60
 80043a0:	4b52      	ldr	r3, [pc, #328]	; (80044ec <HAL_GPIO_Init+0x2cc>)
 80043a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80043ac:	4a50      	ldr	r2, [pc, #320]	; (80044f0 <HAL_GPIO_Init+0x2d0>)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	089b      	lsrs	r3, r3, #2
 80043b2:	3302      	adds	r3, #2
 80043b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	220f      	movs	r2, #15
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4013      	ands	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043d6:	d013      	beq.n	8004400 <HAL_GPIO_Init+0x1e0>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a46      	ldr	r2, [pc, #280]	; (80044f4 <HAL_GPIO_Init+0x2d4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d00d      	beq.n	80043fc <HAL_GPIO_Init+0x1dc>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a45      	ldr	r2, [pc, #276]	; (80044f8 <HAL_GPIO_Init+0x2d8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d007      	beq.n	80043f8 <HAL_GPIO_Init+0x1d8>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a44      	ldr	r2, [pc, #272]	; (80044fc <HAL_GPIO_Init+0x2dc>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d101      	bne.n	80043f4 <HAL_GPIO_Init+0x1d4>
 80043f0:	2303      	movs	r3, #3
 80043f2:	e006      	b.n	8004402 <HAL_GPIO_Init+0x1e2>
 80043f4:	2307      	movs	r3, #7
 80043f6:	e004      	b.n	8004402 <HAL_GPIO_Init+0x1e2>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e002      	b.n	8004402 <HAL_GPIO_Init+0x1e2>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <HAL_GPIO_Init+0x1e2>
 8004400:	2300      	movs	r3, #0
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	f002 0203 	and.w	r2, r2, #3
 8004408:	0092      	lsls	r2, r2, #2
 800440a:	4093      	lsls	r3, r2
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004412:	4937      	ldr	r1, [pc, #220]	; (80044f0 <HAL_GPIO_Init+0x2d0>)
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	089b      	lsrs	r3, r3, #2
 8004418:	3302      	adds	r3, #2
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004420:	4b37      	ldr	r3, [pc, #220]	; (8004500 <HAL_GPIO_Init+0x2e0>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	43db      	mvns	r3, r3
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4013      	ands	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004444:	4a2e      	ldr	r2, [pc, #184]	; (8004500 <HAL_GPIO_Init+0x2e0>)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800444a:	4b2d      	ldr	r3, [pc, #180]	; (8004500 <HAL_GPIO_Init+0x2e0>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	43db      	mvns	r3, r3
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4013      	ands	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800446e:	4a24      	ldr	r2, [pc, #144]	; (8004500 <HAL_GPIO_Init+0x2e0>)
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004474:	4b22      	ldr	r3, [pc, #136]	; (8004500 <HAL_GPIO_Init+0x2e0>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	43db      	mvns	r3, r3
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4013      	ands	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004498:	4a19      	ldr	r2, [pc, #100]	; (8004500 <HAL_GPIO_Init+0x2e0>)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800449e:	4b18      	ldr	r3, [pc, #96]	; (8004500 <HAL_GPIO_Init+0x2e0>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	43db      	mvns	r3, r3
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4013      	ands	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044c2:	4a0f      	ldr	r2, [pc, #60]	; (8004500 <HAL_GPIO_Init+0x2e0>)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	3301      	adds	r3, #1
 80044cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	fa22 f303 	lsr.w	r3, r2, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f47f aea9 	bne.w	8004230 <HAL_GPIO_Init+0x10>
  }
}
 80044de:	bf00      	nop
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40010000 	.word	0x40010000
 80044f4:	48000400 	.word	0x48000400
 80044f8:	48000800 	.word	0x48000800
 80044fc:	48000c00 	.word	0x48000c00
 8004500:	40010400 	.word	0x40010400

08004504 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004512:	e0b1      	b.n	8004678 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004514:	2201      	movs	r2, #1
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	4013      	ands	r3, r2
 8004520:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80a4 	beq.w	8004672 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800452a:	4a5a      	ldr	r2, [pc, #360]	; (8004694 <HAL_GPIO_DeInit+0x190>)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	089b      	lsrs	r3, r3, #2
 8004530:	3302      	adds	r3, #2
 8004532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004536:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	220f      	movs	r2, #15
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4013      	ands	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004552:	d013      	beq.n	800457c <HAL_GPIO_DeInit+0x78>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a50      	ldr	r2, [pc, #320]	; (8004698 <HAL_GPIO_DeInit+0x194>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00d      	beq.n	8004578 <HAL_GPIO_DeInit+0x74>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a4f      	ldr	r2, [pc, #316]	; (800469c <HAL_GPIO_DeInit+0x198>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d007      	beq.n	8004574 <HAL_GPIO_DeInit+0x70>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a4e      	ldr	r2, [pc, #312]	; (80046a0 <HAL_GPIO_DeInit+0x19c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d101      	bne.n	8004570 <HAL_GPIO_DeInit+0x6c>
 800456c:	2303      	movs	r3, #3
 800456e:	e006      	b.n	800457e <HAL_GPIO_DeInit+0x7a>
 8004570:	2307      	movs	r3, #7
 8004572:	e004      	b.n	800457e <HAL_GPIO_DeInit+0x7a>
 8004574:	2302      	movs	r3, #2
 8004576:	e002      	b.n	800457e <HAL_GPIO_DeInit+0x7a>
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <HAL_GPIO_DeInit+0x7a>
 800457c:	2300      	movs	r3, #0
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	f002 0203 	and.w	r2, r2, #3
 8004584:	0092      	lsls	r2, r2, #2
 8004586:	4093      	lsls	r3, r2
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	429a      	cmp	r2, r3
 800458c:	d132      	bne.n	80045f4 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800458e:	4b45      	ldr	r3, [pc, #276]	; (80046a4 <HAL_GPIO_DeInit+0x1a0>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	43db      	mvns	r3, r3
 8004596:	4943      	ldr	r1, [pc, #268]	; (80046a4 <HAL_GPIO_DeInit+0x1a0>)
 8004598:	4013      	ands	r3, r2
 800459a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800459c:	4b41      	ldr	r3, [pc, #260]	; (80046a4 <HAL_GPIO_DeInit+0x1a0>)
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	43db      	mvns	r3, r3
 80045a4:	493f      	ldr	r1, [pc, #252]	; (80046a4 <HAL_GPIO_DeInit+0x1a0>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80045aa:	4b3e      	ldr	r3, [pc, #248]	; (80046a4 <HAL_GPIO_DeInit+0x1a0>)
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	43db      	mvns	r3, r3
 80045b2:	493c      	ldr	r1, [pc, #240]	; (80046a4 <HAL_GPIO_DeInit+0x1a0>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80045b8:	4b3a      	ldr	r3, [pc, #232]	; (80046a4 <HAL_GPIO_DeInit+0x1a0>)
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	43db      	mvns	r3, r3
 80045c0:	4938      	ldr	r1, [pc, #224]	; (80046a4 <HAL_GPIO_DeInit+0x1a0>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	220f      	movs	r2, #15
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80045d6:	4a2f      	ldr	r2, [pc, #188]	; (8004694 <HAL_GPIO_DeInit+0x190>)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	089b      	lsrs	r3, r3, #2
 80045dc:	3302      	adds	r3, #2
 80045de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	43da      	mvns	r2, r3
 80045e6:	482b      	ldr	r0, [pc, #172]	; (8004694 <HAL_GPIO_DeInit+0x190>)
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	089b      	lsrs	r3, r3, #2
 80045ec:	400a      	ands	r2, r1
 80045ee:	3302      	adds	r3, #2
 80045f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	2103      	movs	r1, #3
 80045fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	08da      	lsrs	r2, r3, #3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3208      	adds	r2, #8
 8004610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	220f      	movs	r2, #15
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43db      	mvns	r3, r3
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	08d2      	lsrs	r2, r2, #3
 8004628:	4019      	ands	r1, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3208      	adds	r2, #8
 800462e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	2103      	movs	r1, #3
 800463c:	fa01 f303 	lsl.w	r3, r1, r3
 8004640:	43db      	mvns	r3, r3
 8004642:	401a      	ands	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	2101      	movs	r1, #1
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	fa01 f303 	lsl.w	r3, r1, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	401a      	ands	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	2103      	movs	r1, #3
 8004666:	fa01 f303 	lsl.w	r3, r1, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	401a      	ands	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	3301      	adds	r3, #1
 8004676:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	f47f af47 	bne.w	8004514 <HAL_GPIO_DeInit+0x10>
  }
}
 8004686:	bf00      	nop
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40010000 	.word	0x40010000
 8004698:	48000400 	.word	0x48000400
 800469c:	48000800 	.word	0x48000800
 80046a0:	48000c00 	.word	0x48000c00
 80046a4:	40010400 	.word	0x40010400

080046a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	887b      	ldrh	r3, [r7, #2]
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046c0:	2301      	movs	r3, #1
 80046c2:	73fb      	strb	r3, [r7, #15]
 80046c4:	e001      	b.n	80046ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046c6:	2300      	movs	r3, #0
 80046c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	807b      	strh	r3, [r7, #2]
 80046e4:	4613      	mov	r3, r2
 80046e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046e8:	787b      	ldrb	r3, [r7, #1]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046ee:	887a      	ldrh	r2, [r7, #2]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046f4:	e002      	b.n	80046fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046f6:	887a      	ldrh	r2, [r7, #2]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800470c:	4b04      	ldr	r3, [pc, #16]	; (8004720 <HAL_PWREx_GetVoltageRange+0x18>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004714:	4618      	mov	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40007000 	.word	0x40007000

08004724 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004732:	d130      	bne.n	8004796 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004734:	4b23      	ldr	r3, [pc, #140]	; (80047c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800473c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004740:	d038      	beq.n	80047b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004742:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800474a:	4a1e      	ldr	r2, [pc, #120]	; (80047c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800474c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004750:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004752:	4b1d      	ldr	r3, [pc, #116]	; (80047c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2232      	movs	r2, #50	; 0x32
 8004758:	fb02 f303 	mul.w	r3, r2, r3
 800475c:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800475e:	fba2 2303 	umull	r2, r3, r2, r3
 8004762:	0c9b      	lsrs	r3, r3, #18
 8004764:	3301      	adds	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004768:	e002      	b.n	8004770 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3b01      	subs	r3, #1
 800476e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004770:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477c:	d102      	bne.n	8004784 <HAL_PWREx_ControlVoltageScaling+0x60>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1f2      	bne.n	800476a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004784:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800478c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004790:	d110      	bne.n	80047b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e00f      	b.n	80047b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800479e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a2:	d007      	beq.n	80047b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047a4:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047ac:	4a05      	ldr	r2, [pc, #20]	; (80047c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40007000 	.word	0x40007000
 80047c8:	20000004 	.word	0x20000004
 80047cc:	431bde83 	.word	0x431bde83

080047d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08a      	sub	sp, #40	; 0x28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d102      	bne.n	80047e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	f000 bc56 	b.w	8005090 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047e4:	4ba1      	ldr	r3, [pc, #644]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 030c 	and.w	r3, r3, #12
 80047ec:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047ee:	4b9f      	ldr	r3, [pc, #636]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80e6 	beq.w	80049d2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <HAL_RCC_OscConfig+0x4c>
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	2b0c      	cmp	r3, #12
 8004810:	f040 808d 	bne.w	800492e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b01      	cmp	r3, #1
 8004818:	f040 8089 	bne.w	800492e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800481c:	4b93      	ldr	r3, [pc, #588]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d006      	beq.n	8004836 <HAL_RCC_OscConfig+0x66>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d102      	bne.n	8004836 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	f000 bc2d 	b.w	8005090 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800483a:	4b8c      	ldr	r3, [pc, #560]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d004      	beq.n	8004850 <HAL_RCC_OscConfig+0x80>
 8004846:	4b89      	ldr	r3, [pc, #548]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800484e:	e005      	b.n	800485c <HAL_RCC_OscConfig+0x8c>
 8004850:	4b86      	ldr	r3, [pc, #536]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800485c:	4293      	cmp	r3, r2
 800485e:	d224      	bcs.n	80048aa <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fdbd 	bl	80053e4 <RCC_SetFlashLatencyFromMSIRange>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f000 bc0d 	b.w	8005090 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004876:	4b7d      	ldr	r3, [pc, #500]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a7c      	ldr	r2, [pc, #496]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 800487c:	f043 0308 	orr.w	r3, r3, #8
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	4b7a      	ldr	r3, [pc, #488]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	4977      	ldr	r1, [pc, #476]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004890:	4313      	orrs	r3, r2
 8004892:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004894:	4b75      	ldr	r3, [pc, #468]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	021b      	lsls	r3, r3, #8
 80048a2:	4972      	ldr	r1, [pc, #456]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]
 80048a8:	e025      	b.n	80048f6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048aa:	4b70      	ldr	r3, [pc, #448]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a6f      	ldr	r2, [pc, #444]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80048b0:	f043 0308 	orr.w	r3, r3, #8
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	4b6d      	ldr	r3, [pc, #436]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	496a      	ldr	r1, [pc, #424]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048c8:	4b68      	ldr	r3, [pc, #416]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	4965      	ldr	r1, [pc, #404]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fd7c 	bl	80053e4 <RCC_SetFlashLatencyFromMSIRange>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e3cc      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048f6:	f000 fcb3 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 80048fa:	4601      	mov	r1, r0
 80048fc:	4b5b      	ldr	r3, [pc, #364]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	091b      	lsrs	r3, r3, #4
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	4a5a      	ldr	r2, [pc, #360]	; (8004a70 <HAL_RCC_OscConfig+0x2a0>)
 8004908:	5cd3      	ldrb	r3, [r2, r3]
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	fa21 f303 	lsr.w	r3, r1, r3
 8004912:	4a58      	ldr	r2, [pc, #352]	; (8004a74 <HAL_RCC_OscConfig+0x2a4>)
 8004914:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004916:	4b58      	ldr	r3, [pc, #352]	; (8004a78 <HAL_RCC_OscConfig+0x2a8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fd f812 	bl	8001944 <HAL_InitTick>
 8004920:	4603      	mov	r3, r0
 8004922:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004924:	7dfb      	ldrb	r3, [r7, #23]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d052      	beq.n	80049d0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800492a:	7dfb      	ldrb	r3, [r7, #23]
 800492c:	e3b0      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d032      	beq.n	800499c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004936:	4b4d      	ldr	r3, [pc, #308]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a4c      	ldr	r2, [pc, #304]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004942:	f7fd f84f 	bl	80019e4 <HAL_GetTick>
 8004946:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800494a:	f7fd f84b 	bl	80019e4 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e399      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800495c:	4b43      	ldr	r3, [pc, #268]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0f0      	beq.n	800494a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004968:	4b40      	ldr	r3, [pc, #256]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a3f      	ldr	r2, [pc, #252]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 800496e:	f043 0308 	orr.w	r3, r3, #8
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	4b3d      	ldr	r3, [pc, #244]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	493a      	ldr	r1, [pc, #232]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004982:	4313      	orrs	r3, r2
 8004984:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004986:	4b39      	ldr	r3, [pc, #228]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	4935      	ldr	r1, [pc, #212]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004996:	4313      	orrs	r3, r2
 8004998:	604b      	str	r3, [r1, #4]
 800499a:	e01a      	b.n	80049d2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800499c:	4b33      	ldr	r3, [pc, #204]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a32      	ldr	r2, [pc, #200]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80049a2:	f023 0301 	bic.w	r3, r3, #1
 80049a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049a8:	f7fd f81c 	bl	80019e4 <HAL_GetTick>
 80049ac:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049b0:	f7fd f818 	bl	80019e4 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e366      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049c2:	4b2a      	ldr	r3, [pc, #168]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x1e0>
 80049ce:	e000      	b.n	80049d2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d073      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d005      	beq.n	80049f0 <HAL_RCC_OscConfig+0x220>
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	2b0c      	cmp	r3, #12
 80049e8:	d10e      	bne.n	8004a08 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d10b      	bne.n	8004a08 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f0:	4b1e      	ldr	r3, [pc, #120]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d063      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x2f4>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d15f      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e343      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a10:	d106      	bne.n	8004a20 <HAL_RCC_OscConfig+0x250>
 8004a12:	4b16      	ldr	r3, [pc, #88]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a15      	ldr	r2, [pc, #84]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	e01d      	b.n	8004a5c <HAL_RCC_OscConfig+0x28c>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a28:	d10c      	bne.n	8004a44 <HAL_RCC_OscConfig+0x274>
 8004a2a:	4b10      	ldr	r3, [pc, #64]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a0f      	ldr	r2, [pc, #60]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a0c      	ldr	r2, [pc, #48]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	e00b      	b.n	8004a5c <HAL_RCC_OscConfig+0x28c>
 8004a44:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a08      	ldr	r2, [pc, #32]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a05      	ldr	r2, [pc, #20]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01b      	beq.n	8004a9c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a64:	f7fc ffbe 	bl	80019e4 <HAL_GetTick>
 8004a68:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a6a:	e010      	b.n	8004a8e <HAL_RCC_OscConfig+0x2be>
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	0800778c 	.word	0x0800778c
 8004a74:	20000004 	.word	0x20000004
 8004a78:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a7c:	f7fc ffb2 	bl	80019e4 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b64      	cmp	r3, #100	; 0x64
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e300      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a8e:	4ba0      	ldr	r3, [pc, #640]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0x2ac>
 8004a9a:	e014      	b.n	8004ac6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7fc ffa2 	bl	80019e4 <HAL_GetTick>
 8004aa0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa4:	f7fc ff9e 	bl	80019e4 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b64      	cmp	r3, #100	; 0x64
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e2ec      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ab6:	4b96      	ldr	r3, [pc, #600]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f0      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x2d4>
 8004ac2:	e000      	b.n	8004ac6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d060      	beq.n	8004b94 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d005      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x314>
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	2b0c      	cmp	r3, #12
 8004adc:	d119      	bne.n	8004b12 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d116      	bne.n	8004b12 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae4:	4b8a      	ldr	r3, [pc, #552]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d005      	beq.n	8004afc <HAL_RCC_OscConfig+0x32c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e2c9      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004afc:	4b84      	ldr	r3, [pc, #528]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	061b      	lsls	r3, r3, #24
 8004b0a:	4981      	ldr	r1, [pc, #516]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b10:	e040      	b.n	8004b94 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d023      	beq.n	8004b62 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b1a:	4b7d      	ldr	r3, [pc, #500]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a7c      	ldr	r2, [pc, #496]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b26:	f7fc ff5d 	bl	80019e4 <HAL_GetTick>
 8004b2a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b2e:	f7fc ff59 	bl	80019e4 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e2a7      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b40:	4b73      	ldr	r3, [pc, #460]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4c:	4b70      	ldr	r3, [pc, #448]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	061b      	lsls	r3, r3, #24
 8004b5a:	496d      	ldr	r1, [pc, #436]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	604b      	str	r3, [r1, #4]
 8004b60:	e018      	b.n	8004b94 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b62:	4b6b      	ldr	r3, [pc, #428]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a6a      	ldr	r2, [pc, #424]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6e:	f7fc ff39 	bl	80019e4 <HAL_GetTick>
 8004b72:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b76:	f7fc ff35 	bl	80019e4 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e283      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b88:	4b61      	ldr	r3, [pc, #388]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f0      	bne.n	8004b76 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d07f      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d05f      	beq.n	8004c68 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004ba8:	4b59      	ldr	r3, [pc, #356]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bae:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699a      	ldr	r2, [r3, #24]
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f003 0310 	and.w	r3, r3, #16
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d037      	beq.n	8004c2e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d006      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e25c      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01b      	beq.n	8004c18 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8004be0:	4b4b      	ldr	r3, [pc, #300]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be6:	4a4a      	ldr	r2, [pc, #296]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bf0:	f7fc fef8 	bl	80019e4 <HAL_GetTick>
 8004bf4:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bf8:	f7fc fef4 	bl	80019e4 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b11      	cmp	r3, #17
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e242      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c0a:	4b41      	ldr	r3, [pc, #260]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1ef      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004c18:	4b3d      	ldr	r3, [pc, #244]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c1e:	f023 0210 	bic.w	r2, r3, #16
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	493a      	ldr	r1, [pc, #232]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c2e:	4b38      	ldr	r3, [pc, #224]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c34:	4a36      	ldr	r2, [pc, #216]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004c36:	f043 0301 	orr.w	r3, r3, #1
 8004c3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3e:	f7fc fed1 	bl	80019e4 <HAL_GetTick>
 8004c42:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c46:	f7fc fecd 	bl	80019e4 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b11      	cmp	r3, #17
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e21b      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c58:	4b2d      	ldr	r3, [pc, #180]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0ef      	beq.n	8004c46 <HAL_RCC_OscConfig+0x476>
 8004c66:	e01b      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c68:	4b29      	ldr	r3, [pc, #164]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c6e:	4a28      	ldr	r2, [pc, #160]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c78:	f7fc feb4 	bl	80019e4 <HAL_GetTick>
 8004c7c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c80:	f7fc feb0 	bl	80019e4 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b11      	cmp	r3, #17
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e1fe      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c92:	4b1f      	ldr	r3, [pc, #124]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1ef      	bne.n	8004c80 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80c1 	beq.w	8004e30 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004cb4:	4b16      	ldr	r3, [pc, #88]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10e      	bne.n	8004cde <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc0:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc4:	4a12      	ldr	r2, [pc, #72]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cca:	6593      	str	r3, [r2, #88]	; 0x58
 8004ccc:	4b10      	ldr	r3, [pc, #64]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cde:	4b0d      	ldr	r3, [pc, #52]	; (8004d14 <HAL_RCC_OscConfig+0x544>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d11c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cea:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <HAL_RCC_OscConfig+0x544>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a09      	ldr	r2, [pc, #36]	; (8004d14 <HAL_RCC_OscConfig+0x544>)
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf6:	f7fc fe75 	bl	80019e4 <HAL_GetTick>
 8004cfa:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cfc:	e00c      	b.n	8004d18 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfe:	f7fc fe71 	bl	80019e4 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d905      	bls.n	8004d18 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e1bf      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
 8004d10:	40021000 	.word	0x40021000
 8004d14:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d18:	4bb1      	ldr	r3, [pc, #708]	; (8004fe0 <HAL_RCC_OscConfig+0x810>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0ec      	beq.n	8004cfe <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d02c      	beq.n	8004d8a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004d30:	4bac      	ldr	r3, [pc, #688]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	49a8      	ldr	r1, [pc, #672]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d010      	beq.n	8004d78 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d56:	4ba3      	ldr	r3, [pc, #652]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5c:	4aa1      	ldr	r2, [pc, #644]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d5e:	f043 0304 	orr.w	r3, r3, #4
 8004d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d66:	4b9f      	ldr	r3, [pc, #636]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6c:	4a9d      	ldr	r2, [pc, #628]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d76:	e018      	b.n	8004daa <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d78:	4b9a      	ldr	r3, [pc, #616]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7e:	4a99      	ldr	r2, [pc, #612]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d88:	e00f      	b.n	8004daa <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d8a:	4b96      	ldr	r3, [pc, #600]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d90:	4a94      	ldr	r2, [pc, #592]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d92:	f023 0301 	bic.w	r3, r3, #1
 8004d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d9a:	4b92      	ldr	r3, [pc, #584]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da0:	4a90      	ldr	r2, [pc, #576]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004da2:	f023 0304 	bic.w	r3, r3, #4
 8004da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d016      	beq.n	8004de0 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db2:	f7fc fe17 	bl	80019e4 <HAL_GetTick>
 8004db6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db8:	e00a      	b.n	8004dd0 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dba:	f7fc fe13 	bl	80019e4 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e15f      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dd0:	4b84      	ldr	r3, [pc, #528]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0ed      	beq.n	8004dba <HAL_RCC_OscConfig+0x5ea>
 8004dde:	e01d      	b.n	8004e1c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de0:	f7fc fe00 	bl	80019e4 <HAL_GetTick>
 8004de4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004de6:	e00a      	b.n	8004dfe <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de8:	f7fc fdfc 	bl	80019e4 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e148      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dfe:	4b79      	ldr	r3, [pc, #484]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1ed      	bne.n	8004de8 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004e0c:	4b75      	ldr	r3, [pc, #468]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	4a74      	ldr	r2, [pc, #464]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d105      	bne.n	8004e30 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e24:	4b6f      	ldr	r3, [pc, #444]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e28:	4a6e      	ldr	r2, [pc, #440]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d03c      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01c      	beq.n	8004e7e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e44:	4b67      	ldr	r3, [pc, #412]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e4a:	4a66      	ldr	r2, [pc, #408]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e4c:	f043 0301 	orr.w	r3, r3, #1
 8004e50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e54:	f7fc fdc6 	bl	80019e4 <HAL_GetTick>
 8004e58:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e5c:	f7fc fdc2 	bl	80019e4 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e110      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e6e:	4b5d      	ldr	r3, [pc, #372]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0ef      	beq.n	8004e5c <HAL_RCC_OscConfig+0x68c>
 8004e7c:	e01b      	b.n	8004eb6 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e7e:	4b59      	ldr	r3, [pc, #356]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e84:	4a57      	ldr	r2, [pc, #348]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8e:	f7fc fda9 	bl	80019e4 <HAL_GetTick>
 8004e92:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e96:	f7fc fda5 	bl	80019e4 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e0f3      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ea8:	4b4e      	ldr	r3, [pc, #312]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1ef      	bne.n	8004e96 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 80e7 	beq.w	800508e <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	f040 80b7 	bne.w	8005038 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004eca:	4b46      	ldr	r3, [pc, #280]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f003 0203 	and.w	r2, r3, #3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d124      	bne.n	8004f28 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d11b      	bne.n	8004f28 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d113      	bne.n	8004f28 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d109      	bne.n	8004f28 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	085b      	lsrs	r3, r3, #1
 8004f20:	3b01      	subs	r3, #1
 8004f22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d061      	beq.n	8004fec <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	2b0c      	cmp	r3, #12
 8004f2c:	d056      	beq.n	8004fdc <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f2e:	4b2d      	ldr	r3, [pc, #180]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a2c      	ldr	r2, [pc, #176]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004f34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f3a:	f7fc fd53 	bl	80019e4 <HAL_GetTick>
 8004f3e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f42:	f7fc fd4f 	bl	80019e4 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e09d      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f54:	4b23      	ldr	r3, [pc, #140]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1f0      	bne.n	8004f42 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f60:	4b20      	ldr	r3, [pc, #128]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <HAL_RCC_OscConfig+0x818>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f70:	3a01      	subs	r2, #1
 8004f72:	0112      	lsls	r2, r2, #4
 8004f74:	4311      	orrs	r1, r2
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f7a:	0212      	lsls	r2, r2, #8
 8004f7c:	4311      	orrs	r1, r2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f82:	0852      	lsrs	r2, r2, #1
 8004f84:	3a01      	subs	r2, #1
 8004f86:	0552      	lsls	r2, r2, #21
 8004f88:	4311      	orrs	r1, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f8e:	0852      	lsrs	r2, r2, #1
 8004f90:	3a01      	subs	r2, #1
 8004f92:	0652      	lsls	r2, r2, #25
 8004f94:	430a      	orrs	r2, r1
 8004f96:	4913      	ldr	r1, [pc, #76]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f9c:	4b11      	ldr	r3, [pc, #68]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a10      	ldr	r2, [pc, #64]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fa6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fa8:	4b0e      	ldr	r3, [pc, #56]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	4a0d      	ldr	r2, [pc, #52]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fb4:	f7fc fd16 	bl	80019e4 <HAL_GetTick>
 8004fb8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fbc:	f7fc fd12 	bl	80019e4 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e060      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fce:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f0      	beq.n	8004fbc <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fda:	e058      	b.n	800508e <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e057      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
 8004fe0:	40007000 	.word	0x40007000
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fec:	4b2a      	ldr	r3, [pc, #168]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d14a      	bne.n	800508e <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ff8:	4b27      	ldr	r3, [pc, #156]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a26      	ldr	r2, [pc, #152]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 8004ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005002:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005004:	4b24      	ldr	r3, [pc, #144]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4a23      	ldr	r2, [pc, #140]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 800500a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800500e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005010:	f7fc fce8 	bl	80019e4 <HAL_GetTick>
 8005014:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005018:	f7fc fce4 	bl	80019e4 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e032      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800502a:	4b1b      	ldr	r3, [pc, #108]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0f0      	beq.n	8005018 <HAL_RCC_OscConfig+0x848>
 8005036:	e02a      	b.n	800508e <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	2b0c      	cmp	r3, #12
 800503c:	d025      	beq.n	800508a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503e:	4b16      	ldr	r3, [pc, #88]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a15      	ldr	r2, [pc, #84]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 8005044:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005048:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800504a:	4b13      	ldr	r3, [pc, #76]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	4a12      	ldr	r2, [pc, #72]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 8005050:	f023 0303 	bic.w	r3, r3, #3
 8005054:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8005056:	4b10      	ldr	r3, [pc, #64]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	4a0f      	ldr	r2, [pc, #60]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 800505c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005060:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005062:	f7fc fcbf 	bl	80019e4 <HAL_GetTick>
 8005066:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800506a:	f7fc fcbb 	bl	80019e4 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e009      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800507c:	4b06      	ldr	r3, [pc, #24]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f0      	bne.n	800506a <HAL_RCC_OscConfig+0x89a>
 8005088:	e001      	b.n	800508e <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3728      	adds	r7, #40	; 0x28
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40021000 	.word	0x40021000

0800509c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e0c8      	b.n	8005242 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050b0:	4b66      	ldr	r3, [pc, #408]	; (800524c <HAL_RCC_ClockConfig+0x1b0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d910      	bls.n	80050e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050be:	4b63      	ldr	r3, [pc, #396]	; (800524c <HAL_RCC_ClockConfig+0x1b0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f023 0207 	bic.w	r2, r3, #7
 80050c6:	4961      	ldr	r1, [pc, #388]	; (800524c <HAL_RCC_ClockConfig+0x1b0>)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ce:	4b5f      	ldr	r3, [pc, #380]	; (800524c <HAL_RCC_ClockConfig+0x1b0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d001      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e0b0      	b.n	8005242 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d04c      	beq.n	8005186 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d107      	bne.n	8005104 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050f4:	4b56      	ldr	r3, [pc, #344]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d121      	bne.n	8005144 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e09e      	b.n	8005242 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b02      	cmp	r3, #2
 800510a:	d107      	bne.n	800511c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800510c:	4b50      	ldr	r3, [pc, #320]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d115      	bne.n	8005144 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e092      	b.n	8005242 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d107      	bne.n	8005134 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005124:	4b4a      	ldr	r3, [pc, #296]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d109      	bne.n	8005144 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e086      	b.n	8005242 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005134:	4b46      	ldr	r3, [pc, #280]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e07e      	b.n	8005242 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005144:	4b42      	ldr	r3, [pc, #264]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f023 0203 	bic.w	r2, r3, #3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	493f      	ldr	r1, [pc, #252]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 8005152:	4313      	orrs	r3, r2
 8005154:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005156:	f7fc fc45 	bl	80019e4 <HAL_GetTick>
 800515a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515c:	e00a      	b.n	8005174 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800515e:	f7fc fc41 	bl	80019e4 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	f241 3288 	movw	r2, #5000	; 0x1388
 800516c:	4293      	cmp	r3, r2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e066      	b.n	8005242 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005174:	4b36      	ldr	r3, [pc, #216]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 020c 	and.w	r2, r3, #12
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	429a      	cmp	r2, r3
 8005184:	d1eb      	bne.n	800515e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d008      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005192:	4b2f      	ldr	r3, [pc, #188]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	492c      	ldr	r1, [pc, #176]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051a4:	4b29      	ldr	r3, [pc, #164]	; (800524c <HAL_RCC_ClockConfig+0x1b0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d210      	bcs.n	80051d4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b2:	4b26      	ldr	r3, [pc, #152]	; (800524c <HAL_RCC_ClockConfig+0x1b0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f023 0207 	bic.w	r2, r3, #7
 80051ba:	4924      	ldr	r1, [pc, #144]	; (800524c <HAL_RCC_ClockConfig+0x1b0>)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c2:	4b22      	ldr	r3, [pc, #136]	; (800524c <HAL_RCC_ClockConfig+0x1b0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d001      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e036      	b.n	8005242 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e0:	4b1b      	ldr	r3, [pc, #108]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	4918      	ldr	r1, [pc, #96]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051fe:	4b14      	ldr	r3, [pc, #80]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	4910      	ldr	r1, [pc, #64]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 800520e:	4313      	orrs	r3, r2
 8005210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005212:	f000 f825 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 8005216:	4601      	mov	r1, r0
 8005218:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	4a0c      	ldr	r2, [pc, #48]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 8005224:	5cd3      	ldrb	r3, [r2, r3]
 8005226:	f003 031f 	and.w	r3, r3, #31
 800522a:	fa21 f303 	lsr.w	r3, r1, r3
 800522e:	4a0a      	ldr	r2, [pc, #40]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 8005230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005232:	4b0a      	ldr	r3, [pc, #40]	; (800525c <HAL_RCC_ClockConfig+0x1c0>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f7fc fb84 	bl	8001944 <HAL_InitTick>
 800523c:	4603      	mov	r3, r0
 800523e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005240:	7afb      	ldrb	r3, [r7, #11]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	40022000 	.word	0x40022000
 8005250:	40021000 	.word	0x40021000
 8005254:	0800778c 	.word	0x0800778c
 8005258:	20000004 	.word	0x20000004
 800525c:	20000008 	.word	0x20000008

08005260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005260:	b480      	push	{r7}
 8005262:	b089      	sub	sp, #36	; 0x24
 8005264:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	2300      	movs	r3, #0
 800526c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800526e:	4b3d      	ldr	r3, [pc, #244]	; (8005364 <HAL_RCC_GetSysClockFreq+0x104>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005278:	4b3a      	ldr	r3, [pc, #232]	; (8005364 <HAL_RCC_GetSysClockFreq+0x104>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0x34>
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2b0c      	cmp	r3, #12
 800528c:	d121      	bne.n	80052d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d11e      	bne.n	80052d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005294:	4b33      	ldr	r3, [pc, #204]	; (8005364 <HAL_RCC_GetSysClockFreq+0x104>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d107      	bne.n	80052b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052a0:	4b30      	ldr	r3, [pc, #192]	; (8005364 <HAL_RCC_GetSysClockFreq+0x104>)
 80052a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a6:	0a1b      	lsrs	r3, r3, #8
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	61fb      	str	r3, [r7, #28]
 80052ae:	e005      	b.n	80052bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052b0:	4b2c      	ldr	r3, [pc, #176]	; (8005364 <HAL_RCC_GetSysClockFreq+0x104>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052bc:	4a2a      	ldr	r2, [pc, #168]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10d      	bne.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052d0:	e00a      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d102      	bne.n	80052de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052d8:	4b24      	ldr	r3, [pc, #144]	; (800536c <HAL_RCC_GetSysClockFreq+0x10c>)
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	e004      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052e4:	4b22      	ldr	r3, [pc, #136]	; (8005370 <HAL_RCC_GetSysClockFreq+0x110>)
 80052e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d133      	bne.n	8005356 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ee:	4b1d      	ldr	r3, [pc, #116]	; (8005364 <HAL_RCC_GetSysClockFreq+0x104>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d002      	beq.n	8005304 <HAL_RCC_GetSysClockFreq+0xa4>
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d003      	beq.n	800530a <HAL_RCC_GetSysClockFreq+0xaa>
 8005302:	e005      	b.n	8005310 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005304:	4b19      	ldr	r3, [pc, #100]	; (800536c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005306:	617b      	str	r3, [r7, #20]
      break;
 8005308:	e005      	b.n	8005316 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800530a:	4b19      	ldr	r3, [pc, #100]	; (8005370 <HAL_RCC_GetSysClockFreq+0x110>)
 800530c:	617b      	str	r3, [r7, #20]
      break;
 800530e:	e002      	b.n	8005316 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	617b      	str	r3, [r7, #20]
      break;
 8005314:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005316:	4b13      	ldr	r3, [pc, #76]	; (8005364 <HAL_RCC_GetSysClockFreq+0x104>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	091b      	lsrs	r3, r3, #4
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	3301      	adds	r3, #1
 8005322:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005324:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <HAL_RCC_GetSysClockFreq+0x104>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	0a1b      	lsrs	r3, r3, #8
 800532a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	fb02 f203 	mul.w	r2, r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	fbb2 f3f3 	udiv	r3, r2, r3
 800533a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <HAL_RCC_GetSysClockFreq+0x104>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	0e5b      	lsrs	r3, r3, #25
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	3301      	adds	r3, #1
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	fbb2 f3f3 	udiv	r3, r2, r3
 8005354:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005356:	69bb      	ldr	r3, [r7, #24]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3724      	adds	r7, #36	; 0x24
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40021000 	.word	0x40021000
 8005368:	080077a4 	.word	0x080077a4
 800536c:	00f42400 	.word	0x00f42400
 8005370:	007a1200 	.word	0x007a1200

08005374 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005378:	4b03      	ldr	r3, [pc, #12]	; (8005388 <HAL_RCC_GetHCLKFreq+0x14>)
 800537a:	681b      	ldr	r3, [r3, #0]
}
 800537c:	4618      	mov	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20000004 	.word	0x20000004

0800538c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005390:	f7ff fff0 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 8005394:	4601      	mov	r1, r0
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	0a1b      	lsrs	r3, r3, #8
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	4a04      	ldr	r2, [pc, #16]	; (80053b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053a2:	5cd3      	ldrb	r3, [r2, r3]
 80053a4:	f003 031f 	and.w	r3, r3, #31
 80053a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40021000 	.word	0x40021000
 80053b4:	0800779c 	.word	0x0800779c

080053b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053bc:	f7ff ffda 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 80053c0:	4601      	mov	r1, r0
 80053c2:	4b06      	ldr	r3, [pc, #24]	; (80053dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	0adb      	lsrs	r3, r3, #11
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	4a04      	ldr	r2, [pc, #16]	; (80053e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ce:	5cd3      	ldrb	r3, [r2, r3]
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053d8:	4618      	mov	r0, r3
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40021000 	.word	0x40021000
 80053e0:	0800779c 	.word	0x0800779c

080053e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053ec:	2300      	movs	r3, #0
 80053ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053f0:	4b2a      	ldr	r3, [pc, #168]	; (800549c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053fc:	f7ff f984 	bl	8004708 <HAL_PWREx_GetVoltageRange>
 8005400:	6178      	str	r0, [r7, #20]
 8005402:	e014      	b.n	800542e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005404:	4b25      	ldr	r3, [pc, #148]	; (800549c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005408:	4a24      	ldr	r2, [pc, #144]	; (800549c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800540a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800540e:	6593      	str	r3, [r2, #88]	; 0x58
 8005410:	4b22      	ldr	r3, [pc, #136]	; (800549c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800541c:	f7ff f974 	bl	8004708 <HAL_PWREx_GetVoltageRange>
 8005420:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005422:	4b1e      	ldr	r3, [pc, #120]	; (800549c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005426:	4a1d      	ldr	r2, [pc, #116]	; (800549c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800542c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005434:	d10b      	bne.n	800544e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b80      	cmp	r3, #128	; 0x80
 800543a:	d919      	bls.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2ba0      	cmp	r3, #160	; 0xa0
 8005440:	d902      	bls.n	8005448 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005442:	2302      	movs	r3, #2
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	e013      	b.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005448:	2301      	movs	r3, #1
 800544a:	613b      	str	r3, [r7, #16]
 800544c:	e010      	b.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b80      	cmp	r3, #128	; 0x80
 8005452:	d902      	bls.n	800545a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005454:	2303      	movs	r3, #3
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	e00a      	b.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b80      	cmp	r3, #128	; 0x80
 800545e:	d102      	bne.n	8005466 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005460:	2302      	movs	r3, #2
 8005462:	613b      	str	r3, [r7, #16]
 8005464:	e004      	b.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b70      	cmp	r3, #112	; 0x70
 800546a:	d101      	bne.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800546c:	2301      	movs	r3, #1
 800546e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005470:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f023 0207 	bic.w	r2, r3, #7
 8005478:	4909      	ldr	r1, [pc, #36]	; (80054a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005480:	4b07      	ldr	r3, [pc, #28]	; (80054a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	429a      	cmp	r2, r3
 800548c:	d001      	beq.n	8005492 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40021000 	.word	0x40021000
 80054a0:	40022000 	.word	0x40022000

080054a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054ac:	2300      	movs	r3, #0
 80054ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054b0:	2300      	movs	r3, #0
 80054b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 809e 	beq.w	80055fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054c2:	2300      	movs	r3, #0
 80054c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054c6:	4b46      	ldr	r3, [pc, #280]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80054c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80054d2:	2301      	movs	r3, #1
 80054d4:	e000      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80054d6:	2300      	movs	r3, #0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00d      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054dc:	4b40      	ldr	r3, [pc, #256]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80054de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e0:	4a3f      	ldr	r2, [pc, #252]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80054e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e6:	6593      	str	r3, [r2, #88]	; 0x58
 80054e8:	4b3d      	ldr	r3, [pc, #244]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80054ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f0:	60bb      	str	r3, [r7, #8]
 80054f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054f4:	2301      	movs	r3, #1
 80054f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054f8:	4b3a      	ldr	r3, [pc, #232]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a39      	ldr	r2, [pc, #228]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80054fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005502:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005504:	f7fc fa6e 	bl	80019e4 <HAL_GetTick>
 8005508:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800550a:	e009      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800550c:	f7fc fa6a 	bl	80019e4 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d902      	bls.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	74fb      	strb	r3, [r7, #19]
        break;
 800551e:	e005      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005520:	4b30      	ldr	r3, [pc, #192]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0ef      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800552c:	7cfb      	ldrb	r3, [r7, #19]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d15a      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005532:	4b2b      	ldr	r3, [pc, #172]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d01e      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	429a      	cmp	r2, r3
 800554c:	d019      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800554e:	4b24      	ldr	r3, [pc, #144]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005558:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800555a:	4b21      	ldr	r3, [pc, #132]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800555c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005560:	4a1f      	ldr	r2, [pc, #124]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800556a:	4b1d      	ldr	r3, [pc, #116]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800556c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005570:	4a1b      	ldr	r2, [pc, #108]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005576:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800557a:	4a19      	ldr	r2, [pc, #100]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d016      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558c:	f7fc fa2a 	bl	80019e4 <HAL_GetTick>
 8005590:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005592:	e00b      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005594:	f7fc fa26 	bl	80019e4 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d902      	bls.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	74fb      	strb	r3, [r7, #19]
            break;
 80055aa:	e006      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ac:	4b0c      	ldr	r3, [pc, #48]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0ec      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80055ba:	7cfb      	ldrb	r3, [r7, #19]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10b      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055c0:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ce:	4904      	ldr	r1, [pc, #16]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80055d6:	e009      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055d8:	7cfb      	ldrb	r3, [r7, #19]
 80055da:	74bb      	strb	r3, [r7, #18]
 80055dc:	e006      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x148>
 80055de:	bf00      	nop
 80055e0:	40021000 	.word	0x40021000
 80055e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e8:	7cfb      	ldrb	r3, [r7, #19]
 80055ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055ec:	7c7b      	ldrb	r3, [r7, #17]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d105      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055f2:	4b6e      	ldr	r3, [pc, #440]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80055f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f6:	4a6d      	ldr	r2, [pc, #436]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80055f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800560a:	4b68      	ldr	r3, [pc, #416]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005610:	f023 0203 	bic.w	r2, r3, #3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	4964      	ldr	r1, [pc, #400]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800562c:	4b5f      	ldr	r3, [pc, #380]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005632:	f023 020c 	bic.w	r2, r3, #12
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	495c      	ldr	r1, [pc, #368]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800564e:	4b57      	ldr	r3, [pc, #348]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005654:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4953      	ldr	r1, [pc, #332]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0320 	and.w	r3, r3, #32
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005670:	4b4e      	ldr	r3, [pc, #312]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005676:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	494b      	ldr	r1, [pc, #300]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005692:	4b46      	ldr	r3, [pc, #280]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005698:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	4942      	ldr	r1, [pc, #264]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056b4:	4b3d      	ldr	r3, [pc, #244]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	493a      	ldr	r1, [pc, #232]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056d6:	4b35      	ldr	r3, [pc, #212]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	4931      	ldr	r1, [pc, #196]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00a      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056f8:	4b2c      	ldr	r3, [pc, #176]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	4929      	ldr	r1, [pc, #164]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800571a:	4b24      	ldr	r3, [pc, #144]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800571c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	4920      	ldr	r1, [pc, #128]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d015      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800573c:	4b1b      	ldr	r3, [pc, #108]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800573e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005742:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574a:	4918      	ldr	r1, [pc, #96]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800575a:	d105      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800575c:	4b13      	ldr	r3, [pc, #76]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	4a12      	ldr	r2, [pc, #72]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005766:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d015      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005774:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	490a      	ldr	r1, [pc, #40]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005784:	4313      	orrs	r3, r2
 8005786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005792:	d105      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005794:	4b05      	ldr	r3, [pc, #20]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	4a04      	ldr	r2, [pc, #16]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800579a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800579e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80057a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40021000 	.word	0x40021000

080057b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e049      	b.n	8005856 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d106      	bne.n	80057dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fb fd9a 	bl	8001310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3304      	adds	r3, #4
 80057ec:	4619      	mov	r1, r3
 80057ee:	4610      	mov	r0, r2
 80057f0:	f000 fd5c 	bl	80062ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b01      	cmp	r3, #1
 8005872:	d001      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e03b      	b.n	80058f0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a19      	ldr	r2, [pc, #100]	; (80058fc <HAL_TIM_Base_Start_IT+0x9c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d009      	beq.n	80058ae <HAL_TIM_Base_Start_IT+0x4e>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a2:	d004      	beq.n	80058ae <HAL_TIM_Base_Start_IT+0x4e>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a15      	ldr	r2, [pc, #84]	; (8005900 <HAL_TIM_Base_Start_IT+0xa0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d115      	bne.n	80058da <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	4b13      	ldr	r3, [pc, #76]	; (8005904 <HAL_TIM_Base_Start_IT+0xa4>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b06      	cmp	r3, #6
 80058be:	d015      	beq.n	80058ec <HAL_TIM_Base_Start_IT+0x8c>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c6:	d011      	beq.n	80058ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d8:	e008      	b.n	80058ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0201 	orr.w	r2, r2, #1
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	e000      	b.n	80058ee <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	40012c00 	.word	0x40012c00
 8005900:	40014000 	.word	0x40014000
 8005904:	00010007 	.word	0x00010007

08005908 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0201 	bic.w	r2, r2, #1
 800591e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6a1a      	ldr	r2, [r3, #32]
 8005926:	f241 1311 	movw	r3, #4369	; 0x1111
 800592a:	4013      	ands	r3, r2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10f      	bne.n	8005950 <HAL_TIM_Base_Stop_IT+0x48>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6a1a      	ldr	r2, [r3, #32]
 8005936:	f240 4344 	movw	r3, #1092	; 0x444
 800593a:	4013      	ands	r3, r2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d107      	bne.n	8005950 <HAL_TIM_Base_Stop_IT+0x48>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0201 	bic.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e049      	b.n	8005a0c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d106      	bne.n	8005992 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f841 	bl	8005a14 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2202      	movs	r2, #2
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3304      	adds	r3, #4
 80059a2:	4619      	mov	r1, r3
 80059a4:	4610      	mov	r0, r2
 80059a6:	f000 fc81 	bl	80062ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d109      	bne.n	8005a4c <HAL_TIM_OC_Start+0x24>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	bf14      	ite	ne
 8005a44:	2301      	movne	r3, #1
 8005a46:	2300      	moveq	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	e03c      	b.n	8005ac6 <HAL_TIM_OC_Start+0x9e>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d109      	bne.n	8005a66 <HAL_TIM_OC_Start+0x3e>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	bf14      	ite	ne
 8005a5e:	2301      	movne	r3, #1
 8005a60:	2300      	moveq	r3, #0
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	e02f      	b.n	8005ac6 <HAL_TIM_OC_Start+0x9e>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d109      	bne.n	8005a80 <HAL_TIM_OC_Start+0x58>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	bf14      	ite	ne
 8005a78:	2301      	movne	r3, #1
 8005a7a:	2300      	moveq	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	e022      	b.n	8005ac6 <HAL_TIM_OC_Start+0x9e>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b0c      	cmp	r3, #12
 8005a84:	d109      	bne.n	8005a9a <HAL_TIM_OC_Start+0x72>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	bf14      	ite	ne
 8005a92:	2301      	movne	r3, #1
 8005a94:	2300      	moveq	r3, #0
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	e015      	b.n	8005ac6 <HAL_TIM_OC_Start+0x9e>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b10      	cmp	r3, #16
 8005a9e:	d109      	bne.n	8005ab4 <HAL_TIM_OC_Start+0x8c>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	bf14      	ite	ne
 8005aac:	2301      	movne	r3, #1
 8005aae:	2300      	moveq	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	e008      	b.n	8005ac6 <HAL_TIM_OC_Start+0x9e>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	bf14      	ite	ne
 8005ac0:	2301      	movne	r3, #1
 8005ac2:	2300      	moveq	r3, #0
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e07e      	b.n	8005bcc <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d104      	bne.n	8005ade <HAL_TIM_OC_Start+0xb6>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005adc:	e023      	b.n	8005b26 <HAL_TIM_OC_Start+0xfe>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b04      	cmp	r3, #4
 8005ae2:	d104      	bne.n	8005aee <HAL_TIM_OC_Start+0xc6>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aec:	e01b      	b.n	8005b26 <HAL_TIM_OC_Start+0xfe>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d104      	bne.n	8005afe <HAL_TIM_OC_Start+0xd6>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005afc:	e013      	b.n	8005b26 <HAL_TIM_OC_Start+0xfe>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b0c      	cmp	r3, #12
 8005b02:	d104      	bne.n	8005b0e <HAL_TIM_OC_Start+0xe6>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b0c:	e00b      	b.n	8005b26 <HAL_TIM_OC_Start+0xfe>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b10      	cmp	r3, #16
 8005b12:	d104      	bne.n	8005b1e <HAL_TIM_OC_Start+0xf6>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b1c:	e003      	b.n	8005b26 <HAL_TIM_OC_Start+0xfe>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2202      	movs	r2, #2
 8005b22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	6839      	ldr	r1, [r7, #0]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 ff38 	bl	80069a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a26      	ldr	r2, [pc, #152]	; (8005bd4 <HAL_TIM_OC_Start+0x1ac>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d009      	beq.n	8005b52 <HAL_TIM_OC_Start+0x12a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a25      	ldr	r2, [pc, #148]	; (8005bd8 <HAL_TIM_OC_Start+0x1b0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d004      	beq.n	8005b52 <HAL_TIM_OC_Start+0x12a>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a23      	ldr	r2, [pc, #140]	; (8005bdc <HAL_TIM_OC_Start+0x1b4>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d101      	bne.n	8005b56 <HAL_TIM_OC_Start+0x12e>
 8005b52:	2301      	movs	r3, #1
 8005b54:	e000      	b.n	8005b58 <HAL_TIM_OC_Start+0x130>
 8005b56:	2300      	movs	r3, #0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d007      	beq.n	8005b6c <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b6a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a18      	ldr	r2, [pc, #96]	; (8005bd4 <HAL_TIM_OC_Start+0x1ac>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d009      	beq.n	8005b8a <HAL_TIM_OC_Start+0x162>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7e:	d004      	beq.n	8005b8a <HAL_TIM_OC_Start+0x162>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a14      	ldr	r2, [pc, #80]	; (8005bd8 <HAL_TIM_OC_Start+0x1b0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d115      	bne.n	8005bb6 <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	4b13      	ldr	r3, [pc, #76]	; (8005be0 <HAL_TIM_OC_Start+0x1b8>)
 8005b92:	4013      	ands	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b06      	cmp	r3, #6
 8005b9a:	d015      	beq.n	8005bc8 <HAL_TIM_OC_Start+0x1a0>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba2:	d011      	beq.n	8005bc8 <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb4:	e008      	b.n	8005bc8 <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f042 0201 	orr.w	r2, r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	e000      	b.n	8005bca <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	40012c00 	.word	0x40012c00
 8005bd8:	40014000 	.word	0x40014000
 8005bdc:	40014400 	.word	0x40014400
 8005be0:	00010007 	.word	0x00010007

08005be4 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fed4 	bl	80069a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a39      	ldr	r2, [pc, #228]	; (8005ce8 <HAL_TIM_OC_Stop+0x104>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d009      	beq.n	8005c1a <HAL_TIM_OC_Stop+0x36>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a38      	ldr	r2, [pc, #224]	; (8005cec <HAL_TIM_OC_Stop+0x108>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d004      	beq.n	8005c1a <HAL_TIM_OC_Stop+0x36>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a36      	ldr	r2, [pc, #216]	; (8005cf0 <HAL_TIM_OC_Stop+0x10c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d101      	bne.n	8005c1e <HAL_TIM_OC_Stop+0x3a>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <HAL_TIM_OC_Stop+0x3c>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d017      	beq.n	8005c54 <HAL_TIM_OC_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6a1a      	ldr	r2, [r3, #32]
 8005c2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10f      	bne.n	8005c54 <HAL_TIM_OC_Stop+0x70>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6a1a      	ldr	r2, [r3, #32]
 8005c3a:	f240 4344 	movw	r3, #1092	; 0x444
 8005c3e:	4013      	ands	r3, r2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d107      	bne.n	8005c54 <HAL_TIM_OC_Stop+0x70>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c52:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6a1a      	ldr	r2, [r3, #32]
 8005c5a:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c5e:	4013      	ands	r3, r2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10f      	bne.n	8005c84 <HAL_TIM_OC_Stop+0xa0>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6a1a      	ldr	r2, [r3, #32]
 8005c6a:	f240 4344 	movw	r3, #1092	; 0x444
 8005c6e:	4013      	ands	r3, r2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d107      	bne.n	8005c84 <HAL_TIM_OC_Stop+0xa0>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0201 	bic.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d104      	bne.n	8005c94 <HAL_TIM_OC_Stop+0xb0>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c92:	e023      	b.n	8005cdc <HAL_TIM_OC_Stop+0xf8>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d104      	bne.n	8005ca4 <HAL_TIM_OC_Stop+0xc0>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ca2:	e01b      	b.n	8005cdc <HAL_TIM_OC_Stop+0xf8>
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2b08      	cmp	r3, #8
 8005ca8:	d104      	bne.n	8005cb4 <HAL_TIM_OC_Stop+0xd0>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cb2:	e013      	b.n	8005cdc <HAL_TIM_OC_Stop+0xf8>
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2b0c      	cmp	r3, #12
 8005cb8:	d104      	bne.n	8005cc4 <HAL_TIM_OC_Stop+0xe0>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cc2:	e00b      	b.n	8005cdc <HAL_TIM_OC_Stop+0xf8>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b10      	cmp	r3, #16
 8005cc8:	d104      	bne.n	8005cd4 <HAL_TIM_OC_Stop+0xf0>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cd2:	e003      	b.n	8005cdc <HAL_TIM_OC_Stop+0xf8>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	40012c00 	.word	0x40012c00
 8005cec:	40014000 	.word	0x40014000
 8005cf0:	40014400 	.word	0x40014400

08005cf4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e041      	b.n	8005d8c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d106      	bne.n	8005d22 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f839 	bl	8005d94 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2202      	movs	r2, #2
 8005d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	3304      	adds	r3, #4
 8005d32:	4619      	mov	r1, r3
 8005d34:	4610      	mov	r0, r2
 8005d36:	f000 fab9 	bl	80062ac <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0208 	bic.w	r2, r2, #8
 8005d48:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6819      	ldr	r1, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d122      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d11b      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f06f 0202 	mvn.w	r2, #2
 8005dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	f003 0303 	and.w	r3, r3, #3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fa3f 	bl	800626e <HAL_TIM_IC_CaptureCallback>
 8005df0:	e005      	b.n	8005dfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fa31 	bl	800625a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fa42 	bl	8006282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0304 	and.w	r3, r3, #4
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d122      	bne.n	8005e58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d11b      	bne.n	8005e58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0204 	mvn.w	r2, #4
 8005e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fa15 	bl	800626e <HAL_TIM_IC_CaptureCallback>
 8005e44:	e005      	b.n	8005e52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fa07 	bl	800625a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fa18 	bl	8006282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f003 0308 	and.w	r3, r3, #8
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d122      	bne.n	8005eac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f003 0308 	and.w	r3, r3, #8
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d11b      	bne.n	8005eac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f06f 0208 	mvn.w	r2, #8
 8005e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2204      	movs	r2, #4
 8005e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	f003 0303 	and.w	r3, r3, #3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f9eb 	bl	800626e <HAL_TIM_IC_CaptureCallback>
 8005e98:	e005      	b.n	8005ea6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f9dd 	bl	800625a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f9ee 	bl	8006282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f003 0310 	and.w	r3, r3, #16
 8005eb6:	2b10      	cmp	r3, #16
 8005eb8:	d122      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d11b      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0210 	mvn.w	r2, #16
 8005ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2208      	movs	r2, #8
 8005ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f9c1 	bl	800626e <HAL_TIM_IC_CaptureCallback>
 8005eec:	e005      	b.n	8005efa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f9b3 	bl	800625a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f9c4 	bl	8006282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d10e      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d107      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0201 	mvn.w	r2, #1
 8005f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f98d 	bl	8006246 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f36:	2b80      	cmp	r3, #128	; 0x80
 8005f38:	d10e      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f44:	2b80      	cmp	r3, #128	; 0x80
 8005f46:	d107      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fdbc 	bl	8006ad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f66:	d10e      	bne.n	8005f86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f72:	2b80      	cmp	r3, #128	; 0x80
 8005f74:	d107      	bne.n	8005f86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fdaf 	bl	8006ae4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f90:	2b40      	cmp	r3, #64	; 0x40
 8005f92:	d10e      	bne.n	8005fb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9e:	2b40      	cmp	r3, #64	; 0x40
 8005fa0:	d107      	bne.n	8005fb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f972 	bl	8006296 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d10e      	bne.n	8005fde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	d107      	bne.n	8005fde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f06f 0220 	mvn.w	r2, #32
 8005fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fd6f 	bl	8006abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fde:	bf00      	nop
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
	...

08005fe8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d101      	bne.n	8006002 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005ffe:	2302      	movs	r3, #2
 8006000:	e064      	b.n	80060cc <HAL_TIM_OC_ConfigChannel+0xe4>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b14      	cmp	r3, #20
 800600e:	d857      	bhi.n	80060c0 <HAL_TIM_OC_ConfigChannel+0xd8>
 8006010:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <HAL_TIM_OC_ConfigChannel+0x30>)
 8006012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006016:	bf00      	nop
 8006018:	0800606d 	.word	0x0800606d
 800601c:	080060c1 	.word	0x080060c1
 8006020:	080060c1 	.word	0x080060c1
 8006024:	080060c1 	.word	0x080060c1
 8006028:	0800607b 	.word	0x0800607b
 800602c:	080060c1 	.word	0x080060c1
 8006030:	080060c1 	.word	0x080060c1
 8006034:	080060c1 	.word	0x080060c1
 8006038:	08006089 	.word	0x08006089
 800603c:	080060c1 	.word	0x080060c1
 8006040:	080060c1 	.word	0x080060c1
 8006044:	080060c1 	.word	0x080060c1
 8006048:	08006097 	.word	0x08006097
 800604c:	080060c1 	.word	0x080060c1
 8006050:	080060c1 	.word	0x080060c1
 8006054:	080060c1 	.word	0x080060c1
 8006058:	080060a5 	.word	0x080060a5
 800605c:	080060c1 	.word	0x080060c1
 8006060:	080060c1 	.word	0x080060c1
 8006064:	080060c1 	.word	0x080060c1
 8006068:	080060b3 	.word	0x080060b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68b9      	ldr	r1, [r7, #8]
 8006072:	4618      	mov	r0, r3
 8006074:	f000 f97e 	bl	8006374 <TIM_OC1_SetConfig>
      break;
 8006078:	e023      	b.n	80060c2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	4618      	mov	r0, r3
 8006082:	f000 f9f3 	bl	800646c <TIM_OC2_SetConfig>
      break;
 8006086:	e01c      	b.n	80060c2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	4618      	mov	r0, r3
 8006090:	f000 fa66 	bl	8006560 <TIM_OC3_SetConfig>
      break;
 8006094:	e015      	b.n	80060c2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68b9      	ldr	r1, [r7, #8]
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fad7 	bl	8006650 <TIM_OC4_SetConfig>
      break;
 80060a2:	e00e      	b.n	80060c2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68b9      	ldr	r1, [r7, #8]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 fb2e 	bl	800670c <TIM_OC5_SetConfig>
      break;
 80060b0:	e007      	b.n	80060c2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68b9      	ldr	r1, [r7, #8]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fb7f 	bl	80067bc <TIM_OC6_SetConfig>
      break;
 80060be:	e000      	b.n	80060c2 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 80060c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_TIM_ConfigClockSource+0x18>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e0a8      	b.n	800623e <HAL_TIM_ConfigClockSource+0x16a>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800610a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800610e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006116:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b40      	cmp	r3, #64	; 0x40
 8006126:	d067      	beq.n	80061f8 <HAL_TIM_ConfigClockSource+0x124>
 8006128:	2b40      	cmp	r3, #64	; 0x40
 800612a:	d80b      	bhi.n	8006144 <HAL_TIM_ConfigClockSource+0x70>
 800612c:	2b10      	cmp	r3, #16
 800612e:	d073      	beq.n	8006218 <HAL_TIM_ConfigClockSource+0x144>
 8006130:	2b10      	cmp	r3, #16
 8006132:	d802      	bhi.n	800613a <HAL_TIM_ConfigClockSource+0x66>
 8006134:	2b00      	cmp	r3, #0
 8006136:	d06f      	beq.n	8006218 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006138:	e078      	b.n	800622c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800613a:	2b20      	cmp	r3, #32
 800613c:	d06c      	beq.n	8006218 <HAL_TIM_ConfigClockSource+0x144>
 800613e:	2b30      	cmp	r3, #48	; 0x30
 8006140:	d06a      	beq.n	8006218 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006142:	e073      	b.n	800622c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006144:	2b70      	cmp	r3, #112	; 0x70
 8006146:	d00d      	beq.n	8006164 <HAL_TIM_ConfigClockSource+0x90>
 8006148:	2b70      	cmp	r3, #112	; 0x70
 800614a:	d804      	bhi.n	8006156 <HAL_TIM_ConfigClockSource+0x82>
 800614c:	2b50      	cmp	r3, #80	; 0x50
 800614e:	d033      	beq.n	80061b8 <HAL_TIM_ConfigClockSource+0xe4>
 8006150:	2b60      	cmp	r3, #96	; 0x60
 8006152:	d041      	beq.n	80061d8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006154:	e06a      	b.n	800622c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615a:	d066      	beq.n	800622a <HAL_TIM_ConfigClockSource+0x156>
 800615c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006160:	d017      	beq.n	8006192 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006162:	e063      	b.n	800622c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	6899      	ldr	r1, [r3, #8]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f000 fbf6 	bl	8006964 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006186:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	609a      	str	r2, [r3, #8]
      break;
 8006190:	e04c      	b.n	800622c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6818      	ldr	r0, [r3, #0]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	6899      	ldr	r1, [r3, #8]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f000 fbdf 	bl	8006964 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061b4:	609a      	str	r2, [r3, #8]
      break;
 80061b6:	e039      	b.n	800622c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	6859      	ldr	r1, [r3, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	461a      	mov	r2, r3
 80061c6:	f000 fb53 	bl	8006870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2150      	movs	r1, #80	; 0x50
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 fbac 	bl	800692e <TIM_ITRx_SetConfig>
      break;
 80061d6:	e029      	b.n	800622c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	6859      	ldr	r1, [r3, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	461a      	mov	r2, r3
 80061e6:	f000 fb72 	bl	80068ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2160      	movs	r1, #96	; 0x60
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 fb9c 	bl	800692e <TIM_ITRx_SetConfig>
      break;
 80061f6:	e019      	b.n	800622c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	6859      	ldr	r1, [r3, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	461a      	mov	r2, r3
 8006206:	f000 fb33 	bl	8006870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2140      	movs	r1, #64	; 0x40
 8006210:	4618      	mov	r0, r3
 8006212:	f000 fb8c 	bl	800692e <TIM_ITRx_SetConfig>
      break;
 8006216:	e009      	b.n	800622c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4619      	mov	r1, r3
 8006222:	4610      	mov	r0, r2
 8006224:	f000 fb83 	bl	800692e <TIM_ITRx_SetConfig>
        break;
 8006228:	e000      	b.n	800622c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800622a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
	...

080062ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a2a      	ldr	r2, [pc, #168]	; (8006368 <TIM_Base_SetConfig+0xbc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d003      	beq.n	80062cc <TIM_Base_SetConfig+0x20>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ca:	d108      	bne.n	80062de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a21      	ldr	r2, [pc, #132]	; (8006368 <TIM_Base_SetConfig+0xbc>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00b      	beq.n	80062fe <TIM_Base_SetConfig+0x52>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ec:	d007      	beq.n	80062fe <TIM_Base_SetConfig+0x52>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a1e      	ldr	r2, [pc, #120]	; (800636c <TIM_Base_SetConfig+0xc0>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d003      	beq.n	80062fe <TIM_Base_SetConfig+0x52>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a1d      	ldr	r2, [pc, #116]	; (8006370 <TIM_Base_SetConfig+0xc4>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d108      	bne.n	8006310 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a0c      	ldr	r2, [pc, #48]	; (8006368 <TIM_Base_SetConfig+0xbc>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d007      	beq.n	800634c <TIM_Base_SetConfig+0xa0>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a0b      	ldr	r2, [pc, #44]	; (800636c <TIM_Base_SetConfig+0xc0>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d003      	beq.n	800634c <TIM_Base_SetConfig+0xa0>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a0a      	ldr	r2, [pc, #40]	; (8006370 <TIM_Base_SetConfig+0xc4>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d103      	bne.n	8006354 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	615a      	str	r2, [r3, #20]
}
 800635a:	bf00      	nop
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40012c00 	.word	0x40012c00
 800636c:	40014000 	.word	0x40014000
 8006370:	40014400 	.word	0x40014400

08006374 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	f023 0201 	bic.w	r2, r3, #1
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0303 	bic.w	r3, r3, #3
 80063ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f023 0302 	bic.w	r3, r3, #2
 80063c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a24      	ldr	r2, [pc, #144]	; (8006460 <TIM_OC1_SetConfig+0xec>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d007      	beq.n	80063e4 <TIM_OC1_SetConfig+0x70>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a23      	ldr	r2, [pc, #140]	; (8006464 <TIM_OC1_SetConfig+0xf0>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d003      	beq.n	80063e4 <TIM_OC1_SetConfig+0x70>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a22      	ldr	r2, [pc, #136]	; (8006468 <TIM_OC1_SetConfig+0xf4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d10c      	bne.n	80063fe <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f023 0308 	bic.w	r3, r3, #8
 80063ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f023 0304 	bic.w	r3, r3, #4
 80063fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a17      	ldr	r2, [pc, #92]	; (8006460 <TIM_OC1_SetConfig+0xec>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d007      	beq.n	8006416 <TIM_OC1_SetConfig+0xa2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a16      	ldr	r2, [pc, #88]	; (8006464 <TIM_OC1_SetConfig+0xf0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d003      	beq.n	8006416 <TIM_OC1_SetConfig+0xa2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a15      	ldr	r2, [pc, #84]	; (8006468 <TIM_OC1_SetConfig+0xf4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d111      	bne.n	800643a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800641c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4313      	orrs	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	621a      	str	r2, [r3, #32]
}
 8006454:	bf00      	nop
 8006456:	371c      	adds	r7, #28
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	40012c00 	.word	0x40012c00
 8006464:	40014000 	.word	0x40014000
 8006468:	40014400 	.word	0x40014400

0800646c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	f023 0210 	bic.w	r2, r3, #16
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800649a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	021b      	lsls	r3, r3, #8
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f023 0320 	bic.w	r3, r3, #32
 80064ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	011b      	lsls	r3, r3, #4
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a22      	ldr	r2, [pc, #136]	; (8006554 <TIM_OC2_SetConfig+0xe8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d10d      	bne.n	80064ec <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	011b      	lsls	r3, r3, #4
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a19      	ldr	r2, [pc, #100]	; (8006554 <TIM_OC2_SetConfig+0xe8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d007      	beq.n	8006504 <TIM_OC2_SetConfig+0x98>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a18      	ldr	r2, [pc, #96]	; (8006558 <TIM_OC2_SetConfig+0xec>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d003      	beq.n	8006504 <TIM_OC2_SetConfig+0x98>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a17      	ldr	r2, [pc, #92]	; (800655c <TIM_OC2_SetConfig+0xf0>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d113      	bne.n	800652c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800650a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006512:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	4313      	orrs	r3, r2
 800651e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	4313      	orrs	r3, r2
 800652a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	621a      	str	r2, [r3, #32]
}
 8006546:	bf00      	nop
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40012c00 	.word	0x40012c00
 8006558:	40014000 	.word	0x40014000
 800655c:	40014400 	.word	0x40014400

08006560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800658e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 0303 	bic.w	r3, r3, #3
 800659a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	021b      	lsls	r3, r3, #8
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a21      	ldr	r2, [pc, #132]	; (8006644 <TIM_OC3_SetConfig+0xe4>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d10d      	bne.n	80065de <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	021b      	lsls	r3, r3, #8
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a18      	ldr	r2, [pc, #96]	; (8006644 <TIM_OC3_SetConfig+0xe4>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d007      	beq.n	80065f6 <TIM_OC3_SetConfig+0x96>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a17      	ldr	r2, [pc, #92]	; (8006648 <TIM_OC3_SetConfig+0xe8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d003      	beq.n	80065f6 <TIM_OC3_SetConfig+0x96>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a16      	ldr	r2, [pc, #88]	; (800664c <TIM_OC3_SetConfig+0xec>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d113      	bne.n	800661e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	4313      	orrs	r3, r2
 8006610:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	011b      	lsls	r3, r3, #4
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	4313      	orrs	r3, r2
 800661c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	621a      	str	r2, [r3, #32]
}
 8006638:	bf00      	nop
 800663a:	371c      	adds	r7, #28
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	40012c00 	.word	0x40012c00
 8006648:	40014000 	.word	0x40014000
 800664c:	40014400 	.word	0x40014400

08006650 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800667e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800668a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	021b      	lsls	r3, r3, #8
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800669e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	031b      	lsls	r3, r3, #12
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a14      	ldr	r2, [pc, #80]	; (8006700 <TIM_OC4_SetConfig+0xb0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d007      	beq.n	80066c4 <TIM_OC4_SetConfig+0x74>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a13      	ldr	r2, [pc, #76]	; (8006704 <TIM_OC4_SetConfig+0xb4>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d003      	beq.n	80066c4 <TIM_OC4_SetConfig+0x74>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a12      	ldr	r2, [pc, #72]	; (8006708 <TIM_OC4_SetConfig+0xb8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d109      	bne.n	80066d8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	019b      	lsls	r3, r3, #6
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	621a      	str	r2, [r3, #32]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	40012c00 	.word	0x40012c00
 8006704:	40014000 	.word	0x40014000
 8006708:	40014400 	.word	0x40014400

0800670c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800673a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006750:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	041b      	lsls	r3, r3, #16
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	4313      	orrs	r3, r2
 800675c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a13      	ldr	r2, [pc, #76]	; (80067b0 <TIM_OC5_SetConfig+0xa4>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d007      	beq.n	8006776 <TIM_OC5_SetConfig+0x6a>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a12      	ldr	r2, [pc, #72]	; (80067b4 <TIM_OC5_SetConfig+0xa8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d003      	beq.n	8006776 <TIM_OC5_SetConfig+0x6a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a11      	ldr	r2, [pc, #68]	; (80067b8 <TIM_OC5_SetConfig+0xac>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d109      	bne.n	800678a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800677c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	021b      	lsls	r3, r3, #8
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	4313      	orrs	r3, r2
 8006788:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	621a      	str	r2, [r3, #32]
}
 80067a4:	bf00      	nop
 80067a6:	371c      	adds	r7, #28
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	40012c00 	.word	0x40012c00
 80067b4:	40014000 	.word	0x40014000
 80067b8:	40014400 	.word	0x40014400

080067bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	021b      	lsls	r3, r3, #8
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	051b      	lsls	r3, r3, #20
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	4313      	orrs	r3, r2
 800680e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a14      	ldr	r2, [pc, #80]	; (8006864 <TIM_OC6_SetConfig+0xa8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d007      	beq.n	8006828 <TIM_OC6_SetConfig+0x6c>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a13      	ldr	r2, [pc, #76]	; (8006868 <TIM_OC6_SetConfig+0xac>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d003      	beq.n	8006828 <TIM_OC6_SetConfig+0x6c>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a12      	ldr	r2, [pc, #72]	; (800686c <TIM_OC6_SetConfig+0xb0>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d109      	bne.n	800683c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800682e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	029b      	lsls	r3, r3, #10
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4313      	orrs	r3, r2
 800683a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	621a      	str	r2, [r3, #32]
}
 8006856:	bf00      	nop
 8006858:	371c      	adds	r7, #28
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	40012c00 	.word	0x40012c00
 8006868:	40014000 	.word	0x40014000
 800686c:	40014400 	.word	0x40014400

08006870 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	f023 0201 	bic.w	r2, r3, #1
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800689a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	011b      	lsls	r3, r3, #4
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f023 030a 	bic.w	r3, r3, #10
 80068ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	621a      	str	r2, [r3, #32]
}
 80068c2:	bf00      	nop
 80068c4:	371c      	adds	r7, #28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b087      	sub	sp, #28
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	f023 0210 	bic.w	r2, r3, #16
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	031b      	lsls	r3, r3, #12
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	4313      	orrs	r3, r2
 8006902:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800690a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	011b      	lsls	r3, r3, #4
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	4313      	orrs	r3, r2
 8006914:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	621a      	str	r2, [r3, #32]
}
 8006922:	bf00      	nop
 8006924:	371c      	adds	r7, #28
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800692e:	b480      	push	{r7}
 8006930:	b085      	sub	sp, #20
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006944:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4313      	orrs	r3, r2
 800694c:	f043 0307 	orr.w	r3, r3, #7
 8006950:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	609a      	str	r2, [r3, #8]
}
 8006958:	bf00      	nop
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800697e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	021a      	lsls	r2, r3, #8
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	431a      	orrs	r2, r3
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	4313      	orrs	r3, r2
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	4313      	orrs	r3, r2
 8006990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	609a      	str	r2, [r3, #8]
}
 8006998:	bf00      	nop
 800699a:	371c      	adds	r7, #28
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f003 031f 	and.w	r3, r3, #31
 80069b6:	2201      	movs	r2, #1
 80069b8:	fa02 f303 	lsl.w	r3, r2, r3
 80069bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a1a      	ldr	r2, [r3, #32]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	43db      	mvns	r3, r3
 80069c6:	401a      	ands	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6a1a      	ldr	r2, [r3, #32]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f003 031f 	and.w	r3, r3, #31
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	fa01 f303 	lsl.w	r3, r1, r3
 80069dc:	431a      	orrs	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	621a      	str	r2, [r3, #32]
}
 80069e2:	bf00      	nop
 80069e4:	371c      	adds	r7, #28
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
	...

080069f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e04f      	b.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a21      	ldr	r2, [pc, #132]	; (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d108      	bne.n	8006a44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a14      	ldr	r2, [pc, #80]	; (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d009      	beq.n	8006a7c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a70:	d004      	beq.n	8006a7c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a10      	ldr	r2, [pc, #64]	; (8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d10c      	bne.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	40012c00 	.word	0x40012c00
 8006ab8:	40014000 	.word	0x40014000

08006abc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e040      	b.n	8006b8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d106      	bne.n	8006b20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7fa fc9c 	bl	8001458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2224      	movs	r2, #36	; 0x24
 8006b24:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 0201 	bic.w	r2, r2, #1
 8006b34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f996 	bl	8006e68 <UART_SetConfig>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d101      	bne.n	8006b46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e022      	b.n	8006b8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fbc0 	bl	80072d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689a      	ldr	r2, [r3, #8]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0201 	orr.w	r2, r2, #1
 8006b82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fc47 	bl	8007418 <UART_CheckIdleState>
 8006b8a:	4603      	mov	r3, r0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e027      	b.n	8006bf6 <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2224      	movs	r2, #36	; 0x24
 8006baa:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0201 	bic.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7fa fcaf 	bl	8001538 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b08a      	sub	sp, #40	; 0x28
 8006c02:	af02      	add	r7, sp, #8
 8006c04:	60f8      	str	r0, [r7, #12]
 8006c06:	60b9      	str	r1, [r7, #8]
 8006c08:	603b      	str	r3, [r7, #0]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c12:	2b20      	cmp	r3, #32
 8006c14:	f040 8081 	bne.w	8006d1a <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d002      	beq.n	8006c24 <HAL_UART_Transmit+0x26>
 8006c1e:	88fb      	ldrh	r3, [r7, #6]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e079      	b.n	8006d1c <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_UART_Transmit+0x38>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e072      	b.n	8006d1c <HAL_UART_Transmit+0x11e>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2221      	movs	r2, #33	; 0x21
 8006c48:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006c4a:	f7fa fecb 	bl	80019e4 <HAL_GetTick>
 8006c4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	88fa      	ldrh	r2, [r7, #6]
 8006c54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	88fa      	ldrh	r2, [r7, #6]
 8006c5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c68:	d108      	bne.n	8006c7c <HAL_UART_Transmit+0x7e>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d104      	bne.n	8006c7c <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	61bb      	str	r3, [r7, #24]
 8006c7a:	e003      	b.n	8006c84 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c80:	2300      	movs	r3, #0
 8006c82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006c8c:	e02d      	b.n	8006cea <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2200      	movs	r2, #0
 8006c96:	2180      	movs	r1, #128	; 0x80
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 fc02 	bl	80074a2 <UART_WaitOnFlagUntilTimeout>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e039      	b.n	8006d1c <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10b      	bne.n	8006cc6 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	881a      	ldrh	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cba:	b292      	uxth	r2, r2
 8006cbc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	3302      	adds	r3, #2
 8006cc2:	61bb      	str	r3, [r7, #24]
 8006cc4:	e008      	b.n	8006cd8 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	781a      	ldrb	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	b292      	uxth	r2, r2
 8006cd0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1cb      	bne.n	8006c8e <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2140      	movs	r1, #64	; 0x40
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 fbce 	bl	80074a2 <UART_WaitOnFlagUntilTimeout>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e005      	b.n	8006d1c <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2220      	movs	r2, #32
 8006d14:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	e000      	b.n	8006d1c <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006d1a:	2302      	movs	r3, #2
  }
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3720      	adds	r7, #32
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	d16c      	bne.n	8006e14 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <HAL_UART_Receive_DMA+0x22>
 8006d40:	88fb      	ldrh	r3, [r7, #6]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e065      	b.n	8006e16 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d101      	bne.n	8006d58 <HAL_UART_Receive_DMA+0x34>
 8006d54:	2302      	movs	r3, #2
 8006d56:	e05e      	b.n	8006e16 <HAL_UART_Receive_DMA+0xf2>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	88fa      	ldrh	r2, [r7, #6]
 8006d6a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2222      	movs	r2, #34	; 0x22
 8006d78:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d02a      	beq.n	8006dd8 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d86:	4a26      	ldr	r2, [pc, #152]	; (8006e20 <HAL_UART_Receive_DMA+0xfc>)
 8006d88:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d8e:	4a25      	ldr	r2, [pc, #148]	; (8006e24 <HAL_UART_Receive_DMA+0x100>)
 8006d90:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d96:	4a24      	ldr	r2, [pc, #144]	; (8006e28 <HAL_UART_Receive_DMA+0x104>)
 8006d98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d9e:	2200      	movs	r2, #0
 8006da0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3324      	adds	r3, #36	; 0x24
 8006dac:	4619      	mov	r1, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db2:	461a      	mov	r2, r3
 8006db4:	88fb      	ldrh	r3, [r7, #6]
 8006db6:	f7fc fe81 	bl	8003abc <HAL_DMA_Start_IT>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00b      	beq.n	8006dd8 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2210      	movs	r2, #16
 8006dc4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e01e      	b.n	8006e16 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dee:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 0201 	orr.w	r2, r2, #1
 8006dfe:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689a      	ldr	r2, [r3, #8]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e0e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	e000      	b.n	8006e16 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8006e14:	2302      	movs	r3, #2
  }
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	08007603 	.word	0x08007603
 8006e24:	0800766b 	.word	0x0800766b
 8006e28:	08007687 	.word	0x08007687

08006e2c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e68:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006e6c:	b088      	sub	sp, #32
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689a      	ldr	r2, [r3, #8]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	4baa      	ldr	r3, [pc, #680]	; (8007140 <UART_SetConfig+0x2d8>)
 8006e96:	4013      	ands	r3, r2
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	6812      	ldr	r2, [r2, #0]
 8006e9c:	69f9      	ldr	r1, [r7, #28]
 8006e9e:	430b      	orrs	r3, r1
 8006ea0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4aa0      	ldr	r2, [pc, #640]	; (8007144 <UART_SetConfig+0x2dc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d004      	beq.n	8006ed2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	69fa      	ldr	r2, [r7, #28]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a97      	ldr	r2, [pc, #604]	; (8007148 <UART_SetConfig+0x2e0>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d121      	bne.n	8006f34 <UART_SetConfig+0xcc>
 8006ef0:	4b96      	ldr	r3, [pc, #600]	; (800714c <UART_SetConfig+0x2e4>)
 8006ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	d816      	bhi.n	8006f2c <UART_SetConfig+0xc4>
 8006efe:	a201      	add	r2, pc, #4	; (adr r2, 8006f04 <UART_SetConfig+0x9c>)
 8006f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f04:	08006f15 	.word	0x08006f15
 8006f08:	08006f21 	.word	0x08006f21
 8006f0c:	08006f1b 	.word	0x08006f1b
 8006f10:	08006f27 	.word	0x08006f27
 8006f14:	2301      	movs	r3, #1
 8006f16:	76fb      	strb	r3, [r7, #27]
 8006f18:	e098      	b.n	800704c <UART_SetConfig+0x1e4>
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	76fb      	strb	r3, [r7, #27]
 8006f1e:	e095      	b.n	800704c <UART_SetConfig+0x1e4>
 8006f20:	2304      	movs	r3, #4
 8006f22:	76fb      	strb	r3, [r7, #27]
 8006f24:	e092      	b.n	800704c <UART_SetConfig+0x1e4>
 8006f26:	2308      	movs	r3, #8
 8006f28:	76fb      	strb	r3, [r7, #27]
 8006f2a:	e08f      	b.n	800704c <UART_SetConfig+0x1e4>
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	76fb      	strb	r3, [r7, #27]
 8006f30:	bf00      	nop
 8006f32:	e08b      	b.n	800704c <UART_SetConfig+0x1e4>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a85      	ldr	r2, [pc, #532]	; (8007150 <UART_SetConfig+0x2e8>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d134      	bne.n	8006fa8 <UART_SetConfig+0x140>
 8006f3e:	4b83      	ldr	r3, [pc, #524]	; (800714c <UART_SetConfig+0x2e4>)
 8006f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f44:	f003 030c 	and.w	r3, r3, #12
 8006f48:	2b0c      	cmp	r3, #12
 8006f4a:	d829      	bhi.n	8006fa0 <UART_SetConfig+0x138>
 8006f4c:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <UART_SetConfig+0xec>)
 8006f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f52:	bf00      	nop
 8006f54:	08006f89 	.word	0x08006f89
 8006f58:	08006fa1 	.word	0x08006fa1
 8006f5c:	08006fa1 	.word	0x08006fa1
 8006f60:	08006fa1 	.word	0x08006fa1
 8006f64:	08006f95 	.word	0x08006f95
 8006f68:	08006fa1 	.word	0x08006fa1
 8006f6c:	08006fa1 	.word	0x08006fa1
 8006f70:	08006fa1 	.word	0x08006fa1
 8006f74:	08006f8f 	.word	0x08006f8f
 8006f78:	08006fa1 	.word	0x08006fa1
 8006f7c:	08006fa1 	.word	0x08006fa1
 8006f80:	08006fa1 	.word	0x08006fa1
 8006f84:	08006f9b 	.word	0x08006f9b
 8006f88:	2300      	movs	r3, #0
 8006f8a:	76fb      	strb	r3, [r7, #27]
 8006f8c:	e05e      	b.n	800704c <UART_SetConfig+0x1e4>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	76fb      	strb	r3, [r7, #27]
 8006f92:	e05b      	b.n	800704c <UART_SetConfig+0x1e4>
 8006f94:	2304      	movs	r3, #4
 8006f96:	76fb      	strb	r3, [r7, #27]
 8006f98:	e058      	b.n	800704c <UART_SetConfig+0x1e4>
 8006f9a:	2308      	movs	r3, #8
 8006f9c:	76fb      	strb	r3, [r7, #27]
 8006f9e:	e055      	b.n	800704c <UART_SetConfig+0x1e4>
 8006fa0:	2310      	movs	r3, #16
 8006fa2:	76fb      	strb	r3, [r7, #27]
 8006fa4:	bf00      	nop
 8006fa6:	e051      	b.n	800704c <UART_SetConfig+0x1e4>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a69      	ldr	r2, [pc, #420]	; (8007154 <UART_SetConfig+0x2ec>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d120      	bne.n	8006ff4 <UART_SetConfig+0x18c>
 8006fb2:	4b66      	ldr	r3, [pc, #408]	; (800714c <UART_SetConfig+0x2e4>)
 8006fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006fbc:	2b10      	cmp	r3, #16
 8006fbe:	d00f      	beq.n	8006fe0 <UART_SetConfig+0x178>
 8006fc0:	2b10      	cmp	r3, #16
 8006fc2:	d802      	bhi.n	8006fca <UART_SetConfig+0x162>
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d005      	beq.n	8006fd4 <UART_SetConfig+0x16c>
 8006fc8:	e010      	b.n	8006fec <UART_SetConfig+0x184>
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	d005      	beq.n	8006fda <UART_SetConfig+0x172>
 8006fce:	2b30      	cmp	r3, #48	; 0x30
 8006fd0:	d009      	beq.n	8006fe6 <UART_SetConfig+0x17e>
 8006fd2:	e00b      	b.n	8006fec <UART_SetConfig+0x184>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	76fb      	strb	r3, [r7, #27]
 8006fd8:	e038      	b.n	800704c <UART_SetConfig+0x1e4>
 8006fda:	2302      	movs	r3, #2
 8006fdc:	76fb      	strb	r3, [r7, #27]
 8006fde:	e035      	b.n	800704c <UART_SetConfig+0x1e4>
 8006fe0:	2304      	movs	r3, #4
 8006fe2:	76fb      	strb	r3, [r7, #27]
 8006fe4:	e032      	b.n	800704c <UART_SetConfig+0x1e4>
 8006fe6:	2308      	movs	r3, #8
 8006fe8:	76fb      	strb	r3, [r7, #27]
 8006fea:	e02f      	b.n	800704c <UART_SetConfig+0x1e4>
 8006fec:	2310      	movs	r3, #16
 8006fee:	76fb      	strb	r3, [r7, #27]
 8006ff0:	bf00      	nop
 8006ff2:	e02b      	b.n	800704c <UART_SetConfig+0x1e4>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a52      	ldr	r2, [pc, #328]	; (8007144 <UART_SetConfig+0x2dc>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d124      	bne.n	8007048 <UART_SetConfig+0x1e0>
 8006ffe:	4b53      	ldr	r3, [pc, #332]	; (800714c <UART_SetConfig+0x2e4>)
 8007000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007004:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800700c:	d012      	beq.n	8007034 <UART_SetConfig+0x1cc>
 800700e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007012:	d802      	bhi.n	800701a <UART_SetConfig+0x1b2>
 8007014:	2b00      	cmp	r3, #0
 8007016:	d007      	beq.n	8007028 <UART_SetConfig+0x1c0>
 8007018:	e012      	b.n	8007040 <UART_SetConfig+0x1d8>
 800701a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800701e:	d006      	beq.n	800702e <UART_SetConfig+0x1c6>
 8007020:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007024:	d009      	beq.n	800703a <UART_SetConfig+0x1d2>
 8007026:	e00b      	b.n	8007040 <UART_SetConfig+0x1d8>
 8007028:	2300      	movs	r3, #0
 800702a:	76fb      	strb	r3, [r7, #27]
 800702c:	e00e      	b.n	800704c <UART_SetConfig+0x1e4>
 800702e:	2302      	movs	r3, #2
 8007030:	76fb      	strb	r3, [r7, #27]
 8007032:	e00b      	b.n	800704c <UART_SetConfig+0x1e4>
 8007034:	2304      	movs	r3, #4
 8007036:	76fb      	strb	r3, [r7, #27]
 8007038:	e008      	b.n	800704c <UART_SetConfig+0x1e4>
 800703a:	2308      	movs	r3, #8
 800703c:	76fb      	strb	r3, [r7, #27]
 800703e:	e005      	b.n	800704c <UART_SetConfig+0x1e4>
 8007040:	2310      	movs	r3, #16
 8007042:	76fb      	strb	r3, [r7, #27]
 8007044:	bf00      	nop
 8007046:	e001      	b.n	800704c <UART_SetConfig+0x1e4>
 8007048:	2310      	movs	r3, #16
 800704a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a3c      	ldr	r2, [pc, #240]	; (8007144 <UART_SetConfig+0x2dc>)
 8007052:	4293      	cmp	r3, r2
 8007054:	f040 8082 	bne.w	800715c <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007058:	7efb      	ldrb	r3, [r7, #27]
 800705a:	2b08      	cmp	r3, #8
 800705c:	d823      	bhi.n	80070a6 <UART_SetConfig+0x23e>
 800705e:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <UART_SetConfig+0x1fc>)
 8007060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007064:	08007089 	.word	0x08007089
 8007068:	080070a7 	.word	0x080070a7
 800706c:	08007091 	.word	0x08007091
 8007070:	080070a7 	.word	0x080070a7
 8007074:	08007097 	.word	0x08007097
 8007078:	080070a7 	.word	0x080070a7
 800707c:	080070a7 	.word	0x080070a7
 8007080:	080070a7 	.word	0x080070a7
 8007084:	0800709f 	.word	0x0800709f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007088:	f7fe f980 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 800708c:	6178      	str	r0, [r7, #20]
        break;
 800708e:	e00f      	b.n	80070b0 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007090:	4b31      	ldr	r3, [pc, #196]	; (8007158 <UART_SetConfig+0x2f0>)
 8007092:	617b      	str	r3, [r7, #20]
        break;
 8007094:	e00c      	b.n	80070b0 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007096:	f7fe f8e3 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 800709a:	6178      	str	r0, [r7, #20]
        break;
 800709c:	e008      	b.n	80070b0 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800709e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070a2:	617b      	str	r3, [r7, #20]
        break;
 80070a4:	e004      	b.n	80070b0 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	76bb      	strb	r3, [r7, #26]
        break;
 80070ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 8100 	beq.w	80072b8 <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	4613      	mov	r3, r2
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	4413      	add	r3, r2
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d305      	bcc.n	80070d4 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d902      	bls.n	80070da <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	76bb      	strb	r3, [r7, #26]
 80070d8:	e0ee      	b.n	80072b8 <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	4619      	mov	r1, r3
 80070de:	f04f 0200 	mov.w	r2, #0
 80070e2:	f04f 0300 	mov.w	r3, #0
 80070e6:	f04f 0400 	mov.w	r4, #0
 80070ea:	0214      	lsls	r4, r2, #8
 80070ec:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80070f0:	020b      	lsls	r3, r1, #8
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6852      	ldr	r2, [r2, #4]
 80070f6:	0852      	lsrs	r2, r2, #1
 80070f8:	4611      	mov	r1, r2
 80070fa:	f04f 0200 	mov.w	r2, #0
 80070fe:	eb13 0b01 	adds.w	fp, r3, r1
 8007102:	eb44 0c02 	adc.w	ip, r4, r2
 8007106:	4658      	mov	r0, fp
 8007108:	4661      	mov	r1, ip
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f04f 0400 	mov.w	r4, #0
 8007112:	461a      	mov	r2, r3
 8007114:	4623      	mov	r3, r4
 8007116:	f7f9 f859 	bl	80001cc <__aeabi_uldivmod>
 800711a:	4603      	mov	r3, r0
 800711c:	460c      	mov	r4, r1
 800711e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007126:	d308      	bcc.n	800713a <UART_SetConfig+0x2d2>
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800712e:	d204      	bcs.n	800713a <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	60da      	str	r2, [r3, #12]
 8007138:	e0be      	b.n	80072b8 <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	76bb      	strb	r3, [r7, #26]
 800713e:	e0bb      	b.n	80072b8 <UART_SetConfig+0x450>
 8007140:	efff69f3 	.word	0xefff69f3
 8007144:	40008000 	.word	0x40008000
 8007148:	40013800 	.word	0x40013800
 800714c:	40021000 	.word	0x40021000
 8007150:	40004400 	.word	0x40004400
 8007154:	40004800 	.word	0x40004800
 8007158:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007164:	d15c      	bne.n	8007220 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8007166:	7efb      	ldrb	r3, [r7, #27]
 8007168:	2b08      	cmp	r3, #8
 800716a:	d828      	bhi.n	80071be <UART_SetConfig+0x356>
 800716c:	a201      	add	r2, pc, #4	; (adr r2, 8007174 <UART_SetConfig+0x30c>)
 800716e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007172:	bf00      	nop
 8007174:	08007199 	.word	0x08007199
 8007178:	080071a1 	.word	0x080071a1
 800717c:	080071a9 	.word	0x080071a9
 8007180:	080071bf 	.word	0x080071bf
 8007184:	080071af 	.word	0x080071af
 8007188:	080071bf 	.word	0x080071bf
 800718c:	080071bf 	.word	0x080071bf
 8007190:	080071bf 	.word	0x080071bf
 8007194:	080071b7 	.word	0x080071b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007198:	f7fe f8f8 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 800719c:	6178      	str	r0, [r7, #20]
        break;
 800719e:	e013      	b.n	80071c8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071a0:	f7fe f90a 	bl	80053b8 <HAL_RCC_GetPCLK2Freq>
 80071a4:	6178      	str	r0, [r7, #20]
        break;
 80071a6:	e00f      	b.n	80071c8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071a8:	4b49      	ldr	r3, [pc, #292]	; (80072d0 <UART_SetConfig+0x468>)
 80071aa:	617b      	str	r3, [r7, #20]
        break;
 80071ac:	e00c      	b.n	80071c8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ae:	f7fe f857 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 80071b2:	6178      	str	r0, [r7, #20]
        break;
 80071b4:	e008      	b.n	80071c8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071ba:	617b      	str	r3, [r7, #20]
        break;
 80071bc:	e004      	b.n	80071c8 <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	76bb      	strb	r3, [r7, #26]
        break;
 80071c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d074      	beq.n	80072b8 <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	005a      	lsls	r2, r3, #1
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	085b      	lsrs	r3, r3, #1
 80071d8:	441a      	add	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b0f      	cmp	r3, #15
 80071ea:	d916      	bls.n	800721a <UART_SetConfig+0x3b2>
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071f2:	d212      	bcs.n	800721a <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	f023 030f 	bic.w	r3, r3, #15
 80071fc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	085b      	lsrs	r3, r3, #1
 8007202:	b29b      	uxth	r3, r3
 8007204:	f003 0307 	and.w	r3, r3, #7
 8007208:	b29a      	uxth	r2, r3
 800720a:	89fb      	ldrh	r3, [r7, #14]
 800720c:	4313      	orrs	r3, r2
 800720e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	89fa      	ldrh	r2, [r7, #14]
 8007216:	60da      	str	r2, [r3, #12]
 8007218:	e04e      	b.n	80072b8 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	76bb      	strb	r3, [r7, #26]
 800721e:	e04b      	b.n	80072b8 <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007220:	7efb      	ldrb	r3, [r7, #27]
 8007222:	2b08      	cmp	r3, #8
 8007224:	d827      	bhi.n	8007276 <UART_SetConfig+0x40e>
 8007226:	a201      	add	r2, pc, #4	; (adr r2, 800722c <UART_SetConfig+0x3c4>)
 8007228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722c:	08007251 	.word	0x08007251
 8007230:	08007259 	.word	0x08007259
 8007234:	08007261 	.word	0x08007261
 8007238:	08007277 	.word	0x08007277
 800723c:	08007267 	.word	0x08007267
 8007240:	08007277 	.word	0x08007277
 8007244:	08007277 	.word	0x08007277
 8007248:	08007277 	.word	0x08007277
 800724c:	0800726f 	.word	0x0800726f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007250:	f7fe f89c 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8007254:	6178      	str	r0, [r7, #20]
        break;
 8007256:	e013      	b.n	8007280 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007258:	f7fe f8ae 	bl	80053b8 <HAL_RCC_GetPCLK2Freq>
 800725c:	6178      	str	r0, [r7, #20]
        break;
 800725e:	e00f      	b.n	8007280 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007260:	4b1b      	ldr	r3, [pc, #108]	; (80072d0 <UART_SetConfig+0x468>)
 8007262:	617b      	str	r3, [r7, #20]
        break;
 8007264:	e00c      	b.n	8007280 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007266:	f7fd fffb 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 800726a:	6178      	str	r0, [r7, #20]
        break;
 800726c:	e008      	b.n	8007280 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800726e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007272:	617b      	str	r3, [r7, #20]
        break;
 8007274:	e004      	b.n	8007280 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	76bb      	strb	r3, [r7, #26]
        break;
 800727e:	bf00      	nop
    }

    if (pclk != 0U)
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d018      	beq.n	80072b8 <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	085a      	lsrs	r2, r3, #1
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	441a      	add	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	fbb2 f3f3 	udiv	r3, r2, r3
 8007298:	b29b      	uxth	r3, r3
 800729a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	2b0f      	cmp	r3, #15
 80072a0:	d908      	bls.n	80072b4 <UART_SetConfig+0x44c>
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a8:	d204      	bcs.n	80072b4 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	60da      	str	r2, [r3, #12]
 80072b2:	e001      	b.n	80072b8 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80072c4:	7ebb      	ldrb	r3, [r7, #26]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3720      	adds	r7, #32
 80072ca:	46bd      	mov	sp, r7
 80072cc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80072d0:	00f42400 	.word	0x00f42400

080072d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00a      	beq.n	80072fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007302:	f003 0302 	and.w	r3, r3, #2
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00a      	beq.n	8007320 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	f003 0304 	and.w	r3, r3, #4
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00a      	beq.n	8007342 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	f003 0308 	and.w	r3, r3, #8
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	430a      	orrs	r2, r1
 8007362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	f003 0310 	and.w	r3, r3, #16
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00a      	beq.n	8007386 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00a      	beq.n	80073a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d01a      	beq.n	80073ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073d2:	d10a      	bne.n	80073ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	430a      	orrs	r2, r1
 800740a:	605a      	str	r2, [r3, #4]
  }
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af02      	add	r7, sp, #8
 800741e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007426:	f7fa fadd 	bl	80019e4 <HAL_GetTick>
 800742a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b08      	cmp	r3, #8
 8007438:	d10e      	bne.n	8007458 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800743a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f82a 	bl	80074a2 <UART_WaitOnFlagUntilTimeout>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e020      	b.n	800749a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0304 	and.w	r3, r3, #4
 8007462:	2b04      	cmp	r3, #4
 8007464:	d10e      	bne.n	8007484 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007466:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f814 	bl	80074a2 <UART_WaitOnFlagUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e00a      	b.n	800749a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2220      	movs	r2, #32
 8007488:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2220      	movs	r2, #32
 800748e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	603b      	str	r3, [r7, #0]
 80074ae:	4613      	mov	r3, r2
 80074b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074b2:	e05d      	b.n	8007570 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074ba:	d059      	beq.n	8007570 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074bc:	f7fa fa92 	bl	80019e4 <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d302      	bcc.n	80074d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d11b      	bne.n	800750a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80074e0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 0201 	bic.w	r2, r2, #1
 80074f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2220      	movs	r2, #32
 80074f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2220      	movs	r2, #32
 80074fc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e042      	b.n	8007590 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0304 	and.w	r3, r3, #4
 8007514:	2b00      	cmp	r3, #0
 8007516:	d02b      	beq.n	8007570 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007526:	d123      	bne.n	8007570 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007530:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007540:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 0201 	bic.w	r2, r2, #1
 8007550:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2220      	movs	r2, #32
 8007556:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2220      	movs	r2, #32
 800755c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2220      	movs	r2, #32
 8007562:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e00f      	b.n	8007590 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	69da      	ldr	r2, [r3, #28]
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	4013      	ands	r3, r2
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	429a      	cmp	r2, r3
 800757e:	bf0c      	ite	eq
 8007580:	2301      	moveq	r3, #1
 8007582:	2300      	movne	r3, #0
 8007584:	b2db      	uxtb	r3, r3
 8007586:	461a      	mov	r2, r3
 8007588:	79fb      	ldrb	r3, [r7, #7]
 800758a:	429a      	cmp	r2, r3
 800758c:	d092      	beq.n	80074b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80075ae:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2220      	movs	r2, #32
 80075b4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80075d8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0201 	bic.w	r2, r2, #1
 80075e8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2220      	movs	r2, #32
 80075ee:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	661a      	str	r2, [r3, #96]	; 0x60
}
 80075f6:	bf00      	nop
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b084      	sub	sp, #16
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b00      	cmp	r3, #0
 800761c:	d11e      	bne.n	800765c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007634:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f022 0201 	bic.w	r2, r2, #1
 8007644:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007654:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2220      	movs	r2, #32
 800765a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f7ff fbe5 	bl	8006e2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007662:	bf00      	nop
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007676:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f7ff fbe1 	bl	8006e40 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800767e:	bf00      	nop
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b086      	sub	sp, #24
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007692:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007698:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800769e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076aa:	2b80      	cmp	r3, #128	; 0x80
 80076ac:	d109      	bne.n	80076c2 <UART_DMAError+0x3c>
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	2b21      	cmp	r3, #33	; 0x21
 80076b2:	d106      	bne.n	80076c2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80076bc:	6978      	ldr	r0, [r7, #20]
 80076be:	f7ff ff6b 	bl	8007598 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076cc:	2b40      	cmp	r3, #64	; 0x40
 80076ce:	d109      	bne.n	80076e4 <UART_DMAError+0x5e>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b22      	cmp	r3, #34	; 0x22
 80076d4:	d106      	bne.n	80076e4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	2200      	movs	r2, #0
 80076da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80076de:	6978      	ldr	r0, [r7, #20]
 80076e0:	f7ff ff6f 	bl	80075c2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076e8:	f043 0210 	orr.w	r2, r3, #16
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076f0:	6978      	ldr	r0, [r7, #20]
 80076f2:	f7ff fbaf 	bl	8006e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076f6:	bf00      	nop
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <__libc_init_array>:
 8007700:	b570      	push	{r4, r5, r6, lr}
 8007702:	4e0d      	ldr	r6, [pc, #52]	; (8007738 <__libc_init_array+0x38>)
 8007704:	4c0d      	ldr	r4, [pc, #52]	; (800773c <__libc_init_array+0x3c>)
 8007706:	1ba4      	subs	r4, r4, r6
 8007708:	10a4      	asrs	r4, r4, #2
 800770a:	2500      	movs	r5, #0
 800770c:	42a5      	cmp	r5, r4
 800770e:	d109      	bne.n	8007724 <__libc_init_array+0x24>
 8007710:	4e0b      	ldr	r6, [pc, #44]	; (8007740 <__libc_init_array+0x40>)
 8007712:	4c0c      	ldr	r4, [pc, #48]	; (8007744 <__libc_init_array+0x44>)
 8007714:	f000 f820 	bl	8007758 <_init>
 8007718:	1ba4      	subs	r4, r4, r6
 800771a:	10a4      	asrs	r4, r4, #2
 800771c:	2500      	movs	r5, #0
 800771e:	42a5      	cmp	r5, r4
 8007720:	d105      	bne.n	800772e <__libc_init_array+0x2e>
 8007722:	bd70      	pop	{r4, r5, r6, pc}
 8007724:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007728:	4798      	blx	r3
 800772a:	3501      	adds	r5, #1
 800772c:	e7ee      	b.n	800770c <__libc_init_array+0xc>
 800772e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007732:	4798      	blx	r3
 8007734:	3501      	adds	r5, #1
 8007736:	e7f2      	b.n	800771e <__libc_init_array+0x1e>
 8007738:	080077dc 	.word	0x080077dc
 800773c:	080077dc 	.word	0x080077dc
 8007740:	080077dc 	.word	0x080077dc
 8007744:	080077e0 	.word	0x080077e0

08007748 <memset>:
 8007748:	4402      	add	r2, r0
 800774a:	4603      	mov	r3, r0
 800774c:	4293      	cmp	r3, r2
 800774e:	d100      	bne.n	8007752 <memset+0xa>
 8007750:	4770      	bx	lr
 8007752:	f803 1b01 	strb.w	r1, [r3], #1
 8007756:	e7f9      	b.n	800774c <memset+0x4>

08007758 <_init>:
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775a:	bf00      	nop
 800775c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775e:	bc08      	pop	{r3}
 8007760:	469e      	mov	lr, r3
 8007762:	4770      	bx	lr

08007764 <_fini>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	bf00      	nop
 8007768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776a:	bc08      	pop	{r3}
 800776c:	469e      	mov	lr, r3
 800776e:	4770      	bx	lr
