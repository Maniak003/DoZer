
SC9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059e0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005a9c  08005a9c  00015a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b44  08005b44  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005b44  08005b44  00015b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b4c  08005b4c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b4c  08005b4c  00015b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b50  08005b50  00015b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d4  20000074  08005bc8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001248  08005bc8  00021248  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134d4  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002729  00000000  00000000  00033570  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a8  00000000  00000000  00035ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001170  00000000  00000000  00036f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018265  00000000  00000000  000380b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ec03  00000000  00000000  0005031d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a513  00000000  00000000  0005ef20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f9433  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c8  00000000  00000000  000f94b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005a84 	.word	0x08005a84

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08005a84 	.word	0x08005a84

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_cfrcmple>:
 800021c:	4684      	mov	ip, r0
 800021e:	1c08      	adds	r0, r1, #0
 8000220:	4661      	mov	r1, ip
 8000222:	e7ff      	b.n	8000224 <__aeabi_cfcmpeq>

08000224 <__aeabi_cfcmpeq>:
 8000224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000226:	f000 f98b 	bl	8000540 <__lesf2>
 800022a:	2800      	cmp	r0, #0
 800022c:	d401      	bmi.n	8000232 <__aeabi_cfcmpeq+0xe>
 800022e:	2100      	movs	r1, #0
 8000230:	42c8      	cmn	r0, r1
 8000232:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000234 <__aeabi_fcmpeq>:
 8000234:	b510      	push	{r4, lr}
 8000236:	f000 f90d 	bl	8000454 <__eqsf2>
 800023a:	4240      	negs	r0, r0
 800023c:	3001      	adds	r0, #1
 800023e:	bd10      	pop	{r4, pc}

08000240 <__aeabi_fcmplt>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 f97d 	bl	8000540 <__lesf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	db01      	blt.n	800024e <__aeabi_fcmplt+0xe>
 800024a:	2000      	movs	r0, #0
 800024c:	bd10      	pop	{r4, pc}
 800024e:	2001      	movs	r0, #1
 8000250:	bd10      	pop	{r4, pc}
 8000252:	46c0      	nop			; (mov r8, r8)

08000254 <__aeabi_fcmple>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f000 f973 	bl	8000540 <__lesf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	dd01      	ble.n	8000262 <__aeabi_fcmple+0xe>
 800025e:	2000      	movs	r0, #0
 8000260:	bd10      	pop	{r4, pc}
 8000262:	2001      	movs	r0, #1
 8000264:	bd10      	pop	{r4, pc}
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_fcmpgt>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 f91b 	bl	80004a4 <__gesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	dc01      	bgt.n	8000276 <__aeabi_fcmpgt+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmpge>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 f911 	bl	80004a4 <__gesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	da01      	bge.n	800028a <__aeabi_fcmpge+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_uldivmod>:
 8000290:	2b00      	cmp	r3, #0
 8000292:	d111      	bne.n	80002b8 <__aeabi_uldivmod+0x28>
 8000294:	2a00      	cmp	r2, #0
 8000296:	d10f      	bne.n	80002b8 <__aeabi_uldivmod+0x28>
 8000298:	2900      	cmp	r1, #0
 800029a:	d100      	bne.n	800029e <__aeabi_uldivmod+0xe>
 800029c:	2800      	cmp	r0, #0
 800029e:	d002      	beq.n	80002a6 <__aeabi_uldivmod+0x16>
 80002a0:	2100      	movs	r1, #0
 80002a2:	43c9      	mvns	r1, r1
 80002a4:	1c08      	adds	r0, r1, #0
 80002a6:	b407      	push	{r0, r1, r2}
 80002a8:	4802      	ldr	r0, [pc, #8]	; (80002b4 <__aeabi_uldivmod+0x24>)
 80002aa:	a102      	add	r1, pc, #8	; (adr r1, 80002b4 <__aeabi_uldivmod+0x24>)
 80002ac:	1840      	adds	r0, r0, r1
 80002ae:	9002      	str	r0, [sp, #8]
 80002b0:	bd03      	pop	{r0, r1, pc}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	ffffff65 	.word	0xffffff65
 80002b8:	b403      	push	{r0, r1}
 80002ba:	4668      	mov	r0, sp
 80002bc:	b501      	push	{r0, lr}
 80002be:	9802      	ldr	r0, [sp, #8]
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	9b01      	ldr	r3, [sp, #4]
 80002c6:	469e      	mov	lr, r3
 80002c8:	b002      	add	sp, #8
 80002ca:	bc0c      	pop	{r2, r3}
 80002cc:	4770      	bx	lr
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	464f      	mov	r7, r9
 80002d4:	4646      	mov	r6, r8
 80002d6:	46d6      	mov	lr, sl
 80002d8:	b5c0      	push	{r6, r7, lr}
 80002da:	0004      	movs	r4, r0
 80002dc:	b082      	sub	sp, #8
 80002de:	000d      	movs	r5, r1
 80002e0:	4691      	mov	r9, r2
 80002e2:	4698      	mov	r8, r3
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d82f      	bhi.n	8000348 <__udivmoddi4+0x78>
 80002e8:	d02c      	beq.n	8000344 <__udivmoddi4+0x74>
 80002ea:	4641      	mov	r1, r8
 80002ec:	4648      	mov	r0, r9
 80002ee:	f000 f9df 	bl	80006b0 <__clzdi2>
 80002f2:	0029      	movs	r1, r5
 80002f4:	0006      	movs	r6, r0
 80002f6:	0020      	movs	r0, r4
 80002f8:	f000 f9da 	bl	80006b0 <__clzdi2>
 80002fc:	1a33      	subs	r3, r6, r0
 80002fe:	469c      	mov	ip, r3
 8000300:	3b20      	subs	r3, #32
 8000302:	469a      	mov	sl, r3
 8000304:	d500      	bpl.n	8000308 <__udivmoddi4+0x38>
 8000306:	e076      	b.n	80003f6 <__udivmoddi4+0x126>
 8000308:	464b      	mov	r3, r9
 800030a:	4652      	mov	r2, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	001f      	movs	r7, r3
 8000310:	464b      	mov	r3, r9
 8000312:	4662      	mov	r2, ip
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d828      	bhi.n	800036e <__udivmoddi4+0x9e>
 800031c:	d025      	beq.n	800036a <__udivmoddi4+0x9a>
 800031e:	4653      	mov	r3, sl
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5a>
 8000328:	e07b      	b.n	8000422 <__udivmoddi4+0x152>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	4652      	mov	r2, sl
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4662      	mov	r2, ip
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e018      	b.n	8000376 <__udivmoddi4+0xa6>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9d0      	bls.n	80002ea <__udivmoddi4+0x1a>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8a>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b002      	add	sp, #8
 8000360:	bc1c      	pop	{r2, r3, r4}
 8000362:	4690      	mov	r8, r2
 8000364:	4699      	mov	r9, r3
 8000366:	46a2      	mov	sl, r4
 8000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036a:	42a3      	cmp	r3, r4
 800036c:	d9d7      	bls.n	800031e <__udivmoddi4+0x4e>
 800036e:	2200      	movs	r2, #0
 8000370:	2300      	movs	r3, #0
 8000372:	9200      	str	r2, [sp, #0]
 8000374:	9301      	str	r3, [sp, #4]
 8000376:	4663      	mov	r3, ip
 8000378:	2b00      	cmp	r3, #0
 800037a:	d0e9      	beq.n	8000350 <__udivmoddi4+0x80>
 800037c:	07fb      	lsls	r3, r7, #31
 800037e:	4698      	mov	r8, r3
 8000380:	4641      	mov	r1, r8
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	430a      	orrs	r2, r1
 8000386:	087b      	lsrs	r3, r7, #1
 8000388:	4666      	mov	r6, ip
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xda>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xc4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xde>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0xe8>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xbc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xda>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	4653      	mov	r3, sl
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db23      	blt.n	800040e <__udivmoddi4+0x13e>
 80003c6:	002b      	movs	r3, r5
 80003c8:	4652      	mov	r2, sl
 80003ca:	40d3      	lsrs	r3, r2
 80003cc:	002a      	movs	r2, r5
 80003ce:	4664      	mov	r4, ip
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	4653      	mov	r3, sl
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2d      	blt.n	8000438 <__udivmoddi4+0x168>
 80003dc:	0026      	movs	r6, r4
 80003de:	4657      	mov	r7, sl
 80003e0:	40be      	lsls	r6, r7
 80003e2:	0033      	movs	r3, r6
 80003e4:	0026      	movs	r6, r4
 80003e6:	4667      	mov	r7, ip
 80003e8:	40be      	lsls	r6, r7
 80003ea:	0032      	movs	r2, r6
 80003ec:	1a80      	subs	r0, r0, r2
 80003ee:	4199      	sbcs	r1, r3
 80003f0:	9000      	str	r0, [sp, #0]
 80003f2:	9101      	str	r1, [sp, #4]
 80003f4:	e7ac      	b.n	8000350 <__udivmoddi4+0x80>
 80003f6:	4662      	mov	r2, ip
 80003f8:	2320      	movs	r3, #32
 80003fa:	1a9b      	subs	r3, r3, r2
 80003fc:	464a      	mov	r2, r9
 80003fe:	40da      	lsrs	r2, r3
 8000400:	4661      	mov	r1, ip
 8000402:	0013      	movs	r3, r2
 8000404:	4642      	mov	r2, r8
 8000406:	408a      	lsls	r2, r1
 8000408:	0017      	movs	r7, r2
 800040a:	431f      	orrs	r7, r3
 800040c:	e780      	b.n	8000310 <__udivmoddi4+0x40>
 800040e:	4662      	mov	r2, ip
 8000410:	2320      	movs	r3, #32
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	002a      	movs	r2, r5
 8000416:	4666      	mov	r6, ip
 8000418:	409a      	lsls	r2, r3
 800041a:	0023      	movs	r3, r4
 800041c:	40f3      	lsrs	r3, r6
 800041e:	4313      	orrs	r3, r2
 8000420:	e7d4      	b.n	80003cc <__udivmoddi4+0xfc>
 8000422:	4662      	mov	r2, ip
 8000424:	2320      	movs	r3, #32
 8000426:	2100      	movs	r1, #0
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	2200      	movs	r2, #0
 800042c:	9100      	str	r1, [sp, #0]
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	2201      	movs	r2, #1
 8000432:	40da      	lsrs	r2, r3
 8000434:	9201      	str	r2, [sp, #4]
 8000436:	e780      	b.n	800033a <__udivmoddi4+0x6a>
 8000438:	2320      	movs	r3, #32
 800043a:	4662      	mov	r2, ip
 800043c:	0026      	movs	r6, r4
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	40de      	lsrs	r6, r3
 8000442:	002f      	movs	r7, r5
 8000444:	46b0      	mov	r8, r6
 8000446:	4666      	mov	r6, ip
 8000448:	40b7      	lsls	r7, r6
 800044a:	4646      	mov	r6, r8
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7c8      	b.n	80003e4 <__udivmoddi4+0x114>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__eqsf2>:
 8000454:	b570      	push	{r4, r5, r6, lr}
 8000456:	0042      	lsls	r2, r0, #1
 8000458:	024e      	lsls	r6, r1, #9
 800045a:	004c      	lsls	r4, r1, #1
 800045c:	0245      	lsls	r5, r0, #9
 800045e:	0a6d      	lsrs	r5, r5, #9
 8000460:	0e12      	lsrs	r2, r2, #24
 8000462:	0fc3      	lsrs	r3, r0, #31
 8000464:	0a76      	lsrs	r6, r6, #9
 8000466:	0e24      	lsrs	r4, r4, #24
 8000468:	0fc9      	lsrs	r1, r1, #31
 800046a:	2aff      	cmp	r2, #255	; 0xff
 800046c:	d00f      	beq.n	800048e <__eqsf2+0x3a>
 800046e:	2cff      	cmp	r4, #255	; 0xff
 8000470:	d011      	beq.n	8000496 <__eqsf2+0x42>
 8000472:	2001      	movs	r0, #1
 8000474:	42a2      	cmp	r2, r4
 8000476:	d000      	beq.n	800047a <__eqsf2+0x26>
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	42b5      	cmp	r5, r6
 800047c:	d1fc      	bne.n	8000478 <__eqsf2+0x24>
 800047e:	428b      	cmp	r3, r1
 8000480:	d00d      	beq.n	800049e <__eqsf2+0x4a>
 8000482:	2a00      	cmp	r2, #0
 8000484:	d1f8      	bne.n	8000478 <__eqsf2+0x24>
 8000486:	0028      	movs	r0, r5
 8000488:	1e45      	subs	r5, r0, #1
 800048a:	41a8      	sbcs	r0, r5
 800048c:	e7f4      	b.n	8000478 <__eqsf2+0x24>
 800048e:	2001      	movs	r0, #1
 8000490:	2d00      	cmp	r5, #0
 8000492:	d1f1      	bne.n	8000478 <__eqsf2+0x24>
 8000494:	e7eb      	b.n	800046e <__eqsf2+0x1a>
 8000496:	2001      	movs	r0, #1
 8000498:	2e00      	cmp	r6, #0
 800049a:	d1ed      	bne.n	8000478 <__eqsf2+0x24>
 800049c:	e7e9      	b.n	8000472 <__eqsf2+0x1e>
 800049e:	2000      	movs	r0, #0
 80004a0:	e7ea      	b.n	8000478 <__eqsf2+0x24>
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__gesf2>:
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	004a      	lsls	r2, r1, #1
 80004a8:	024e      	lsls	r6, r1, #9
 80004aa:	0245      	lsls	r5, r0, #9
 80004ac:	0044      	lsls	r4, r0, #1
 80004ae:	0a6d      	lsrs	r5, r5, #9
 80004b0:	0e24      	lsrs	r4, r4, #24
 80004b2:	0fc3      	lsrs	r3, r0, #31
 80004b4:	0a76      	lsrs	r6, r6, #9
 80004b6:	0e12      	lsrs	r2, r2, #24
 80004b8:	0fc9      	lsrs	r1, r1, #31
 80004ba:	2cff      	cmp	r4, #255	; 0xff
 80004bc:	d015      	beq.n	80004ea <__gesf2+0x46>
 80004be:	2aff      	cmp	r2, #255	; 0xff
 80004c0:	d00e      	beq.n	80004e0 <__gesf2+0x3c>
 80004c2:	2c00      	cmp	r4, #0
 80004c4:	d115      	bne.n	80004f2 <__gesf2+0x4e>
 80004c6:	2a00      	cmp	r2, #0
 80004c8:	d101      	bne.n	80004ce <__gesf2+0x2a>
 80004ca:	2e00      	cmp	r6, #0
 80004cc:	d01c      	beq.n	8000508 <__gesf2+0x64>
 80004ce:	2d00      	cmp	r5, #0
 80004d0:	d014      	beq.n	80004fc <__gesf2+0x58>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d027      	beq.n	8000526 <__gesf2+0x82>
 80004d6:	2002      	movs	r0, #2
 80004d8:	3b01      	subs	r3, #1
 80004da:	4018      	ands	r0, r3
 80004dc:	3801      	subs	r0, #1
 80004de:	bd70      	pop	{r4, r5, r6, pc}
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d0ee      	beq.n	80004c2 <__gesf2+0x1e>
 80004e4:	2002      	movs	r0, #2
 80004e6:	4240      	negs	r0, r0
 80004e8:	e7f9      	b.n	80004de <__gesf2+0x3a>
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	d1fa      	bne.n	80004e4 <__gesf2+0x40>
 80004ee:	2aff      	cmp	r2, #255	; 0xff
 80004f0:	d00e      	beq.n	8000510 <__gesf2+0x6c>
 80004f2:	2a00      	cmp	r2, #0
 80004f4:	d10e      	bne.n	8000514 <__gesf2+0x70>
 80004f6:	2e00      	cmp	r6, #0
 80004f8:	d0ed      	beq.n	80004d6 <__gesf2+0x32>
 80004fa:	e00b      	b.n	8000514 <__gesf2+0x70>
 80004fc:	2301      	movs	r3, #1
 80004fe:	3901      	subs	r1, #1
 8000500:	4399      	bics	r1, r3
 8000502:	0008      	movs	r0, r1
 8000504:	3001      	adds	r0, #1
 8000506:	e7ea      	b.n	80004de <__gesf2+0x3a>
 8000508:	2000      	movs	r0, #0
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0e7      	beq.n	80004de <__gesf2+0x3a>
 800050e:	e7e2      	b.n	80004d6 <__gesf2+0x32>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d1e7      	bne.n	80004e4 <__gesf2+0x40>
 8000514:	428b      	cmp	r3, r1
 8000516:	d1de      	bne.n	80004d6 <__gesf2+0x32>
 8000518:	4294      	cmp	r4, r2
 800051a:	dd05      	ble.n	8000528 <__gesf2+0x84>
 800051c:	2102      	movs	r1, #2
 800051e:	1e58      	subs	r0, r3, #1
 8000520:	4008      	ands	r0, r1
 8000522:	3801      	subs	r0, #1
 8000524:	e7db      	b.n	80004de <__gesf2+0x3a>
 8000526:	2400      	movs	r4, #0
 8000528:	42a2      	cmp	r2, r4
 800052a:	dc04      	bgt.n	8000536 <__gesf2+0x92>
 800052c:	42b5      	cmp	r5, r6
 800052e:	d8d2      	bhi.n	80004d6 <__gesf2+0x32>
 8000530:	2000      	movs	r0, #0
 8000532:	42b5      	cmp	r5, r6
 8000534:	d2d3      	bcs.n	80004de <__gesf2+0x3a>
 8000536:	1e58      	subs	r0, r3, #1
 8000538:	2301      	movs	r3, #1
 800053a:	4398      	bics	r0, r3
 800053c:	3001      	adds	r0, #1
 800053e:	e7ce      	b.n	80004de <__gesf2+0x3a>

08000540 <__lesf2>:
 8000540:	b530      	push	{r4, r5, lr}
 8000542:	0042      	lsls	r2, r0, #1
 8000544:	0244      	lsls	r4, r0, #9
 8000546:	024d      	lsls	r5, r1, #9
 8000548:	0fc3      	lsrs	r3, r0, #31
 800054a:	0048      	lsls	r0, r1, #1
 800054c:	0a64      	lsrs	r4, r4, #9
 800054e:	0e12      	lsrs	r2, r2, #24
 8000550:	0a6d      	lsrs	r5, r5, #9
 8000552:	0e00      	lsrs	r0, r0, #24
 8000554:	0fc9      	lsrs	r1, r1, #31
 8000556:	2aff      	cmp	r2, #255	; 0xff
 8000558:	d012      	beq.n	8000580 <__lesf2+0x40>
 800055a:	28ff      	cmp	r0, #255	; 0xff
 800055c:	d00c      	beq.n	8000578 <__lesf2+0x38>
 800055e:	2a00      	cmp	r2, #0
 8000560:	d112      	bne.n	8000588 <__lesf2+0x48>
 8000562:	2800      	cmp	r0, #0
 8000564:	d119      	bne.n	800059a <__lesf2+0x5a>
 8000566:	2d00      	cmp	r5, #0
 8000568:	d117      	bne.n	800059a <__lesf2+0x5a>
 800056a:	2c00      	cmp	r4, #0
 800056c:	d02b      	beq.n	80005c6 <__lesf2+0x86>
 800056e:	2002      	movs	r0, #2
 8000570:	3b01      	subs	r3, #1
 8000572:	4018      	ands	r0, r3
 8000574:	3801      	subs	r0, #1
 8000576:	e026      	b.n	80005c6 <__lesf2+0x86>
 8000578:	2d00      	cmp	r5, #0
 800057a:	d0f0      	beq.n	800055e <__lesf2+0x1e>
 800057c:	2002      	movs	r0, #2
 800057e:	e022      	b.n	80005c6 <__lesf2+0x86>
 8000580:	2c00      	cmp	r4, #0
 8000582:	d1fb      	bne.n	800057c <__lesf2+0x3c>
 8000584:	28ff      	cmp	r0, #255	; 0xff
 8000586:	d01f      	beq.n	80005c8 <__lesf2+0x88>
 8000588:	2800      	cmp	r0, #0
 800058a:	d11f      	bne.n	80005cc <__lesf2+0x8c>
 800058c:	2d00      	cmp	r5, #0
 800058e:	d11d      	bne.n	80005cc <__lesf2+0x8c>
 8000590:	2002      	movs	r0, #2
 8000592:	3b01      	subs	r3, #1
 8000594:	4018      	ands	r0, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e015      	b.n	80005c6 <__lesf2+0x86>
 800059a:	2c00      	cmp	r4, #0
 800059c:	d00e      	beq.n	80005bc <__lesf2+0x7c>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d1e5      	bne.n	800056e <__lesf2+0x2e>
 80005a2:	2200      	movs	r2, #0
 80005a4:	4290      	cmp	r0, r2
 80005a6:	dc04      	bgt.n	80005b2 <__lesf2+0x72>
 80005a8:	42ac      	cmp	r4, r5
 80005aa:	d8e0      	bhi.n	800056e <__lesf2+0x2e>
 80005ac:	2000      	movs	r0, #0
 80005ae:	42ac      	cmp	r4, r5
 80005b0:	d209      	bcs.n	80005c6 <__lesf2+0x86>
 80005b2:	1e58      	subs	r0, r3, #1
 80005b4:	2301      	movs	r3, #1
 80005b6:	4398      	bics	r0, r3
 80005b8:	3001      	adds	r0, #1
 80005ba:	e004      	b.n	80005c6 <__lesf2+0x86>
 80005bc:	2301      	movs	r3, #1
 80005be:	3901      	subs	r1, #1
 80005c0:	4399      	bics	r1, r3
 80005c2:	0008      	movs	r0, r1
 80005c4:	3001      	adds	r0, #1
 80005c6:	bd30      	pop	{r4, r5, pc}
 80005c8:	2d00      	cmp	r5, #0
 80005ca:	d1d7      	bne.n	800057c <__lesf2+0x3c>
 80005cc:	428b      	cmp	r3, r1
 80005ce:	d1ce      	bne.n	800056e <__lesf2+0x2e>
 80005d0:	4282      	cmp	r2, r0
 80005d2:	dde7      	ble.n	80005a4 <__lesf2+0x64>
 80005d4:	2102      	movs	r1, #2
 80005d6:	1e58      	subs	r0, r3, #1
 80005d8:	4008      	ands	r0, r1
 80005da:	3801      	subs	r0, #1
 80005dc:	e7f3      	b.n	80005c6 <__lesf2+0x86>
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__aeabi_i2f>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	2800      	cmp	r0, #0
 80005e4:	d03d      	beq.n	8000662 <__aeabi_i2f+0x82>
 80005e6:	17c3      	asrs	r3, r0, #31
 80005e8:	18c5      	adds	r5, r0, r3
 80005ea:	405d      	eors	r5, r3
 80005ec:	0fc4      	lsrs	r4, r0, #31
 80005ee:	0028      	movs	r0, r5
 80005f0:	f000 f840 	bl	8000674 <__clzsi2>
 80005f4:	229e      	movs	r2, #158	; 0x9e
 80005f6:	1a12      	subs	r2, r2, r0
 80005f8:	2a96      	cmp	r2, #150	; 0x96
 80005fa:	dc07      	bgt.n	800060c <__aeabi_i2f+0x2c>
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	2808      	cmp	r0, #8
 8000600:	dd33      	ble.n	800066a <__aeabi_i2f+0x8a>
 8000602:	3808      	subs	r0, #8
 8000604:	4085      	lsls	r5, r0
 8000606:	0268      	lsls	r0, r5, #9
 8000608:	0a40      	lsrs	r0, r0, #9
 800060a:	e023      	b.n	8000654 <__aeabi_i2f+0x74>
 800060c:	2a99      	cmp	r2, #153	; 0x99
 800060e:	dd0b      	ble.n	8000628 <__aeabi_i2f+0x48>
 8000610:	2305      	movs	r3, #5
 8000612:	0029      	movs	r1, r5
 8000614:	1a1b      	subs	r3, r3, r0
 8000616:	40d9      	lsrs	r1, r3
 8000618:	0003      	movs	r3, r0
 800061a:	331b      	adds	r3, #27
 800061c:	409d      	lsls	r5, r3
 800061e:	002b      	movs	r3, r5
 8000620:	1e5d      	subs	r5, r3, #1
 8000622:	41ab      	sbcs	r3, r5
 8000624:	4319      	orrs	r1, r3
 8000626:	000d      	movs	r5, r1
 8000628:	2805      	cmp	r0, #5
 800062a:	dd01      	ble.n	8000630 <__aeabi_i2f+0x50>
 800062c:	1f43      	subs	r3, r0, #5
 800062e:	409d      	lsls	r5, r3
 8000630:	002b      	movs	r3, r5
 8000632:	490f      	ldr	r1, [pc, #60]	; (8000670 <__aeabi_i2f+0x90>)
 8000634:	400b      	ands	r3, r1
 8000636:	076e      	lsls	r6, r5, #29
 8000638:	d009      	beq.n	800064e <__aeabi_i2f+0x6e>
 800063a:	260f      	movs	r6, #15
 800063c:	4035      	ands	r5, r6
 800063e:	2d04      	cmp	r5, #4
 8000640:	d005      	beq.n	800064e <__aeabi_i2f+0x6e>
 8000642:	3304      	adds	r3, #4
 8000644:	015d      	lsls	r5, r3, #5
 8000646:	d502      	bpl.n	800064e <__aeabi_i2f+0x6e>
 8000648:	229f      	movs	r2, #159	; 0x9f
 800064a:	400b      	ands	r3, r1
 800064c:	1a12      	subs	r2, r2, r0
 800064e:	019b      	lsls	r3, r3, #6
 8000650:	0a58      	lsrs	r0, r3, #9
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	0240      	lsls	r0, r0, #9
 8000656:	05d2      	lsls	r2, r2, #23
 8000658:	0a40      	lsrs	r0, r0, #9
 800065a:	07e4      	lsls	r4, r4, #31
 800065c:	4310      	orrs	r0, r2
 800065e:	4320      	orrs	r0, r4
 8000660:	bd70      	pop	{r4, r5, r6, pc}
 8000662:	2400      	movs	r4, #0
 8000664:	2200      	movs	r2, #0
 8000666:	2000      	movs	r0, #0
 8000668:	e7f4      	b.n	8000654 <__aeabi_i2f+0x74>
 800066a:	0268      	lsls	r0, r5, #9
 800066c:	0a40      	lsrs	r0, r0, #9
 800066e:	e7f1      	b.n	8000654 <__aeabi_i2f+0x74>
 8000670:	fbffffff 	.word	0xfbffffff

08000674 <__clzsi2>:
 8000674:	211c      	movs	r1, #28
 8000676:	2301      	movs	r3, #1
 8000678:	041b      	lsls	r3, r3, #16
 800067a:	4298      	cmp	r0, r3
 800067c:	d301      	bcc.n	8000682 <__clzsi2+0xe>
 800067e:	0c00      	lsrs	r0, r0, #16
 8000680:	3910      	subs	r1, #16
 8000682:	0a1b      	lsrs	r3, r3, #8
 8000684:	4298      	cmp	r0, r3
 8000686:	d301      	bcc.n	800068c <__clzsi2+0x18>
 8000688:	0a00      	lsrs	r0, r0, #8
 800068a:	3908      	subs	r1, #8
 800068c:	091b      	lsrs	r3, r3, #4
 800068e:	4298      	cmp	r0, r3
 8000690:	d301      	bcc.n	8000696 <__clzsi2+0x22>
 8000692:	0900      	lsrs	r0, r0, #4
 8000694:	3904      	subs	r1, #4
 8000696:	a202      	add	r2, pc, #8	; (adr r2, 80006a0 <__clzsi2+0x2c>)
 8000698:	5c10      	ldrb	r0, [r2, r0]
 800069a:	1840      	adds	r0, r0, r1
 800069c:	4770      	bx	lr
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	02020304 	.word	0x02020304
 80006a4:	01010101 	.word	0x01010101
	...

080006b0 <__clzdi2>:
 80006b0:	b510      	push	{r4, lr}
 80006b2:	2900      	cmp	r1, #0
 80006b4:	d103      	bne.n	80006be <__clzdi2+0xe>
 80006b6:	f7ff ffdd 	bl	8000674 <__clzsi2>
 80006ba:	3020      	adds	r0, #32
 80006bc:	e002      	b.n	80006c4 <__clzdi2+0x14>
 80006be:	1c08      	adds	r0, r1, #0
 80006c0:	f7ff ffd8 	bl	8000674 <__clzsi2>
 80006c4:	bd10      	pop	{r4, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)

080006c8 <ssd1306_SetCursor>:
    // Everything ok
    return *str;
}

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	0002      	movs	r2, r0
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	701a      	strb	r2, [r3, #0]
 80006d4:	1dbb      	adds	r3, r7, #6
 80006d6:	1c0a      	adds	r2, r1, #0
 80006d8:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b29a      	uxth	r2, r3
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <ssd1306_SetCursor+0x30>)
 80006e2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80006e4:	1dbb      	adds	r3, r7, #6
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <ssd1306_SetCursor+0x30>)
 80006ec:	805a      	strh	r2, [r3, #2]
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	20000090 	.word	0x20000090

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b08b      	sub	sp, #44	; 0x2c
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f000 fd19 	bl	8001138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f8ff 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070a:	f000 fa85 	bl	8000c18 <MX_GPIO_Init>
  MX_ADC1_Init();
 800070e:	f000 f977 	bl	8000a00 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000712:	f000 f9e3 	bl	8000adc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000716:	f000 fa4b 	bl	8000bb0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800071a:	f000 fa23 	bl	8000b64 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // Включаем светодиод.
  HAL_ADCEx_Calibration_Start(&hadc1);
 800071e:	4b6c      	ldr	r3, [pc, #432]	; (80008d0 <main+0x1d4>)
 8000720:	0018      	movs	r0, r3
 8000722:	f001 fd31 	bl	8002188 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int j = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t prefix[3] = {'<', 'B', '>'};
 800072a:	2308      	movs	r3, #8
 800072c:	18fb      	adds	r3, r7, r3
 800072e:	4a69      	ldr	r2, [pc, #420]	; (80008d4 <main+0x1d8>)
 8000730:	8811      	ldrh	r1, [r2, #0]
 8000732:	8019      	strh	r1, [r3, #0]
 8000734:	7892      	ldrb	r2, [r2, #2]
 8000736:	709a      	strb	r2, [r3, #2]
  uint8_t lowSpectr, highSpectr;
  uint32_t oldTime, initDelay;
  oldTime = HAL_GetTick();
 8000738:	f000 fd78 	bl	800122c <HAL_GetTick>
 800073c:	0003      	movs	r3, r0
 800073e:	623b      	str	r3, [r7, #32]
  ledDelay = oldTime; // Время горения светодиода;
 8000740:	6a3b      	ldr	r3, [r7, #32]
 8000742:	b29a      	uxth	r2, r3
 8000744:	4b64      	ldr	r3, [pc, #400]	; (80008d8 <main+0x1dc>)
 8000746:	801a      	strh	r2, [r3, #0]
  initDelay = oldTime;
 8000748:	6a3b      	ldr	r3, [r7, #32]
 800074a:	613b      	str	r3, [r7, #16]
#ifdef DISPLAY_ENABLE
  ssd1306_Init();
  uint32_t oldTimeAll;
  oldTimeAll = oldTime;
#endif
  counterCC = 0;
 800074c:	4b63      	ldr	r3, [pc, #396]	; (80008dc <main+0x1e0>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // Включаем светодиод.
 8000752:	2380      	movs	r3, #128	; 0x80
 8000754:	021b      	lsls	r3, r3, #8
 8000756:	4862      	ldr	r0, [pc, #392]	; (80008e0 <main+0x1e4>)
 8000758:	2201      	movs	r2, #1
 800075a:	0019      	movs	r1, r3
 800075c:	f002 f815 	bl	800278a <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim3); // запуск таймера
 8000760:	4b60      	ldr	r3, [pc, #384]	; (80008e4 <main+0x1e8>)
 8000762:	0018      	movs	r0, r3
 8000764:	f003 f80a 	bl	800377c <HAL_TIM_Base_Start_IT>
  while (1)
  {
	  sprintf(counterPP, "CPS:%lu CNT:%lu", counterCC / ((HAL_GetTick() - oldTime) / 1000), counterALL);
 8000768:	4b5c      	ldr	r3, [pc, #368]	; (80008dc <main+0x1e0>)
 800076a:	681c      	ldr	r4, [r3, #0]
 800076c:	f000 fd5e 	bl	800122c <HAL_GetTick>
 8000770:	0002      	movs	r2, r0
 8000772:	6a3b      	ldr	r3, [r7, #32]
 8000774:	1ad2      	subs	r2, r2, r3
 8000776:	23fa      	movs	r3, #250	; 0xfa
 8000778:	0099      	lsls	r1, r3, #2
 800077a:	0010      	movs	r0, r2
 800077c:	f7ff fcc2 	bl	8000104 <__udivsi3>
 8000780:	0003      	movs	r3, r0
 8000782:	0019      	movs	r1, r3
 8000784:	0020      	movs	r0, r4
 8000786:	f7ff fcbd 	bl	8000104 <__udivsi3>
 800078a:	0003      	movs	r3, r0
 800078c:	001a      	movs	r2, r3
 800078e:	4b56      	ldr	r3, [pc, #344]	; (80008e8 <main+0x1ec>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4956      	ldr	r1, [pc, #344]	; (80008ec <main+0x1f0>)
 8000794:	4856      	ldr	r0, [pc, #344]	; (80008f0 <main+0x1f4>)
 8000796:	f004 fd77 	bl	8005288 <siprintf>
	  counterCC = 0;
 800079a:	4b50      	ldr	r3, [pc, #320]	; (80008dc <main+0x1e0>)
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
	  oldTime = HAL_GetTick();
 80007a0:	f000 fd44 	bl	800122c <HAL_GetTick>
 80007a4:	0003      	movs	r3, r0
 80007a6:	623b      	str	r3, [r7, #32]
	  // Управление светодиодом
	  if (oldTime - ledDelay < LED_TIME)
 80007a8:	4b4b      	ldr	r3, [pc, #300]	; (80008d8 <main+0x1dc>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	001a      	movs	r2, r3
 80007ae:	6a3b      	ldr	r3, [r7, #32]
 80007b0:	1a9b      	subs	r3, r3, r2
 80007b2:	2b31      	cmp	r3, #49	; 0x31
 80007b4:	d807      	bhi.n	80007c6 <main+0xca>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // Включаем светодиод.
 80007b6:	2380      	movs	r3, #128	; 0x80
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	4849      	ldr	r0, [pc, #292]	; (80008e0 <main+0x1e4>)
 80007bc:	2201      	movs	r2, #1
 80007be:	0019      	movs	r1, r3
 80007c0:	f001 ffe3 	bl	800278a <HAL_GPIO_WritePin>
 80007c4:	e006      	b.n	80007d4 <main+0xd8>
	  } else {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // Выключаем светодиод.
 80007c6:	2380      	movs	r3, #128	; 0x80
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	4845      	ldr	r0, [pc, #276]	; (80008e0 <main+0x1e4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	0019      	movs	r1, r3
 80007d0:	f001 ffdb 	bl	800278a <HAL_GPIO_WritePin>
	  }
#ifdef DISPLAY_ENABLE
	  ssd1306_SetCursor(0, 0);
	  ssd1306_WriteString(counterPP, Font_6x8, 0x01);
#endif
	  int ttt, max = 1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61fb      	str	r3, [r7, #28]
	  for ( int i = 0; i < 2048; i++) {
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
 80007dc:	e017      	b.n	800080e <main+0x112>
		  ttt = spectrData[i];
 80007de:	4b45      	ldr	r3, [pc, #276]	; (80008f4 <main+0x1f8>)
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	0052      	lsls	r2, r2, #1
 80007e4:	5ad3      	ldrh	r3, [r2, r3]
 80007e6:	60fb      	str	r3, [r7, #12]
		  if ((float) ttt > max)
 80007e8:	68f8      	ldr	r0, [r7, #12]
 80007ea:	f7ff fef9 	bl	80005e0 <__aeabi_i2f>
 80007ee:	1c04      	adds	r4, r0, #0
 80007f0:	69f8      	ldr	r0, [r7, #28]
 80007f2:	f7ff fef5 	bl	80005e0 <__aeabi_i2f>
 80007f6:	1c03      	adds	r3, r0, #0
 80007f8:	1c19      	adds	r1, r3, #0
 80007fa:	1c20      	adds	r0, r4, #0
 80007fc:	f7ff fd34 	bl	8000268 <__aeabi_fcmpgt>
 8000800:	1e03      	subs	r3, r0, #0
 8000802:	d001      	beq.n	8000808 <main+0x10c>
			  max = ttt;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	61fb      	str	r3, [r7, #28]
	  for ( int i = 0; i < 2048; i++) {
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	3301      	adds	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	69bb      	ldr	r3, [r7, #24]
 8000810:	4a39      	ldr	r2, [pc, #228]	; (80008f8 <main+0x1fc>)
 8000812:	4293      	cmp	r3, r2
 8000814:	dde3      	ble.n	80007de <main+0xe2>
		  ssd1306_Line(0, i + 9, 64, i + 9, 0x00);
		  ssd1306_Line(0, i + 9, sptDat, i + 9, 0x01);
	  }
	  */
	  //ssd1306_UpdateScreen();
	  if (initFlag && (oldTime - initDelay > INIT_TIME)) {
 8000816:	4b39      	ldr	r3, [pc, #228]	; (80008fc <main+0x200>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00d      	beq.n	800083a <main+0x13e>
 800081e:	6a3a      	ldr	r2, [r7, #32]
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	1ad2      	subs	r2, r2, r3
 8000824:	23fa      	movs	r3, #250	; 0xfa
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	429a      	cmp	r2, r3
 800082a:	d906      	bls.n	800083a <main+0x13e>
		  initFlag = 0;
 800082c:	4b33      	ldr	r3, [pc, #204]	; (80008fc <main+0x200>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_IT(&hadc1);
 8000832:	4b27      	ldr	r3, [pc, #156]	; (80008d0 <main+0x1d4>)
 8000834:	0018      	movs	r0, r3
 8000836:	f001 f847 	bl	80018c8 <HAL_ADC_Start_IT>
#ifdef DISPLAY_ENABLE
		  oldTimeAll = HAL_GetTick();
#endif
	  }
	  /* Опрос status JDY-23, BT подключен ? */
	  ssd1306_SetCursor(0, 24);
 800083a:	2118      	movs	r1, #24
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff ff43 	bl	80006c8 <ssd1306_SetCursor>
	  if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1 ) {
 8000842:	23a0      	movs	r3, #160	; 0xa0
 8000844:	05db      	lsls	r3, r3, #23
 8000846:	2102      	movs	r1, #2
 8000848:	0018      	movs	r0, r3
 800084a:	f001 ff81 	bl	8002750 <HAL_GPIO_ReadPin>
 800084e:	0003      	movs	r3, r0
 8000850:	2b01      	cmp	r3, #1
 8000852:	d189      	bne.n	8000768 <main+0x6c>
#ifdef DISPLAY_ENABLE
		  ssd1306_WriteString("BT: connect   ", Font_6x8, 0x01);
#endif
		  j = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
		  // Передача данных в BT модуль.
		  HAL_UART_Transmit(&huart2, prefix, 3, 1000);
 8000858:	23fa      	movs	r3, #250	; 0xfa
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	2208      	movs	r2, #8
 800085e:	18b9      	adds	r1, r7, r2
 8000860:	4827      	ldr	r0, [pc, #156]	; (8000900 <main+0x204>)
 8000862:	2203      	movs	r2, #3
 8000864:	f003 fa30 	bl	8003cc8 <HAL_UART_Transmit>
		  for ( int i = 0; i < 1040; i++) {
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	e02a      	b.n	80008c4 <main+0x1c8>
			  lowSpectr = spectrData[i] & 0xFF;
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <main+0x1f8>)
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	0052      	lsls	r2, r2, #1
 8000874:	5ad3      	ldrh	r3, [r2, r3]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	1dfb      	adds	r3, r7, #7
 800087a:	701a      	strb	r2, [r3, #0]
			  highSpectr = (spectrData[i] & 0xFF00) >> 8;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <main+0x1f8>)
 800087e:	697a      	ldr	r2, [r7, #20]
 8000880:	0052      	lsls	r2, r2, #1
 8000882:	5ad3      	ldrh	r3, [r2, r3]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	b29b      	uxth	r3, r3
 8000888:	b2da      	uxtb	r2, r3
 800088a:	1dbb      	adds	r3, r7, #6
 800088c:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2, &highSpectr, 1, 1000);
 800088e:	23fa      	movs	r3, #250	; 0xfa
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	1db9      	adds	r1, r7, #6
 8000894:	481a      	ldr	r0, [pc, #104]	; (8000900 <main+0x204>)
 8000896:	2201      	movs	r2, #1
 8000898:	f003 fa16 	bl	8003cc8 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, &lowSpectr, 1, 1000);
 800089c:	23fa      	movs	r3, #250	; 0xfa
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	1df9      	adds	r1, r7, #7
 80008a2:	4817      	ldr	r0, [pc, #92]	; (8000900 <main+0x204>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	f003 fa0f 	bl	8003cc8 <HAL_UART_Transmit>
			  if ( j++ >= 8) {
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	1c5a      	adds	r2, r3, #1
 80008ae:	627a      	str	r2, [r7, #36]	; 0x24
 80008b0:	2b07      	cmp	r3, #7
 80008b2:	dd04      	ble.n	80008be <main+0x1c2>
				  HAL_Delay(30);  // Непонятно, как от этого избавиться.
 80008b4:	201e      	movs	r0, #30
 80008b6:	f000 fcc3 	bl	8001240 <HAL_Delay>
				  j = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
		  for ( int i = 0; i < 1040; i++) {
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	3301      	adds	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	4a0f      	ldr	r2, [pc, #60]	; (8000904 <main+0x208>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	ddd0      	ble.n	800086e <main+0x172>
  {
 80008cc:	e74c      	b.n	8000768 <main+0x6c>
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	20001150 	.word	0x20001150
 80008d4:	08005aac 	.word	0x08005aac
 80008d8:	200000a2 	.word	0x200000a2
 80008dc:	20000098 	.word	0x20000098
 80008e0:	50000800 	.word	0x50000800
 80008e4:	20001110 	.word	0x20001110
 80008e8:	2000009c 	.word	0x2000009c
 80008ec:	08005a9c 	.word	0x08005a9c
 80008f0:	200010fc 	.word	0x200010fc
 80008f4:	200000a4 	.word	0x200000a4
 80008f8:	000007ff 	.word	0x000007ff
 80008fc:	20000000 	.word	0x20000000
 8000900:	200011b4 	.word	0x200011b4
 8000904:	0000040f 	.word	0x0000040f

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b09d      	sub	sp, #116	; 0x74
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	2438      	movs	r4, #56	; 0x38
 8000910:	193b      	adds	r3, r7, r4
 8000912:	0018      	movs	r0, r3
 8000914:	2338      	movs	r3, #56	; 0x38
 8000916:	001a      	movs	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	f004 fcac 	bl	8005276 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091e:	2328      	movs	r3, #40	; 0x28
 8000920:	18fb      	adds	r3, r7, r3
 8000922:	0018      	movs	r0, r3
 8000924:	2310      	movs	r3, #16
 8000926:	001a      	movs	r2, r3
 8000928:	2100      	movs	r1, #0
 800092a:	f004 fca4 	bl	8005276 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800092e:	003b      	movs	r3, r7
 8000930:	0018      	movs	r0, r3
 8000932:	2328      	movs	r3, #40	; 0x28
 8000934:	001a      	movs	r2, r3
 8000936:	2100      	movs	r1, #0
 8000938:	f004 fc9d 	bl	8005276 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	0018      	movs	r0, r3
 8000942:	f002 f88b 	bl	8002a5c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000946:	193b      	adds	r3, r7, r4
 8000948:	2202      	movs	r2, #2
 800094a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	2280      	movs	r2, #128	; 0x80
 8000950:	0052      	lsls	r2, r2, #1
 8000952:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000954:	0021      	movs	r1, r4
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2240      	movs	r2, #64	; 0x40
 8000960:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2202      	movs	r2, #2
 8000966:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2202      	movs	r2, #2
 800096c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2210      	movs	r2, #16
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 14;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	220e      	movs	r2, #14
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	0292      	lsls	r2, r2, #10
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	0492      	lsls	r2, r2, #18
 8000988:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	22e0      	movs	r2, #224	; 0xe0
 800098e:	0612      	lsls	r2, r2, #24
 8000990:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000992:	187b      	adds	r3, r7, r1
 8000994:	0018      	movs	r0, r3
 8000996:	f002 f8ad 	bl	8002af4 <HAL_RCC_OscConfig>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800099e:	f000 f9b5 	bl	8000d0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a2:	2128      	movs	r1, #40	; 0x28
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2207      	movs	r2, #7
 80009a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2202      	movs	r2, #2
 80009ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2100      	movs	r1, #0
 80009c0:	0018      	movs	r0, r3
 80009c2:	f002 fbb7 	bl	8003134 <HAL_RCC_ClockConfig>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009ca:	f000 f99f 	bl	8000d0c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
 80009ce:	003b      	movs	r3, r7
 80009d0:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <SystemClock_Config+0xf4>)
 80009d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80009d4:	003b      	movs	r3, r7
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	0192      	lsls	r2, r2, #6
 80009da:	60da      	str	r2, [r3, #12]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80009dc:	003b      	movs	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e2:	003b      	movs	r3, r7
 80009e4:	0018      	movs	r0, r3
 80009e6:	f002 fd4f 	bl	8003488 <HAL_RCCEx_PeriphCLKConfig>
 80009ea:	1e03      	subs	r3, r0, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80009ee:	f000 f98d 	bl	8000d0c <Error_Handler>
  }
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b01d      	add	sp, #116	; 0x74
 80009f8:	bd90      	pop	{r4, r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	00004040 	.word	0x00004040

08000a00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	0018      	movs	r0, r3
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	001a      	movs	r2, r3
 8000a0e:	2100      	movs	r1, #0
 8000a10:	f004 fc31 	bl	8005276 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a14:	4b2e      	ldr	r3, [pc, #184]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a16:	4a2f      	ldr	r2, [pc, #188]	; (8000ad4 <MX_ADC1_Init+0xd4>)
 8000a18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	05d2      	lsls	r2, r2, #23
 8000a20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a22:	4b2b      	ldr	r3, [pc, #172]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a28:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a2e:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a34:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a3a:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000a40:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a46:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000a4c:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a54:	2220      	movs	r2, #32
 8000a56:	2100      	movs	r1, #0
 8000a58:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a5c:	22b8      	movs	r2, #184	; 0xb8
 8000a5e:	00d2      	lsls	r2, r2, #3
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	00d2      	lsls	r2, r2, #3
 8000a68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a6c:	222c      	movs	r2, #44	; 0x2c
 8000a6e:	2100      	movs	r1, #0
 8000a70:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_7CYCLES_5;
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a86:	223c      	movs	r2, #60	; 0x3c
 8000a88:	2100      	movs	r1, #0
 8000a8a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000a8c:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000a94:	0018      	movs	r0, r3
 8000a96:	f000 fd41 	bl	800151c <HAL_ADC_Init>
 8000a9a:	1e03      	subs	r3, r0, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8000a9e:	f000 f935 	bl	8000d0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	4a0c      	ldr	r2, [pc, #48]	; (8000ad8 <MX_ADC1_Init+0xd8>)
 8000aa6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab4:	1d3a      	adds	r2, r7, #4
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_ADC1_Init+0xd0>)
 8000ab8:	0011      	movs	r1, r2
 8000aba:	0018      	movs	r0, r3
 8000abc:	f001 f8b8 	bl	8001c30 <HAL_ADC_ConfigChannel>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000ac4:	f000 f922 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b004      	add	sp, #16
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20001150 	.word	0x20001150
 8000ad4:	40012400 	.word	0x40012400
 8000ad8:	10000010 	.word	0x10000010

08000adc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <MX_I2C1_Init+0x80>)
 8000ae2:	4a1f      	ldr	r2, [pc, #124]	; (8000b60 <MX_I2C1_Init+0x84>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000107;
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <MX_I2C1_Init+0x80>)
 8000ae8:	2208      	movs	r2, #8
 8000aea:	32ff      	adds	r2, #255	; 0xff
 8000aec:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <MX_I2C1_Init+0x80>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <MX_I2C1_Init+0x80>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <MX_I2C1_Init+0x80>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <MX_I2C1_Init+0x80>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <MX_I2C1_Init+0x80>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MX_I2C1_Init+0x80>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <MX_I2C1_Init+0x80>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b18:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_I2C1_Init+0x80>)
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f001 fe52 	bl	80027c4 <HAL_I2C_Init>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b24:	f000 f8f2 	bl	8000d0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_I2C1_Init+0x80>)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f001 fedf 	bl	80028f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b32:	1e03      	subs	r3, r0, #0
 8000b34:	d001      	beq.n	8000b3a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000b36:	f000 f8e9 	bl	8000d0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_I2C1_Init+0x80>)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f001 ff22 	bl	8002988 <HAL_I2CEx_ConfigDigitalFilter>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000b48:	f000 f8e0 	bl	8000d0c <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	035b      	lsls	r3, r3, #13
 8000b50:	0018      	movs	r0, r3
 8000b52:	f001 ff65 	bl	8002a20 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200010b0 	.word	0x200010b0
 8000b60:	40005400 	.word	0x40005400

08000b64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM3_Init 0 */

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_TIM3_Init+0x44>)
 8000b6a:	4a10      	ldr	r2, [pc, #64]	; (8000bac <MX_TIM3_Init+0x48>)
 8000b6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_TIM3_Init+0x44>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_TIM3_Init+0x44>)
 8000b76:	2210      	movs	r2, #16
 8000b78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 512;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <MX_TIM3_Init+0x44>)
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	0092      	lsls	r2, r2, #2
 8000b80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_TIM3_Init+0x44>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <MX_TIM3_Init+0x44>)
 8000b8a:	2280      	movs	r2, #128	; 0x80
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_TIM3_Init+0x44>)
 8000b90:	2108      	movs	r1, #8
 8000b92:	0018      	movs	r0, r3
 8000b94:	f002 fe1c 	bl	80037d0 <HAL_TIM_OnePulse_Init>
 8000b98:	1e03      	subs	r3, r0, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM3_Init+0x3c>
  {
    Error_Handler();
 8000b9c:	f000 f8b6 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	20001110 	.word	0x20001110
 8000bac:	40000400 	.word	0x40000400

08000bb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <MX_USART2_UART_Init+0x60>)
 8000bb6:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <MX_USART2_UART_Init+0x64>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <MX_USART2_UART_Init+0x60>)
 8000bbc:	22e1      	movs	r2, #225	; 0xe1
 8000bbe:	0252      	lsls	r2, r2, #9
 8000bc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <MX_USART2_UART_Init+0x60>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_USART2_UART_Init+0x60>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MX_USART2_UART_Init+0x60>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_USART2_UART_Init+0x60>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <MX_USART2_UART_Init+0x60>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <MX_USART2_UART_Init+0x60>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <MX_USART2_UART_Init+0x60>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <MX_USART2_UART_Init+0x60>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <MX_USART2_UART_Init+0x60>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <MX_USART2_UART_Init+0x60>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f003 f80e 	bl	8003c1c <HAL_UART_Init>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d001      	beq.n	8000c08 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c04:	f000 f882 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	200011b4 	.word	0x200011b4
 8000c14:	40004400 	.word	0x40004400

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b089      	sub	sp, #36	; 0x24
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	240c      	movs	r4, #12
 8000c20:	193b      	adds	r3, r7, r4
 8000c22:	0018      	movs	r0, r3
 8000c24:	2314      	movs	r3, #20
 8000c26:	001a      	movs	r2, r3
 8000c28:	2100      	movs	r1, #0
 8000c2a:	f004 fb24 	bl	8005276 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b34      	ldr	r3, [pc, #208]	; (8000d00 <MX_GPIO_Init+0xe8>)
 8000c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c32:	4b33      	ldr	r3, [pc, #204]	; (8000d00 <MX_GPIO_Init+0xe8>)
 8000c34:	2102      	movs	r1, #2
 8000c36:	430a      	orrs	r2, r1
 8000c38:	635a      	str	r2, [r3, #52]	; 0x34
 8000c3a:	4b31      	ldr	r3, [pc, #196]	; (8000d00 <MX_GPIO_Init+0xe8>)
 8000c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c3e:	2202      	movs	r2, #2
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c46:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <MX_GPIO_Init+0xe8>)
 8000c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c4a:	4b2d      	ldr	r3, [pc, #180]	; (8000d00 <MX_GPIO_Init+0xe8>)
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	635a      	str	r2, [r3, #52]	; 0x34
 8000c52:	4b2b      	ldr	r3, [pc, #172]	; (8000d00 <MX_GPIO_Init+0xe8>)
 8000c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c56:	2204      	movs	r2, #4
 8000c58:	4013      	ands	r3, r2
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <MX_GPIO_Init+0xe8>)
 8000c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c62:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <MX_GPIO_Init+0xe8>)
 8000c64:	2101      	movs	r1, #1
 8000c66:	430a      	orrs	r2, r1
 8000c68:	635a      	str	r2, [r3, #52]	; 0x34
 8000c6a:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <MX_GPIO_Init+0xe8>)
 8000c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4013      	ands	r3, r2
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	021b      	lsls	r3, r3, #8
 8000c7a:	4822      	ldr	r0, [pc, #136]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	0019      	movs	r1, r3
 8000c80:	f001 fd83 	bl	800278a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2280      	movs	r2, #128	; 0x80
 8000c88:	0212      	lsls	r2, r2, #8
 8000c8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	2201      	movs	r2, #1
 8000c90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	0021      	movs	r1, r4
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca0:	000c      	movs	r4, r1
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000ca6:	0019      	movs	r1, r3
 8000ca8:	0010      	movs	r0, r2
 8000caa:	f001 fbed 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cae:	0021      	movs	r1, r4
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2200      	movs	r2, #0
 8000cba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	000c      	movs	r4, r1
 8000cc4:	187a      	adds	r2, r7, r1
 8000cc6:	23a0      	movs	r3, #160	; 0xa0
 8000cc8:	05db      	lsls	r3, r3, #23
 8000cca:	0011      	movs	r1, r2
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f001 fbdb 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cd2:	0021      	movs	r1, r4
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2280      	movs	r2, #128	; 0x80
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000ce0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	187a      	adds	r2, r7, r1
 8000cea:	23a0      	movs	r3, #160	; 0xa0
 8000cec:	05db      	lsls	r3, r3, #23
 8000cee:	0011      	movs	r1, r2
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f001 fbc9 	bl	8002488 <HAL_GPIO_Init>

}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b009      	add	sp, #36	; 0x24
 8000cfc:	bd90      	pop	{r4, r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	40021000 	.word	0x40021000
 8000d04:	50000800 	.word	0x50000800
 8000d08:	10110000 	.word	0x10110000

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_MspInit+0x44>)
 8000d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <HAL_MspInit+0x44>)
 8000d24:	2101      	movs	r1, #1
 8000d26:	430a      	orrs	r2, r1
 8000d28:	641a      	str	r2, [r3, #64]	; 0x40
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_MspInit+0x44>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4013      	ands	r3, r2
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_MspInit+0x44>)
 8000d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_MspInit+0x44>)
 8000d3c:	2180      	movs	r1, #128	; 0x80
 8000d3e:	0549      	lsls	r1, r1, #21
 8000d40:	430a      	orrs	r2, r1
 8000d42:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_MspInit+0x44>)
 8000d46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	055b      	lsls	r3, r3, #21
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b002      	add	sp, #8
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	2314      	movs	r3, #20
 8000d6a:	18fb      	adds	r3, r7, r3
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	2314      	movs	r3, #20
 8000d70:	001a      	movs	r2, r3
 8000d72:	2100      	movs	r1, #0
 8000d74:	f004 fa7f 	bl	8005276 <memset>
  if(hadc->Instance==ADC1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a1c      	ldr	r2, [pc, #112]	; (8000df0 <HAL_ADC_MspInit+0x90>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d132      	bne.n	8000de8 <HAL_ADC_MspInit+0x88>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d82:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <HAL_ADC_MspInit+0x94>)
 8000d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <HAL_ADC_MspInit+0x94>)
 8000d88:	2180      	movs	r1, #128	; 0x80
 8000d8a:	0349      	lsls	r1, r1, #13
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_ADC_MspInit+0x94>)
 8000d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d94:	2380      	movs	r3, #128	; 0x80
 8000d96:	035b      	lsls	r3, r3, #13
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_ADC_MspInit+0x94>)
 8000da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_ADC_MspInit+0x94>)
 8000da4:	2101      	movs	r1, #1
 8000da6:	430a      	orrs	r2, r1
 8000da8:	635a      	str	r2, [r3, #52]	; 0x34
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_ADC_MspInit+0x94>)
 8000dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dae:	2201      	movs	r2, #1
 8000db0:	4013      	ands	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000db6:	2114      	movs	r1, #20
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2210      	movs	r2, #16
 8000dbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	187a      	adds	r2, r7, r1
 8000dcc:	23a0      	movs	r3, #160	; 0xa0
 8000dce:	05db      	lsls	r3, r3, #23
 8000dd0:	0011      	movs	r1, r2
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f001 fb58 	bl	8002488 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	200c      	movs	r0, #12
 8000dde:	f001 fb21 	bl	8002424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000de2:	200c      	movs	r0, #12
 8000de4:	f001 fb33 	bl	800244e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b00a      	add	sp, #40	; 0x28
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40012400 	.word	0x40012400
 8000df4:	40021000 	.word	0x40021000

08000df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	2314      	movs	r3, #20
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	0018      	movs	r0, r3
 8000e06:	2314      	movs	r3, #20
 8000e08:	001a      	movs	r2, r3
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	f004 fa33 	bl	8005276 <memset>
  if(hi2c->Instance==I2C1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <HAL_I2C_MspInit+0x8c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d130      	bne.n	8000e7c <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <HAL_I2C_MspInit+0x90>)
 8000e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_I2C_MspInit+0x90>)
 8000e20:	2102      	movs	r1, #2
 8000e22:	430a      	orrs	r2, r1
 8000e24:	635a      	str	r2, [r3, #52]	; 0x34
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_I2C_MspInit+0x90>)
 8000e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e32:	2114      	movs	r1, #20
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	22c0      	movs	r2, #192	; 0xc0
 8000e38:	0092      	lsls	r2, r2, #2
 8000e3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2212      	movs	r2, #18
 8000e40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	2201      	movs	r2, #1
 8000e46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2206      	movs	r2, #6
 8000e52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <HAL_I2C_MspInit+0x94>)
 8000e58:	0019      	movs	r1, r3
 8000e5a:	0010      	movs	r0, r2
 8000e5c:	f001 fb14 	bl	8002488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_I2C_MspInit+0x90>)
 8000e62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_I2C_MspInit+0x90>)
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	0389      	lsls	r1, r1, #14
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_I2C_MspInit+0x90>)
 8000e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e72:	2380      	movs	r3, #128	; 0x80
 8000e74:	039b      	lsls	r3, r3, #14
 8000e76:	4013      	ands	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b00a      	add	sp, #40	; 0x28
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40005400 	.word	0x40005400
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	50000400 	.word	0x50000400

08000e90 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM3)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_TIM_OnePulse_MspInit+0x44>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d113      	bne.n	8000eca <HAL_TIM_OnePulse_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <HAL_TIM_OnePulse_MspInit+0x48>)
 8000ea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_TIM_OnePulse_MspInit+0x48>)
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	63da      	str	r2, [r3, #60]	; 0x3c
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_TIM_OnePulse_MspInit+0x48>)
 8000eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2010      	movs	r0, #16
 8000ec0:	f001 fab0 	bl	8002424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ec4:	2010      	movs	r0, #16
 8000ec6:	f001 fac2 	bl	800244e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b004      	add	sp, #16
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	40000400 	.word	0x40000400
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	2314      	movs	r3, #20
 8000ee6:	18fb      	adds	r3, r7, r3
 8000ee8:	0018      	movs	r0, r3
 8000eea:	2314      	movs	r3, #20
 8000eec:	001a      	movs	r2, r3
 8000eee:	2100      	movs	r1, #0
 8000ef0:	f004 f9c1 	bl	8005276 <memset>
  if(huart->Instance==USART2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a1b      	ldr	r2, [pc, #108]	; (8000f68 <HAL_UART_MspInit+0x8c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d130      	bne.n	8000f60 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <HAL_UART_MspInit+0x90>)
 8000f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <HAL_UART_MspInit+0x90>)
 8000f04:	2180      	movs	r1, #128	; 0x80
 8000f06:	0289      	lsls	r1, r1, #10
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_UART_MspInit+0x90>)
 8000f0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	029b      	lsls	r3, r3, #10
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_UART_MspInit+0x90>)
 8000f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_UART_MspInit+0x90>)
 8000f20:	2101      	movs	r1, #1
 8000f22:	430a      	orrs	r2, r1
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_UART_MspInit+0x90>)
 8000f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f32:	2114      	movs	r1, #20
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	220c      	movs	r2, #12
 8000f38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	2201      	movs	r2, #1
 8000f50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	187a      	adds	r2, r7, r1
 8000f54:	23a0      	movs	r3, #160	; 0xa0
 8000f56:	05db      	lsls	r3, r3, #23
 8000f58:	0011      	movs	r1, r2
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f001 fa94 	bl	8002488 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b00a      	add	sp, #40	; 0x28
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40004400 	.word	0x40004400
 8000f6c:	40021000 	.word	0x40021000

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f98:	f000 f938 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */
	  adcResult = HAL_ADC_GetValue(&hadc1);
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <ADC1_IRQHandler+0x7c>)
 8000faa:	0018      	movs	r0, r3
 8000fac:	f000 fd04 	bl	80019b8 <HAL_ADC_GetValue>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <ADC1_IRQHandler+0x80>)
 8000fb6:	801a      	strh	r2, [r3, #0]
	  if (adcResult > 0) {
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <ADC1_IRQHandler+0x80>)
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d020      	beq.n	8001002 <ADC1_IRQHandler+0x5e>
		  adcResult = adcResult & 0x0FFF;
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <ADC1_IRQHandler+0x80>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	051b      	lsls	r3, r3, #20
 8000fc6:	0d1b      	lsrs	r3, r3, #20
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <ADC1_IRQHandler+0x80>)
 8000fcc:	801a      	strh	r2, [r3, #0]
		  adcResult = adcResult >> 1;
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <ADC1_IRQHandler+0x80>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	085b      	lsrs	r3, r3, #1
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <ADC1_IRQHandler+0x80>)
 8000fd8:	801a      	strh	r2, [r3, #0]
		  spectrData[adcResult]++;
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <ADC1_IRQHandler+0x80>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <ADC1_IRQHandler+0x84>)
 8000fe0:	0059      	lsls	r1, r3, #1
 8000fe2:	5a8a      	ldrh	r2, [r1, r2]
 8000fe4:	3201      	adds	r2, #1
 8000fe6:	b291      	uxth	r1, r2
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <ADC1_IRQHandler+0x84>)
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	5299      	strh	r1, [r3, r2]
		  counterCC++;
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <ADC1_IRQHandler+0x88>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <ADC1_IRQHandler+0x88>)
 8000ff6:	601a      	str	r2, [r3, #0]
		  counterALL++;
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <ADC1_IRQHandler+0x8c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	1c5a      	adds	r2, r3, #1
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <ADC1_IRQHandler+0x8c>)
 8001000:	601a      	str	r2, [r3, #0]
	  }
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // Включаем светодиод.
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	480b      	ldr	r0, [pc, #44]	; (8001034 <ADC1_IRQHandler+0x90>)
 8001008:	2201      	movs	r2, #1
 800100a:	0019      	movs	r1, r3
 800100c:	f001 fbbd 	bl	800278a <HAL_GPIO_WritePin>
	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <ADC1_IRQHandler+0x7c>)
 8001012:	0018      	movs	r0, r3
 8001014:	f000 fcdc 	bl	80019d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	20001150 	.word	0x20001150
 8001024:	200000a0 	.word	0x200000a0
 8001028:	200000a4 	.word	0x200000a4
 800102c:	20000098 	.word	0x20000098
 8001030:	2000009c 	.word	0x2000009c
 8001034:	50000800 	.word	0x50000800

08001038 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // Выключаем светодиод.
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <TIM3_IRQHandler+0x20>)
 8001042:	2200      	movs	r2, #0
 8001044:	0019      	movs	r1, r3
 8001046:	f001 fba0 	bl	800278a <HAL_GPIO_WritePin>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <TIM3_IRQHandler+0x24>)
 800104c:	0018      	movs	r0, r3
 800104e:	f002 fbfd 	bl	800384c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	50000800 	.word	0x50000800
 800105c:	20001110 	.word	0x20001110

08001060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001068:	4a14      	ldr	r2, [pc, #80]	; (80010bc <_sbrk+0x5c>)
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <_sbrk+0x60>)
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <_sbrk+0x64>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <_sbrk+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	18d3      	adds	r3, r2, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	429a      	cmp	r2, r3
 800108e:	d207      	bcs.n	80010a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001090:	f004 f8be 	bl	8005210 <__errno>
 8001094:	0003      	movs	r3, r0
 8001096:	220c      	movs	r2, #12
 8001098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109a:	2301      	movs	r3, #1
 800109c:	425b      	negs	r3, r3
 800109e:	e009      	b.n	80010b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	18d2      	adds	r2, r2, r3
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <_sbrk+0x64>)
 80010b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	0018      	movs	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b006      	add	sp, #24
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20002000 	.word	0x20002000
 80010c0:	00000400 	.word	0x00000400
 80010c4:	200010a4 	.word	0x200010a4
 80010c8:	20001248 	.word	0x20001248

080010cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <SystemInit+0x14>)
 80010d2:	2280      	movs	r2, #128	; 0x80
 80010d4:	0512      	lsls	r2, r2, #20
 80010d6:	609a      	str	r2, [r3, #8]
#endif
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010ea:	e003      	b.n	80010f4 <LoopCopyDataInit>

080010ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80010ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010f2:	3104      	adds	r1, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010f4:	480b      	ldr	r0, [pc, #44]	; (8001124 <LoopForever+0xa>)
  ldr r3, =_edata
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <LoopForever+0xe>)
  adds r2, r0, r1
 80010f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010fc:	d3f6      	bcc.n	80010ec <CopyDataInit>
  ldr r2, =_sbss
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <LoopForever+0x12>)
  b LoopFillZerobss
 8001100:	e002      	b.n	8001108 <LoopFillZerobss>

08001102 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  str  r3, [r2]
 8001104:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001106:	3204      	adds	r2, #4

08001108 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <LoopForever+0x16>)
  cmp r2, r3
 800110a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800110c:	d3f9      	bcc.n	8001102 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800110e:	f7ff ffdd 	bl	80010cc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001112:	f004 f883 	bl	800521c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001116:	f7ff faf1 	bl	80006fc <main>

0800111a <LoopForever>:

LoopForever:
    b LoopForever
 800111a:	e7fe      	b.n	800111a <LoopForever>
  ldr   r0, =_estack
 800111c:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8001120:	08005b54 	.word	0x08005b54
  ldr r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001128:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 800112c:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001130:	20001248 	.word	0x20001248

08001134 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

08001138 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_Init+0x3c>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_Init+0x3c>)
 800114a:	2180      	movs	r1, #128	; 0x80
 800114c:	0049      	lsls	r1, r1, #1
 800114e:	430a      	orrs	r2, r1
 8001150:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001152:	2000      	movs	r0, #0
 8001154:	f000 f810 	bl	8001178 <HAL_InitTick>
 8001158:	1e03      	subs	r3, r0, #0
 800115a:	d003      	beq.n	8001164 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800115c:	1dfb      	adds	r3, r7, #7
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	e001      	b.n	8001168 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001164:	f7ff fdd8 	bl	8000d18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001168:	1dfb      	adds	r3, r7, #7
 800116a:	781b      	ldrb	r3, [r3, #0]
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b002      	add	sp, #8
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40022000 	.word	0x40022000

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001180:	230f      	movs	r3, #15
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <HAL_InitTick+0x88>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d02b      	beq.n	80011e8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <HAL_InitTick+0x8c>)
 8001192:	681c      	ldr	r4, [r3, #0]
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <HAL_InitTick+0x88>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	0019      	movs	r1, r3
 800119a:	23fa      	movs	r3, #250	; 0xfa
 800119c:	0098      	lsls	r0, r3, #2
 800119e:	f7fe ffb1 	bl	8000104 <__udivsi3>
 80011a2:	0003      	movs	r3, r0
 80011a4:	0019      	movs	r1, r3
 80011a6:	0020      	movs	r0, r4
 80011a8:	f7fe ffac 	bl	8000104 <__udivsi3>
 80011ac:	0003      	movs	r3, r0
 80011ae:	0018      	movs	r0, r3
 80011b0:	f001 f95d 	bl	800246e <HAL_SYSTICK_Config>
 80011b4:	1e03      	subs	r3, r0, #0
 80011b6:	d112      	bne.n	80011de <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d80a      	bhi.n	80011d4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	2301      	movs	r3, #1
 80011c2:	425b      	negs	r3, r3
 80011c4:	2200      	movs	r2, #0
 80011c6:	0018      	movs	r0, r3
 80011c8:	f001 f92c 	bl	8002424 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_InitTick+0x90>)
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	e00d      	b.n	80011f0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011d4:	230f      	movs	r3, #15
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	e008      	b.n	80011f0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011de:	230f      	movs	r3, #15
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
 80011e6:	e003      	b.n	80011f0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011e8:	230f      	movs	r3, #15
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011f0:	230f      	movs	r3, #15
 80011f2:	18fb      	adds	r3, r7, r3
 80011f4:	781b      	ldrb	r3, [r3, #0]
}
 80011f6:	0018      	movs	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b005      	add	sp, #20
 80011fc:	bd90      	pop	{r4, r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	2000000c 	.word	0x2000000c
 8001204:	20000004 	.word	0x20000004
 8001208:	20000008 	.word	0x20000008

0800120c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <HAL_IncTick+0x18>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <HAL_IncTick+0x1c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	18d2      	adds	r2, r2, r3
 800121a:	4b02      	ldr	r3, [pc, #8]	; (8001224 <HAL_IncTick+0x18>)
 800121c:	601a      	str	r2, [r3, #0]
}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20001240 	.word	0x20001240
 8001228:	2000000c 	.word	0x2000000c

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b02      	ldr	r3, [pc, #8]	; (800123c <HAL_GetTick+0x10>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	20001240 	.word	0x20001240

08001240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001248:	f7ff fff0 	bl	800122c <HAL_GetTick>
 800124c:	0003      	movs	r3, r0
 800124e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3301      	adds	r3, #1
 8001258:	d004      	beq.n	8001264 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_Delay+0x40>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	18d3      	adds	r3, r2, r3
 8001262:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	f7ff ffe1 	bl	800122c <HAL_GetTick>
 800126a:	0002      	movs	r2, r0
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	429a      	cmp	r2, r3
 8001274:	d8f7      	bhi.n	8001266 <HAL_Delay+0x26>
  {
  }
}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	46bd      	mov	sp, r7
 800127a:	b004      	add	sp, #16
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	2000000c 	.word	0x2000000c

08001284 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001294:	401a      	ands	r2, r3
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	601a      	str	r2, [r3, #0]
}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b002      	add	sp, #8
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	fe3fffff 	.word	0xfe3fffff

080012ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	23e0      	movs	r3, #224	; 0xe0
 80012ba:	045b      	lsls	r3, r3, #17
 80012bc:	4013      	ands	r3, r2
}
 80012be:	0018      	movs	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b002      	add	sp, #8
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	2104      	movs	r1, #4
 80012da:	400a      	ands	r2, r1
 80012dc:	2107      	movs	r1, #7
 80012de:	4091      	lsls	r1, r2
 80012e0:	000a      	movs	r2, r1
 80012e2:	43d2      	mvns	r2, r2
 80012e4:	401a      	ands	r2, r3
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	2104      	movs	r1, #4
 80012ea:	400b      	ands	r3, r1
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	4099      	lsls	r1, r3
 80012f0:	000b      	movs	r3, r1
 80012f2:	431a      	orrs	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80012f8:	46c0      	nop			; (mov r8, r8)
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b004      	add	sp, #16
 80012fe:	bd80      	pop	{r7, pc}

08001300 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	23c0      	movs	r3, #192	; 0xc0
 800130e:	011b      	lsls	r3, r3, #4
 8001310:	4013      	ands	r3, r2
 8001312:	d101      	bne.n	8001318 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001318:	2300      	movs	r3, #0
}
 800131a:	0018      	movs	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	b002      	add	sp, #8
 8001320:	bd80      	pop	{r7, pc}

08001322 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b084      	sub	sp, #16
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	211f      	movs	r1, #31
 8001336:	400a      	ands	r2, r1
 8001338:	210f      	movs	r1, #15
 800133a:	4091      	lsls	r1, r2
 800133c:	000a      	movs	r2, r1
 800133e:	43d2      	mvns	r2, r2
 8001340:	401a      	ands	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	0e9b      	lsrs	r3, r3, #26
 8001346:	210f      	movs	r1, #15
 8001348:	4019      	ands	r1, r3
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	201f      	movs	r0, #31
 800134e:	4003      	ands	r3, r0
 8001350:	4099      	lsls	r1, r3
 8001352:	000b      	movs	r3, r1
 8001354:	431a      	orrs	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	b004      	add	sp, #16
 8001360:	bd80      	pop	{r7, pc}

08001362 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	035b      	lsls	r3, r3, #13
 8001374:	0b5b      	lsrs	r3, r3, #13
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800137c:	46c0      	nop			; (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	b002      	add	sp, #8
 8001382:	bd80      	pop	{r7, pc}

08001384 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	0352      	lsls	r2, r2, #13
 8001396:	0b52      	lsrs	r2, r2, #13
 8001398:	43d2      	mvns	r2, r2
 800139a:	401a      	ands	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2203      	movs	r2, #3
 80013b6:	4013      	ands	r3, r2
}
 80013b8:	0018      	movs	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b002      	add	sp, #8
 80013be:	bd80      	pop	{r7, pc}

080013c0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	0212      	lsls	r2, r2, #8
 80013d4:	43d2      	mvns	r2, r2
 80013d6:	401a      	ands	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	400b      	ands	r3, r1
 80013e0:	4904      	ldr	r1, [pc, #16]	; (80013f4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80013e2:	400b      	ands	r3, r1
 80013e4:	431a      	orrs	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b004      	add	sp, #16
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	07ffff00 	.word	0x07ffff00

080013f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	4a05      	ldr	r2, [pc, #20]	; (800141c <LL_ADC_EnableInternalRegulator+0x24>)
 8001406:	4013      	ands	r3, r2
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	0552      	lsls	r2, r2, #21
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	b002      	add	sp, #8
 8001418:	bd80      	pop	{r7, pc}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	6fffffe8 	.word	0x6fffffe8

08001420 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	055b      	lsls	r3, r3, #21
 8001430:	401a      	ands	r2, r3
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	055b      	lsls	r3, r3, #21
 8001436:	429a      	cmp	r2, r3
 8001438:	d101      	bne.n	800143e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800143e:	2300      	movs	r3, #0
}
 8001440:	0018      	movs	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	b002      	add	sp, #8
 8001446:	bd80      	pop	{r7, pc}

08001448 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	4a04      	ldr	r2, [pc, #16]	; (8001468 <LL_ADC_Enable+0x20>)
 8001456:	4013      	ands	r3, r2
 8001458:	2201      	movs	r2, #1
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b002      	add	sp, #8
 8001466:	bd80      	pop	{r7, pc}
 8001468:	7fffffe8 	.word	0x7fffffe8

0800146c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <LL_ADC_Disable+0x20>)
 800147a:	4013      	ands	r3, r2
 800147c:	2202      	movs	r2, #2
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001484:	46c0      	nop			; (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	b002      	add	sp, #8
 800148a:	bd80      	pop	{r7, pc}
 800148c:	7fffffe8 	.word	0x7fffffe8

08001490 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2201      	movs	r2, #1
 800149e:	4013      	ands	r3, r2
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <LL_ADC_IsEnabled+0x18>
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <LL_ADC_IsEnabled+0x1a>
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	0018      	movs	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b002      	add	sp, #8
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2202      	movs	r2, #2
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d101      	bne.n	80014ca <LL_ADC_IsDisableOngoing+0x18>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <LL_ADC_IsDisableOngoing+0x1a>
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	0018      	movs	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b002      	add	sp, #8
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <LL_ADC_REG_StartConversion+0x20>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	2204      	movs	r2, #4
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b002      	add	sp, #8
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	7fffffe8 	.word	0x7fffffe8

080014f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2204      	movs	r2, #4
 8001506:	4013      	ands	r3, r2
 8001508:	2b04      	cmp	r3, #4
 800150a:	d101      	bne.n	8001510 <LL_ADC_REG_IsConversionOngoing+0x18>
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001510:	2300      	movs	r3, #0
}
 8001512:	0018      	movs	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	b002      	add	sp, #8
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001524:	231f      	movs	r3, #31
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e1aa      	b.n	8001898 <HAL_ADC_Init+0x37c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10a      	bne.n	8001560 <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff fc07 	bl	8000d60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2254      	movs	r2, #84	; 0x54
 800155c:	2100      	movs	r1, #0
 800155e:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	0018      	movs	r0, r3
 8001566:	f7ff ff5b 	bl	8001420 <LL_ADC_IsInternalRegulatorEnabled>
 800156a:	1e03      	subs	r3, r0, #0
 800156c:	d114      	bne.n	8001598 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0018      	movs	r0, r3
 8001574:	f7ff ff40 	bl	80013f8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001578:	4bc9      	ldr	r3, [pc, #804]	; (80018a0 <HAL_ADC_Init+0x384>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	49c9      	ldr	r1, [pc, #804]	; (80018a4 <HAL_ADC_Init+0x388>)
 800157e:	0018      	movs	r0, r3
 8001580:	f7fe fdc0 	bl	8000104 <__udivsi3>
 8001584:	0003      	movs	r3, r0
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800158a:	e002      	b.n	8001592 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	3b01      	subs	r3, #1
 8001590:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f9      	bne.n	800158c <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	0018      	movs	r0, r3
 800159e:	f7ff ff3f 	bl	8001420 <LL_ADC_IsInternalRegulatorEnabled>
 80015a2:	1e03      	subs	r3, r0, #0
 80015a4:	d10f      	bne.n	80015c6 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015aa:	2210      	movs	r2, #16
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b6:	2201      	movs	r2, #1
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 80015be:	231f      	movs	r3, #31
 80015c0:	18fb      	adds	r3, r7, r3
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	0018      	movs	r0, r3
 80015cc:	f7ff ff94 	bl	80014f8 <LL_ADC_REG_IsConversionOngoing>
 80015d0:	0003      	movs	r3, r0
 80015d2:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	2210      	movs	r2, #16
 80015da:	4013      	ands	r3, r2
 80015dc:	d000      	beq.n	80015e0 <HAL_ADC_Init+0xc4>
 80015de:	e14e      	b.n	800187e <HAL_ADC_Init+0x362>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d000      	beq.n	80015e8 <HAL_ADC_Init+0xcc>
 80015e6:	e14a      	b.n	800187e <HAL_ADC_Init+0x362>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ec:	4aae      	ldr	r2, [pc, #696]	; (80018a8 <HAL_ADC_Init+0x38c>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	2202      	movs	r2, #2
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7ff ff47 	bl	8001490 <LL_ADC_IsEnabled>
 8001602:	1e03      	subs	r3, r0, #0
 8001604:	d137      	bne.n	8001676 <HAL_ADC_Init+0x15a>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2218      	movs	r2, #24
 800160e:	4393      	bics	r3, r2
 8001610:	0019      	movs	r1, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	0899      	lsrs	r1, r3, #2
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	0f9b      	lsrs	r3, r3, #30
 800162e:	079a      	lsls	r2, r3, #30
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	23c0      	movs	r3, #192	; 0xc0
 800163e:	061b      	lsls	r3, r3, #24
 8001640:	429a      	cmp	r2, r3
 8001642:	d018      	beq.n	8001676 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	05db      	lsls	r3, r3, #23
 800164c:	429a      	cmp	r2, r3
 800164e:	d012      	beq.n	8001676 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	061b      	lsls	r3, r3, #24
 8001658:	429a      	cmp	r2, r3
 800165a:	d00c      	beq.n	8001676 <HAL_ADC_Init+0x15a>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 800165c:	4b93      	ldr	r3, [pc, #588]	; (80018ac <HAL_ADC_Init+0x390>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a93      	ldr	r2, [pc, #588]	; (80018b0 <HAL_ADC_Init+0x394>)
 8001662:	4013      	ands	r3, r2
 8001664:	0019      	movs	r1, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	23f0      	movs	r3, #240	; 0xf0
 800166c:	039b      	lsls	r3, r3, #14
 800166e:	401a      	ands	r2, r3
 8001670:	4b8e      	ldr	r3, [pc, #568]	; (80018ac <HAL_ADC_Init+0x390>)
 8001672:	430a      	orrs	r2, r1
 8001674:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	7e1b      	ldrb	r3, [r3, #24]
 800167a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7e5b      	ldrb	r3, [r3, #25]
 8001680:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001682:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7e9b      	ldrb	r3, [r3, #26]
 8001688:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800168a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	2b00      	cmp	r3, #0
 8001692:	d002      	beq.n	800169a <HAL_ADC_Init+0x17e>
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	015b      	lsls	r3, r3, #5
 8001698:	e000      	b.n	800169c <HAL_ADC_Init+0x180>
 800169a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800169c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80016a2:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	da04      	bge.n	80016b6 <HAL_ADC_Init+0x19a>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	e001      	b.n	80016ba <HAL_ADC_Init+0x19e>
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 80016ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	212c      	movs	r1, #44	; 0x2c
 80016c0:	5c5b      	ldrb	r3, [r3, r1]
 80016c2:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 80016c4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2220      	movs	r2, #32
 80016d0:	5c9b      	ldrb	r3, [r3, r2]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d115      	bne.n	8001702 <HAL_ADC_Init+0x1e6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7e9b      	ldrb	r3, [r3, #26]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d105      	bne.n	80016ea <HAL_ADC_Init+0x1ce>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2280      	movs	r2, #128	; 0x80
 80016e2:	0252      	lsls	r2, r2, #9
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	e00b      	b.n	8001702 <HAL_ADC_Init+0x1e6>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	2220      	movs	r2, #32
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fa:	2201      	movs	r2, #1
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00a      	beq.n	8001720 <HAL_ADC_Init+0x204>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800170e:	23e0      	movs	r3, #224	; 0xe0
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001718:	4313      	orrs	r3, r2
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8001728:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 800172e:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 8001734:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4313      	orrs	r3, r2
 800173a:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	223c      	movs	r2, #60	; 0x3c
 8001740:	5c9b      	ldrb	r3, [r3, r2]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d103      	bne.n	800174e <HAL_ADC_Init+0x232>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2201      	movs	r2, #1
 800174a:	4313      	orrs	r3, r2
 800174c:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4a57      	ldr	r2, [pc, #348]	; (80018b4 <HAL_ADC_Init+0x398>)
 8001756:	4013      	ands	r3, r2
 8001758:	0019      	movs	r1, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	430a      	orrs	r2, r1
 8001762:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	4a53      	ldr	r2, [pc, #332]	; (80018b8 <HAL_ADC_Init+0x39c>)
 800176c:	4013      	ands	r3, r2
 800176e:	0019      	movs	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	430a      	orrs	r2, r1
 8001778:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001782:	001a      	movs	r2, r3
 8001784:	2100      	movs	r1, #0
 8001786:	f7ff fd9e 	bl	80012c6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001792:	494a      	ldr	r1, [pc, #296]	; (80018bc <HAL_ADC_Init+0x3a0>)
 8001794:	001a      	movs	r2, r3
 8001796:	f7ff fd96 	bl	80012c6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d109      	bne.n	80017b6 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2110      	movs	r1, #16
 80017ae:	4249      	negs	r1, r1
 80017b0:	430a      	orrs	r2, r1
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
 80017b4:	e03c      	b.n	8001830 <HAL_ADC_Init+0x314>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691a      	ldr	r2, [r3, #16]
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	039b      	lsls	r3, r3, #14
 80017be:	429a      	cmp	r2, r3
 80017c0:	d136      	bne.n	8001830 <HAL_ADC_Init+0x314>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	e00c      	b.n	80017e2 <HAL_ADC_Init+0x2c6>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	40da      	lsrs	r2, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	220f      	movs	r2, #15
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b0f      	cmp	r3, #15
 80017da:	d006      	beq.n	80017ea <HAL_ADC_Init+0x2ce>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	3301      	adds	r3, #1
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	2b07      	cmp	r3, #7
 80017e6:	d9ef      	bls.n	80017c8 <HAL_ADC_Init+0x2ac>
 80017e8:	e000      	b.n	80017ec <HAL_ADC_Init+0x2d0>
        {
          break;
 80017ea:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d109      	bne.n	8001806 <HAL_ADC_Init+0x2ea>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2110      	movs	r1, #16
 80017fe:	4249      	negs	r1, r1
 8001800:	430a      	orrs	r2, r1
 8001802:	629a      	str	r2, [r3, #40]	; 0x28
 8001804:	e014      	b.n	8001830 <HAL_ADC_Init+0x314>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	4a2b      	ldr	r2, [pc, #172]	; (80018c0 <HAL_ADC_Init+0x3a4>)
 8001812:	4694      	mov	ip, r2
 8001814:	4463      	add	r3, ip
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	221c      	movs	r2, #28
 800181a:	4013      	ands	r3, r2
 800181c:	2210      	movs	r2, #16
 800181e:	4252      	negs	r2, r2
 8001820:	409a      	lsls	r2, r3
 8001822:	0011      	movs	r1, r2
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	4a23      	ldr	r2, [pc, #140]	; (80018c4 <HAL_ADC_Init+0x3a8>)
 8001838:	4013      	ands	r3, r2
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	429a      	cmp	r2, r3
 800183e:	d10b      	bne.n	8001858 <HAL_ADC_Init+0x33c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	2203      	movs	r2, #3
 800184c:	4393      	bics	r3, r2
 800184e:	2201      	movs	r2, #1
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001856:	e01c      	b.n	8001892 <HAL_ADC_Init+0x376>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185c:	2212      	movs	r2, #18
 800185e:	4393      	bics	r3, r2
 8001860:	2210      	movs	r2, #16
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186c:	2201      	movs	r2, #1
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 8001874:	231f      	movs	r3, #31
 8001876:	18fb      	adds	r3, r7, r3
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800187c:	e009      	b.n	8001892 <HAL_ADC_Init+0x376>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001882:	2210      	movs	r2, #16
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 800188a:	231f      	movs	r3, #31
 800188c:	18fb      	adds	r3, r7, r3
 800188e:	2201      	movs	r2, #1
 8001890:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001892:	231f      	movs	r3, #31
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	781b      	ldrb	r3, [r3, #0]
}
 8001898:	0018      	movs	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	b008      	add	sp, #32
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000004 	.word	0x20000004
 80018a4:	00030d40 	.word	0x00030d40
 80018a8:	fffffefd 	.word	0xfffffefd
 80018ac:	40012708 	.word	0x40012708
 80018b0:	ffc3ffff 	.word	0xffc3ffff
 80018b4:	fffe0219 	.word	0xfffe0219
 80018b8:	dffffc02 	.word	0xdffffc02
 80018bc:	07ffff04 	.word	0x07ffff04
 80018c0:	3fffffff 	.word	0x3fffffff
 80018c4:	833fffe7 	.word	0x833fffe7

080018c8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80018c8:	b5b0      	push	{r4, r5, r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff fe0f 	bl	80014f8 <LL_ADC_REG_IsConversionOngoing>
 80018da:	1e03      	subs	r3, r0, #0
 80018dc:	d15f      	bne.n	800199e <HAL_ADC_Start_IT+0xd6>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2254      	movs	r2, #84	; 0x54
 80018e2:	5c9b      	ldrb	r3, [r3, r2]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <HAL_ADC_Start_IT+0x24>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e05f      	b.n	80019ac <HAL_ADC_Start_IT+0xe4>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2254      	movs	r2, #84	; 0x54
 80018f0:	2101      	movs	r1, #1
 80018f2:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018f4:	250f      	movs	r5, #15
 80018f6:	197c      	adds	r4, r7, r5
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	0018      	movs	r0, r3
 80018fc:	f000 fb6c 	bl	8001fd8 <ADC_Enable>
 8001900:	0003      	movs	r3, r0
 8001902:	7023      	strb	r3, [r4, #0]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001904:	197b      	adds	r3, r7, r5
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d143      	bne.n	8001994 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	4a28      	ldr	r2, [pc, #160]	; (80019b4 <HAL_ADC_Start_IT+0xec>)
 8001912:	4013      	ands	r3, r2
 8001914:	2280      	movs	r2, #128	; 0x80
 8001916:	0052      	lsls	r2, r2, #1
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);
      
      
      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	221c      	movs	r2, #28
 800192a:	601a      	str	r2, [r3, #0]
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2254      	movs	r2, #84	; 0x54
 8001930:	2100      	movs	r1, #0
 8001932:	5499      	strb	r1, [r3, r2]
      
      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	211c      	movs	r1, #28
 8001940:	438a      	bics	r2, r1
 8001942:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC end of conversion interrupt */
      switch(hadc->Init.EOCSelection)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	2b08      	cmp	r3, #8
 800194a:	d108      	bne.n	800195e <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2108      	movs	r1, #8
 8001958:	430a      	orrs	r2, r1
 800195a:	605a      	str	r2, [r3, #4]
          break;
 800195c:	e008      	b.n	8001970 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2104      	movs	r1, #4
 800196a:	430a      	orrs	r2, r1
 800196c:	605a      	str	r2, [r3, #4]
          break;
 800196e:	46c0      	nop			; (mov r8, r8)
      
      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	2b00      	cmp	r3, #0
 8001976:	d107      	bne.n	8001988 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);  
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2110      	movs	r1, #16
 8001984:	430a      	orrs	r2, r1
 8001986:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff fda1 	bl	80014d4 <LL_ADC_REG_StartConversion>
 8001992:	e008      	b.n	80019a6 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2254      	movs	r2, #84	; 0x54
 8001998:	2100      	movs	r1, #0
 800199a:	5499      	strb	r1, [r3, r2]
 800199c:	e003      	b.n	80019a6 <HAL_ADC_Start_IT+0xde>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800199e:	230f      	movs	r3, #15
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	2202      	movs	r2, #2
 80019a4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019a6:	230f      	movs	r3, #15
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	781b      	ldrb	r3, [r3, #0]
}
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b004      	add	sp, #16
 80019b2:	bdb0      	pop	{r4, r5, r7, pc}
 80019b4:	fffff0fe 	.word	0xfffff0fe

080019b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80019c6:	0018      	movs	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b002      	add	sp, #8
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if(((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	2202      	movs	r2, #2
 80019f0:	4013      	ands	r3, r2
 80019f2:	d017      	beq.n	8001a24 <HAL_ADC_IRQHandler+0x54>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2202      	movs	r2, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d013      	beq.n	8001a24 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a00:	2210      	movs	r2, #16
 8001a02:	4013      	ands	r3, r2
 8001a04:	d106      	bne.n	8001a14 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	2280      	movs	r2, #128	; 0x80
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	0018      	movs	r0, r3
 8001a18:	f000 fc48 	bl	80022ac <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP );
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2202      	movs	r2, #2
 8001a22:	601a      	str	r2, [r3, #0]
  }
  
  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	2204      	movs	r2, #4
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d003      	beq.n	8001a34 <HAL_ADC_IRQHandler+0x64>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2204      	movs	r2, #4
 8001a30:	4013      	ands	r3, r2
 8001a32:	d107      	bne.n	8001a44 <HAL_ADC_IRQHandler+0x74>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	2208      	movs	r2, #8
 8001a38:	4013      	ands	r3, r2
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a3a:	d04d      	beq.n	8001ad8 <HAL_ADC_IRQHandler+0x108>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2208      	movs	r2, #8
 8001a40:	4013      	ands	r3, r2
 8001a42:	d049      	beq.n	8001ad8 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	2210      	movs	r2, #16
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d106      	bne.n	8001a5c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	0092      	lsls	r2, r2, #2
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	659a      	str	r2, [r3, #88]	; 0x58
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7ff fc4d 	bl	8001300 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a66:	1e03      	subs	r3, r0, #0
 8001a68:	d02e      	beq.n	8001ac8 <HAL_ADC_IRQHandler+0xf8>
       && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	7e9b      	ldrb	r3, [r3, #26]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d12a      	bne.n	8001ac8 <HAL_ADC_IRQHandler+0xf8>
      )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2208      	movs	r2, #8
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d123      	bne.n	8001ac8 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff fd37 	bl	80014f8 <LL_ADC_REG_IsConversionOngoing>
 8001a8a:	1e03      	subs	r3, r0, #0
 8001a8c:	d110      	bne.n	8001ab0 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	210c      	movs	r1, #12
 8001a9a:	438a      	bics	r2, r1
 8001a9c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	4a56      	ldr	r2, [pc, #344]	; (8001bfc <HAL_ADC_IRQHandler+0x22c>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	659a      	str	r2, [r3, #88]	; 0x58
 8001aae:	e00b      	b.n	8001ac8 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	659a      	str	r2, [r3, #88]	; 0x58
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	0018      	movs	r0, r3
 8001acc:	f000 f898 	bl	8001c00 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	220c      	movs	r2, #12
 8001ad6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))      
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	4013      	ands	r3, r2
 8001ade:	d012      	beq.n	8001b06 <HAL_ADC_IRQHandler+0x136>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d00e      	beq.n	8001b06 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	0252      	lsls	r2, r2, #9
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	0018      	movs	r0, r3
 8001afa:	f000 f889 	bl	8001c10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2280      	movs	r2, #128	; 0x80
 8001b04:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))      
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d014      	beq.n	8001b3a <HAL_ADC_IRQHandler+0x16a>
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4013      	ands	r3, r2
 8001b18:	d00f      	beq.n	8001b3a <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	0292      	lsls	r2, r2, #10
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f000 fbae 	bl	800228c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	0052      	lsls	r2, r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))      
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4013      	ands	r3, r2
 8001b42:	d014      	beq.n	8001b6e <HAL_ADC_IRQHandler+0x19e>
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d00f      	beq.n	8001b6e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	02d2      	lsls	r2, r2, #11
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f000 fb9c 	bl	800229c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2280      	movs	r2, #128	; 0x80
 8001b6a:	0092      	lsls	r2, r2, #2
 8001b6c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR)) 
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	2210      	movs	r2, #16
 8001b72:	4013      	ands	r3, r2
 8001b74:	d02b      	beq.n	8001bce <HAL_ADC_IRQHandler+0x1fe>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2210      	movs	r2, #16
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d027      	beq.n	8001bce <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d102      	bne.n	8001b8c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001b86:	2301      	movs	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e008      	b.n	8001b9e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	0018      	movs	r0, r3
 8001b92:	f7ff fc09 	bl	80013a8 <LL_ADC_REG_GetDMATransfer>
 8001b96:	1e03      	subs	r3, r0, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
      }
    }
        
    if (overrun_error == 1UL)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d110      	bne.n	8001bc6 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	00d2      	lsls	r2, r2, #3
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f000 f82d 	bl	8001c20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2210      	movs	r2, #16
 8001bcc:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	019b      	lsls	r3, r3, #6
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d00d      	beq.n	8001bf4 <HAL_ADC_IRQHandler+0x224>
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	019b      	lsls	r3, r3, #6
 8001bde:	4013      	ands	r3, r2
 8001be0:	d008      	beq.n	8001bf4 <HAL_ADC_IRQHandler+0x224>
  {
    /* Level out of window 1 callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	0018      	movs	r0, r3
 8001be6:	f000 fb69 	bl	80022bc <HAL_ADCEx_ChannelConfigReadyCallback>
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2280      	movs	r2, #128	; 0x80
 8001bf0:	0192      	lsls	r2, r2, #6
 8001bf2:	601a      	str	r2, [r3, #0]
  }
}
 8001bf4:	46c0      	nop			; (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b006      	add	sp, #24
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	fffffefe 	.word	0xfffffefe

08001c00 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c08:	46c0      	nop			; (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b002      	add	sp, #8
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001c18:	46c0      	nop			; (mov r8, r8)
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b002      	add	sp, #8
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c28:	46c0      	nop			; (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b002      	add	sp, #8
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c3a:	2317      	movs	r3, #23
 8001c3c:	18fb      	adds	r3, r7, r3
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2254      	movs	r2, #84	; 0x54
 8001c4a:	5c9b      	ldrb	r3, [r3, r2]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x24>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e1bc      	b.n	8001fce <HAL_ADC_ConfigChannel+0x39e>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2254      	movs	r2, #84	; 0x54
 8001c58:	2101      	movs	r1, #1
 8001c5a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7ff fc49 	bl	80014f8 <LL_ADC_REG_IsConversionOngoing>
 8001c66:	1e03      	subs	r3, r0, #0
 8001c68:	d000      	beq.n	8001c6c <HAL_ADC_ConfigChannel+0x3c>
 8001c6a:	e19f      	b.n	8001fac <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d100      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x46>
 8001c74:	e13e      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	061b      	lsls	r3, r3, #24
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d004      	beq.n	8001c8c <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001c86:	4abf      	ldr	r2, [pc, #764]	; (8001f84 <HAL_ADC_ConfigChannel+0x354>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d108      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	0019      	movs	r1, r3
 8001c96:	0010      	movs	r0, r2
 8001c98:	f7ff fb63 	bl	8001362 <LL_ADC_REG_SetSequencerChAdd>
 8001c9c:	e0c9      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	211f      	movs	r1, #31
 8001ca8:	400b      	ands	r3, r1
 8001caa:	210f      	movs	r1, #15
 8001cac:	4099      	lsls	r1, r3
 8001cae:	000b      	movs	r3, r1
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	035b      	lsls	r3, r3, #13
 8001cbc:	0b5b      	lsrs	r3, r3, #13
 8001cbe:	d105      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x9c>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0e9b      	lsrs	r3, r3, #26
 8001cc6:	221f      	movs	r2, #31
 8001cc8:	4013      	ands	r3, r2
 8001cca:	e098      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d000      	beq.n	8001cd8 <HAL_ADC_ConfigChannel+0xa8>
 8001cd6:	e091      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x1cc>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d000      	beq.n	8001ce4 <HAL_ADC_ConfigChannel+0xb4>
 8001ce2:	e089      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x1c8>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2204      	movs	r2, #4
 8001cea:	4013      	ands	r3, r2
 8001cec:	d000      	beq.n	8001cf0 <HAL_ADC_ConfigChannel+0xc0>
 8001cee:	e081      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x1c4>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2208      	movs	r2, #8
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d000      	beq.n	8001cfc <HAL_ADC_ConfigChannel+0xcc>
 8001cfa:	e079      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x1c0>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2210      	movs	r2, #16
 8001d02:	4013      	ands	r3, r2
 8001d04:	d000      	beq.n	8001d08 <HAL_ADC_ConfigChannel+0xd8>
 8001d06:	e071      	b.n	8001dec <HAL_ADC_ConfigChannel+0x1bc>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d000      	beq.n	8001d14 <HAL_ADC_ConfigChannel+0xe4>
 8001d12:	e069      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x1b8>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2240      	movs	r2, #64	; 0x40
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d000      	beq.n	8001d20 <HAL_ADC_ConfigChannel+0xf0>
 8001d1e:	e061      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x1b4>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2280      	movs	r2, #128	; 0x80
 8001d26:	4013      	ands	r3, r2
 8001d28:	d000      	beq.n	8001d2c <HAL_ADC_ConfigChannel+0xfc>
 8001d2a:	e059      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x1b0>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4013      	ands	r3, r2
 8001d36:	d151      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x1ac>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4013      	ands	r3, r2
 8001d42:	d149      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x1a8>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d141      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x1a4>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d139      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x1a0>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	015b      	lsls	r3, r3, #5
 8001d64:	4013      	ands	r3, r2
 8001d66:	d131      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x19c>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	019b      	lsls	r3, r3, #6
 8001d70:	4013      	ands	r3, r2
 8001d72:	d129      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x198>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	01db      	lsls	r3, r3, #7
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d121      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x194>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d119      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x190>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	025b      	lsls	r3, r3, #9
 8001d94:	4013      	ands	r3, r2
 8001d96:	d111      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x18c>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	029b      	lsls	r3, r3, #10
 8001da0:	4013      	ands	r3, r2
 8001da2:	d109      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x188>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	02db      	lsls	r3, r3, #11
 8001dac:	4013      	ands	r3, r2
 8001dae:	d001      	beq.n	8001db4 <HAL_ADC_ConfigChannel+0x184>
 8001db0:	2312      	movs	r3, #18
 8001db2:	e024      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001db4:	2300      	movs	r3, #0
 8001db6:	e022      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001db8:	2311      	movs	r3, #17
 8001dba:	e020      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001dbc:	2310      	movs	r3, #16
 8001dbe:	e01e      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001dc0:	230f      	movs	r3, #15
 8001dc2:	e01c      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001dc4:	230e      	movs	r3, #14
 8001dc6:	e01a      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001dc8:	230d      	movs	r3, #13
 8001dca:	e018      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001dcc:	230c      	movs	r3, #12
 8001dce:	e016      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001dd0:	230b      	movs	r3, #11
 8001dd2:	e014      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001dd4:	230a      	movs	r3, #10
 8001dd6:	e012      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001dd8:	2309      	movs	r3, #9
 8001dda:	e010      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001ddc:	2308      	movs	r3, #8
 8001dde:	e00e      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001de0:	2307      	movs	r3, #7
 8001de2:	e00c      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001de4:	2306      	movs	r3, #6
 8001de6:	e00a      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001de8:	2305      	movs	r3, #5
 8001dea:	e008      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001dec:	2304      	movs	r3, #4
 8001dee:	e006      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001df0:	2303      	movs	r3, #3
 8001df2:	e004      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e002      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1ce>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	6852      	ldr	r2, [r2, #4]
 8001e02:	201f      	movs	r0, #31
 8001e04:	4002      	ands	r2, r0
 8001e06:	4093      	lsls	r3, r2
 8001e08:	000a      	movs	r2, r1
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d808      	bhi.n	8001e32 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	6859      	ldr	r1, [r3, #4]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	001a      	movs	r2, r3
 8001e2e:	f7ff fa78 	bl	8001322 <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	6819      	ldr	r1, [r3, #0]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	001a      	movs	r2, r3
 8001e40:	f7ff fabe 	bl	80013c0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db00      	blt.n	8001e4e <HAL_ADC_ConfigChannel+0x21e>
 8001e4c:	e0b8      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e4e:	4b4e      	ldr	r3, [pc, #312]	; (8001f88 <HAL_ADC_ConfigChannel+0x358>)
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff fa2b 	bl	80012ac <LL_ADC_GetCommonPathInternalCh>
 8001e56:	0003      	movs	r3, r0
 8001e58:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a4b      	ldr	r2, [pc, #300]	; (8001f8c <HAL_ADC_ConfigChannel+0x35c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d11d      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x270>
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	041b      	lsls	r3, r3, #16
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d118      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	2280      	movs	r2, #128	; 0x80
 8001e72:	0412      	lsls	r2, r2, #16
 8001e74:	4313      	orrs	r3, r2
 8001e76:	4a44      	ldr	r2, [pc, #272]	; (8001f88 <HAL_ADC_ConfigChannel+0x358>)
 8001e78:	0019      	movs	r1, r3
 8001e7a:	0010      	movs	r0, r2
 8001e7c:	f7ff fa02 	bl	8001284 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001e80:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <HAL_ADC_ConfigChannel+0x360>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4943      	ldr	r1, [pc, #268]	; (8001f94 <HAL_ADC_ConfigChannel+0x364>)
 8001e86:	0018      	movs	r0, r3
 8001e88:	f7fe f93c 	bl	8000104 <__udivsi3>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8001e90:	e002      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f9      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e9e:	e08f      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a3c      	ldr	r2, [pc, #240]	; (8001f98 <HAL_ADC_ConfigChannel+0x368>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d10e      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x298>
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	045b      	lsls	r3, r3, #17
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d109      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	2280      	movs	r2, #128	; 0x80
 8001eb8:	0452      	lsls	r2, r2, #17
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	4a32      	ldr	r2, [pc, #200]	; (8001f88 <HAL_ADC_ConfigChannel+0x358>)
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	0010      	movs	r0, r2
 8001ec2:	f7ff f9df 	bl	8001284 <LL_ADC_SetCommonPathInternalCh>
 8001ec6:	e07b      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a33      	ldr	r2, [pc, #204]	; (8001f9c <HAL_ADC_ConfigChannel+0x36c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d000      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0x2a4>
 8001ed2:	e075      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x390>
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	03db      	lsls	r3, r3, #15
 8001eda:	4013      	ands	r3, r2
 8001edc:	d000      	beq.n	8001ee0 <HAL_ADC_ConfigChannel+0x2b0>
 8001ede:	e06f      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	03d2      	lsls	r2, r2, #15
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	4a27      	ldr	r2, [pc, #156]	; (8001f88 <HAL_ADC_ConfigChannel+0x358>)
 8001eea:	0019      	movs	r1, r3
 8001eec:	0010      	movs	r0, r2
 8001eee:	f7ff f9c9 	bl	8001284 <LL_ADC_SetCommonPathInternalCh>
 8001ef2:	e065      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	061b      	lsls	r3, r3, #24
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d004      	beq.n	8001f0a <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001f04:	4a1f      	ldr	r2, [pc, #124]	; (8001f84 <HAL_ADC_ConfigChannel+0x354>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d107      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	0019      	movs	r1, r3
 8001f14:	0010      	movs	r0, r2
 8001f16:	f7ff fa35 	bl	8001384 <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	da4e      	bge.n	8001fc0 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f22:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_ADC_ConfigChannel+0x358>)
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7ff f9c1 	bl	80012ac <LL_ADC_GetCommonPathInternalCh>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a16      	ldr	r2, [pc, #88]	; (8001f8c <HAL_ADC_ConfigChannel+0x35c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d108      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4a19      	ldr	r2, [pc, #100]	; (8001fa0 <HAL_ADC_ConfigChannel+0x370>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <HAL_ADC_ConfigChannel+0x358>)
 8001f40:	0019      	movs	r1, r3
 8001f42:	0010      	movs	r0, r2
 8001f44:	f7ff f99e 	bl	8001284 <LL_ADC_SetCommonPathInternalCh>
 8001f48:	e03a      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <HAL_ADC_ConfigChannel+0x368>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d108      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <HAL_ADC_ConfigChannel+0x374>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <HAL_ADC_ConfigChannel+0x358>)
 8001f5c:	0019      	movs	r1, r3
 8001f5e:	0010      	movs	r0, r2
 8001f60:	f7ff f990 	bl	8001284 <LL_ADC_SetCommonPathInternalCh>
 8001f64:	e02c      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a0c      	ldr	r2, [pc, #48]	; (8001f9c <HAL_ADC_ConfigChannel+0x36c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d127      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4a0d      	ldr	r2, [pc, #52]	; (8001fa8 <HAL_ADC_ConfigChannel+0x378>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <HAL_ADC_ConfigChannel+0x358>)
 8001f78:	0019      	movs	r1, r3
 8001f7a:	0010      	movs	r0, r2
 8001f7c:	f7ff f982 	bl	8001284 <LL_ADC_SetCommonPathInternalCh>
 8001f80:	e01e      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x390>
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	80000004 	.word	0x80000004
 8001f88:	40012708 	.word	0x40012708
 8001f8c:	b0001000 	.word	0xb0001000
 8001f90:	20000004 	.word	0x20000004
 8001f94:	00030d40 	.word	0x00030d40
 8001f98:	b8004000 	.word	0xb8004000
 8001f9c:	b4002000 	.word	0xb4002000
 8001fa0:	ff7fffff 	.word	0xff7fffff
 8001fa4:	feffffff 	.word	0xfeffffff
 8001fa8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8001fb8:	2317      	movs	r3, #23
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2254      	movs	r2, #84	; 0x54
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001fc8:	2317      	movs	r3, #23
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	781b      	ldrb	r3, [r3, #0]
}
 8001fce:	0018      	movs	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b006      	add	sp, #24
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)

08001fd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f7ff fa53 	bl	8001490 <LL_ADC_IsEnabled>
 8001fea:	1e03      	subs	r3, r0, #0
 8001fec:	d149      	bne.n	8002082 <ADC_Enable+0xaa>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	4a25      	ldr	r2, [pc, #148]	; (800208c <ADC_Enable+0xb4>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d00d      	beq.n	8002016 <ADC_Enable+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	2210      	movs	r2, #16
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200a:	2201      	movs	r2, #1
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	65da      	str	r2, [r3, #92]	; 0x5c
      
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e036      	b.n	8002084 <ADC_Enable+0xac>
    }
    
    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	0018      	movs	r0, r3
 800201c:	f7ff fa14 	bl	8001448 <LL_ADC_Enable>
    
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7e5b      	ldrb	r3, [r3, #25]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d02c      	beq.n	8002082 <ADC_Enable+0xaa>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002028:	f7ff f900 	bl	800122c <HAL_GetTick>
 800202c:	0003      	movs	r3, r0
 800202e:	60fb      	str	r3, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002030:	e020      	b.n	8002074 <ADC_Enable+0x9c>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	0018      	movs	r0, r3
 8002038:	f7ff fa2a 	bl	8001490 <LL_ADC_IsEnabled>
 800203c:	1e03      	subs	r3, r0, #0
 800203e:	d104      	bne.n	800204a <ADC_Enable+0x72>
        {
          LL_ADC_Enable(hadc->Instance);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	0018      	movs	r0, r3
 8002046:	f7ff f9ff 	bl	8001448 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800204a:	f7ff f8ef 	bl	800122c <HAL_GetTick>
 800204e:	0002      	movs	r2, r0
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d90d      	bls.n	8002074 <ADC_Enable+0x9c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	2210      	movs	r2, #16
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	659a      	str	r2, [r3, #88]	; 0x58
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	2201      	movs	r2, #1
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	65da      	str	r2, [r3, #92]	; 0x5c
          
          return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e007      	b.n	8002084 <ADC_Enable+0xac>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2201      	movs	r2, #1
 800207c:	4013      	ands	r3, r2
 800207e:	2b01      	cmp	r3, #1
 8002080:	d1d7      	bne.n	8002032 <ADC_Enable+0x5a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	0018      	movs	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	b004      	add	sp, #16
 800208a:	bd80      	pop	{r7, pc}
 800208c:	80000017 	.word	0x80000017

08002090 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0018      	movs	r0, r3
 800209e:	f7ff fa08 	bl	80014b2 <LL_ADC_IsDisableOngoing>
 80020a2:	0003      	movs	r3, r0
 80020a4:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (   (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	0018      	movs	r0, r3
 80020ac:	f7ff f9f0 	bl	8001490 <LL_ADC_IsEnabled>
 80020b0:	1e03      	subs	r3, r0, #0
 80020b2:	d040      	beq.n	8002136 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d13d      	bne.n	8002136 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2205      	movs	r2, #5
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d10d      	bne.n	80020e4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7ff f9cd 	bl	800146c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2203      	movs	r2, #3
 80020d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
    
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020da:	f7ff f8a7 	bl	800122c <HAL_GetTick>
 80020de:	0003      	movs	r3, r0
 80020e0:	60bb      	str	r3, [r7, #8]
    
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020e2:	e022      	b.n	800212a <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	2210      	movs	r2, #16
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	2201      	movs	r2, #1
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e01b      	b.n	8002138 <ADC_Disable+0xa8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002100:	f7ff f894 	bl	800122c <HAL_GetTick>
 8002104:	0002      	movs	r2, r0
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d90d      	bls.n	800212a <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	2210      	movs	r2, #16
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211e:	2201      	movs	r2, #1
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	65da      	str	r2, [r3, #92]	; 0x5c
        
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e006      	b.n	8002138 <ADC_Disable+0xa8>
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2201      	movs	r2, #1
 8002132:	4013      	ands	r3, r2
 8002134:	d1e4      	bne.n	8002100 <ADC_Disable+0x70>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	0018      	movs	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	b004      	add	sp, #16
 800213e:	bd80      	pop	{r7, pc}

08002140 <LL_ADC_IsEnabled>:
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2201      	movs	r2, #1
 800214e:	4013      	ands	r3, r2
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <LL_ADC_IsEnabled+0x18>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <LL_ADC_IsEnabled+0x1a>
 8002158:	2300      	movs	r3, #0
}
 800215a:	0018      	movs	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	b002      	add	sp, #8
 8002160:	bd80      	pop	{r7, pc}

08002162 <LL_ADC_IsCalibrationOnGoing>:
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	0fdb      	lsrs	r3, r3, #31
 8002170:	07da      	lsls	r2, r3, #31
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	061b      	lsls	r3, r3, #24
 8002176:	429a      	cmp	r2, r3
 8002178:	d101      	bne.n	800217e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <LL_ADC_IsCalibrationOnGoing+0x1e>
 800217e:	2300      	movs	r3, #0
}
 8002180:	0018      	movs	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	b002      	add	sp, #8
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2254      	movs	r2, #84	; 0x54
 8002198:	5c9b      	ldrb	r3, [r3, r2]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_ADCEx_Calibration_Start+0x1a>
 800219e:	2302      	movs	r3, #2
 80021a0:	e06c      	b.n	800227c <HAL_ADCEx_Calibration_Start+0xf4>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2254      	movs	r2, #84	; 0x54
 80021a6:	2101      	movs	r1, #1
 80021a8:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80021aa:	2317      	movs	r3, #23
 80021ac:	18fc      	adds	r4, r7, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	0018      	movs	r0, r3
 80021b2:	f7ff ff6d 	bl	8002090 <ADC_Disable>
 80021b6:	0003      	movs	r3, r0
 80021b8:	7023      	strb	r3, [r4, #0]
  
  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	0018      	movs	r0, r3
 80021c0:	f7ff ffbe 	bl	8002140 <LL_ADC_IsEnabled>
 80021c4:	1e03      	subs	r3, r0, #0
 80021c6:	d14c      	bne.n	8002262 <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021cc:	4a2d      	ldr	r2, [pc, #180]	; (8002284 <HAL_ADCEx_Calibration_Start+0xfc>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	2202      	movs	r2, #2
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2203      	movs	r2, #3
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2103      	movs	r1, #3
 80021f0:	438a      	bics	r2, r1
 80021f2:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2180      	movs	r1, #128	; 0x80
 8002200:	0609      	lsls	r1, r1, #24
 8002202:	430a      	orrs	r2, r1
 8002204:	609a      	str	r2, [r3, #8]
    
    /* Wait for calibration completion */
    while(LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002206:	e014      	b.n	8002232 <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	3301      	adds	r3, #1
 800220c:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4a1d      	ldr	r2, [pc, #116]	; (8002288 <HAL_ADCEx_Calibration_Start+0x100>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d90d      	bls.n	8002232 <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	2212      	movs	r2, #18
 800221c:	4393      	bics	r3, r2
 800221e:	2210      	movs	r2, #16
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2254      	movs	r2, #84	; 0x54
 800222a:	2100      	movs	r1, #0
 800222c:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e024      	b.n	800227c <HAL_ADCEx_Calibration_Start+0xf4>
    while(LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0018      	movs	r0, r3
 8002238:	f7ff ff93 	bl	8002162 <LL_ADC_IsCalibrationOnGoing>
 800223c:	1e03      	subs	r3, r0, #0
 800223e:	d1e3      	bne.n	8002208 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68d9      	ldr	r1, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	430a      	orrs	r2, r1
 800224e:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002254:	2203      	movs	r2, #3
 8002256:	4393      	bics	r3, r2
 8002258:	2201      	movs	r2, #1
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	659a      	str	r2, [r3, #88]	; 0x58
 8002260:	e005      	b.n	800226e <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002266:	2210      	movs	r2, #16
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2254      	movs	r2, #84	; 0x54
 8002272:	2100      	movs	r1, #0
 8002274:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002276:	2317      	movs	r3, #23
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	781b      	ldrb	r3, [r3, #0]
}
 800227c:	0018      	movs	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	b007      	add	sp, #28
 8002282:	bd90      	pop	{r4, r7, pc}
 8002284:	fffffefd 	.word	0xfffffefd
 8002288:	0002f1ff 	.word	0x0002f1ff

0800228c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80022a4:	46c0      	nop			; (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b002      	add	sp, #8
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef* hadc)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80022b4:	46c0      	nop			; (mov r8, r8)
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b002      	add	sp, #8
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef* hadc)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80022c4:	46c0      	nop			; (mov r8, r8)
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b002      	add	sp, #8
 80022ca:	bd80      	pop	{r7, pc}

080022cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	0002      	movs	r2, r0
 80022d4:	1dfb      	adds	r3, r7, #7
 80022d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022d8:	1dfb      	adds	r3, r7, #7
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b7f      	cmp	r3, #127	; 0x7f
 80022de:	d809      	bhi.n	80022f4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e0:	1dfb      	adds	r3, r7, #7
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	001a      	movs	r2, r3
 80022e6:	231f      	movs	r3, #31
 80022e8:	401a      	ands	r2, r3
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <__NVIC_EnableIRQ+0x30>)
 80022ec:	2101      	movs	r1, #1
 80022ee:	4091      	lsls	r1, r2
 80022f0:	000a      	movs	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]
  }
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b002      	add	sp, #8
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	e000e100 	.word	0xe000e100

08002300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	0002      	movs	r2, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	1dfb      	adds	r3, r7, #7
 800230c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800230e:	1dfb      	adds	r3, r7, #7
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b7f      	cmp	r3, #127	; 0x7f
 8002314:	d828      	bhi.n	8002368 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002316:	4a2f      	ldr	r2, [pc, #188]	; (80023d4 <__NVIC_SetPriority+0xd4>)
 8002318:	1dfb      	adds	r3, r7, #7
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b25b      	sxtb	r3, r3
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	33c0      	adds	r3, #192	; 0xc0
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	589b      	ldr	r3, [r3, r2]
 8002326:	1dfa      	adds	r2, r7, #7
 8002328:	7812      	ldrb	r2, [r2, #0]
 800232a:	0011      	movs	r1, r2
 800232c:	2203      	movs	r2, #3
 800232e:	400a      	ands	r2, r1
 8002330:	00d2      	lsls	r2, r2, #3
 8002332:	21ff      	movs	r1, #255	; 0xff
 8002334:	4091      	lsls	r1, r2
 8002336:	000a      	movs	r2, r1
 8002338:	43d2      	mvns	r2, r2
 800233a:	401a      	ands	r2, r3
 800233c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	019b      	lsls	r3, r3, #6
 8002342:	22ff      	movs	r2, #255	; 0xff
 8002344:	401a      	ands	r2, r3
 8002346:	1dfb      	adds	r3, r7, #7
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	0018      	movs	r0, r3
 800234c:	2303      	movs	r3, #3
 800234e:	4003      	ands	r3, r0
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002354:	481f      	ldr	r0, [pc, #124]	; (80023d4 <__NVIC_SetPriority+0xd4>)
 8002356:	1dfb      	adds	r3, r7, #7
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	b25b      	sxtb	r3, r3
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	430a      	orrs	r2, r1
 8002360:	33c0      	adds	r3, #192	; 0xc0
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002366:	e031      	b.n	80023cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002368:	4a1b      	ldr	r2, [pc, #108]	; (80023d8 <__NVIC_SetPriority+0xd8>)
 800236a:	1dfb      	adds	r3, r7, #7
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	0019      	movs	r1, r3
 8002370:	230f      	movs	r3, #15
 8002372:	400b      	ands	r3, r1
 8002374:	3b08      	subs	r3, #8
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3306      	adds	r3, #6
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	18d3      	adds	r3, r2, r3
 800237e:	3304      	adds	r3, #4
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	1dfa      	adds	r2, r7, #7
 8002384:	7812      	ldrb	r2, [r2, #0]
 8002386:	0011      	movs	r1, r2
 8002388:	2203      	movs	r2, #3
 800238a:	400a      	ands	r2, r1
 800238c:	00d2      	lsls	r2, r2, #3
 800238e:	21ff      	movs	r1, #255	; 0xff
 8002390:	4091      	lsls	r1, r2
 8002392:	000a      	movs	r2, r1
 8002394:	43d2      	mvns	r2, r2
 8002396:	401a      	ands	r2, r3
 8002398:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	019b      	lsls	r3, r3, #6
 800239e:	22ff      	movs	r2, #255	; 0xff
 80023a0:	401a      	ands	r2, r3
 80023a2:	1dfb      	adds	r3, r7, #7
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	0018      	movs	r0, r3
 80023a8:	2303      	movs	r3, #3
 80023aa:	4003      	ands	r3, r0
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023b0:	4809      	ldr	r0, [pc, #36]	; (80023d8 <__NVIC_SetPriority+0xd8>)
 80023b2:	1dfb      	adds	r3, r7, #7
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	001c      	movs	r4, r3
 80023b8:	230f      	movs	r3, #15
 80023ba:	4023      	ands	r3, r4
 80023bc:	3b08      	subs	r3, #8
 80023be:	089b      	lsrs	r3, r3, #2
 80023c0:	430a      	orrs	r2, r1
 80023c2:	3306      	adds	r3, #6
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	18c3      	adds	r3, r0, r3
 80023c8:	3304      	adds	r3, #4
 80023ca:	601a      	str	r2, [r3, #0]
}
 80023cc:	46c0      	nop			; (mov r8, r8)
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b003      	add	sp, #12
 80023d2:	bd90      	pop	{r4, r7, pc}
 80023d4:	e000e100 	.word	0xe000e100
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	4a0c      	ldr	r2, [pc, #48]	; (800241c <SysTick_Config+0x40>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d901      	bls.n	80023f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ee:	2301      	movs	r3, #1
 80023f0:	e010      	b.n	8002414 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <SysTick_Config+0x44>)
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	3a01      	subs	r2, #1
 80023f8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fa:	2301      	movs	r3, #1
 80023fc:	425b      	negs	r3, r3
 80023fe:	2103      	movs	r1, #3
 8002400:	0018      	movs	r0, r3
 8002402:	f7ff ff7d 	bl	8002300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <SysTick_Config+0x44>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <SysTick_Config+0x44>)
 800240e:	2207      	movs	r2, #7
 8002410:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002412:	2300      	movs	r3, #0
}
 8002414:	0018      	movs	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	b002      	add	sp, #8
 800241a:	bd80      	pop	{r7, pc}
 800241c:	00ffffff 	.word	0x00ffffff
 8002420:	e000e010 	.word	0xe000e010

08002424 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	210f      	movs	r1, #15
 8002430:	187b      	adds	r3, r7, r1
 8002432:	1c02      	adds	r2, r0, #0
 8002434:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	187b      	adds	r3, r7, r1
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	b25b      	sxtb	r3, r3
 800243e:	0011      	movs	r1, r2
 8002440:	0018      	movs	r0, r3
 8002442:	f7ff ff5d 	bl	8002300 <__NVIC_SetPriority>
}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	46bd      	mov	sp, r7
 800244a:	b004      	add	sp, #16
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	0002      	movs	r2, r0
 8002456:	1dfb      	adds	r3, r7, #7
 8002458:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245a:	1dfb      	adds	r3, r7, #7
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	b25b      	sxtb	r3, r3
 8002460:	0018      	movs	r0, r3
 8002462:	f7ff ff33 	bl	80022cc <__NVIC_EnableIRQ>
}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	46bd      	mov	sp, r7
 800246a:	b002      	add	sp, #8
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	0018      	movs	r0, r3
 800247a:	f7ff ffaf 	bl	80023dc <SysTick_Config>
 800247e:	0003      	movs	r3, r0
}
 8002480:	0018      	movs	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	b002      	add	sp, #8
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002496:	e147      	b.n	8002728 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2101      	movs	r1, #1
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4091      	lsls	r1, r2
 80024a2:	000a      	movs	r2, r1
 80024a4:	4013      	ands	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d100      	bne.n	80024b0 <HAL_GPIO_Init+0x28>
 80024ae:	e138      	b.n	8002722 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x38>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b12      	cmp	r3, #18
 80024be:	d123      	bne.n	8002508 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3208      	adds	r2, #8
 80024c8:	0092      	lsls	r2, r2, #2
 80024ca:	58d3      	ldr	r3, [r2, r3]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2207      	movs	r2, #7
 80024d2:	4013      	ands	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	220f      	movs	r2, #15
 80024d8:	409a      	lsls	r2, r3
 80024da:	0013      	movs	r3, r2
 80024dc:	43da      	mvns	r2, r3
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2107      	movs	r1, #7
 80024ec:	400b      	ands	r3, r1
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	409a      	lsls	r2, r3
 80024f2:	0013      	movs	r3, r2
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	08da      	lsrs	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3208      	adds	r2, #8
 8002502:	0092      	lsls	r2, r2, #2
 8002504:	6939      	ldr	r1, [r7, #16]
 8002506:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	409a      	lsls	r2, r3
 8002516:	0013      	movs	r3, r2
 8002518:	43da      	mvns	r2, r3
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2203      	movs	r2, #3
 8002526:	401a      	ands	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	409a      	lsls	r2, r3
 800252e:	0013      	movs	r3, r2
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d00b      	beq.n	800255c <HAL_GPIO_Init+0xd4>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d007      	beq.n	800255c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002550:	2b11      	cmp	r3, #17
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b12      	cmp	r3, #18
 800255a:	d130      	bne.n	80025be <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	409a      	lsls	r2, r3
 800256a:	0013      	movs	r3, r2
 800256c:	43da      	mvns	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	409a      	lsls	r2, r3
 800257e:	0013      	movs	r3, r2
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002592:	2201      	movs	r2, #1
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	409a      	lsls	r2, r3
 8002598:	0013      	movs	r3, r2
 800259a:	43da      	mvns	r2, r3
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	2201      	movs	r2, #1
 80025aa:	401a      	ands	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	409a      	lsls	r2, r3
 80025b0:	0013      	movs	r3, r2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	2203      	movs	r2, #3
 80025ca:	409a      	lsls	r2, r3
 80025cc:	0013      	movs	r3, r2
 80025ce:	43da      	mvns	r2, r3
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	409a      	lsls	r2, r3
 80025e0:	0013      	movs	r3, r2
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	055b      	lsls	r3, r3, #21
 80025f6:	4013      	ands	r3, r2
 80025f8:	d100      	bne.n	80025fc <HAL_GPIO_Init+0x174>
 80025fa:	e092      	b.n	8002722 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80025fc:	4a50      	ldr	r2, [pc, #320]	; (8002740 <HAL_GPIO_Init+0x2b8>)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3318      	adds	r3, #24
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	589b      	ldr	r3, [r3, r2]
 8002608:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2203      	movs	r2, #3
 800260e:	4013      	ands	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	220f      	movs	r2, #15
 8002614:	409a      	lsls	r2, r3
 8002616:	0013      	movs	r3, r2
 8002618:	43da      	mvns	r2, r3
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	23a0      	movs	r3, #160	; 0xa0
 8002624:	05db      	lsls	r3, r3, #23
 8002626:	429a      	cmp	r2, r3
 8002628:	d013      	beq.n	8002652 <HAL_GPIO_Init+0x1ca>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a45      	ldr	r2, [pc, #276]	; (8002744 <HAL_GPIO_Init+0x2bc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00d      	beq.n	800264e <HAL_GPIO_Init+0x1c6>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a44      	ldr	r2, [pc, #272]	; (8002748 <HAL_GPIO_Init+0x2c0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d007      	beq.n	800264a <HAL_GPIO_Init+0x1c2>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a43      	ldr	r2, [pc, #268]	; (800274c <HAL_GPIO_Init+0x2c4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d101      	bne.n	8002646 <HAL_GPIO_Init+0x1be>
 8002642:	2303      	movs	r3, #3
 8002644:	e006      	b.n	8002654 <HAL_GPIO_Init+0x1cc>
 8002646:	2305      	movs	r3, #5
 8002648:	e004      	b.n	8002654 <HAL_GPIO_Init+0x1cc>
 800264a:	2302      	movs	r3, #2
 800264c:	e002      	b.n	8002654 <HAL_GPIO_Init+0x1cc>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <HAL_GPIO_Init+0x1cc>
 8002652:	2300      	movs	r3, #0
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	2103      	movs	r1, #3
 8002658:	400a      	ands	r2, r1
 800265a:	00d2      	lsls	r2, r2, #3
 800265c:	4093      	lsls	r3, r2
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002664:	4936      	ldr	r1, [pc, #216]	; (8002740 <HAL_GPIO_Init+0x2b8>)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	089b      	lsrs	r3, r3, #2
 800266a:	3318      	adds	r3, #24
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002672:	4a33      	ldr	r2, [pc, #204]	; (8002740 <HAL_GPIO_Init+0x2b8>)
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	58d3      	ldr	r3, [r2, r3]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	43da      	mvns	r2, r3
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	025b      	lsls	r3, r3, #9
 800268c:	4013      	ands	r3, r2
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002698:	4929      	ldr	r1, [pc, #164]	; (8002740 <HAL_GPIO_Init+0x2b8>)
 800269a:	2280      	movs	r2, #128	; 0x80
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80026a0:	4a27      	ldr	r2, [pc, #156]	; (8002740 <HAL_GPIO_Init+0x2b8>)
 80026a2:	2384      	movs	r3, #132	; 0x84
 80026a4:	58d3      	ldr	r3, [r2, r3]
 80026a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	43da      	mvns	r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	029b      	lsls	r3, r3, #10
 80026ba:	4013      	ands	r3, r2
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026c6:	491e      	ldr	r1, [pc, #120]	; (8002740 <HAL_GPIO_Init+0x2b8>)
 80026c8:	2284      	movs	r2, #132	; 0x84
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <HAL_GPIO_Init+0x2b8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	43da      	mvns	r2, r3
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4013      	ands	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	035b      	lsls	r3, r3, #13
 80026e6:	4013      	ands	r3, r2
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <HAL_GPIO_Init+0x2b8>)
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80026f8:	4b11      	ldr	r3, [pc, #68]	; (8002740 <HAL_GPIO_Init+0x2b8>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	43da      	mvns	r2, r3
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4013      	ands	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	039b      	lsls	r3, r3, #14
 8002710:	4013      	ands	r3, r2
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <HAL_GPIO_Init+0x2b8>)
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3301      	adds	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	40da      	lsrs	r2, r3
 8002730:	1e13      	subs	r3, r2, #0
 8002732:	d000      	beq.n	8002736 <HAL_GPIO_Init+0x2ae>
 8002734:	e6b0      	b.n	8002498 <HAL_GPIO_Init+0x10>
  }
}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	46bd      	mov	sp, r7
 800273a:	b006      	add	sp, #24
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	40021800 	.word	0x40021800
 8002744:	50000400 	.word	0x50000400
 8002748:	50000800 	.word	0x50000800
 800274c:	50000c00 	.word	0x50000c00

08002750 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	000a      	movs	r2, r1
 800275a:	1cbb      	adds	r3, r7, #2
 800275c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	1cba      	adds	r2, r7, #2
 8002764:	8812      	ldrh	r2, [r2, #0]
 8002766:	4013      	ands	r3, r2
 8002768:	d004      	beq.n	8002774 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800276a:	230f      	movs	r3, #15
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	e003      	b.n	800277c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002774:	230f      	movs	r3, #15
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800277c:	230f      	movs	r3, #15
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	781b      	ldrb	r3, [r3, #0]
}
 8002782:	0018      	movs	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	b004      	add	sp, #16
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	0008      	movs	r0, r1
 8002794:	0011      	movs	r1, r2
 8002796:	1cbb      	adds	r3, r7, #2
 8002798:	1c02      	adds	r2, r0, #0
 800279a:	801a      	strh	r2, [r3, #0]
 800279c:	1c7b      	adds	r3, r7, #1
 800279e:	1c0a      	adds	r2, r1, #0
 80027a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027a2:	1c7b      	adds	r3, r7, #1
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d004      	beq.n	80027b4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027aa:	1cbb      	adds	r3, r7, #2
 80027ac:	881a      	ldrh	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027b2:	e003      	b.n	80027bc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027b4:	1cbb      	adds	r3, r7, #2
 80027b6:	881a      	ldrh	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027bc:	46c0      	nop			; (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	b002      	add	sp, #8
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e082      	b.n	80028dc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2241      	movs	r2, #65	; 0x41
 80027da:	5c9b      	ldrb	r3, [r3, r2]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d107      	bne.n	80027f2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2240      	movs	r2, #64	; 0x40
 80027e6:	2100      	movs	r1, #0
 80027e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f7fe fb03 	bl	8000df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2241      	movs	r2, #65	; 0x41
 80027f6:	2124      	movs	r1, #36	; 0x24
 80027f8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	438a      	bics	r2, r1
 8002808:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4934      	ldr	r1, [pc, #208]	; (80028e4 <HAL_I2C_Init+0x120>)
 8002814:	400a      	ands	r2, r1
 8002816:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4931      	ldr	r1, [pc, #196]	; (80028e8 <HAL_I2C_Init+0x124>)
 8002824:	400a      	ands	r2, r1
 8002826:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d108      	bne.n	8002842 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2180      	movs	r1, #128	; 0x80
 800283a:	0209      	lsls	r1, r1, #8
 800283c:	430a      	orrs	r2, r1
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	e007      	b.n	8002852 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2184      	movs	r1, #132	; 0x84
 800284c:	0209      	lsls	r1, r1, #8
 800284e:	430a      	orrs	r2, r1
 8002850:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d104      	bne.n	8002864 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2280      	movs	r2, #128	; 0x80
 8002860:	0112      	lsls	r2, r2, #4
 8002862:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	491f      	ldr	r1, [pc, #124]	; (80028ec <HAL_I2C_Init+0x128>)
 8002870:	430a      	orrs	r2, r1
 8002872:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	491a      	ldr	r1, [pc, #104]	; (80028e8 <HAL_I2C_Init+0x124>)
 8002880:	400a      	ands	r2, r1
 8002882:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	431a      	orrs	r2, r3
 800288e:	0011      	movs	r1, r2
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	021a      	lsls	r2, r3, #8
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69d9      	ldr	r1, [r3, #28]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1a      	ldr	r2, [r3, #32]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2101      	movs	r1, #1
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2241      	movs	r2, #65	; 0x41
 80028c8:	2120      	movs	r1, #32
 80028ca:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2242      	movs	r2, #66	; 0x42
 80028d6:	2100      	movs	r1, #0
 80028d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	0018      	movs	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	b002      	add	sp, #8
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	f0ffffff 	.word	0xf0ffffff
 80028e8:	ffff7fff 	.word	0xffff7fff
 80028ec:	02008000 	.word	0x02008000

080028f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2241      	movs	r2, #65	; 0x41
 80028fe:	5c9b      	ldrb	r3, [r3, r2]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b20      	cmp	r3, #32
 8002904:	d138      	bne.n	8002978 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2240      	movs	r2, #64	; 0x40
 800290a:	5c9b      	ldrb	r3, [r3, r2]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002910:	2302      	movs	r3, #2
 8002912:	e032      	b.n	800297a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2240      	movs	r2, #64	; 0x40
 8002918:	2101      	movs	r1, #1
 800291a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2241      	movs	r2, #65	; 0x41
 8002920:	2124      	movs	r1, #36	; 0x24
 8002922:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2101      	movs	r1, #1
 8002930:	438a      	bics	r2, r1
 8002932:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4911      	ldr	r1, [pc, #68]	; (8002984 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002940:	400a      	ands	r2, r1
 8002942:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6819      	ldr	r1, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2101      	movs	r1, #1
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2241      	movs	r2, #65	; 0x41
 8002968:	2120      	movs	r1, #32
 800296a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2240      	movs	r2, #64	; 0x40
 8002970:	2100      	movs	r1, #0
 8002972:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	e000      	b.n	800297a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002978:	2302      	movs	r3, #2
  }
}
 800297a:	0018      	movs	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	b002      	add	sp, #8
 8002980:	bd80      	pop	{r7, pc}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	ffffefff 	.word	0xffffefff

08002988 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2241      	movs	r2, #65	; 0x41
 8002996:	5c9b      	ldrb	r3, [r3, r2]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b20      	cmp	r3, #32
 800299c:	d139      	bne.n	8002a12 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2240      	movs	r2, #64	; 0x40
 80029a2:	5c9b      	ldrb	r3, [r3, r2]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e033      	b.n	8002a14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2240      	movs	r2, #64	; 0x40
 80029b0:	2101      	movs	r1, #1
 80029b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2241      	movs	r2, #65	; 0x41
 80029b8:	2124      	movs	r1, #36	; 0x24
 80029ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2101      	movs	r1, #1
 80029c8:	438a      	bics	r2, r1
 80029ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a11      	ldr	r2, [pc, #68]	; (8002a1c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80029d8:	4013      	ands	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	021b      	lsls	r3, r3, #8
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2101      	movs	r1, #1
 80029fa:	430a      	orrs	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2241      	movs	r2, #65	; 0x41
 8002a02:	2120      	movs	r1, #32
 8002a04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2240      	movs	r2, #64	; 0x40
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e000      	b.n	8002a14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a12:	2302      	movs	r3, #2
  }
}
 8002a14:	0018      	movs	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b004      	add	sp, #16
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	fffff0ff 	.word	0xfffff0ff

08002a20 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C2 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C2 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <HAL_I2CEx_EnableFastModePlus+0x34>)
 8002a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a2c:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_I2CEx_EnableFastModePlus+0x34>)
 8002a2e:	2101      	movs	r1, #1
 8002a30:	430a      	orrs	r2, r1
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <HAL_I2CEx_EnableFastModePlus+0x34>)
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	2201      	movs	r2, #1
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002a42:	6819      	ldr	r1, [r3, #0]
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b004      	add	sp, #16
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40010000 	.word	0x40010000

08002a5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a19      	ldr	r2, [pc, #100]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	4b17      	ldr	r3, [pc, #92]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d11f      	bne.n	8002ac0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	0013      	movs	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	189b      	adds	r3, r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4912      	ldr	r1, [pc, #72]	; (8002ad8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f7fd fb38 	bl	8000104 <__udivsi3>
 8002a94:	0003      	movs	r3, r0
 8002a96:	3301      	adds	r3, #1
 8002a98:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a9a:	e008      	b.n	8002aae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	e001      	b.n	8002aae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e009      	b.n	8002ac2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aae:	4b07      	ldr	r3, [pc, #28]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d0ed      	beq.n	8002a9c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b004      	add	sp, #16
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	40007000 	.word	0x40007000
 8002ad0:	fffff9ff 	.word	0xfffff9ff
 8002ad4:	20000004 	.word	0x20000004
 8002ad8:	000f4240 	.word	0x000f4240

08002adc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002ae0:	4b03      	ldr	r3, [pc, #12]	; (8002af0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	23e0      	movs	r3, #224	; 0xe0
 8002ae6:	01db      	lsls	r3, r3, #7
 8002ae8:	4013      	ands	r3, r2
}
 8002aea:	0018      	movs	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000

08002af4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e304      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d100      	bne.n	8002b12 <HAL_RCC_OscConfig+0x1e>
 8002b10:	e07c      	b.n	8002c0c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b12:	4bc3      	ldr	r3, [pc, #780]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2238      	movs	r2, #56	; 0x38
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b1c:	4bc0      	ldr	r3, [pc, #768]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2203      	movs	r2, #3
 8002b22:	4013      	ands	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2b10      	cmp	r3, #16
 8002b2a:	d102      	bne.n	8002b32 <HAL_RCC_OscConfig+0x3e>
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d002      	beq.n	8002b38 <HAL_RCC_OscConfig+0x44>
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d10b      	bne.n	8002b50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b38:	4bb9      	ldr	r3, [pc, #740]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	029b      	lsls	r3, r3, #10
 8002b40:	4013      	ands	r3, r2
 8002b42:	d062      	beq.n	8002c0a <HAL_RCC_OscConfig+0x116>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d15e      	bne.n	8002c0a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e2df      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	025b      	lsls	r3, r3, #9
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d107      	bne.n	8002b6c <HAL_RCC_OscConfig+0x78>
 8002b5c:	4bb0      	ldr	r3, [pc, #704]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4baf      	ldr	r3, [pc, #700]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002b62:	2180      	movs	r1, #128	; 0x80
 8002b64:	0249      	lsls	r1, r1, #9
 8002b66:	430a      	orrs	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e020      	b.n	8002bae <HAL_RCC_OscConfig+0xba>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	23a0      	movs	r3, #160	; 0xa0
 8002b72:	02db      	lsls	r3, r3, #11
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d10e      	bne.n	8002b96 <HAL_RCC_OscConfig+0xa2>
 8002b78:	4ba9      	ldr	r3, [pc, #676]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4ba8      	ldr	r3, [pc, #672]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002b7e:	2180      	movs	r1, #128	; 0x80
 8002b80:	02c9      	lsls	r1, r1, #11
 8002b82:	430a      	orrs	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	4ba6      	ldr	r3, [pc, #664]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4ba5      	ldr	r3, [pc, #660]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002b8c:	2180      	movs	r1, #128	; 0x80
 8002b8e:	0249      	lsls	r1, r1, #9
 8002b90:	430a      	orrs	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	e00b      	b.n	8002bae <HAL_RCC_OscConfig+0xba>
 8002b96:	4ba2      	ldr	r3, [pc, #648]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	4ba1      	ldr	r3, [pc, #644]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002b9c:	49a1      	ldr	r1, [pc, #644]	; (8002e24 <HAL_RCC_OscConfig+0x330>)
 8002b9e:	400a      	ands	r2, r1
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	4b9f      	ldr	r3, [pc, #636]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	4b9e      	ldr	r3, [pc, #632]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002ba8:	499f      	ldr	r1, [pc, #636]	; (8002e28 <HAL_RCC_OscConfig+0x334>)
 8002baa:	400a      	ands	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d014      	beq.n	8002be0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb6:	f7fe fb39 	bl	800122c <HAL_GetTick>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7fe fb34 	bl	800122c <HAL_GetTick>
 8002bc4:	0002      	movs	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	; 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e29e      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bd2:	4b93      	ldr	r3, [pc, #588]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	029b      	lsls	r3, r3, #10
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0xcc>
 8002bde:	e015      	b.n	8002c0c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe fb24 	bl	800122c <HAL_GetTick>
 8002be4:	0003      	movs	r3, r0
 8002be6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bea:	f7fe fb1f 	bl	800122c <HAL_GetTick>
 8002bee:	0002      	movs	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b64      	cmp	r3, #100	; 0x64
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e289      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bfc:	4b88      	ldr	r3, [pc, #544]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	029b      	lsls	r3, r3, #10
 8002c04:	4013      	ands	r3, r2
 8002c06:	d1f0      	bne.n	8002bea <HAL_RCC_OscConfig+0xf6>
 8002c08:	e000      	b.n	8002c0c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2202      	movs	r2, #2
 8002c12:	4013      	ands	r3, r2
 8002c14:	d100      	bne.n	8002c18 <HAL_RCC_OscConfig+0x124>
 8002c16:	e099      	b.n	8002d4c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c18:	4b81      	ldr	r3, [pc, #516]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2238      	movs	r2, #56	; 0x38
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c22:	4b7f      	ldr	r3, [pc, #508]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2203      	movs	r2, #3
 8002c28:	4013      	ands	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	2b10      	cmp	r3, #16
 8002c30:	d102      	bne.n	8002c38 <HAL_RCC_OscConfig+0x144>
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d002      	beq.n	8002c3e <HAL_RCC_OscConfig+0x14a>
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d135      	bne.n	8002caa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c3e:	4b78      	ldr	r3, [pc, #480]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4013      	ands	r3, r2
 8002c48:	d005      	beq.n	8002c56 <HAL_RCC_OscConfig+0x162>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e25c      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c56:	4b72      	ldr	r3, [pc, #456]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4a74      	ldr	r2, [pc, #464]	; (8002e2c <HAL_RCC_OscConfig+0x338>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	0019      	movs	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	021a      	lsls	r2, r3, #8
 8002c66:	4b6e      	ldr	r3, [pc, #440]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d112      	bne.n	8002c98 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002c72:	4b6b      	ldr	r3, [pc, #428]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a6e      	ldr	r2, [pc, #440]	; (8002e30 <HAL_RCC_OscConfig+0x33c>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	4b67      	ldr	r3, [pc, #412]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002c82:	430a      	orrs	r2, r1
 8002c84:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002c86:	4b66      	ldr	r3, [pc, #408]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	0adb      	lsrs	r3, r3, #11
 8002c8c:	2207      	movs	r2, #7
 8002c8e:	4013      	ands	r3, r2
 8002c90:	4a68      	ldr	r2, [pc, #416]	; (8002e34 <HAL_RCC_OscConfig+0x340>)
 8002c92:	40da      	lsrs	r2, r3
 8002c94:	4b68      	ldr	r3, [pc, #416]	; (8002e38 <HAL_RCC_OscConfig+0x344>)
 8002c96:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c98:	4b68      	ldr	r3, [pc, #416]	; (8002e3c <HAL_RCC_OscConfig+0x348>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7fe fa6b 	bl	8001178 <HAL_InitTick>
 8002ca2:	1e03      	subs	r3, r0, #0
 8002ca4:	d051      	beq.n	8002d4a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e232      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d030      	beq.n	8002d14 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002cb2:	4b5b      	ldr	r3, [pc, #364]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a5e      	ldr	r2, [pc, #376]	; (8002e30 <HAL_RCC_OscConfig+0x33c>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	0019      	movs	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	4b57      	ldr	r3, [pc, #348]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002cc6:	4b56      	ldr	r3, [pc, #344]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	4b55      	ldr	r3, [pc, #340]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002ccc:	2180      	movs	r1, #128	; 0x80
 8002cce:	0049      	lsls	r1, r1, #1
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe faaa 	bl	800122c <HAL_GetTick>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cde:	f7fe faa5 	bl	800122c <HAL_GetTick>
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e20f      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf0:	4b4b      	ldr	r3, [pc, #300]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfc:	4b48      	ldr	r3, [pc, #288]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4a4a      	ldr	r2, [pc, #296]	; (8002e2c <HAL_RCC_OscConfig+0x338>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	0019      	movs	r1, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	021a      	lsls	r2, r3, #8
 8002d0c:	4b44      	ldr	r3, [pc, #272]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	e01b      	b.n	8002d4c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002d14:	4b42      	ldr	r3, [pc, #264]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b41      	ldr	r3, [pc, #260]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002d1a:	4949      	ldr	r1, [pc, #292]	; (8002e40 <HAL_RCC_OscConfig+0x34c>)
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe fa84 	bl	800122c <HAL_GetTick>
 8002d24:	0003      	movs	r3, r0
 8002d26:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2a:	f7fe fa7f 	bl	800122c <HAL_GetTick>
 8002d2e:	0002      	movs	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e1e9      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d3c:	4b38      	ldr	r3, [pc, #224]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4013      	ands	r3, r2
 8002d46:	d1f0      	bne.n	8002d2a <HAL_RCC_OscConfig+0x236>
 8002d48:	e000      	b.n	8002d4c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2208      	movs	r2, #8
 8002d52:	4013      	ands	r3, r2
 8002d54:	d047      	beq.n	8002de6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002d56:	4b32      	ldr	r3, [pc, #200]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2238      	movs	r2, #56	; 0x38
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b18      	cmp	r3, #24
 8002d60:	d10a      	bne.n	8002d78 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002d62:	4b2f      	ldr	r3, [pc, #188]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d66:	2202      	movs	r2, #2
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d03c      	beq.n	8002de6 <HAL_RCC_OscConfig+0x2f2>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d138      	bne.n	8002de6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e1cb      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d019      	beq.n	8002db4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002d80:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002d82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d84:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002d86:	2101      	movs	r1, #1
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fa4e 	bl	800122c <HAL_GetTick>
 8002d90:	0003      	movs	r3, r0
 8002d92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d96:	f7fe fa49 	bl	800122c <HAL_GetTick>
 8002d9a:	0002      	movs	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e1b3      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002da8:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dac:	2202      	movs	r2, #2
 8002dae:	4013      	ands	r3, r2
 8002db0:	d0f1      	beq.n	8002d96 <HAL_RCC_OscConfig+0x2a2>
 8002db2:	e018      	b.n	8002de6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002db4:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002db6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002db8:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002dba:	2101      	movs	r1, #1
 8002dbc:	438a      	bics	r2, r1
 8002dbe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fa34 	bl	800122c <HAL_GetTick>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dca:	f7fe fa2f 	bl	800122c <HAL_GetTick>
 8002dce:	0002      	movs	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e199      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ddc:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de0:	2202      	movs	r2, #2
 8002de2:	4013      	ands	r3, r2
 8002de4:	d1f1      	bne.n	8002dca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2204      	movs	r2, #4
 8002dec:	4013      	ands	r3, r2
 8002dee:	d100      	bne.n	8002df2 <HAL_RCC_OscConfig+0x2fe>
 8002df0:	e0c6      	b.n	8002f80 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df2:	231f      	movs	r3, #31
 8002df4:	18fb      	adds	r3, r7, r3
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002dfa:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2238      	movs	r2, #56	; 0x38
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	d11e      	bne.n	8002e44 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_RCC_OscConfig+0x32c>)
 8002e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d100      	bne.n	8002e12 <HAL_RCC_OscConfig+0x31e>
 8002e10:	e0b6      	b.n	8002f80 <HAL_RCC_OscConfig+0x48c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d000      	beq.n	8002e1c <HAL_RCC_OscConfig+0x328>
 8002e1a:	e0b1      	b.n	8002f80 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e177      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>
 8002e20:	40021000 	.word	0x40021000
 8002e24:	fffeffff 	.word	0xfffeffff
 8002e28:	fffbffff 	.word	0xfffbffff
 8002e2c:	ffff80ff 	.word	0xffff80ff
 8002e30:	ffffc7ff 	.word	0xffffc7ff
 8002e34:	00f42400 	.word	0x00f42400
 8002e38:	20000004 	.word	0x20000004
 8002e3c:	20000008 	.word	0x20000008
 8002e40:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e44:	4bb4      	ldr	r3, [pc, #720]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	055b      	lsls	r3, r3, #21
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_OscConfig+0x360>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <HAL_RCC_OscConfig+0x362>
 8002e54:	2300      	movs	r3, #0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d011      	beq.n	8002e7e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	4baf      	ldr	r3, [pc, #700]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002e5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e5e:	4bae      	ldr	r3, [pc, #696]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	0549      	lsls	r1, r1, #21
 8002e64:	430a      	orrs	r2, r1
 8002e66:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e68:	4bab      	ldr	r3, [pc, #684]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	055b      	lsls	r3, r3, #21
 8002e70:	4013      	ands	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002e76:	231f      	movs	r3, #31
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e7e:	4ba7      	ldr	r3, [pc, #668]	; (800311c <HAL_RCC_OscConfig+0x628>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4013      	ands	r3, r2
 8002e88:	d11a      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e8a:	4ba4      	ldr	r3, [pc, #656]	; (800311c <HAL_RCC_OscConfig+0x628>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4ba3      	ldr	r3, [pc, #652]	; (800311c <HAL_RCC_OscConfig+0x628>)
 8002e90:	2180      	movs	r1, #128	; 0x80
 8002e92:	0049      	lsls	r1, r1, #1
 8002e94:	430a      	orrs	r2, r1
 8002e96:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002e98:	f7fe f9c8 	bl	800122c <HAL_GetTick>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea2:	f7fe f9c3 	bl	800122c <HAL_GetTick>
 8002ea6:	0002      	movs	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e12d      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb4:	4b99      	ldr	r3, [pc, #612]	; (800311c <HAL_RCC_OscConfig+0x628>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x3e2>
 8002ec8:	4b93      	ldr	r3, [pc, #588]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002eca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ecc:	4b92      	ldr	r3, [pc, #584]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002ece:	2101      	movs	r1, #1
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ed4:	e01c      	b.n	8002f10 <HAL_RCC_OscConfig+0x41c>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b05      	cmp	r3, #5
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x404>
 8002ede:	4b8e      	ldr	r3, [pc, #568]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002ee0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ee2:	4b8d      	ldr	r3, [pc, #564]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002ee4:	2104      	movs	r1, #4
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002eea:	4b8b      	ldr	r3, [pc, #556]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002eec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002eee:	4b8a      	ldr	r3, [pc, #552]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ef6:	e00b      	b.n	8002f10 <HAL_RCC_OscConfig+0x41c>
 8002ef8:	4b87      	ldr	r3, [pc, #540]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002efa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002efc:	4b86      	ldr	r3, [pc, #536]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002efe:	2101      	movs	r1, #1
 8002f00:	438a      	bics	r2, r1
 8002f02:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f04:	4b84      	ldr	r3, [pc, #528]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002f06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f08:	4b83      	ldr	r3, [pc, #524]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002f0a:	2104      	movs	r1, #4
 8002f0c:	438a      	bics	r2, r1
 8002f0e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d014      	beq.n	8002f42 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fe f988 	bl	800122c <HAL_GetTick>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f20:	e009      	b.n	8002f36 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7fe f983 	bl	800122c <HAL_GetTick>
 8002f26:	0002      	movs	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	4a7c      	ldr	r2, [pc, #496]	; (8003120 <HAL_RCC_OscConfig+0x62c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e0ec      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f36:	4b78      	ldr	r3, [pc, #480]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0x42e>
 8002f40:	e013      	b.n	8002f6a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f42:	f7fe f973 	bl	800122c <HAL_GetTick>
 8002f46:	0003      	movs	r3, r0
 8002f48:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f4a:	e009      	b.n	8002f60 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fe f96e 	bl	800122c <HAL_GetTick>
 8002f50:	0002      	movs	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	4a72      	ldr	r2, [pc, #456]	; (8003120 <HAL_RCC_OscConfig+0x62c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e0d7      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f60:	4b6d      	ldr	r3, [pc, #436]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f64:	2202      	movs	r2, #2
 8002f66:	4013      	ands	r3, r2
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002f6a:	231f      	movs	r3, #31
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002f74:	4b68      	ldr	r3, [pc, #416]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f78:	4b67      	ldr	r3, [pc, #412]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002f7a:	496a      	ldr	r1, [pc, #424]	; (8003124 <HAL_RCC_OscConfig+0x630>)
 8002f7c:	400a      	ands	r2, r1
 8002f7e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d100      	bne.n	8002f8a <HAL_RCC_OscConfig+0x496>
 8002f88:	e0c1      	b.n	800310e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f8a:	4b63      	ldr	r3, [pc, #396]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2238      	movs	r2, #56	; 0x38
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b10      	cmp	r3, #16
 8002f94:	d100      	bne.n	8002f98 <HAL_RCC_OscConfig+0x4a4>
 8002f96:	e081      	b.n	800309c <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d156      	bne.n	800304e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa0:	4b5d      	ldr	r3, [pc, #372]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4b5c      	ldr	r3, [pc, #368]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002fa6:	4960      	ldr	r1, [pc, #384]	; (8003128 <HAL_RCC_OscConfig+0x634>)
 8002fa8:	400a      	ands	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe f93e 	bl	800122c <HAL_GetTick>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb6:	f7fe f939 	bl	800122c <HAL_GetTick>
 8002fba:	0002      	movs	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e0a3      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc8:	4b53      	ldr	r3, [pc, #332]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	049b      	lsls	r3, r3, #18
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d1f0      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd4:	4b50      	ldr	r3, [pc, #320]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	4a54      	ldr	r2, [pc, #336]	; (800312c <HAL_RCC_OscConfig+0x638>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	0019      	movs	r1, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1a      	ldr	r2, [r3, #32]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003000:	431a      	orrs	r2, r3
 8003002:	4b45      	ldr	r3, [pc, #276]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8003004:	430a      	orrs	r2, r1
 8003006:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003008:	4b43      	ldr	r3, [pc, #268]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4b42      	ldr	r3, [pc, #264]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 800300e:	2180      	movs	r1, #128	; 0x80
 8003010:	0449      	lsls	r1, r1, #17
 8003012:	430a      	orrs	r2, r1
 8003014:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003016:	4b40      	ldr	r3, [pc, #256]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	4b3f      	ldr	r3, [pc, #252]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 800301c:	2180      	movs	r1, #128	; 0x80
 800301e:	0549      	lsls	r1, r1, #21
 8003020:	430a      	orrs	r2, r1
 8003022:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fe f902 	bl	800122c <HAL_GetTick>
 8003028:	0003      	movs	r3, r0
 800302a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302e:	f7fe f8fd 	bl	800122c <HAL_GetTick>
 8003032:	0002      	movs	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e067      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003040:	4b35      	ldr	r3, [pc, #212]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	049b      	lsls	r3, r3, #18
 8003048:	4013      	ands	r3, r2
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x53a>
 800304c:	e05f      	b.n	800310e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	4b32      	ldr	r3, [pc, #200]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	4b31      	ldr	r3, [pc, #196]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8003054:	4934      	ldr	r1, [pc, #208]	; (8003128 <HAL_RCC_OscConfig+0x634>)
 8003056:	400a      	ands	r2, r1
 8003058:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800305a:	4b2f      	ldr	r3, [pc, #188]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	4b2e      	ldr	r3, [pc, #184]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8003060:	2103      	movs	r1, #3
 8003062:	438a      	bics	r2, r1
 8003064:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003066:	4b2c      	ldr	r3, [pc, #176]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	4b2b      	ldr	r3, [pc, #172]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 800306c:	4930      	ldr	r1, [pc, #192]	; (8003130 <HAL_RCC_OscConfig+0x63c>)
 800306e:	400a      	ands	r2, r1
 8003070:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7fe f8db 	bl	800122c <HAL_GetTick>
 8003076:	0003      	movs	r3, r0
 8003078:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307c:	f7fe f8d6 	bl	800122c <HAL_GetTick>
 8003080:	0002      	movs	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e040      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800308e:	4b22      	ldr	r3, [pc, #136]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	049b      	lsls	r3, r3, #18
 8003096:	4013      	ands	r3, r2
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x588>
 800309a:	e038      	b.n	800310e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e033      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80030a8:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <HAL_RCC_OscConfig+0x624>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2203      	movs	r2, #3
 80030b2:	401a      	ands	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d126      	bne.n	800310a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2270      	movs	r2, #112	; 0x70
 80030c0:	401a      	ands	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d11f      	bne.n	800310a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	23fe      	movs	r3, #254	; 0xfe
 80030ce:	01db      	lsls	r3, r3, #7
 80030d0:	401a      	ands	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d116      	bne.n	800310a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	23f8      	movs	r3, #248	; 0xf8
 80030e0:	039b      	lsls	r3, r3, #14
 80030e2:	401a      	ands	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d10e      	bne.n	800310a <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	23e0      	movs	r3, #224	; 0xe0
 80030f0:	051b      	lsls	r3, r3, #20
 80030f2:	401a      	ands	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d106      	bne.n	800310a <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	0f5b      	lsrs	r3, r3, #29
 8003100:	075a      	lsls	r2, r3, #29
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003106:	429a      	cmp	r2, r3
 8003108:	d001      	beq.n	800310e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	0018      	movs	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	b008      	add	sp, #32
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000
 800311c:	40007000 	.word	0x40007000
 8003120:	00001388 	.word	0x00001388
 8003124:	efffffff 	.word	0xefffffff
 8003128:	feffffff 	.word	0xfeffffff
 800312c:	11c1808c 	.word	0x11c1808c
 8003130:	eefeffff 	.word	0xeefeffff

08003134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0e9      	b.n	800331c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003148:	4b76      	ldr	r3, [pc, #472]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2207      	movs	r2, #7
 800314e:	4013      	ands	r3, r2
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d91e      	bls.n	8003194 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	4b73      	ldr	r3, [pc, #460]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2207      	movs	r2, #7
 800315c:	4393      	bics	r3, r2
 800315e:	0019      	movs	r1, r3
 8003160:	4b70      	ldr	r3, [pc, #448]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003168:	f7fe f860 	bl	800122c <HAL_GetTick>
 800316c:	0003      	movs	r3, r0
 800316e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003170:	e009      	b.n	8003186 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003172:	f7fe f85b 	bl	800122c <HAL_GetTick>
 8003176:	0002      	movs	r2, r0
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	4a6a      	ldr	r2, [pc, #424]	; (8003328 <HAL_RCC_ClockConfig+0x1f4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e0ca      	b.n	800331c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003186:	4b67      	ldr	r3, [pc, #412]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2207      	movs	r2, #7
 800318c:	4013      	ands	r3, r2
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d1ee      	bne.n	8003172 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2202      	movs	r2, #2
 800319a:	4013      	ands	r3, r2
 800319c:	d015      	beq.n	80031ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2204      	movs	r2, #4
 80031a4:	4013      	ands	r3, r2
 80031a6:	d006      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80031a8:	4b60      	ldr	r3, [pc, #384]	; (800332c <HAL_RCC_ClockConfig+0x1f8>)
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	4b5f      	ldr	r3, [pc, #380]	; (800332c <HAL_RCC_ClockConfig+0x1f8>)
 80031ae:	21e0      	movs	r1, #224	; 0xe0
 80031b0:	01c9      	lsls	r1, r1, #7
 80031b2:	430a      	orrs	r2, r1
 80031b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b6:	4b5d      	ldr	r3, [pc, #372]	; (800332c <HAL_RCC_ClockConfig+0x1f8>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	4a5d      	ldr	r2, [pc, #372]	; (8003330 <HAL_RCC_ClockConfig+0x1fc>)
 80031bc:	4013      	ands	r3, r2
 80031be:	0019      	movs	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	4b59      	ldr	r3, [pc, #356]	; (800332c <HAL_RCC_ClockConfig+0x1f8>)
 80031c6:	430a      	orrs	r2, r1
 80031c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2201      	movs	r2, #1
 80031d0:	4013      	ands	r3, r2
 80031d2:	d057      	beq.n	8003284 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d107      	bne.n	80031ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031dc:	4b53      	ldr	r3, [pc, #332]	; (800332c <HAL_RCC_ClockConfig+0x1f8>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	2380      	movs	r3, #128	; 0x80
 80031e2:	029b      	lsls	r3, r3, #10
 80031e4:	4013      	ands	r3, r2
 80031e6:	d12b      	bne.n	8003240 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e097      	b.n	800331c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d107      	bne.n	8003204 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f4:	4b4d      	ldr	r3, [pc, #308]	; (800332c <HAL_RCC_ClockConfig+0x1f8>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	049b      	lsls	r3, r3, #18
 80031fc:	4013      	ands	r3, r2
 80031fe:	d11f      	bne.n	8003240 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e08b      	b.n	800331c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d107      	bne.n	800321c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800320c:	4b47      	ldr	r3, [pc, #284]	; (800332c <HAL_RCC_ClockConfig+0x1f8>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4013      	ands	r3, r2
 8003216:	d113      	bne.n	8003240 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e07f      	b.n	800331c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b03      	cmp	r3, #3
 8003222:	d106      	bne.n	8003232 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003224:	4b41      	ldr	r3, [pc, #260]	; (800332c <HAL_RCC_ClockConfig+0x1f8>)
 8003226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003228:	2202      	movs	r2, #2
 800322a:	4013      	ands	r3, r2
 800322c:	d108      	bne.n	8003240 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e074      	b.n	800331c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003232:	4b3e      	ldr	r3, [pc, #248]	; (800332c <HAL_RCC_ClockConfig+0x1f8>)
 8003234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003236:	2202      	movs	r2, #2
 8003238:	4013      	ands	r3, r2
 800323a:	d101      	bne.n	8003240 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e06d      	b.n	800331c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003240:	4b3a      	ldr	r3, [pc, #232]	; (800332c <HAL_RCC_ClockConfig+0x1f8>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2207      	movs	r2, #7
 8003246:	4393      	bics	r3, r2
 8003248:	0019      	movs	r1, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	4b37      	ldr	r3, [pc, #220]	; (800332c <HAL_RCC_ClockConfig+0x1f8>)
 8003250:	430a      	orrs	r2, r1
 8003252:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003254:	f7fd ffea 	bl	800122c <HAL_GetTick>
 8003258:	0003      	movs	r3, r0
 800325a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325c:	e009      	b.n	8003272 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800325e:	f7fd ffe5 	bl	800122c <HAL_GetTick>
 8003262:	0002      	movs	r2, r0
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	4a2f      	ldr	r2, [pc, #188]	; (8003328 <HAL_RCC_ClockConfig+0x1f4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e054      	b.n	800331c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	4b2e      	ldr	r3, [pc, #184]	; (800332c <HAL_RCC_ClockConfig+0x1f8>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2238      	movs	r2, #56	; 0x38
 8003278:	401a      	ands	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	429a      	cmp	r2, r3
 8003282:	d1ec      	bne.n	800325e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003284:	4b27      	ldr	r3, [pc, #156]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2207      	movs	r2, #7
 800328a:	4013      	ands	r3, r2
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d21e      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003292:	4b24      	ldr	r3, [pc, #144]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2207      	movs	r2, #7
 8003298:	4393      	bics	r3, r2
 800329a:	0019      	movs	r1, r3
 800329c:	4b21      	ldr	r3, [pc, #132]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032a4:	f7fd ffc2 	bl	800122c <HAL_GetTick>
 80032a8:	0003      	movs	r3, r0
 80032aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032ac:	e009      	b.n	80032c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ae:	f7fd ffbd 	bl	800122c <HAL_GetTick>
 80032b2:	0002      	movs	r2, r0
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <HAL_RCC_ClockConfig+0x1f4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e02c      	b.n	800331c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032c2:	4b18      	ldr	r3, [pc, #96]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2207      	movs	r2, #7
 80032c8:	4013      	ands	r3, r2
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d1ee      	bne.n	80032ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2204      	movs	r2, #4
 80032d6:	4013      	ands	r3, r2
 80032d8:	d009      	beq.n	80032ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80032da:	4b14      	ldr	r3, [pc, #80]	; (800332c <HAL_RCC_ClockConfig+0x1f8>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	4a15      	ldr	r2, [pc, #84]	; (8003334 <HAL_RCC_ClockConfig+0x200>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	0019      	movs	r1, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	4b10      	ldr	r3, [pc, #64]	; (800332c <HAL_RCC_ClockConfig+0x1f8>)
 80032ea:	430a      	orrs	r2, r1
 80032ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80032ee:	f000 f829 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 80032f2:	0001      	movs	r1, r0
 80032f4:	4b0d      	ldr	r3, [pc, #52]	; (800332c <HAL_RCC_ClockConfig+0x1f8>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	0a1b      	lsrs	r3, r3, #8
 80032fa:	220f      	movs	r2, #15
 80032fc:	401a      	ands	r2, r3
 80032fe:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <HAL_RCC_ClockConfig+0x204>)
 8003300:	0092      	lsls	r2, r2, #2
 8003302:	58d3      	ldr	r3, [r2, r3]
 8003304:	221f      	movs	r2, #31
 8003306:	4013      	ands	r3, r2
 8003308:	000a      	movs	r2, r1
 800330a:	40da      	lsrs	r2, r3
 800330c:	4b0b      	ldr	r3, [pc, #44]	; (800333c <HAL_RCC_ClockConfig+0x208>)
 800330e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <HAL_RCC_ClockConfig+0x20c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	0018      	movs	r0, r3
 8003316:	f7fd ff2f 	bl	8001178 <HAL_InitTick>
 800331a:	0003      	movs	r3, r0
}
 800331c:	0018      	movs	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	b004      	add	sp, #16
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40022000 	.word	0x40022000
 8003328:	00001388 	.word	0x00001388
 800332c:	40021000 	.word	0x40021000
 8003330:	fffff0ff 	.word	0xfffff0ff
 8003334:	ffff8fff 	.word	0xffff8fff
 8003338:	08005ab0 	.word	0x08005ab0
 800333c:	20000004 	.word	0x20000004
 8003340:	20000008 	.word	0x20000008

08003344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800334a:	4b3c      	ldr	r3, [pc, #240]	; (800343c <HAL_RCC_GetSysClockFreq+0xf8>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2238      	movs	r2, #56	; 0x38
 8003350:	4013      	ands	r3, r2
 8003352:	d10f      	bne.n	8003374 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003354:	4b39      	ldr	r3, [pc, #228]	; (800343c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	0adb      	lsrs	r3, r3, #11
 800335a:	2207      	movs	r2, #7
 800335c:	4013      	ands	r3, r2
 800335e:	2201      	movs	r2, #1
 8003360:	409a      	lsls	r2, r3
 8003362:	0013      	movs	r3, r2
 8003364:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003366:	6839      	ldr	r1, [r7, #0]
 8003368:	4835      	ldr	r0, [pc, #212]	; (8003440 <HAL_RCC_GetSysClockFreq+0xfc>)
 800336a:	f7fc fecb 	bl	8000104 <__udivsi3>
 800336e:	0003      	movs	r3, r0
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	e05d      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003374:	4b31      	ldr	r3, [pc, #196]	; (800343c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2238      	movs	r2, #56	; 0x38
 800337a:	4013      	ands	r3, r2
 800337c:	2b08      	cmp	r3, #8
 800337e:	d102      	bne.n	8003386 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003380:	4b30      	ldr	r3, [pc, #192]	; (8003444 <HAL_RCC_GetSysClockFreq+0x100>)
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	e054      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003386:	4b2d      	ldr	r3, [pc, #180]	; (800343c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2238      	movs	r2, #56	; 0x38
 800338c:	4013      	ands	r3, r2
 800338e:	2b10      	cmp	r3, #16
 8003390:	d138      	bne.n	8003404 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003392:	4b2a      	ldr	r3, [pc, #168]	; (800343c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2203      	movs	r2, #3
 8003398:	4013      	ands	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800339c:	4b27      	ldr	r3, [pc, #156]	; (800343c <HAL_RCC_GetSysClockFreq+0xf8>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	2207      	movs	r2, #7
 80033a4:	4013      	ands	r3, r2
 80033a6:	3301      	adds	r3, #1
 80033a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d10d      	bne.n	80033cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	4824      	ldr	r0, [pc, #144]	; (8003444 <HAL_RCC_GetSysClockFreq+0x100>)
 80033b4:	f7fc fea6 	bl	8000104 <__udivsi3>
 80033b8:	0003      	movs	r3, r0
 80033ba:	0019      	movs	r1, r3
 80033bc:	4b1f      	ldr	r3, [pc, #124]	; (800343c <HAL_RCC_GetSysClockFreq+0xf8>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	0a1b      	lsrs	r3, r3, #8
 80033c2:	227f      	movs	r2, #127	; 0x7f
 80033c4:	4013      	ands	r3, r2
 80033c6:	434b      	muls	r3, r1
 80033c8:	617b      	str	r3, [r7, #20]
        break;
 80033ca:	e00d      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	481c      	ldr	r0, [pc, #112]	; (8003440 <HAL_RCC_GetSysClockFreq+0xfc>)
 80033d0:	f7fc fe98 	bl	8000104 <__udivsi3>
 80033d4:	0003      	movs	r3, r0
 80033d6:	0019      	movs	r1, r3
 80033d8:	4b18      	ldr	r3, [pc, #96]	; (800343c <HAL_RCC_GetSysClockFreq+0xf8>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	0a1b      	lsrs	r3, r3, #8
 80033de:	227f      	movs	r2, #127	; 0x7f
 80033e0:	4013      	ands	r3, r2
 80033e2:	434b      	muls	r3, r1
 80033e4:	617b      	str	r3, [r7, #20]
        break;
 80033e6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <HAL_RCC_GetSysClockFreq+0xf8>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	0f5b      	lsrs	r3, r3, #29
 80033ee:	2207      	movs	r2, #7
 80033f0:	4013      	ands	r3, r2
 80033f2:	3301      	adds	r3, #1
 80033f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	6978      	ldr	r0, [r7, #20]
 80033fa:	f7fc fe83 	bl	8000104 <__udivsi3>
 80033fe:	0003      	movs	r3, r0
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	e015      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003404:	4b0d      	ldr	r3, [pc, #52]	; (800343c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2238      	movs	r2, #56	; 0x38
 800340a:	4013      	ands	r3, r2
 800340c:	2b20      	cmp	r3, #32
 800340e:	d103      	bne.n	8003418 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	e00b      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <HAL_RCC_GetSysClockFreq+0xf8>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2238      	movs	r2, #56	; 0x38
 800341e:	4013      	ands	r3, r2
 8003420:	2b18      	cmp	r3, #24
 8003422:	d103      	bne.n	800342c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003424:	23fa      	movs	r3, #250	; 0xfa
 8003426:	01db      	lsls	r3, r3, #7
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	e001      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003430:	693b      	ldr	r3, [r7, #16]
}
 8003432:	0018      	movs	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	b006      	add	sp, #24
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	40021000 	.word	0x40021000
 8003440:	00f42400 	.word	0x00f42400
 8003444:	007a1200 	.word	0x007a1200

08003448 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800344c:	4b02      	ldr	r3, [pc, #8]	; (8003458 <HAL_RCC_GetHCLKFreq+0x10>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	20000004 	.word	0x20000004

0800345c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800345c:	b5b0      	push	{r4, r5, r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003460:	f7ff fff2 	bl	8003448 <HAL_RCC_GetHCLKFreq>
 8003464:	0004      	movs	r4, r0
 8003466:	f7ff fb39 	bl	8002adc <LL_RCC_GetAPB1Prescaler>
 800346a:	0003      	movs	r3, r0
 800346c:	0b1a      	lsrs	r2, r3, #12
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003470:	0092      	lsls	r2, r2, #2
 8003472:	58d3      	ldr	r3, [r2, r3]
 8003474:	221f      	movs	r2, #31
 8003476:	4013      	ands	r3, r2
 8003478:	40dc      	lsrs	r4, r3
 800347a:	0023      	movs	r3, r4
}
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	bdb0      	pop	{r4, r5, r7, pc}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	08005af0 	.word	0x08005af0

08003488 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003490:	2313      	movs	r3, #19
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003498:	2312      	movs	r3, #18
 800349a:	18fb      	adds	r3, r7, r3
 800349c:	2200      	movs	r2, #0
 800349e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	2380      	movs	r3, #128	; 0x80
 80034a6:	029b      	lsls	r3, r3, #10
 80034a8:	4013      	ands	r3, r2
 80034aa:	d100      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x26>
 80034ac:	e0a4      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ae:	2311      	movs	r3, #17
 80034b0:	18fb      	adds	r3, r7, r3
 80034b2:	2200      	movs	r2, #0
 80034b4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b6:	4ba5      	ldr	r3, [pc, #660]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	055b      	lsls	r3, r3, #21
 80034be:	4013      	ands	r3, r2
 80034c0:	d111      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c2:	4ba2      	ldr	r3, [pc, #648]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034c6:	4ba1      	ldr	r3, [pc, #644]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034c8:	2180      	movs	r1, #128	; 0x80
 80034ca:	0549      	lsls	r1, r1, #21
 80034cc:	430a      	orrs	r2, r1
 80034ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80034d0:	4b9e      	ldr	r3, [pc, #632]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	055b      	lsls	r3, r3, #21
 80034d8:	4013      	ands	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034de:	2311      	movs	r3, #17
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034e6:	4b9a      	ldr	r3, [pc, #616]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b99      	ldr	r3, [pc, #612]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80034ec:	2180      	movs	r1, #128	; 0x80
 80034ee:	0049      	lsls	r1, r1, #1
 80034f0:	430a      	orrs	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034f4:	f7fd fe9a 	bl	800122c <HAL_GetTick>
 80034f8:	0003      	movs	r3, r0
 80034fa:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034fc:	e00b      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fe:	f7fd fe95 	bl	800122c <HAL_GetTick>
 8003502:	0002      	movs	r2, r0
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d904      	bls.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 800350c:	2313      	movs	r3, #19
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	2203      	movs	r2, #3
 8003512:	701a      	strb	r2, [r3, #0]
        break;
 8003514:	e005      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003516:	4b8e      	ldr	r3, [pc, #568]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	2380      	movs	r3, #128	; 0x80
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	4013      	ands	r3, r2
 8003520:	d0ed      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8003522:	2313      	movs	r3, #19
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d154      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800352c:	4b87      	ldr	r3, [pc, #540]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800352e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003530:	23c0      	movs	r3, #192	; 0xc0
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4013      	ands	r3, r2
 8003536:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d019      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xea>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	429a      	cmp	r2, r3
 8003546:	d014      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003548:	4b80      	ldr	r3, [pc, #512]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800354a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354c:	4a81      	ldr	r2, [pc, #516]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800354e:	4013      	ands	r3, r2
 8003550:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003552:	4b7e      	ldr	r3, [pc, #504]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003554:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003556:	4b7d      	ldr	r3, [pc, #500]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003558:	2180      	movs	r1, #128	; 0x80
 800355a:	0249      	lsls	r1, r1, #9
 800355c:	430a      	orrs	r2, r1
 800355e:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003560:	4b7a      	ldr	r3, [pc, #488]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003562:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003564:	4b79      	ldr	r3, [pc, #484]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003566:	497c      	ldr	r1, [pc, #496]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003568:	400a      	ands	r2, r1
 800356a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800356c:	4b77      	ldr	r3, [pc, #476]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2201      	movs	r2, #1
 8003576:	4013      	ands	r3, r2
 8003578:	d016      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357a:	f7fd fe57 	bl	800122c <HAL_GetTick>
 800357e:	0003      	movs	r3, r0
 8003580:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003582:	e00c      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003584:	f7fd fe52 	bl	800122c <HAL_GetTick>
 8003588:	0002      	movs	r2, r0
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	4a73      	ldr	r2, [pc, #460]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d904      	bls.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8003594:	2313      	movs	r3, #19
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	2203      	movs	r2, #3
 800359a:	701a      	strb	r2, [r3, #0]
            break;
 800359c:	e004      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800359e:	4b6b      	ldr	r3, [pc, #428]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a2:	2202      	movs	r2, #2
 80035a4:	4013      	ands	r3, r2
 80035a6:	d0ed      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80035a8:	2313      	movs	r3, #19
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035b2:	4b66      	ldr	r3, [pc, #408]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b6:	4a67      	ldr	r2, [pc, #412]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	0019      	movs	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035c0:	4b62      	ldr	r3, [pc, #392]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035c2:	430a      	orrs	r2, r1
 80035c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80035c6:	e00c      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035c8:	2312      	movs	r3, #18
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	2213      	movs	r2, #19
 80035ce:	18ba      	adds	r2, r7, r2
 80035d0:	7812      	ldrb	r2, [r2, #0]
 80035d2:	701a      	strb	r2, [r3, #0]
 80035d4:	e005      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d6:	2312      	movs	r3, #18
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	2213      	movs	r2, #19
 80035dc:	18ba      	adds	r2, r7, r2
 80035de:	7812      	ldrb	r2, [r2, #0]
 80035e0:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035e2:	2311      	movs	r3, #17
 80035e4:	18fb      	adds	r3, r7, r3
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d105      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ec:	4b57      	ldr	r3, [pc, #348]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035f0:	4b56      	ldr	r3, [pc, #344]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035f2:	495b      	ldr	r1, [pc, #364]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80035f4:	400a      	ands	r2, r1
 80035f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2201      	movs	r2, #1
 80035fe:	4013      	ands	r3, r2
 8003600:	d009      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003602:	4b52      	ldr	r3, [pc, #328]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003606:	2203      	movs	r2, #3
 8003608:	4393      	bics	r3, r2
 800360a:	0019      	movs	r1, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	4b4e      	ldr	r3, [pc, #312]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003612:	430a      	orrs	r2, r1
 8003614:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2220      	movs	r2, #32
 800361c:	4013      	ands	r3, r2
 800361e:	d009      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003620:	4b4a      	ldr	r3, [pc, #296]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003624:	4a4f      	ldr	r2, [pc, #316]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003626:	4013      	ands	r3, r2
 8003628:	0019      	movs	r1, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	4b47      	ldr	r3, [pc, #284]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003630:	430a      	orrs	r2, r1
 8003632:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	2380      	movs	r3, #128	; 0x80
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4013      	ands	r3, r2
 800363e:	d009      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003640:	4b42      	ldr	r3, [pc, #264]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	4a48      	ldr	r2, [pc, #288]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003646:	4013      	ands	r3, r2
 8003648:	0019      	movs	r1, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	4b3f      	ldr	r3, [pc, #252]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003650:	430a      	orrs	r2, r1
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4013      	ands	r3, r2
 800365e:	d009      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003660:	4b3a      	ldr	r3, [pc, #232]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003664:	4a41      	ldr	r2, [pc, #260]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003666:	4013      	ands	r3, r2
 8003668:	0019      	movs	r1, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	4b37      	ldr	r3, [pc, #220]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003670:	430a      	orrs	r2, r1
 8003672:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2240      	movs	r2, #64	; 0x40
 800367a:	4013      	ands	r3, r2
 800367c:	d009      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800367e:	4b33      	ldr	r3, [pc, #204]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003682:	4a3b      	ldr	r2, [pc, #236]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003684:	4013      	ands	r3, r2
 8003686:	0019      	movs	r1, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	4b2f      	ldr	r3, [pc, #188]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800368e:	430a      	orrs	r2, r1
 8003690:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	01db      	lsls	r3, r3, #7
 800369a:	4013      	ands	r3, r2
 800369c:	d015      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800369e:	4b2b      	ldr	r3, [pc, #172]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	0899      	lsrs	r1, r3, #2
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69da      	ldr	r2, [r3, #28]
 80036aa:	4b28      	ldr	r3, [pc, #160]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036ac:	430a      	orrs	r2, r1
 80036ae:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69da      	ldr	r2, [r3, #28]
 80036b4:	2380      	movs	r3, #128	; 0x80
 80036b6:	05db      	lsls	r3, r3, #23
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d106      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80036bc:	4b23      	ldr	r3, [pc, #140]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	4b22      	ldr	r3, [pc, #136]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036c2:	2180      	movs	r1, #128	; 0x80
 80036c4:	0249      	lsls	r1, r1, #9
 80036c6:	430a      	orrs	r2, r1
 80036c8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	2380      	movs	r3, #128	; 0x80
 80036d0:	039b      	lsls	r3, r3, #14
 80036d2:	4013      	ands	r3, r2
 80036d4:	d016      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036d6:	4b1d      	ldr	r3, [pc, #116]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036da:	4a26      	ldr	r2, [pc, #152]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80036dc:	4013      	ands	r3, r2
 80036de:	0019      	movs	r1, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1a      	ldr	r2, [r3, #32]
 80036e4:	4b19      	ldr	r3, [pc, #100]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036e6:	430a      	orrs	r2, r1
 80036e8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1a      	ldr	r2, [r3, #32]
 80036ee:	2380      	movs	r3, #128	; 0x80
 80036f0:	03db      	lsls	r3, r3, #15
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d106      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80036f6:	4b15      	ldr	r3, [pc, #84]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	4b14      	ldr	r3, [pc, #80]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036fc:	2180      	movs	r1, #128	; 0x80
 80036fe:	0449      	lsls	r1, r1, #17
 8003700:	430a      	orrs	r2, r1
 8003702:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	4013      	ands	r3, r2
 800370e:	d016      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003710:	4b0e      	ldr	r3, [pc, #56]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003714:	4a18      	ldr	r2, [pc, #96]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003716:	4013      	ands	r3, r2
 8003718:	0019      	movs	r1, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003720:	430a      	orrs	r2, r1
 8003722:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	01db      	lsls	r3, r3, #7
 800372c:	429a      	cmp	r2, r3
 800372e:	d106      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003736:	2180      	movs	r1, #128	; 0x80
 8003738:	0249      	lsls	r1, r1, #9
 800373a:	430a      	orrs	r2, r1
 800373c:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 800373e:	2312      	movs	r3, #18
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	781b      	ldrb	r3, [r3, #0]
}
 8003744:	0018      	movs	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	b006      	add	sp, #24
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000
 8003750:	40007000 	.word	0x40007000
 8003754:	fffffcff 	.word	0xfffffcff
 8003758:	fffeffff 	.word	0xfffeffff
 800375c:	00001388 	.word	0x00001388
 8003760:	efffffff 	.word	0xefffffff
 8003764:	fffff3ff 	.word	0xfffff3ff
 8003768:	fff3ffff 	.word	0xfff3ffff
 800376c:	ffcfffff 	.word	0xffcfffff
 8003770:	ffffcfff 	.word	0xffffcfff
 8003774:	ffbfffff 	.word	0xffbfffff
 8003778:	ffff3fff 	.word	0xffff3fff

0800377c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2101      	movs	r1, #1
 8003790:	430a      	orrs	r2, r1
 8003792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	4a0c      	ldr	r2, [pc, #48]	; (80037cc <HAL_TIM_Base_Start_IT+0x50>)
 800379c:	4013      	ands	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b06      	cmp	r3, #6
 80037a4:	d00c      	beq.n	80037c0 <HAL_TIM_Base_Start_IT+0x44>
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	025b      	lsls	r3, r3, #9
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d007      	beq.n	80037c0 <HAL_TIM_Base_Start_IT+0x44>
  {
    __HAL_TIM_ENABLE(htim);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2101      	movs	r1, #1
 80037bc:	430a      	orrs	r2, r1
 80037be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	0018      	movs	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b004      	add	sp, #16
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	00010007 	.word	0x00010007

080037d0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e02e      	b.n	8003842 <HAL_TIM_OnePulse_Init+0x72>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	223d      	movs	r2, #61	; 0x3d
 80037e8:	5c9b      	ldrb	r3, [r3, r2]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d107      	bne.n	8003800 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	223c      	movs	r2, #60	; 0x3c
 80037f4:	2100      	movs	r1, #0
 80037f6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7fd fb48 	bl	8000e90 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	223d      	movs	r2, #61	; 0x3d
 8003804:	2102      	movs	r1, #2
 8003806:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3304      	adds	r3, #4
 8003810:	0019      	movs	r1, r3
 8003812:	0010      	movs	r0, r2
 8003814:	f000 f974 	bl	8003b00 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2108      	movs	r1, #8
 8003824:	438a      	bics	r2, r1
 8003826:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6819      	ldr	r1, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	223d      	movs	r2, #61	; 0x3d
 800383c:	2101      	movs	r1, #1
 800383e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	0018      	movs	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	b002      	add	sp, #8
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2202      	movs	r2, #2
 800385c:	4013      	ands	r3, r2
 800385e:	2b02      	cmp	r3, #2
 8003860:	d124      	bne.n	80038ac <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	2202      	movs	r2, #2
 800386a:	4013      	ands	r3, r2
 800386c:	2b02      	cmp	r3, #2
 800386e:	d11d      	bne.n	80038ac <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2203      	movs	r2, #3
 8003876:	4252      	negs	r2, r2
 8003878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	2203      	movs	r2, #3
 8003888:	4013      	ands	r3, r2
 800388a:	d004      	beq.n	8003896 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	0018      	movs	r0, r3
 8003890:	f000 f91e 	bl	8003ad0 <HAL_TIM_IC_CaptureCallback>
 8003894:	e007      	b.n	80038a6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	0018      	movs	r0, r3
 800389a:	f000 f911 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	0018      	movs	r0, r3
 80038a2:	f000 f91d 	bl	8003ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2204      	movs	r2, #4
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d125      	bne.n	8003906 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	2204      	movs	r2, #4
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d11e      	bne.n	8003906 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2205      	movs	r2, #5
 80038ce:	4252      	negs	r2, r2
 80038d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	23c0      	movs	r3, #192	; 0xc0
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4013      	ands	r3, r2
 80038e4:	d004      	beq.n	80038f0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	0018      	movs	r0, r3
 80038ea:	f000 f8f1 	bl	8003ad0 <HAL_TIM_IC_CaptureCallback>
 80038ee:	e007      	b.n	8003900 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	0018      	movs	r0, r3
 80038f4:	f000 f8e4 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	0018      	movs	r0, r3
 80038fc:	f000 f8f0 	bl	8003ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	2208      	movs	r2, #8
 800390e:	4013      	ands	r3, r2
 8003910:	2b08      	cmp	r3, #8
 8003912:	d124      	bne.n	800395e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	2208      	movs	r2, #8
 800391c:	4013      	ands	r3, r2
 800391e:	2b08      	cmp	r3, #8
 8003920:	d11d      	bne.n	800395e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2209      	movs	r2, #9
 8003928:	4252      	negs	r2, r2
 800392a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2204      	movs	r2, #4
 8003930:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	2203      	movs	r2, #3
 800393a:	4013      	ands	r3, r2
 800393c:	d004      	beq.n	8003948 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	0018      	movs	r0, r3
 8003942:	f000 f8c5 	bl	8003ad0 <HAL_TIM_IC_CaptureCallback>
 8003946:	e007      	b.n	8003958 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	0018      	movs	r0, r3
 800394c:	f000 f8b8 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	0018      	movs	r0, r3
 8003954:	f000 f8c4 	bl	8003ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	2210      	movs	r2, #16
 8003966:	4013      	ands	r3, r2
 8003968:	2b10      	cmp	r3, #16
 800396a:	d125      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	2210      	movs	r2, #16
 8003974:	4013      	ands	r3, r2
 8003976:	2b10      	cmp	r3, #16
 8003978:	d11e      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2211      	movs	r2, #17
 8003980:	4252      	negs	r2, r2
 8003982:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2208      	movs	r2, #8
 8003988:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	23c0      	movs	r3, #192	; 0xc0
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4013      	ands	r3, r2
 8003996:	d004      	beq.n	80039a2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	0018      	movs	r0, r3
 800399c:	f000 f898 	bl	8003ad0 <HAL_TIM_IC_CaptureCallback>
 80039a0:	e007      	b.n	80039b2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	0018      	movs	r0, r3
 80039a6:	f000 f88b 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	0018      	movs	r0, r3
 80039ae:	f000 f897 	bl	8003ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2201      	movs	r2, #1
 80039c0:	4013      	ands	r3, r2
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d10f      	bne.n	80039e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	2201      	movs	r2, #1
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d108      	bne.n	80039e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2202      	movs	r2, #2
 80039da:	4252      	negs	r2, r2
 80039dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f000 f865 	bl	8003ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	2280      	movs	r2, #128	; 0x80
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b80      	cmp	r3, #128	; 0x80
 80039f2:	d10f      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	2280      	movs	r2, #128	; 0x80
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b80      	cmp	r3, #128	; 0x80
 8003a00:	d108      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2281      	movs	r2, #129	; 0x81
 8003a08:	4252      	negs	r2, r2
 8003a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f000 f8f4 	bl	8003bfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	401a      	ands	r2, r3
 8003a20:	2380      	movs	r3, #128	; 0x80
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d10e      	bne.n	8003a46 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	2280      	movs	r2, #128	; 0x80
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b80      	cmp	r3, #128	; 0x80
 8003a34:	d107      	bne.n	8003a46 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a1c      	ldr	r2, [pc, #112]	; (8003aac <HAL_TIM_IRQHandler+0x260>)
 8003a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	0018      	movs	r0, r3
 8003a42:	f000 f8e3 	bl	8003c0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	2240      	movs	r2, #64	; 0x40
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b40      	cmp	r3, #64	; 0x40
 8003a52:	d10f      	bne.n	8003a74 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2240      	movs	r2, #64	; 0x40
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b40      	cmp	r3, #64	; 0x40
 8003a60:	d108      	bne.n	8003a74 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2241      	movs	r2, #65	; 0x41
 8003a68:	4252      	negs	r2, r2
 8003a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f000 f83e 	bl	8003af0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	d10f      	bne.n	8003aa2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d108      	bne.n	8003aa2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2221      	movs	r2, #33	; 0x21
 8003a96:	4252      	negs	r2, r2
 8003a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f000 f8a5 	bl	8003bec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	b002      	add	sp, #8
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	fffffeff 	.word	0xfffffeff

08003ab0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ab8:	46c0      	nop			; (mov r8, r8)
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b002      	add	sp, #8
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ac8:	46c0      	nop			; (mov r8, r8)
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b002      	add	sp, #8
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ad8:	46c0      	nop			; (mov r8, r8)
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b002      	add	sp, #8
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ae8:	46c0      	nop			; (mov r8, r8)
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b002      	add	sp, #8
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b002      	add	sp, #8
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a30      	ldr	r2, [pc, #192]	; (8003bd4 <TIM_Base_SetConfig+0xd4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d008      	beq.n	8003b2a <TIM_Base_SetConfig+0x2a>
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	2380      	movs	r3, #128	; 0x80
 8003b1c:	05db      	lsls	r3, r3, #23
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d003      	beq.n	8003b2a <TIM_Base_SetConfig+0x2a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a2c      	ldr	r2, [pc, #176]	; (8003bd8 <TIM_Base_SetConfig+0xd8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d108      	bne.n	8003b3c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2270      	movs	r2, #112	; 0x70
 8003b2e:	4393      	bics	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a25      	ldr	r2, [pc, #148]	; (8003bd4 <TIM_Base_SetConfig+0xd4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d014      	beq.n	8003b6e <TIM_Base_SetConfig+0x6e>
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	2380      	movs	r3, #128	; 0x80
 8003b48:	05db      	lsls	r3, r3, #23
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d00f      	beq.n	8003b6e <TIM_Base_SetConfig+0x6e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a21      	ldr	r2, [pc, #132]	; (8003bd8 <TIM_Base_SetConfig+0xd8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00b      	beq.n	8003b6e <TIM_Base_SetConfig+0x6e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a20      	ldr	r2, [pc, #128]	; (8003bdc <TIM_Base_SetConfig+0xdc>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d007      	beq.n	8003b6e <TIM_Base_SetConfig+0x6e>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a1f      	ldr	r2, [pc, #124]	; (8003be0 <TIM_Base_SetConfig+0xe0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d003      	beq.n	8003b6e <TIM_Base_SetConfig+0x6e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a1e      	ldr	r2, [pc, #120]	; (8003be4 <TIM_Base_SetConfig+0xe4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d108      	bne.n	8003b80 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a1d      	ldr	r2, [pc, #116]	; (8003be8 <TIM_Base_SetConfig+0xe8>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2280      	movs	r2, #128	; 0x80
 8003b84:	4393      	bics	r3, r2
 8003b86:	001a      	movs	r2, r3
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <TIM_Base_SetConfig+0xd4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d007      	beq.n	8003bbe <TIM_Base_SetConfig+0xbe>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a0b      	ldr	r2, [pc, #44]	; (8003be0 <TIM_Base_SetConfig+0xe0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d003      	beq.n	8003bbe <TIM_Base_SetConfig+0xbe>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <TIM_Base_SetConfig+0xe4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d103      	bne.n	8003bc6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	615a      	str	r2, [r3, #20]
}
 8003bcc:	46c0      	nop			; (mov r8, r8)
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b004      	add	sp, #16
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40012c00 	.word	0x40012c00
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40002000 	.word	0x40002000
 8003be0:	40014400 	.word	0x40014400
 8003be4:	40014800 	.word	0x40014800
 8003be8:	fffffcff 	.word	0xfffffcff

08003bec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b002      	add	sp, #8
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c04:	46c0      	nop			; (mov r8, r8)
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b002      	add	sp, #8
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c14:	46c0      	nop			; (mov r8, r8)
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b002      	add	sp, #8
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e046      	b.n	8003cbc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2280      	movs	r2, #128	; 0x80
 8003c32:	589b      	ldr	r3, [r3, r2]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d107      	bne.n	8003c48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	227c      	movs	r2, #124	; 0x7c
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	0018      	movs	r0, r3
 8003c44:	f7fd f94a 	bl	8000edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2280      	movs	r2, #128	; 0x80
 8003c4c:	2124      	movs	r1, #36	; 0x24
 8003c4e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	438a      	bics	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	0018      	movs	r0, r3
 8003c64:	f000 f8dc 	bl	8003e20 <UART_SetConfig>
 8003c68:	0003      	movs	r3, r0
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e024      	b.n	8003cbc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f001 f97d 	bl	8004f7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	490d      	ldr	r1, [pc, #52]	; (8003cc4 <HAL_UART_Init+0xa8>)
 8003c8e:	400a      	ands	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	212a      	movs	r1, #42	; 0x2a
 8003c9e:	438a      	bics	r2, r1
 8003ca0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2101      	movs	r1, #1
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f001 fa15 	bl	80050e4 <UART_CheckIdleState>
 8003cba:	0003      	movs	r3, r0
}
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b002      	add	sp, #8
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	ffffb7ff 	.word	0xffffb7ff

08003cc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08a      	sub	sp, #40	; 0x28
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	1dbb      	adds	r3, r7, #6
 8003cd6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2280      	movs	r2, #128	; 0x80
 8003cdc:	589b      	ldr	r3, [r3, r2]
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d000      	beq.n	8003ce4 <HAL_UART_Transmit+0x1c>
 8003ce2:	e097      	b.n	8003e14 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_UART_Transmit+0x2a>
 8003cea:	1dbb      	adds	r3, r7, #6
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e08f      	b.n	8003e16 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	2380      	movs	r3, #128	; 0x80
 8003cfc:	015b      	lsls	r3, r3, #5
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d109      	bne.n	8003d16 <HAL_UART_Transmit+0x4e>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d105      	bne.n	8003d16 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d001      	beq.n	8003d16 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e07f      	b.n	8003e16 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	227c      	movs	r2, #124	; 0x7c
 8003d1a:	5c9b      	ldrb	r3, [r3, r2]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_UART_Transmit+0x5c>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e078      	b.n	8003e16 <HAL_UART_Transmit+0x14e>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	227c      	movs	r2, #124	; 0x7c
 8003d28:	2101      	movs	r1, #1
 8003d2a:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2288      	movs	r2, #136	; 0x88
 8003d30:	2100      	movs	r1, #0
 8003d32:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2280      	movs	r2, #128	; 0x80
 8003d38:	2121      	movs	r1, #33	; 0x21
 8003d3a:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003d3c:	f7fd fa76 	bl	800122c <HAL_GetTick>
 8003d40:	0003      	movs	r3, r0
 8003d42:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1dba      	adds	r2, r7, #6
 8003d48:	2154      	movs	r1, #84	; 0x54
 8003d4a:	8812      	ldrh	r2, [r2, #0]
 8003d4c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	1dba      	adds	r2, r7, #6
 8003d52:	2156      	movs	r1, #86	; 0x56
 8003d54:	8812      	ldrh	r2, [r2, #0]
 8003d56:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	2380      	movs	r3, #128	; 0x80
 8003d5e:	015b      	lsls	r3, r3, #5
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d108      	bne.n	8003d76 <HAL_UART_Transmit+0xae>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d104      	bne.n	8003d76 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	61bb      	str	r3, [r7, #24]
 8003d74:	e003      	b.n	8003d7e <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d7e:	e02c      	b.n	8003dda <HAL_UART_Transmit+0x112>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	0013      	movs	r3, r2
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2180      	movs	r1, #128	; 0x80
 8003d8e:	f001 f9f3 	bl	8005178 <UART_WaitOnFlagUntilTimeout>
 8003d92:	1e03      	subs	r3, r0, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_UART_Transmit+0xd2>
      {
        return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e03d      	b.n	8003e16 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10b      	bne.n	8003db8 <HAL_UART_Transmit+0xf0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	001a      	movs	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	05d2      	lsls	r2, r2, #23
 8003dac:	0dd2      	lsrs	r2, r2, #23
 8003dae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	3302      	adds	r3, #2
 8003db4:	61bb      	str	r3, [r7, #24]
 8003db6:	e007      	b.n	8003dc8 <HAL_UART_Transmit+0x100>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	781a      	ldrb	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2256      	movs	r2, #86	; 0x56
 8003dcc:	5a9b      	ldrh	r3, [r3, r2]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b299      	uxth	r1, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2256      	movs	r2, #86	; 0x56
 8003dd8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2256      	movs	r2, #86	; 0x56
 8003dde:	5a9b      	ldrh	r3, [r3, r2]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1cc      	bne.n	8003d80 <HAL_UART_Transmit+0xb8>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	0013      	movs	r3, r2
 8003df0:	2200      	movs	r2, #0
 8003df2:	2140      	movs	r1, #64	; 0x40
 8003df4:	f001 f9c0 	bl	8005178 <UART_WaitOnFlagUntilTimeout>
 8003df8:	1e03      	subs	r3, r0, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_UART_Transmit+0x138>
    {
      return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e00a      	b.n	8003e16 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2280      	movs	r2, #128	; 0x80
 8003e04:	2120      	movs	r1, #32
 8003e06:	5099      	str	r1, [r3, r2]

    __HAL_UNLOCK(huart);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	227c      	movs	r2, #124	; 0x7c
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	e000      	b.n	8003e16 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8003e14:	2302      	movs	r3, #2
  }
}
 8003e16:	0018      	movs	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b008      	add	sp, #32
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e22:	b0a1      	sub	sp, #132	; 0x84
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e2c:	231b      	movs	r3, #27
 8003e2e:	2258      	movs	r2, #88	; 0x58
 8003e30:	18ba      	adds	r2, r7, r2
 8003e32:	18d2      	adds	r2, r2, r3
 8003e34:	2300      	movs	r3, #0
 8003e36:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	431a      	orrs	r2, r3
 8003e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpreg |= (uint32_t)huart->FifoMode;
 8003e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e56:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4bbe      	ldr	r3, [pc, #760]	; (8004160 <UART_SetConfig+0x340>)
 8003e66:	401a      	ands	r2, r3
 8003e68:	0011      	movs	r1, r2
 8003e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	4bba      	ldr	r3, [pc, #744]	; (8004164 <UART_SetConfig+0x344>)
 8003e7c:	401a      	ands	r2, r3
 8003e7e:	0010      	movs	r0, r2
 8003e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e82:	68d9      	ldr	r1, [r3, #12]
 8003e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	0003      	movs	r3, r0
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	4bb3      	ldr	r3, [pc, #716]	; (8004168 <UART_SetConfig+0x348>)
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d004      	beq.n	8003ea8 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea0:	6a1a      	ldr	r2, [r3, #32]
 8003ea2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	4baf      	ldr	r3, [pc, #700]	; (800416c <UART_SetConfig+0x34c>)
 8003eb0:	401a      	ands	r2, r3
 8003eb2:	0011      	movs	r1, r2
 8003eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec4:	230f      	movs	r3, #15
 8003ec6:	439a      	bics	r2, r3
 8003ec8:	0010      	movs	r0, r2
 8003eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ecc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4ba4      	ldr	r3, [pc, #656]	; (8004170 <UART_SetConfig+0x350>)
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d12f      	bne.n	8003f42 <UART_SetConfig+0x122>
 8003ee2:	4ba4      	ldr	r3, [pc, #656]	; (8004174 <UART_SetConfig+0x354>)
 8003ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	4013      	ands	r3, r2
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d013      	beq.n	8003f16 <UART_SetConfig+0xf6>
 8003eee:	d304      	bcc.n	8003efa <UART_SetConfig+0xda>
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d009      	beq.n	8003f08 <UART_SetConfig+0xe8>
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d015      	beq.n	8003f24 <UART_SetConfig+0x104>
 8003ef8:	e01b      	b.n	8003f32 <UART_SetConfig+0x112>
 8003efa:	2323      	movs	r3, #35	; 0x23
 8003efc:	2258      	movs	r2, #88	; 0x58
 8003efe:	18ba      	adds	r2, r7, r2
 8003f00:	18d2      	adds	r2, r2, r3
 8003f02:	2300      	movs	r3, #0
 8003f04:	7013      	strb	r3, [r2, #0]
 8003f06:	e070      	b.n	8003fea <UART_SetConfig+0x1ca>
 8003f08:	2323      	movs	r3, #35	; 0x23
 8003f0a:	2258      	movs	r2, #88	; 0x58
 8003f0c:	18ba      	adds	r2, r7, r2
 8003f0e:	18d2      	adds	r2, r2, r3
 8003f10:	2302      	movs	r3, #2
 8003f12:	7013      	strb	r3, [r2, #0]
 8003f14:	e069      	b.n	8003fea <UART_SetConfig+0x1ca>
 8003f16:	2323      	movs	r3, #35	; 0x23
 8003f18:	2258      	movs	r2, #88	; 0x58
 8003f1a:	18ba      	adds	r2, r7, r2
 8003f1c:	18d2      	adds	r2, r2, r3
 8003f1e:	2304      	movs	r3, #4
 8003f20:	7013      	strb	r3, [r2, #0]
 8003f22:	e062      	b.n	8003fea <UART_SetConfig+0x1ca>
 8003f24:	2323      	movs	r3, #35	; 0x23
 8003f26:	2258      	movs	r2, #88	; 0x58
 8003f28:	18ba      	adds	r2, r7, r2
 8003f2a:	18d2      	adds	r2, r2, r3
 8003f2c:	2308      	movs	r3, #8
 8003f2e:	7013      	strb	r3, [r2, #0]
 8003f30:	e05b      	b.n	8003fea <UART_SetConfig+0x1ca>
 8003f32:	2323      	movs	r3, #35	; 0x23
 8003f34:	2258      	movs	r2, #88	; 0x58
 8003f36:	18ba      	adds	r2, r7, r2
 8003f38:	18d2      	adds	r2, r2, r3
 8003f3a:	2310      	movs	r3, #16
 8003f3c:	7013      	strb	r3, [r2, #0]
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	e053      	b.n	8003fea <UART_SetConfig+0x1ca>
 8003f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4b8c      	ldr	r3, [pc, #560]	; (8004178 <UART_SetConfig+0x358>)
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d106      	bne.n	8003f5a <UART_SetConfig+0x13a>
 8003f4c:	2323      	movs	r3, #35	; 0x23
 8003f4e:	2258      	movs	r2, #88	; 0x58
 8003f50:	18ba      	adds	r2, r7, r2
 8003f52:	18d2      	adds	r2, r2, r3
 8003f54:	2300      	movs	r3, #0
 8003f56:	7013      	strb	r3, [r2, #0]
 8003f58:	e047      	b.n	8003fea <UART_SetConfig+0x1ca>
 8003f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4b82      	ldr	r3, [pc, #520]	; (8004168 <UART_SetConfig+0x348>)
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d13c      	bne.n	8003fde <UART_SetConfig+0x1be>
 8003f64:	4b83      	ldr	r3, [pc, #524]	; (8004174 <UART_SetConfig+0x354>)
 8003f66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f68:	23c0      	movs	r3, #192	; 0xc0
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	401a      	ands	r2, r3
 8003f6e:	2380      	movs	r3, #128	; 0x80
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d01d      	beq.n	8003fb2 <UART_SetConfig+0x192>
 8003f76:	2380      	movs	r3, #128	; 0x80
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d802      	bhi.n	8003f84 <UART_SetConfig+0x164>
 8003f7e:	2a00      	cmp	r2, #0
 8003f80:	d009      	beq.n	8003f96 <UART_SetConfig+0x176>
 8003f82:	e024      	b.n	8003fce <UART_SetConfig+0x1ae>
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d00b      	beq.n	8003fa4 <UART_SetConfig+0x184>
 8003f8c:	23c0      	movs	r3, #192	; 0xc0
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d015      	beq.n	8003fc0 <UART_SetConfig+0x1a0>
 8003f94:	e01b      	b.n	8003fce <UART_SetConfig+0x1ae>
 8003f96:	2323      	movs	r3, #35	; 0x23
 8003f98:	2258      	movs	r2, #88	; 0x58
 8003f9a:	18ba      	adds	r2, r7, r2
 8003f9c:	18d2      	adds	r2, r2, r3
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	7013      	strb	r3, [r2, #0]
 8003fa2:	e022      	b.n	8003fea <UART_SetConfig+0x1ca>
 8003fa4:	2323      	movs	r3, #35	; 0x23
 8003fa6:	2258      	movs	r2, #88	; 0x58
 8003fa8:	18ba      	adds	r2, r7, r2
 8003faa:	18d2      	adds	r2, r2, r3
 8003fac:	2302      	movs	r3, #2
 8003fae:	7013      	strb	r3, [r2, #0]
 8003fb0:	e01b      	b.n	8003fea <UART_SetConfig+0x1ca>
 8003fb2:	2323      	movs	r3, #35	; 0x23
 8003fb4:	2258      	movs	r2, #88	; 0x58
 8003fb6:	18ba      	adds	r2, r7, r2
 8003fb8:	18d2      	adds	r2, r2, r3
 8003fba:	2304      	movs	r3, #4
 8003fbc:	7013      	strb	r3, [r2, #0]
 8003fbe:	e014      	b.n	8003fea <UART_SetConfig+0x1ca>
 8003fc0:	2323      	movs	r3, #35	; 0x23
 8003fc2:	2258      	movs	r2, #88	; 0x58
 8003fc4:	18ba      	adds	r2, r7, r2
 8003fc6:	18d2      	adds	r2, r2, r3
 8003fc8:	2308      	movs	r3, #8
 8003fca:	7013      	strb	r3, [r2, #0]
 8003fcc:	e00d      	b.n	8003fea <UART_SetConfig+0x1ca>
 8003fce:	2323      	movs	r3, #35	; 0x23
 8003fd0:	2258      	movs	r2, #88	; 0x58
 8003fd2:	18ba      	adds	r2, r7, r2
 8003fd4:	18d2      	adds	r2, r2, r3
 8003fd6:	2310      	movs	r3, #16
 8003fd8:	7013      	strb	r3, [r2, #0]
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	e005      	b.n	8003fea <UART_SetConfig+0x1ca>
 8003fde:	2323      	movs	r3, #35	; 0x23
 8003fe0:	2258      	movs	r2, #88	; 0x58
 8003fe2:	18ba      	adds	r2, r7, r2
 8003fe4:	18d2      	adds	r2, r2, r3
 8003fe6:	2310      	movs	r3, #16
 8003fe8:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b5e      	ldr	r3, [pc, #376]	; (8004168 <UART_SetConfig+0x348>)
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <UART_SetConfig+0x1d8>
 8003ff4:	f000 fbe8 	bl	80047c8 <UART_SetConfig+0x9a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ff8:	2323      	movs	r3, #35	; 0x23
 8003ffa:	2258      	movs	r2, #88	; 0x58
 8003ffc:	4694      	mov	ip, r2
 8003ffe:	44bc      	add	ip, r7
 8004000:	4463      	add	r3, ip
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b02      	cmp	r3, #2
 8004006:	d100      	bne.n	800400a <UART_SetConfig+0x1ea>
 8004008:	e05e      	b.n	80040c8 <UART_SetConfig+0x2a8>
 800400a:	dc02      	bgt.n	8004012 <UART_SetConfig+0x1f2>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d007      	beq.n	8004020 <UART_SetConfig+0x200>
 8004010:	e174      	b.n	80042fc <UART_SetConfig+0x4dc>
 8004012:	2b04      	cmp	r3, #4
 8004014:	d100      	bne.n	8004018 <UART_SetConfig+0x1f8>
 8004016:	e0c9      	b.n	80041ac <UART_SetConfig+0x38c>
 8004018:	2b08      	cmp	r3, #8
 800401a:	d100      	bne.n	800401e <UART_SetConfig+0x1fe>
 800401c:	e11a      	b.n	8004254 <UART_SetConfig+0x434>
 800401e:	e16d      	b.n	80042fc <UART_SetConfig+0x4dc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004020:	f7ff fa1c 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 8004024:	0002      	movs	r2, r0
 8004026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	2b00      	cmp	r3, #0
 800402c:	d044      	beq.n	80040b8 <UART_SetConfig+0x298>
 800402e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	2b01      	cmp	r3, #1
 8004034:	d03e      	beq.n	80040b4 <UART_SetConfig+0x294>
 8004036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	2b02      	cmp	r3, #2
 800403c:	d038      	beq.n	80040b0 <UART_SetConfig+0x290>
 800403e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	2b03      	cmp	r3, #3
 8004044:	d032      	beq.n	80040ac <UART_SetConfig+0x28c>
 8004046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	2b04      	cmp	r3, #4
 800404c:	d02c      	beq.n	80040a8 <UART_SetConfig+0x288>
 800404e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	2b05      	cmp	r3, #5
 8004054:	d026      	beq.n	80040a4 <UART_SetConfig+0x284>
 8004056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	2b06      	cmp	r3, #6
 800405c:	d020      	beq.n	80040a0 <UART_SetConfig+0x280>
 800405e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	2b07      	cmp	r3, #7
 8004064:	d01a      	beq.n	800409c <UART_SetConfig+0x27c>
 8004066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	2b08      	cmp	r3, #8
 800406c:	d014      	beq.n	8004098 <UART_SetConfig+0x278>
 800406e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	2b09      	cmp	r3, #9
 8004074:	d00e      	beq.n	8004094 <UART_SetConfig+0x274>
 8004076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	2b0a      	cmp	r3, #10
 800407c:	d008      	beq.n	8004090 <UART_SetConfig+0x270>
 800407e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	2b0b      	cmp	r3, #11
 8004084:	d102      	bne.n	800408c <UART_SetConfig+0x26c>
 8004086:	2380      	movs	r3, #128	; 0x80
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	e016      	b.n	80040ba <UART_SetConfig+0x29a>
 800408c:	2301      	movs	r3, #1
 800408e:	e014      	b.n	80040ba <UART_SetConfig+0x29a>
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	e012      	b.n	80040ba <UART_SetConfig+0x29a>
 8004094:	2340      	movs	r3, #64	; 0x40
 8004096:	e010      	b.n	80040ba <UART_SetConfig+0x29a>
 8004098:	2320      	movs	r3, #32
 800409a:	e00e      	b.n	80040ba <UART_SetConfig+0x29a>
 800409c:	2310      	movs	r3, #16
 800409e:	e00c      	b.n	80040ba <UART_SetConfig+0x29a>
 80040a0:	230c      	movs	r3, #12
 80040a2:	e00a      	b.n	80040ba <UART_SetConfig+0x29a>
 80040a4:	230a      	movs	r3, #10
 80040a6:	e008      	b.n	80040ba <UART_SetConfig+0x29a>
 80040a8:	2308      	movs	r3, #8
 80040aa:	e006      	b.n	80040ba <UART_SetConfig+0x29a>
 80040ac:	2306      	movs	r3, #6
 80040ae:	e004      	b.n	80040ba <UART_SetConfig+0x29a>
 80040b0:	2304      	movs	r3, #4
 80040b2:	e002      	b.n	80040ba <UART_SetConfig+0x29a>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e000      	b.n	80040ba <UART_SetConfig+0x29a>
 80040b8:	2301      	movs	r3, #1
 80040ba:	0019      	movs	r1, r3
 80040bc:	0010      	movs	r0, r2
 80040be:	f7fc f821 	bl	8000104 <__udivsi3>
 80040c2:	0003      	movs	r3, r0
 80040c4:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80040c6:	e120      	b.n	800430a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80040c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d043      	beq.n	8004158 <UART_SetConfig+0x338>
 80040d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d03d      	beq.n	8004154 <UART_SetConfig+0x334>
 80040d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d037      	beq.n	8004150 <UART_SetConfig+0x330>
 80040e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d031      	beq.n	800414c <UART_SetConfig+0x32c>
 80040e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d02b      	beq.n	8004148 <UART_SetConfig+0x328>
 80040f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	2b05      	cmp	r3, #5
 80040f6:	d025      	beq.n	8004144 <UART_SetConfig+0x324>
 80040f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	2b06      	cmp	r3, #6
 80040fe:	d01f      	beq.n	8004140 <UART_SetConfig+0x320>
 8004100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	2b07      	cmp	r3, #7
 8004106:	d019      	beq.n	800413c <UART_SetConfig+0x31c>
 8004108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	2b08      	cmp	r3, #8
 800410e:	d013      	beq.n	8004138 <UART_SetConfig+0x318>
 8004110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	2b09      	cmp	r3, #9
 8004116:	d00d      	beq.n	8004134 <UART_SetConfig+0x314>
 8004118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	2b0a      	cmp	r3, #10
 800411e:	d007      	beq.n	8004130 <UART_SetConfig+0x310>
 8004120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	2b0b      	cmp	r3, #11
 8004126:	d101      	bne.n	800412c <UART_SetConfig+0x30c>
 8004128:	4b14      	ldr	r3, [pc, #80]	; (800417c <UART_SetConfig+0x35c>)
 800412a:	e016      	b.n	800415a <UART_SetConfig+0x33a>
 800412c:	4b14      	ldr	r3, [pc, #80]	; (8004180 <UART_SetConfig+0x360>)
 800412e:	e014      	b.n	800415a <UART_SetConfig+0x33a>
 8004130:	4b14      	ldr	r3, [pc, #80]	; (8004184 <UART_SetConfig+0x364>)
 8004132:	e012      	b.n	800415a <UART_SetConfig+0x33a>
 8004134:	4b14      	ldr	r3, [pc, #80]	; (8004188 <UART_SetConfig+0x368>)
 8004136:	e010      	b.n	800415a <UART_SetConfig+0x33a>
 8004138:	4b14      	ldr	r3, [pc, #80]	; (800418c <UART_SetConfig+0x36c>)
 800413a:	e00e      	b.n	800415a <UART_SetConfig+0x33a>
 800413c:	4b14      	ldr	r3, [pc, #80]	; (8004190 <UART_SetConfig+0x370>)
 800413e:	e00c      	b.n	800415a <UART_SetConfig+0x33a>
 8004140:	4b14      	ldr	r3, [pc, #80]	; (8004194 <UART_SetConfig+0x374>)
 8004142:	e00a      	b.n	800415a <UART_SetConfig+0x33a>
 8004144:	4b14      	ldr	r3, [pc, #80]	; (8004198 <UART_SetConfig+0x378>)
 8004146:	e008      	b.n	800415a <UART_SetConfig+0x33a>
 8004148:	4b14      	ldr	r3, [pc, #80]	; (800419c <UART_SetConfig+0x37c>)
 800414a:	e006      	b.n	800415a <UART_SetConfig+0x33a>
 800414c:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <UART_SetConfig+0x380>)
 800414e:	e004      	b.n	800415a <UART_SetConfig+0x33a>
 8004150:	4b14      	ldr	r3, [pc, #80]	; (80041a4 <UART_SetConfig+0x384>)
 8004152:	e002      	b.n	800415a <UART_SetConfig+0x33a>
 8004154:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <UART_SetConfig+0x388>)
 8004156:	e000      	b.n	800415a <UART_SetConfig+0x33a>
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <UART_SetConfig+0x360>)
 800415a:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800415c:	e0d5      	b.n	800430a <UART_SetConfig+0x4ea>
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	cfff69f3 	.word	0xcfff69f3
 8004164:	ffffcfff 	.word	0xffffcfff
 8004168:	40008000 	.word	0x40008000
 800416c:	11fff4ff 	.word	0x11fff4ff
 8004170:	40013800 	.word	0x40013800
 8004174:	40021000 	.word	0x40021000
 8004178:	40004400 	.word	0x40004400
 800417c:	0000f424 	.word	0x0000f424
 8004180:	00f42400 	.word	0x00f42400
 8004184:	0001e848 	.word	0x0001e848
 8004188:	0003d090 	.word	0x0003d090
 800418c:	0007a120 	.word	0x0007a120
 8004190:	000f4240 	.word	0x000f4240
 8004194:	00145855 	.word	0x00145855
 8004198:	00186a00 	.word	0x00186a00
 800419c:	001e8480 	.word	0x001e8480
 80041a0:	0028b0aa 	.word	0x0028b0aa
 80041a4:	003d0900 	.word	0x003d0900
 80041a8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80041ac:	f7ff f8ca 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 80041b0:	0002      	movs	r2, r0
 80041b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d044      	beq.n	8004244 <UART_SetConfig+0x424>
 80041ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d03e      	beq.n	8004240 <UART_SetConfig+0x420>
 80041c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d038      	beq.n	800423c <UART_SetConfig+0x41c>
 80041ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d032      	beq.n	8004238 <UART_SetConfig+0x418>
 80041d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d02c      	beq.n	8004234 <UART_SetConfig+0x414>
 80041da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	2b05      	cmp	r3, #5
 80041e0:	d026      	beq.n	8004230 <UART_SetConfig+0x410>
 80041e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	2b06      	cmp	r3, #6
 80041e8:	d020      	beq.n	800422c <UART_SetConfig+0x40c>
 80041ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	2b07      	cmp	r3, #7
 80041f0:	d01a      	beq.n	8004228 <UART_SetConfig+0x408>
 80041f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d014      	beq.n	8004224 <UART_SetConfig+0x404>
 80041fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	2b09      	cmp	r3, #9
 8004200:	d00e      	beq.n	8004220 <UART_SetConfig+0x400>
 8004202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	2b0a      	cmp	r3, #10
 8004208:	d008      	beq.n	800421c <UART_SetConfig+0x3fc>
 800420a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	2b0b      	cmp	r3, #11
 8004210:	d102      	bne.n	8004218 <UART_SetConfig+0x3f8>
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	e016      	b.n	8004246 <UART_SetConfig+0x426>
 8004218:	2301      	movs	r3, #1
 800421a:	e014      	b.n	8004246 <UART_SetConfig+0x426>
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	e012      	b.n	8004246 <UART_SetConfig+0x426>
 8004220:	2340      	movs	r3, #64	; 0x40
 8004222:	e010      	b.n	8004246 <UART_SetConfig+0x426>
 8004224:	2320      	movs	r3, #32
 8004226:	e00e      	b.n	8004246 <UART_SetConfig+0x426>
 8004228:	2310      	movs	r3, #16
 800422a:	e00c      	b.n	8004246 <UART_SetConfig+0x426>
 800422c:	230c      	movs	r3, #12
 800422e:	e00a      	b.n	8004246 <UART_SetConfig+0x426>
 8004230:	230a      	movs	r3, #10
 8004232:	e008      	b.n	8004246 <UART_SetConfig+0x426>
 8004234:	2308      	movs	r3, #8
 8004236:	e006      	b.n	8004246 <UART_SetConfig+0x426>
 8004238:	2306      	movs	r3, #6
 800423a:	e004      	b.n	8004246 <UART_SetConfig+0x426>
 800423c:	2304      	movs	r3, #4
 800423e:	e002      	b.n	8004246 <UART_SetConfig+0x426>
 8004240:	2302      	movs	r3, #2
 8004242:	e000      	b.n	8004246 <UART_SetConfig+0x426>
 8004244:	2301      	movs	r3, #1
 8004246:	0019      	movs	r1, r3
 8004248:	0010      	movs	r0, r2
 800424a:	f7fb ff5b 	bl	8000104 <__udivsi3>
 800424e:	0003      	movs	r3, r0
 8004250:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8004252:	e05a      	b.n	800430a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	2b00      	cmp	r3, #0
 800425a:	d04b      	beq.n	80042f4 <UART_SetConfig+0x4d4>
 800425c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	2b01      	cmp	r3, #1
 8004262:	d044      	beq.n	80042ee <UART_SetConfig+0x4ce>
 8004264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	2b02      	cmp	r3, #2
 800426a:	d03d      	beq.n	80042e8 <UART_SetConfig+0x4c8>
 800426c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	2b03      	cmp	r3, #3
 8004272:	d037      	beq.n	80042e4 <UART_SetConfig+0x4c4>
 8004274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	2b04      	cmp	r3, #4
 800427a:	d030      	beq.n	80042de <UART_SetConfig+0x4be>
 800427c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	2b05      	cmp	r3, #5
 8004282:	d02a      	beq.n	80042da <UART_SetConfig+0x4ba>
 8004284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	2b06      	cmp	r3, #6
 800428a:	d024      	beq.n	80042d6 <UART_SetConfig+0x4b6>
 800428c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	2b07      	cmp	r3, #7
 8004292:	d01d      	beq.n	80042d0 <UART_SetConfig+0x4b0>
 8004294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	2b08      	cmp	r3, #8
 800429a:	d016      	beq.n	80042ca <UART_SetConfig+0x4aa>
 800429c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	2b09      	cmp	r3, #9
 80042a2:	d00f      	beq.n	80042c4 <UART_SetConfig+0x4a4>
 80042a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	2b0a      	cmp	r3, #10
 80042aa:	d008      	beq.n	80042be <UART_SetConfig+0x49e>
 80042ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	2b0b      	cmp	r3, #11
 80042b2:	d101      	bne.n	80042b8 <UART_SetConfig+0x498>
 80042b4:	2380      	movs	r3, #128	; 0x80
 80042b6:	e01f      	b.n	80042f8 <UART_SetConfig+0x4d8>
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	e01c      	b.n	80042f8 <UART_SetConfig+0x4d8>
 80042be:	2380      	movs	r3, #128	; 0x80
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	e019      	b.n	80042f8 <UART_SetConfig+0x4d8>
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	e016      	b.n	80042f8 <UART_SetConfig+0x4d8>
 80042ca:	2380      	movs	r3, #128	; 0x80
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	e013      	b.n	80042f8 <UART_SetConfig+0x4d8>
 80042d0:	2380      	movs	r3, #128	; 0x80
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	e010      	b.n	80042f8 <UART_SetConfig+0x4d8>
 80042d6:	4bbf      	ldr	r3, [pc, #764]	; (80045d4 <UART_SetConfig+0x7b4>)
 80042d8:	e00e      	b.n	80042f8 <UART_SetConfig+0x4d8>
 80042da:	4bbf      	ldr	r3, [pc, #764]	; (80045d8 <UART_SetConfig+0x7b8>)
 80042dc:	e00c      	b.n	80042f8 <UART_SetConfig+0x4d8>
 80042de:	2380      	movs	r3, #128	; 0x80
 80042e0:	015b      	lsls	r3, r3, #5
 80042e2:	e009      	b.n	80042f8 <UART_SetConfig+0x4d8>
 80042e4:	4bbd      	ldr	r3, [pc, #756]	; (80045dc <UART_SetConfig+0x7bc>)
 80042e6:	e007      	b.n	80042f8 <UART_SetConfig+0x4d8>
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	019b      	lsls	r3, r3, #6
 80042ec:	e004      	b.n	80042f8 <UART_SetConfig+0x4d8>
 80042ee:	2380      	movs	r3, #128	; 0x80
 80042f0:	01db      	lsls	r3, r3, #7
 80042f2:	e001      	b.n	80042f8 <UART_SetConfig+0x4d8>
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80042fa:	e006      	b.n	800430a <UART_SetConfig+0x4ea>
      default:
        ret = HAL_ERROR;
 80042fc:	231b      	movs	r3, #27
 80042fe:	2258      	movs	r2, #88	; 0x58
 8004300:	18ba      	adds	r2, r7, r2
 8004302:	18d2      	adds	r2, r2, r3
 8004304:	2301      	movs	r3, #1
 8004306:	7013      	strb	r3, [r2, #0]
        break;
 8004308:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800430a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <UART_SetConfig+0x4f4>
 8004310:	f000 fe14 	bl	8004f3c <UART_SetConfig+0x111c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	0013      	movs	r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	189a      	adds	r2, r3, r2
 800431e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004320:	4293      	cmp	r3, r2
 8004322:	d305      	bcc.n	8004330 <UART_SetConfig+0x510>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800432a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432c:	4293      	cmp	r3, r2
 800432e:	d908      	bls.n	8004342 <UART_SetConfig+0x522>
      {
        ret = HAL_ERROR;
 8004330:	231b      	movs	r3, #27
 8004332:	2258      	movs	r2, #88	; 0x58
 8004334:	4694      	mov	ip, r2
 8004336:	44bc      	add	ip, r7
 8004338:	4463      	add	r3, ip
 800433a:	2201      	movs	r2, #1
 800433c:	701a      	strb	r2, [r3, #0]
 800433e:	f000 fdfd 	bl	8004f3c <UART_SetConfig+0x111c>
      }
      else
      {
        switch (clocksource)
 8004342:	2323      	movs	r3, #35	; 0x23
 8004344:	2258      	movs	r2, #88	; 0x58
 8004346:	4694      	mov	ip, r2
 8004348:	44bc      	add	ip, r7
 800434a:	4463      	add	r3, ip
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d100      	bne.n	8004354 <UART_SetConfig+0x534>
 8004352:	e08c      	b.n	800446e <UART_SetConfig+0x64e>
 8004354:	dc02      	bgt.n	800435c <UART_SetConfig+0x53c>
 8004356:	2b00      	cmp	r3, #0
 8004358:	d007      	beq.n	800436a <UART_SetConfig+0x54a>
 800435a:	e216      	b.n	800478a <UART_SetConfig+0x96a>
 800435c:	2b04      	cmp	r3, #4
 800435e:	d100      	bne.n	8004362 <UART_SetConfig+0x542>
 8004360:	e0f2      	b.n	8004548 <UART_SetConfig+0x728>
 8004362:	2b08      	cmp	r3, #8
 8004364:	d100      	bne.n	8004368 <UART_SetConfig+0x548>
 8004366:	e199      	b.n	800469c <UART_SetConfig+0x87c>
 8004368:	e20f      	b.n	800478a <UART_SetConfig+0x96a>
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800436a:	f7ff f877 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 800436e:	0003      	movs	r3, r0
 8004370:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004372:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004374:	64bb      	str	r3, [r7, #72]	; 0x48
 8004376:	2300      	movs	r3, #0
 8004378:	64fb      	str	r3, [r7, #76]	; 0x4c
 800437a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	2b00      	cmp	r3, #0
 8004380:	d050      	beq.n	8004424 <UART_SetConfig+0x604>
 8004382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	2b01      	cmp	r3, #1
 8004388:	d049      	beq.n	800441e <UART_SetConfig+0x5fe>
 800438a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	2b02      	cmp	r3, #2
 8004390:	d042      	beq.n	8004418 <UART_SetConfig+0x5f8>
 8004392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	2b03      	cmp	r3, #3
 8004398:	d03b      	beq.n	8004412 <UART_SetConfig+0x5f2>
 800439a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d034      	beq.n	800440c <UART_SetConfig+0x5ec>
 80043a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	2b05      	cmp	r3, #5
 80043a8:	d02d      	beq.n	8004406 <UART_SetConfig+0x5e6>
 80043aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	2b06      	cmp	r3, #6
 80043b0:	d026      	beq.n	8004400 <UART_SetConfig+0x5e0>
 80043b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	2b07      	cmp	r3, #7
 80043b8:	d01f      	beq.n	80043fa <UART_SetConfig+0x5da>
 80043ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d018      	beq.n	80043f4 <UART_SetConfig+0x5d4>
 80043c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	2b09      	cmp	r3, #9
 80043c8:	d011      	beq.n	80043ee <UART_SetConfig+0x5ce>
 80043ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	2b0a      	cmp	r3, #10
 80043d0:	d00a      	beq.n	80043e8 <UART_SetConfig+0x5c8>
 80043d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	2b0b      	cmp	r3, #11
 80043d8:	d103      	bne.n	80043e2 <UART_SetConfig+0x5c2>
 80043da:	2380      	movs	r3, #128	; 0x80
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	2400      	movs	r4, #0
 80043e0:	e022      	b.n	8004428 <UART_SetConfig+0x608>
 80043e2:	2301      	movs	r3, #1
 80043e4:	2400      	movs	r4, #0
 80043e6:	e01f      	b.n	8004428 <UART_SetConfig+0x608>
 80043e8:	2380      	movs	r3, #128	; 0x80
 80043ea:	2400      	movs	r4, #0
 80043ec:	e01c      	b.n	8004428 <UART_SetConfig+0x608>
 80043ee:	2340      	movs	r3, #64	; 0x40
 80043f0:	2400      	movs	r4, #0
 80043f2:	e019      	b.n	8004428 <UART_SetConfig+0x608>
 80043f4:	2320      	movs	r3, #32
 80043f6:	2400      	movs	r4, #0
 80043f8:	e016      	b.n	8004428 <UART_SetConfig+0x608>
 80043fa:	2310      	movs	r3, #16
 80043fc:	2400      	movs	r4, #0
 80043fe:	e013      	b.n	8004428 <UART_SetConfig+0x608>
 8004400:	230c      	movs	r3, #12
 8004402:	2400      	movs	r4, #0
 8004404:	e010      	b.n	8004428 <UART_SetConfig+0x608>
 8004406:	230a      	movs	r3, #10
 8004408:	2400      	movs	r4, #0
 800440a:	e00d      	b.n	8004428 <UART_SetConfig+0x608>
 800440c:	2308      	movs	r3, #8
 800440e:	2400      	movs	r4, #0
 8004410:	e00a      	b.n	8004428 <UART_SetConfig+0x608>
 8004412:	2306      	movs	r3, #6
 8004414:	2400      	movs	r4, #0
 8004416:	e007      	b.n	8004428 <UART_SetConfig+0x608>
 8004418:	2304      	movs	r3, #4
 800441a:	2400      	movs	r4, #0
 800441c:	e004      	b.n	8004428 <UART_SetConfig+0x608>
 800441e:	2302      	movs	r3, #2
 8004420:	2400      	movs	r4, #0
 8004422:	e001      	b.n	8004428 <UART_SetConfig+0x608>
 8004424:	2301      	movs	r3, #1
 8004426:	2400      	movs	r4, #0
 8004428:	001a      	movs	r2, r3
 800442a:	0023      	movs	r3, r4
 800442c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800442e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004430:	f7fb ff2e 	bl	8000290 <__aeabi_uldivmod>
 8004434:	0003      	movs	r3, r0
 8004436:	000c      	movs	r4, r1
 8004438:	0e1a      	lsrs	r2, r3, #24
 800443a:	0226      	lsls	r6, r4, #8
 800443c:	4316      	orrs	r6, r2
 800443e:	021d      	lsls	r5, r3, #8
 8004440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	085b      	lsrs	r3, r3, #1
 8004446:	643b      	str	r3, [r7, #64]	; 0x40
 8004448:	2300      	movs	r3, #0
 800444a:	647b      	str	r3, [r7, #68]	; 0x44
 800444c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800444e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004450:	1940      	adds	r0, r0, r5
 8004452:	4171      	adcs	r1, r6
 8004454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	63bb      	str	r3, [r7, #56]	; 0x38
 800445a:	2300      	movs	r3, #0
 800445c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800445e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004462:	f7fb ff15 	bl	8000290 <__aeabi_uldivmod>
 8004466:	0003      	movs	r3, r0
 8004468:	000c      	movs	r4, r1
 800446a:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 800446c:	e195      	b.n	800479a <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800446e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	2b00      	cmp	r3, #0
 8004474:	d04f      	beq.n	8004516 <UART_SetConfig+0x6f6>
 8004476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	2b01      	cmp	r3, #1
 800447c:	d048      	beq.n	8004510 <UART_SetConfig+0x6f0>
 800447e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	2b02      	cmp	r3, #2
 8004484:	d041      	beq.n	800450a <UART_SetConfig+0x6ea>
 8004486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	2b03      	cmp	r3, #3
 800448c:	d03a      	beq.n	8004504 <UART_SetConfig+0x6e4>
 800448e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	2b04      	cmp	r3, #4
 8004494:	d033      	beq.n	80044fe <UART_SetConfig+0x6de>
 8004496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	2b05      	cmp	r3, #5
 800449c:	d02c      	beq.n	80044f8 <UART_SetConfig+0x6d8>
 800449e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	2b06      	cmp	r3, #6
 80044a4:	d025      	beq.n	80044f2 <UART_SetConfig+0x6d2>
 80044a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	2b07      	cmp	r3, #7
 80044ac:	d01e      	beq.n	80044ec <UART_SetConfig+0x6cc>
 80044ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d017      	beq.n	80044e6 <UART_SetConfig+0x6c6>
 80044b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	2b09      	cmp	r3, #9
 80044bc:	d010      	beq.n	80044e0 <UART_SetConfig+0x6c0>
 80044be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	2b0a      	cmp	r3, #10
 80044c4:	d009      	beq.n	80044da <UART_SetConfig+0x6ba>
 80044c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	2b0b      	cmp	r3, #11
 80044cc:	d102      	bne.n	80044d4 <UART_SetConfig+0x6b4>
 80044ce:	4b44      	ldr	r3, [pc, #272]	; (80045e0 <UART_SetConfig+0x7c0>)
 80044d0:	2400      	movs	r4, #0
 80044d2:	e022      	b.n	800451a <UART_SetConfig+0x6fa>
 80044d4:	4b43      	ldr	r3, [pc, #268]	; (80045e4 <UART_SetConfig+0x7c4>)
 80044d6:	2400      	movs	r4, #0
 80044d8:	e01f      	b.n	800451a <UART_SetConfig+0x6fa>
 80044da:	4b43      	ldr	r3, [pc, #268]	; (80045e8 <UART_SetConfig+0x7c8>)
 80044dc:	2400      	movs	r4, #0
 80044de:	e01c      	b.n	800451a <UART_SetConfig+0x6fa>
 80044e0:	4b42      	ldr	r3, [pc, #264]	; (80045ec <UART_SetConfig+0x7cc>)
 80044e2:	2400      	movs	r4, #0
 80044e4:	e019      	b.n	800451a <UART_SetConfig+0x6fa>
 80044e6:	4b42      	ldr	r3, [pc, #264]	; (80045f0 <UART_SetConfig+0x7d0>)
 80044e8:	2400      	movs	r4, #0
 80044ea:	e016      	b.n	800451a <UART_SetConfig+0x6fa>
 80044ec:	4b41      	ldr	r3, [pc, #260]	; (80045f4 <UART_SetConfig+0x7d4>)
 80044ee:	2400      	movs	r4, #0
 80044f0:	e013      	b.n	800451a <UART_SetConfig+0x6fa>
 80044f2:	4b41      	ldr	r3, [pc, #260]	; (80045f8 <UART_SetConfig+0x7d8>)
 80044f4:	2400      	movs	r4, #0
 80044f6:	e010      	b.n	800451a <UART_SetConfig+0x6fa>
 80044f8:	4b40      	ldr	r3, [pc, #256]	; (80045fc <UART_SetConfig+0x7dc>)
 80044fa:	2400      	movs	r4, #0
 80044fc:	e00d      	b.n	800451a <UART_SetConfig+0x6fa>
 80044fe:	4b40      	ldr	r3, [pc, #256]	; (8004600 <UART_SetConfig+0x7e0>)
 8004500:	2400      	movs	r4, #0
 8004502:	e00a      	b.n	800451a <UART_SetConfig+0x6fa>
 8004504:	4b3f      	ldr	r3, [pc, #252]	; (8004604 <UART_SetConfig+0x7e4>)
 8004506:	2400      	movs	r4, #0
 8004508:	e007      	b.n	800451a <UART_SetConfig+0x6fa>
 800450a:	4b3f      	ldr	r3, [pc, #252]	; (8004608 <UART_SetConfig+0x7e8>)
 800450c:	2400      	movs	r4, #0
 800450e:	e004      	b.n	800451a <UART_SetConfig+0x6fa>
 8004510:	4b3e      	ldr	r3, [pc, #248]	; (800460c <UART_SetConfig+0x7ec>)
 8004512:	2400      	movs	r4, #0
 8004514:	e001      	b.n	800451a <UART_SetConfig+0x6fa>
 8004516:	4b33      	ldr	r3, [pc, #204]	; (80045e4 <UART_SetConfig+0x7c4>)
 8004518:	2400      	movs	r4, #0
 800451a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800451c:	6852      	ldr	r2, [r2, #4]
 800451e:	0852      	lsrs	r2, r2, #1
 8004520:	633a      	str	r2, [r7, #48]	; 0x30
 8004522:	2200      	movs	r2, #0
 8004524:	637a      	str	r2, [r7, #52]	; 0x34
 8004526:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004528:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800452a:	18c0      	adds	r0, r0, r3
 800452c:	4161      	adcs	r1, r4
 800452e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28
 8004534:	2300      	movs	r3, #0
 8004536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453c:	f7fb fea8 	bl	8000290 <__aeabi_uldivmod>
 8004540:	0003      	movs	r3, r0
 8004542:	000c      	movs	r4, r1
 8004544:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8004546:	e128      	b.n	800479a <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004548:	f7fe fefc 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 800454c:	0003      	movs	r3, r0
 800454e:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004550:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004552:	623b      	str	r3, [r7, #32]
 8004554:	2300      	movs	r3, #0
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
 8004558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	2b00      	cmp	r3, #0
 800455e:	d100      	bne.n	8004562 <UART_SetConfig+0x742>
 8004560:	e071      	b.n	8004646 <UART_SetConfig+0x826>
 8004562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	2b01      	cmp	r3, #1
 8004568:	d100      	bne.n	800456c <UART_SetConfig+0x74c>
 800456a:	e069      	b.n	8004640 <UART_SetConfig+0x820>
 800456c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	2b02      	cmp	r3, #2
 8004572:	d100      	bne.n	8004576 <UART_SetConfig+0x756>
 8004574:	e061      	b.n	800463a <UART_SetConfig+0x81a>
 8004576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	2b03      	cmp	r3, #3
 800457c:	d05a      	beq.n	8004634 <UART_SetConfig+0x814>
 800457e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	2b04      	cmp	r3, #4
 8004584:	d053      	beq.n	800462e <UART_SetConfig+0x80e>
 8004586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	2b05      	cmp	r3, #5
 800458c:	d04c      	beq.n	8004628 <UART_SetConfig+0x808>
 800458e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	2b06      	cmp	r3, #6
 8004594:	d045      	beq.n	8004622 <UART_SetConfig+0x802>
 8004596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	2b07      	cmp	r3, #7
 800459c:	d03e      	beq.n	800461c <UART_SetConfig+0x7fc>
 800459e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d037      	beq.n	8004616 <UART_SetConfig+0x7f6>
 80045a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	2b09      	cmp	r3, #9
 80045ac:	d030      	beq.n	8004610 <UART_SetConfig+0x7f0>
 80045ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	2b0a      	cmp	r3, #10
 80045b4:	d00a      	beq.n	80045cc <UART_SetConfig+0x7ac>
 80045b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	2b0b      	cmp	r3, #11
 80045bc:	d103      	bne.n	80045c6 <UART_SetConfig+0x7a6>
 80045be:	2380      	movs	r3, #128	; 0x80
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	2400      	movs	r4, #0
 80045c4:	e041      	b.n	800464a <UART_SetConfig+0x82a>
 80045c6:	2301      	movs	r3, #1
 80045c8:	2400      	movs	r4, #0
 80045ca:	e03e      	b.n	800464a <UART_SetConfig+0x82a>
 80045cc:	2380      	movs	r3, #128	; 0x80
 80045ce:	2400      	movs	r4, #0
 80045d0:	e03b      	b.n	800464a <UART_SetConfig+0x82a>
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	00000aaa 	.word	0x00000aaa
 80045d8:	00000ccc 	.word	0x00000ccc
 80045dc:	00001555 	.word	0x00001555
 80045e0:	00f42400 	.word	0x00f42400
 80045e4:	f4240000 	.word	0xf4240000
 80045e8:	01e84800 	.word	0x01e84800
 80045ec:	03d09000 	.word	0x03d09000
 80045f0:	07a12000 	.word	0x07a12000
 80045f4:	0f424000 	.word	0x0f424000
 80045f8:	14585500 	.word	0x14585500
 80045fc:	186a0000 	.word	0x186a0000
 8004600:	1e848000 	.word	0x1e848000
 8004604:	28b0aa00 	.word	0x28b0aa00
 8004608:	3d090000 	.word	0x3d090000
 800460c:	7a120000 	.word	0x7a120000
 8004610:	2340      	movs	r3, #64	; 0x40
 8004612:	2400      	movs	r4, #0
 8004614:	e019      	b.n	800464a <UART_SetConfig+0x82a>
 8004616:	2320      	movs	r3, #32
 8004618:	2400      	movs	r4, #0
 800461a:	e016      	b.n	800464a <UART_SetConfig+0x82a>
 800461c:	2310      	movs	r3, #16
 800461e:	2400      	movs	r4, #0
 8004620:	e013      	b.n	800464a <UART_SetConfig+0x82a>
 8004622:	230c      	movs	r3, #12
 8004624:	2400      	movs	r4, #0
 8004626:	e010      	b.n	800464a <UART_SetConfig+0x82a>
 8004628:	230a      	movs	r3, #10
 800462a:	2400      	movs	r4, #0
 800462c:	e00d      	b.n	800464a <UART_SetConfig+0x82a>
 800462e:	2308      	movs	r3, #8
 8004630:	2400      	movs	r4, #0
 8004632:	e00a      	b.n	800464a <UART_SetConfig+0x82a>
 8004634:	2306      	movs	r3, #6
 8004636:	2400      	movs	r4, #0
 8004638:	e007      	b.n	800464a <UART_SetConfig+0x82a>
 800463a:	2304      	movs	r3, #4
 800463c:	2400      	movs	r4, #0
 800463e:	e004      	b.n	800464a <UART_SetConfig+0x82a>
 8004640:	2302      	movs	r3, #2
 8004642:	2400      	movs	r4, #0
 8004644:	e001      	b.n	800464a <UART_SetConfig+0x82a>
 8004646:	2301      	movs	r3, #1
 8004648:	2400      	movs	r4, #0
 800464a:	001a      	movs	r2, r3
 800464c:	0023      	movs	r3, r4
 800464e:	6a38      	ldr	r0, [r7, #32]
 8004650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004652:	f7fb fe1d 	bl	8000290 <__aeabi_uldivmod>
 8004656:	0003      	movs	r3, r0
 8004658:	000c      	movs	r4, r1
 800465a:	0e1a      	lsrs	r2, r3, #24
 800465c:	0221      	lsls	r1, r4, #8
 800465e:	6579      	str	r1, [r7, #84]	; 0x54
 8004660:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004662:	4311      	orrs	r1, r2
 8004664:	6579      	str	r1, [r7, #84]	; 0x54
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	653b      	str	r3, [r7, #80]	; 0x50
 800466a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	61bb      	str	r3, [r7, #24]
 8004672:	2300      	movs	r3, #0
 8004674:	61fb      	str	r3, [r7, #28]
 8004676:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004678:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	69fc      	ldr	r4, [r7, #28]
 800467e:	18c0      	adds	r0, r0, r3
 8004680:	4161      	adcs	r1, r4
 8004682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f7fb fdfe 	bl	8000290 <__aeabi_uldivmod>
 8004694:	0003      	movs	r3, r0
 8004696:	000c      	movs	r4, r1
 8004698:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 800469a:	e07e      	b.n	800479a <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800469c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d058      	beq.n	8004756 <UART_SetConfig+0x936>
 80046a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d050      	beq.n	800474e <UART_SetConfig+0x92e>
 80046ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d048      	beq.n	8004746 <UART_SetConfig+0x926>
 80046b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	d041      	beq.n	8004740 <UART_SetConfig+0x920>
 80046bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d039      	beq.n	8004738 <UART_SetConfig+0x918>
 80046c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	2b05      	cmp	r3, #5
 80046ca:	d032      	beq.n	8004732 <UART_SetConfig+0x912>
 80046cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	2b06      	cmp	r3, #6
 80046d2:	d02b      	beq.n	800472c <UART_SetConfig+0x90c>
 80046d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	2b07      	cmp	r3, #7
 80046da:	d023      	beq.n	8004724 <UART_SetConfig+0x904>
 80046dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d01b      	beq.n	800471c <UART_SetConfig+0x8fc>
 80046e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	2b09      	cmp	r3, #9
 80046ea:	d013      	beq.n	8004714 <UART_SetConfig+0x8f4>
 80046ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	2b0a      	cmp	r3, #10
 80046f2:	d00b      	beq.n	800470c <UART_SetConfig+0x8ec>
 80046f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	2b0b      	cmp	r3, #11
 80046fa:	d103      	bne.n	8004704 <UART_SetConfig+0x8e4>
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	2400      	movs	r4, #0
 8004702:	e02b      	b.n	800475c <UART_SetConfig+0x93c>
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	041b      	lsls	r3, r3, #16
 8004708:	2400      	movs	r4, #0
 800470a:	e027      	b.n	800475c <UART_SetConfig+0x93c>
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	025b      	lsls	r3, r3, #9
 8004710:	2400      	movs	r4, #0
 8004712:	e023      	b.n	800475c <UART_SetConfig+0x93c>
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	029b      	lsls	r3, r3, #10
 8004718:	2400      	movs	r4, #0
 800471a:	e01f      	b.n	800475c <UART_SetConfig+0x93c>
 800471c:	2380      	movs	r3, #128	; 0x80
 800471e:	02db      	lsls	r3, r3, #11
 8004720:	2400      	movs	r4, #0
 8004722:	e01b      	b.n	800475c <UART_SetConfig+0x93c>
 8004724:	2380      	movs	r3, #128	; 0x80
 8004726:	031b      	lsls	r3, r3, #12
 8004728:	2400      	movs	r4, #0
 800472a:	e017      	b.n	800475c <UART_SetConfig+0x93c>
 800472c:	4bb7      	ldr	r3, [pc, #732]	; (8004a0c <UART_SetConfig+0xbec>)
 800472e:	2400      	movs	r4, #0
 8004730:	e014      	b.n	800475c <UART_SetConfig+0x93c>
 8004732:	4bb7      	ldr	r3, [pc, #732]	; (8004a10 <UART_SetConfig+0xbf0>)
 8004734:	2400      	movs	r4, #0
 8004736:	e011      	b.n	800475c <UART_SetConfig+0x93c>
 8004738:	2380      	movs	r3, #128	; 0x80
 800473a:	035b      	lsls	r3, r3, #13
 800473c:	2400      	movs	r4, #0
 800473e:	e00d      	b.n	800475c <UART_SetConfig+0x93c>
 8004740:	4bb4      	ldr	r3, [pc, #720]	; (8004a14 <UART_SetConfig+0xbf4>)
 8004742:	2400      	movs	r4, #0
 8004744:	e00a      	b.n	800475c <UART_SetConfig+0x93c>
 8004746:	2380      	movs	r3, #128	; 0x80
 8004748:	039b      	lsls	r3, r3, #14
 800474a:	2400      	movs	r4, #0
 800474c:	e006      	b.n	800475c <UART_SetConfig+0x93c>
 800474e:	2380      	movs	r3, #128	; 0x80
 8004750:	03db      	lsls	r3, r3, #15
 8004752:	2400      	movs	r4, #0
 8004754:	e002      	b.n	800475c <UART_SetConfig+0x93c>
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	041b      	lsls	r3, r3, #16
 800475a:	2400      	movs	r4, #0
 800475c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800475e:	6852      	ldr	r2, [r2, #4]
 8004760:	0852      	lsrs	r2, r2, #1
 8004762:	60ba      	str	r2, [r7, #8]
 8004764:	2200      	movs	r2, #0
 8004766:	60fa      	str	r2, [r7, #12]
 8004768:	68b8      	ldr	r0, [r7, #8]
 800476a:	68f9      	ldr	r1, [r7, #12]
 800476c:	18c0      	adds	r0, r0, r3
 800476e:	4161      	adcs	r1, r4
 8004770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	603b      	str	r3, [r7, #0]
 8004776:	2300      	movs	r3, #0
 8004778:	607b      	str	r3, [r7, #4]
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f7fb fd87 	bl	8000290 <__aeabi_uldivmod>
 8004782:	0003      	movs	r3, r0
 8004784:	000c      	movs	r4, r1
 8004786:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8004788:	e007      	b.n	800479a <UART_SetConfig+0x97a>
          default:
            ret = HAL_ERROR;
 800478a:	231b      	movs	r3, #27
 800478c:	2258      	movs	r2, #88	; 0x58
 800478e:	4694      	mov	ip, r2
 8004790:	44bc      	add	ip, r7
 8004792:	4463      	add	r3, ip
 8004794:	2201      	movs	r2, #1
 8004796:	701a      	strb	r2, [r3, #0]
            break;
 8004798:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800479a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800479c:	4a9e      	ldr	r2, [pc, #632]	; (8004a18 <UART_SetConfig+0xbf8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d909      	bls.n	80047b6 <UART_SetConfig+0x996>
 80047a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047a4:	4a9d      	ldr	r2, [pc, #628]	; (8004a1c <UART_SetConfig+0xbfc>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d805      	bhi.n	80047b6 <UART_SetConfig+0x996>
        {
          huart->Instance->BRR = usartdiv;
 80047aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80047b0:	60da      	str	r2, [r3, #12]
 80047b2:	f000 fbc3 	bl	8004f3c <UART_SetConfig+0x111c>
        }
        else
        {
          ret = HAL_ERROR;
 80047b6:	231b      	movs	r3, #27
 80047b8:	2258      	movs	r2, #88	; 0x58
 80047ba:	4694      	mov	ip, r2
 80047bc:	44bc      	add	ip, r7
 80047be:	4463      	add	r3, ip
 80047c0:	2201      	movs	r2, #1
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	f000 fbba 	bl	8004f3c <UART_SetConfig+0x111c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ca:	69da      	ldr	r2, [r3, #28]
 80047cc:	2380      	movs	r3, #128	; 0x80
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d000      	beq.n	80047d6 <UART_SetConfig+0x9b6>
 80047d4:	e1e6      	b.n	8004ba4 <UART_SetConfig+0xd84>
  {
    switch (clocksource)
 80047d6:	2323      	movs	r3, #35	; 0x23
 80047d8:	2258      	movs	r2, #88	; 0x58
 80047da:	4694      	mov	ip, r2
 80047dc:	44bc      	add	ip, r7
 80047de:	4463      	add	r3, ip
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d100      	bne.n	80047e8 <UART_SetConfig+0x9c8>
 80047e6:	e06c      	b.n	80048c2 <UART_SetConfig+0xaa2>
 80047e8:	dc02      	bgt.n	80047f0 <UART_SetConfig+0x9d0>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d007      	beq.n	80047fe <UART_SetConfig+0x9de>
 80047ee:	e1a5      	b.n	8004b3c <UART_SetConfig+0xd1c>
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d100      	bne.n	80047f6 <UART_SetConfig+0x9d6>
 80047f4:	e0bc      	b.n	8004970 <UART_SetConfig+0xb50>
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d100      	bne.n	80047fc <UART_SetConfig+0x9dc>
 80047fa:	e13e      	b.n	8004a7a <UART_SetConfig+0xc5a>
 80047fc:	e19e      	b.n	8004b3c <UART_SetConfig+0xd1c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047fe:	f7fe fe2d 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 8004802:	0003      	movs	r3, r0
 8004804:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	2b00      	cmp	r3, #0
 800480c:	d044      	beq.n	8004898 <UART_SetConfig+0xa78>
 800480e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	2b01      	cmp	r3, #1
 8004814:	d03e      	beq.n	8004894 <UART_SetConfig+0xa74>
 8004816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	2b02      	cmp	r3, #2
 800481c:	d038      	beq.n	8004890 <UART_SetConfig+0xa70>
 800481e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	2b03      	cmp	r3, #3
 8004824:	d032      	beq.n	800488c <UART_SetConfig+0xa6c>
 8004826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	2b04      	cmp	r3, #4
 800482c:	d02c      	beq.n	8004888 <UART_SetConfig+0xa68>
 800482e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	2b05      	cmp	r3, #5
 8004834:	d026      	beq.n	8004884 <UART_SetConfig+0xa64>
 8004836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	2b06      	cmp	r3, #6
 800483c:	d020      	beq.n	8004880 <UART_SetConfig+0xa60>
 800483e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	2b07      	cmp	r3, #7
 8004844:	d01a      	beq.n	800487c <UART_SetConfig+0xa5c>
 8004846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	2b08      	cmp	r3, #8
 800484c:	d014      	beq.n	8004878 <UART_SetConfig+0xa58>
 800484e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	2b09      	cmp	r3, #9
 8004854:	d00e      	beq.n	8004874 <UART_SetConfig+0xa54>
 8004856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	2b0a      	cmp	r3, #10
 800485c:	d008      	beq.n	8004870 <UART_SetConfig+0xa50>
 800485e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	2b0b      	cmp	r3, #11
 8004864:	d102      	bne.n	800486c <UART_SetConfig+0xa4c>
 8004866:	2380      	movs	r3, #128	; 0x80
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	e016      	b.n	800489a <UART_SetConfig+0xa7a>
 800486c:	2301      	movs	r3, #1
 800486e:	e014      	b.n	800489a <UART_SetConfig+0xa7a>
 8004870:	2380      	movs	r3, #128	; 0x80
 8004872:	e012      	b.n	800489a <UART_SetConfig+0xa7a>
 8004874:	2340      	movs	r3, #64	; 0x40
 8004876:	e010      	b.n	800489a <UART_SetConfig+0xa7a>
 8004878:	2320      	movs	r3, #32
 800487a:	e00e      	b.n	800489a <UART_SetConfig+0xa7a>
 800487c:	2310      	movs	r3, #16
 800487e:	e00c      	b.n	800489a <UART_SetConfig+0xa7a>
 8004880:	230c      	movs	r3, #12
 8004882:	e00a      	b.n	800489a <UART_SetConfig+0xa7a>
 8004884:	230a      	movs	r3, #10
 8004886:	e008      	b.n	800489a <UART_SetConfig+0xa7a>
 8004888:	2308      	movs	r3, #8
 800488a:	e006      	b.n	800489a <UART_SetConfig+0xa7a>
 800488c:	2306      	movs	r3, #6
 800488e:	e004      	b.n	800489a <UART_SetConfig+0xa7a>
 8004890:	2304      	movs	r3, #4
 8004892:	e002      	b.n	800489a <UART_SetConfig+0xa7a>
 8004894:	2302      	movs	r3, #2
 8004896:	e000      	b.n	800489a <UART_SetConfig+0xa7a>
 8004898:	2301      	movs	r3, #1
 800489a:	0019      	movs	r1, r3
 800489c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800489e:	f7fb fc31 	bl	8000104 <__udivsi3>
 80048a2:	0003      	movs	r3, r0
 80048a4:	005a      	lsls	r2, r3, #1
 80048a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	18d2      	adds	r2, r2, r3
 80048ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	0019      	movs	r1, r3
 80048b4:	0010      	movs	r0, r2
 80048b6:	f7fb fc25 	bl	8000104 <__udivsi3>
 80048ba:	0003      	movs	r3, r0
 80048bc:	b29b      	uxth	r3, r3
 80048be:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80048c0:	e144      	b.n	8004b4c <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d043      	beq.n	8004952 <UART_SetConfig+0xb32>
 80048ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d03d      	beq.n	800494e <UART_SetConfig+0xb2e>
 80048d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d037      	beq.n	800494a <UART_SetConfig+0xb2a>
 80048da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d031      	beq.n	8004946 <UART_SetConfig+0xb26>
 80048e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d02b      	beq.n	8004942 <UART_SetConfig+0xb22>
 80048ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	2b05      	cmp	r3, #5
 80048f0:	d025      	beq.n	800493e <UART_SetConfig+0xb1e>
 80048f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	2b06      	cmp	r3, #6
 80048f8:	d01f      	beq.n	800493a <UART_SetConfig+0xb1a>
 80048fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	2b07      	cmp	r3, #7
 8004900:	d019      	beq.n	8004936 <UART_SetConfig+0xb16>
 8004902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	2b08      	cmp	r3, #8
 8004908:	d013      	beq.n	8004932 <UART_SetConfig+0xb12>
 800490a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	2b09      	cmp	r3, #9
 8004910:	d00d      	beq.n	800492e <UART_SetConfig+0xb0e>
 8004912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	2b0a      	cmp	r3, #10
 8004918:	d007      	beq.n	800492a <UART_SetConfig+0xb0a>
 800491a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	2b0b      	cmp	r3, #11
 8004920:	d101      	bne.n	8004926 <UART_SetConfig+0xb06>
 8004922:	4b3f      	ldr	r3, [pc, #252]	; (8004a20 <UART_SetConfig+0xc00>)
 8004924:	e016      	b.n	8004954 <UART_SetConfig+0xb34>
 8004926:	4b3f      	ldr	r3, [pc, #252]	; (8004a24 <UART_SetConfig+0xc04>)
 8004928:	e014      	b.n	8004954 <UART_SetConfig+0xb34>
 800492a:	4b3f      	ldr	r3, [pc, #252]	; (8004a28 <UART_SetConfig+0xc08>)
 800492c:	e012      	b.n	8004954 <UART_SetConfig+0xb34>
 800492e:	4b3f      	ldr	r3, [pc, #252]	; (8004a2c <UART_SetConfig+0xc0c>)
 8004930:	e010      	b.n	8004954 <UART_SetConfig+0xb34>
 8004932:	4b3f      	ldr	r3, [pc, #252]	; (8004a30 <UART_SetConfig+0xc10>)
 8004934:	e00e      	b.n	8004954 <UART_SetConfig+0xb34>
 8004936:	4b3f      	ldr	r3, [pc, #252]	; (8004a34 <UART_SetConfig+0xc14>)
 8004938:	e00c      	b.n	8004954 <UART_SetConfig+0xb34>
 800493a:	4b3f      	ldr	r3, [pc, #252]	; (8004a38 <UART_SetConfig+0xc18>)
 800493c:	e00a      	b.n	8004954 <UART_SetConfig+0xb34>
 800493e:	4b3f      	ldr	r3, [pc, #252]	; (8004a3c <UART_SetConfig+0xc1c>)
 8004940:	e008      	b.n	8004954 <UART_SetConfig+0xb34>
 8004942:	4b3f      	ldr	r3, [pc, #252]	; (8004a40 <UART_SetConfig+0xc20>)
 8004944:	e006      	b.n	8004954 <UART_SetConfig+0xb34>
 8004946:	4b3f      	ldr	r3, [pc, #252]	; (8004a44 <UART_SetConfig+0xc24>)
 8004948:	e004      	b.n	8004954 <UART_SetConfig+0xb34>
 800494a:	4b3f      	ldr	r3, [pc, #252]	; (8004a48 <UART_SetConfig+0xc28>)
 800494c:	e002      	b.n	8004954 <UART_SetConfig+0xb34>
 800494e:	4b3f      	ldr	r3, [pc, #252]	; (8004a4c <UART_SetConfig+0xc2c>)
 8004950:	e000      	b.n	8004954 <UART_SetConfig+0xb34>
 8004952:	4b34      	ldr	r3, [pc, #208]	; (8004a24 <UART_SetConfig+0xc04>)
 8004954:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004956:	6852      	ldr	r2, [r2, #4]
 8004958:	0852      	lsrs	r2, r2, #1
 800495a:	189a      	adds	r2, r3, r2
 800495c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	0019      	movs	r1, r3
 8004962:	0010      	movs	r0, r2
 8004964:	f7fb fbce 	bl	8000104 <__udivsi3>
 8004968:	0003      	movs	r3, r0
 800496a:	b29b      	uxth	r3, r3
 800496c:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800496e:	e0ed      	b.n	8004b4c <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004970:	f7fe fce8 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 8004974:	0003      	movs	r3, r0
 8004976:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	2b00      	cmp	r3, #0
 800497e:	d100      	bne.n	8004982 <UART_SetConfig+0xb62>
 8004980:	e066      	b.n	8004a50 <UART_SetConfig+0xc30>
 8004982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	2b01      	cmp	r3, #1
 8004988:	d03e      	beq.n	8004a08 <UART_SetConfig+0xbe8>
 800498a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	2b02      	cmp	r3, #2
 8004990:	d038      	beq.n	8004a04 <UART_SetConfig+0xbe4>
 8004992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	2b03      	cmp	r3, #3
 8004998:	d032      	beq.n	8004a00 <UART_SetConfig+0xbe0>
 800499a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d02c      	beq.n	80049fc <UART_SetConfig+0xbdc>
 80049a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	2b05      	cmp	r3, #5
 80049a8:	d026      	beq.n	80049f8 <UART_SetConfig+0xbd8>
 80049aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	2b06      	cmp	r3, #6
 80049b0:	d020      	beq.n	80049f4 <UART_SetConfig+0xbd4>
 80049b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	2b07      	cmp	r3, #7
 80049b8:	d01a      	beq.n	80049f0 <UART_SetConfig+0xbd0>
 80049ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	2b08      	cmp	r3, #8
 80049c0:	d014      	beq.n	80049ec <UART_SetConfig+0xbcc>
 80049c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	2b09      	cmp	r3, #9
 80049c8:	d00e      	beq.n	80049e8 <UART_SetConfig+0xbc8>
 80049ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	2b0a      	cmp	r3, #10
 80049d0:	d008      	beq.n	80049e4 <UART_SetConfig+0xbc4>
 80049d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	2b0b      	cmp	r3, #11
 80049d8:	d102      	bne.n	80049e0 <UART_SetConfig+0xbc0>
 80049da:	2380      	movs	r3, #128	; 0x80
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	e038      	b.n	8004a52 <UART_SetConfig+0xc32>
 80049e0:	2301      	movs	r3, #1
 80049e2:	e036      	b.n	8004a52 <UART_SetConfig+0xc32>
 80049e4:	2380      	movs	r3, #128	; 0x80
 80049e6:	e034      	b.n	8004a52 <UART_SetConfig+0xc32>
 80049e8:	2340      	movs	r3, #64	; 0x40
 80049ea:	e032      	b.n	8004a52 <UART_SetConfig+0xc32>
 80049ec:	2320      	movs	r3, #32
 80049ee:	e030      	b.n	8004a52 <UART_SetConfig+0xc32>
 80049f0:	2310      	movs	r3, #16
 80049f2:	e02e      	b.n	8004a52 <UART_SetConfig+0xc32>
 80049f4:	230c      	movs	r3, #12
 80049f6:	e02c      	b.n	8004a52 <UART_SetConfig+0xc32>
 80049f8:	230a      	movs	r3, #10
 80049fa:	e02a      	b.n	8004a52 <UART_SetConfig+0xc32>
 80049fc:	2308      	movs	r3, #8
 80049fe:	e028      	b.n	8004a52 <UART_SetConfig+0xc32>
 8004a00:	2306      	movs	r3, #6
 8004a02:	e026      	b.n	8004a52 <UART_SetConfig+0xc32>
 8004a04:	2304      	movs	r3, #4
 8004a06:	e024      	b.n	8004a52 <UART_SetConfig+0xc32>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e022      	b.n	8004a52 <UART_SetConfig+0xc32>
 8004a0c:	000aaa00 	.word	0x000aaa00
 8004a10:	000ccc00 	.word	0x000ccc00
 8004a14:	00155500 	.word	0x00155500
 8004a18:	000002ff 	.word	0x000002ff
 8004a1c:	000fffff 	.word	0x000fffff
 8004a20:	0001e848 	.word	0x0001e848
 8004a24:	01e84800 	.word	0x01e84800
 8004a28:	0003d090 	.word	0x0003d090
 8004a2c:	0007a120 	.word	0x0007a120
 8004a30:	000f4240 	.word	0x000f4240
 8004a34:	001e8480 	.word	0x001e8480
 8004a38:	0028b0aa 	.word	0x0028b0aa
 8004a3c:	0030d400 	.word	0x0030d400
 8004a40:	003d0900 	.word	0x003d0900
 8004a44:	00516154 	.word	0x00516154
 8004a48:	007a1200 	.word	0x007a1200
 8004a4c:	00f42400 	.word	0x00f42400
 8004a50:	2301      	movs	r3, #1
 8004a52:	0019      	movs	r1, r3
 8004a54:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004a56:	f7fb fb55 	bl	8000104 <__udivsi3>
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	005a      	lsls	r2, r3, #1
 8004a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	085b      	lsrs	r3, r3, #1
 8004a64:	18d2      	adds	r2, r2, r3
 8004a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	0019      	movs	r1, r3
 8004a6c:	0010      	movs	r0, r2
 8004a6e:	f7fb fb49 	bl	8000104 <__udivsi3>
 8004a72:	0003      	movs	r3, r0
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004a78:	e068      	b.n	8004b4c <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d04c      	beq.n	8004b1c <UART_SetConfig+0xcfc>
 8004a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d045      	beq.n	8004b16 <UART_SetConfig+0xcf6>
 8004a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d03e      	beq.n	8004b10 <UART_SetConfig+0xcf0>
 8004a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	2b03      	cmp	r3, #3
 8004a98:	d038      	beq.n	8004b0c <UART_SetConfig+0xcec>
 8004a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d031      	beq.n	8004b06 <UART_SetConfig+0xce6>
 8004aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	2b05      	cmp	r3, #5
 8004aa8:	d02b      	beq.n	8004b02 <UART_SetConfig+0xce2>
 8004aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	2b06      	cmp	r3, #6
 8004ab0:	d025      	beq.n	8004afe <UART_SetConfig+0xcde>
 8004ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	2b07      	cmp	r3, #7
 8004ab8:	d01e      	beq.n	8004af8 <UART_SetConfig+0xcd8>
 8004aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d017      	beq.n	8004af2 <UART_SetConfig+0xcd2>
 8004ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	2b09      	cmp	r3, #9
 8004ac8:	d010      	beq.n	8004aec <UART_SetConfig+0xccc>
 8004aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	2b0a      	cmp	r3, #10
 8004ad0:	d009      	beq.n	8004ae6 <UART_SetConfig+0xcc6>
 8004ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	2b0b      	cmp	r3, #11
 8004ad8:	d102      	bne.n	8004ae0 <UART_SetConfig+0xcc0>
 8004ada:	2380      	movs	r3, #128	; 0x80
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	e01f      	b.n	8004b20 <UART_SetConfig+0xd00>
 8004ae0:	2380      	movs	r3, #128	; 0x80
 8004ae2:	025b      	lsls	r3, r3, #9
 8004ae4:	e01c      	b.n	8004b20 <UART_SetConfig+0xd00>
 8004ae6:	2380      	movs	r3, #128	; 0x80
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	e019      	b.n	8004b20 <UART_SetConfig+0xd00>
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	e016      	b.n	8004b20 <UART_SetConfig+0xd00>
 8004af2:	2380      	movs	r3, #128	; 0x80
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	e013      	b.n	8004b20 <UART_SetConfig+0xd00>
 8004af8:	2380      	movs	r3, #128	; 0x80
 8004afa:	015b      	lsls	r3, r3, #5
 8004afc:	e010      	b.n	8004b20 <UART_SetConfig+0xd00>
 8004afe:	4bb7      	ldr	r3, [pc, #732]	; (8004ddc <UART_SetConfig+0xfbc>)
 8004b00:	e00e      	b.n	8004b20 <UART_SetConfig+0xd00>
 8004b02:	4bb7      	ldr	r3, [pc, #732]	; (8004de0 <UART_SetConfig+0xfc0>)
 8004b04:	e00c      	b.n	8004b20 <UART_SetConfig+0xd00>
 8004b06:	2380      	movs	r3, #128	; 0x80
 8004b08:	019b      	lsls	r3, r3, #6
 8004b0a:	e009      	b.n	8004b20 <UART_SetConfig+0xd00>
 8004b0c:	4bb5      	ldr	r3, [pc, #724]	; (8004de4 <UART_SetConfig+0xfc4>)
 8004b0e:	e007      	b.n	8004b20 <UART_SetConfig+0xd00>
 8004b10:	2380      	movs	r3, #128	; 0x80
 8004b12:	01db      	lsls	r3, r3, #7
 8004b14:	e004      	b.n	8004b20 <UART_SetConfig+0xd00>
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	e001      	b.n	8004b20 <UART_SetConfig+0xd00>
 8004b1c:	2380      	movs	r3, #128	; 0x80
 8004b1e:	025b      	lsls	r3, r3, #9
 8004b20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b22:	6852      	ldr	r2, [r2, #4]
 8004b24:	0852      	lsrs	r2, r2, #1
 8004b26:	189a      	adds	r2, r3, r2
 8004b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	0019      	movs	r1, r3
 8004b2e:	0010      	movs	r0, r2
 8004b30:	f7fb fae8 	bl	8000104 <__udivsi3>
 8004b34:	0003      	movs	r3, r0
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004b3a:	e007      	b.n	8004b4c <UART_SetConfig+0xd2c>
      default:
        ret = HAL_ERROR;
 8004b3c:	231b      	movs	r3, #27
 8004b3e:	2258      	movs	r2, #88	; 0x58
 8004b40:	4694      	mov	ip, r2
 8004b42:	44bc      	add	ip, r7
 8004b44:	4463      	add	r3, ip
 8004b46:	2201      	movs	r2, #1
 8004b48:	701a      	strb	r2, [r3, #0]
        break;
 8004b4a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b4e:	2b0f      	cmp	r3, #15
 8004b50:	d920      	bls.n	8004b94 <UART_SetConfig+0xd74>
 8004b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b54:	4aa4      	ldr	r2, [pc, #656]	; (8004de8 <UART_SetConfig+0xfc8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d81c      	bhi.n	8004b94 <UART_SetConfig+0xd74>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	200e      	movs	r0, #14
 8004b60:	2458      	movs	r4, #88	; 0x58
 8004b62:	193b      	adds	r3, r7, r4
 8004b64:	181b      	adds	r3, r3, r0
 8004b66:	210f      	movs	r1, #15
 8004b68:	438a      	bics	r2, r1
 8004b6a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b6e:	085b      	lsrs	r3, r3, #1
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2207      	movs	r2, #7
 8004b74:	4013      	ands	r3, r2
 8004b76:	b299      	uxth	r1, r3
 8004b78:	193b      	adds	r3, r7, r4
 8004b7a:	181b      	adds	r3, r3, r0
 8004b7c:	193a      	adds	r2, r7, r4
 8004b7e:	1812      	adds	r2, r2, r0
 8004b80:	8812      	ldrh	r2, [r2, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	193a      	adds	r2, r7, r4
 8004b8c:	1812      	adds	r2, r2, r0
 8004b8e:	8812      	ldrh	r2, [r2, #0]
 8004b90:	60da      	str	r2, [r3, #12]
 8004b92:	e1d3      	b.n	8004f3c <UART_SetConfig+0x111c>
    }
    else
    {
      ret = HAL_ERROR;
 8004b94:	231b      	movs	r3, #27
 8004b96:	2258      	movs	r2, #88	; 0x58
 8004b98:	4694      	mov	ip, r2
 8004b9a:	44bc      	add	ip, r7
 8004b9c:	4463      	add	r3, ip
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	701a      	strb	r2, [r3, #0]
 8004ba2:	e1cb      	b.n	8004f3c <UART_SetConfig+0x111c>
    }
  }
  else
  {
    switch (clocksource)
 8004ba4:	2323      	movs	r3, #35	; 0x23
 8004ba6:	2258      	movs	r2, #88	; 0x58
 8004ba8:	4694      	mov	ip, r2
 8004baa:	44bc      	add	ip, r7
 8004bac:	4463      	add	r3, ip
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d100      	bne.n	8004bb6 <UART_SetConfig+0xd96>
 8004bb4:	e06c      	b.n	8004c90 <UART_SetConfig+0xe70>
 8004bb6:	dc02      	bgt.n	8004bbe <UART_SetConfig+0xd9e>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <UART_SetConfig+0xdac>
 8004bbc:	e1a3      	b.n	8004f06 <UART_SetConfig+0x10e6>
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d100      	bne.n	8004bc4 <UART_SetConfig+0xda4>
 8004bc2:	e0bc      	b.n	8004d3e <UART_SetConfig+0xf1e>
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d100      	bne.n	8004bca <UART_SetConfig+0xdaa>
 8004bc8:	e13d      	b.n	8004e46 <UART_SetConfig+0x1026>
 8004bca:	e19c      	b.n	8004f06 <UART_SetConfig+0x10e6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bcc:	f7fe fc46 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d044      	beq.n	8004c66 <UART_SetConfig+0xe46>
 8004bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d03e      	beq.n	8004c62 <UART_SetConfig+0xe42>
 8004be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d038      	beq.n	8004c5e <UART_SetConfig+0xe3e>
 8004bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d032      	beq.n	8004c5a <UART_SetConfig+0xe3a>
 8004bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d02c      	beq.n	8004c56 <UART_SetConfig+0xe36>
 8004bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	2b05      	cmp	r3, #5
 8004c02:	d026      	beq.n	8004c52 <UART_SetConfig+0xe32>
 8004c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	2b06      	cmp	r3, #6
 8004c0a:	d020      	beq.n	8004c4e <UART_SetConfig+0xe2e>
 8004c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	2b07      	cmp	r3, #7
 8004c12:	d01a      	beq.n	8004c4a <UART_SetConfig+0xe2a>
 8004c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d014      	beq.n	8004c46 <UART_SetConfig+0xe26>
 8004c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	2b09      	cmp	r3, #9
 8004c22:	d00e      	beq.n	8004c42 <UART_SetConfig+0xe22>
 8004c24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	2b0a      	cmp	r3, #10
 8004c2a:	d008      	beq.n	8004c3e <UART_SetConfig+0xe1e>
 8004c2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	2b0b      	cmp	r3, #11
 8004c32:	d102      	bne.n	8004c3a <UART_SetConfig+0xe1a>
 8004c34:	2380      	movs	r3, #128	; 0x80
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	e016      	b.n	8004c68 <UART_SetConfig+0xe48>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e014      	b.n	8004c68 <UART_SetConfig+0xe48>
 8004c3e:	2380      	movs	r3, #128	; 0x80
 8004c40:	e012      	b.n	8004c68 <UART_SetConfig+0xe48>
 8004c42:	2340      	movs	r3, #64	; 0x40
 8004c44:	e010      	b.n	8004c68 <UART_SetConfig+0xe48>
 8004c46:	2320      	movs	r3, #32
 8004c48:	e00e      	b.n	8004c68 <UART_SetConfig+0xe48>
 8004c4a:	2310      	movs	r3, #16
 8004c4c:	e00c      	b.n	8004c68 <UART_SetConfig+0xe48>
 8004c4e:	230c      	movs	r3, #12
 8004c50:	e00a      	b.n	8004c68 <UART_SetConfig+0xe48>
 8004c52:	230a      	movs	r3, #10
 8004c54:	e008      	b.n	8004c68 <UART_SetConfig+0xe48>
 8004c56:	2308      	movs	r3, #8
 8004c58:	e006      	b.n	8004c68 <UART_SetConfig+0xe48>
 8004c5a:	2306      	movs	r3, #6
 8004c5c:	e004      	b.n	8004c68 <UART_SetConfig+0xe48>
 8004c5e:	2304      	movs	r3, #4
 8004c60:	e002      	b.n	8004c68 <UART_SetConfig+0xe48>
 8004c62:	2302      	movs	r3, #2
 8004c64:	e000      	b.n	8004c68 <UART_SetConfig+0xe48>
 8004c66:	2301      	movs	r3, #1
 8004c68:	0019      	movs	r1, r3
 8004c6a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004c6c:	f7fb fa4a 	bl	8000104 <__udivsi3>
 8004c70:	0003      	movs	r3, r0
 8004c72:	001a      	movs	r2, r3
 8004c74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	085b      	lsrs	r3, r3, #1
 8004c7a:	18d2      	adds	r2, r2, r3
 8004c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	0019      	movs	r1, r3
 8004c82:	0010      	movs	r0, r2
 8004c84:	f7fb fa3e 	bl	8000104 <__udivsi3>
 8004c88:	0003      	movs	r3, r0
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004c8e:	e142      	b.n	8004f16 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d043      	beq.n	8004d20 <UART_SetConfig+0xf00>
 8004c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d03d      	beq.n	8004d1c <UART_SetConfig+0xefc>
 8004ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d037      	beq.n	8004d18 <UART_SetConfig+0xef8>
 8004ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d031      	beq.n	8004d14 <UART_SetConfig+0xef4>
 8004cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d02b      	beq.n	8004d10 <UART_SetConfig+0xef0>
 8004cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	2b05      	cmp	r3, #5
 8004cbe:	d025      	beq.n	8004d0c <UART_SetConfig+0xeec>
 8004cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	2b06      	cmp	r3, #6
 8004cc6:	d01f      	beq.n	8004d08 <UART_SetConfig+0xee8>
 8004cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	2b07      	cmp	r3, #7
 8004cce:	d019      	beq.n	8004d04 <UART_SetConfig+0xee4>
 8004cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d013      	beq.n	8004d00 <UART_SetConfig+0xee0>
 8004cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	2b09      	cmp	r3, #9
 8004cde:	d00d      	beq.n	8004cfc <UART_SetConfig+0xedc>
 8004ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	2b0a      	cmp	r3, #10
 8004ce6:	d007      	beq.n	8004cf8 <UART_SetConfig+0xed8>
 8004ce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	2b0b      	cmp	r3, #11
 8004cee:	d101      	bne.n	8004cf4 <UART_SetConfig+0xed4>
 8004cf0:	4b3e      	ldr	r3, [pc, #248]	; (8004dec <UART_SetConfig+0xfcc>)
 8004cf2:	e016      	b.n	8004d22 <UART_SetConfig+0xf02>
 8004cf4:	4b3e      	ldr	r3, [pc, #248]	; (8004df0 <UART_SetConfig+0xfd0>)
 8004cf6:	e014      	b.n	8004d22 <UART_SetConfig+0xf02>
 8004cf8:	4b3e      	ldr	r3, [pc, #248]	; (8004df4 <UART_SetConfig+0xfd4>)
 8004cfa:	e012      	b.n	8004d22 <UART_SetConfig+0xf02>
 8004cfc:	4b3e      	ldr	r3, [pc, #248]	; (8004df8 <UART_SetConfig+0xfd8>)
 8004cfe:	e010      	b.n	8004d22 <UART_SetConfig+0xf02>
 8004d00:	4b3e      	ldr	r3, [pc, #248]	; (8004dfc <UART_SetConfig+0xfdc>)
 8004d02:	e00e      	b.n	8004d22 <UART_SetConfig+0xf02>
 8004d04:	4b3e      	ldr	r3, [pc, #248]	; (8004e00 <UART_SetConfig+0xfe0>)
 8004d06:	e00c      	b.n	8004d22 <UART_SetConfig+0xf02>
 8004d08:	4b3e      	ldr	r3, [pc, #248]	; (8004e04 <UART_SetConfig+0xfe4>)
 8004d0a:	e00a      	b.n	8004d22 <UART_SetConfig+0xf02>
 8004d0c:	4b3e      	ldr	r3, [pc, #248]	; (8004e08 <UART_SetConfig+0xfe8>)
 8004d0e:	e008      	b.n	8004d22 <UART_SetConfig+0xf02>
 8004d10:	4b3e      	ldr	r3, [pc, #248]	; (8004e0c <UART_SetConfig+0xfec>)
 8004d12:	e006      	b.n	8004d22 <UART_SetConfig+0xf02>
 8004d14:	4b3e      	ldr	r3, [pc, #248]	; (8004e10 <UART_SetConfig+0xff0>)
 8004d16:	e004      	b.n	8004d22 <UART_SetConfig+0xf02>
 8004d18:	4b3e      	ldr	r3, [pc, #248]	; (8004e14 <UART_SetConfig+0xff4>)
 8004d1a:	e002      	b.n	8004d22 <UART_SetConfig+0xf02>
 8004d1c:	4b3e      	ldr	r3, [pc, #248]	; (8004e18 <UART_SetConfig+0xff8>)
 8004d1e:	e000      	b.n	8004d22 <UART_SetConfig+0xf02>
 8004d20:	4b33      	ldr	r3, [pc, #204]	; (8004df0 <UART_SetConfig+0xfd0>)
 8004d22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d24:	6852      	ldr	r2, [r2, #4]
 8004d26:	0852      	lsrs	r2, r2, #1
 8004d28:	189a      	adds	r2, r3, r2
 8004d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	0019      	movs	r1, r3
 8004d30:	0010      	movs	r0, r2
 8004d32:	f7fb f9e7 	bl	8000104 <__udivsi3>
 8004d36:	0003      	movs	r3, r0
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004d3c:	e0eb      	b.n	8004f16 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d3e:	f7fe fb01 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 8004d42:	0003      	movs	r3, r0
 8004d44:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d100      	bne.n	8004d50 <UART_SetConfig+0xf30>
 8004d4e:	e065      	b.n	8004e1c <UART_SetConfig+0xffc>
 8004d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d03e      	beq.n	8004dd6 <UART_SetConfig+0xfb6>
 8004d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d038      	beq.n	8004dd2 <UART_SetConfig+0xfb2>
 8004d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d032      	beq.n	8004dce <UART_SetConfig+0xfae>
 8004d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d02c      	beq.n	8004dca <UART_SetConfig+0xfaa>
 8004d70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	2b05      	cmp	r3, #5
 8004d76:	d026      	beq.n	8004dc6 <UART_SetConfig+0xfa6>
 8004d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	2b06      	cmp	r3, #6
 8004d7e:	d020      	beq.n	8004dc2 <UART_SetConfig+0xfa2>
 8004d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	2b07      	cmp	r3, #7
 8004d86:	d01a      	beq.n	8004dbe <UART_SetConfig+0xf9e>
 8004d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d014      	beq.n	8004dba <UART_SetConfig+0xf9a>
 8004d90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	2b09      	cmp	r3, #9
 8004d96:	d00e      	beq.n	8004db6 <UART_SetConfig+0xf96>
 8004d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	2b0a      	cmp	r3, #10
 8004d9e:	d008      	beq.n	8004db2 <UART_SetConfig+0xf92>
 8004da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	2b0b      	cmp	r3, #11
 8004da6:	d102      	bne.n	8004dae <UART_SetConfig+0xf8e>
 8004da8:	2380      	movs	r3, #128	; 0x80
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	e037      	b.n	8004e1e <UART_SetConfig+0xffe>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e035      	b.n	8004e1e <UART_SetConfig+0xffe>
 8004db2:	2380      	movs	r3, #128	; 0x80
 8004db4:	e033      	b.n	8004e1e <UART_SetConfig+0xffe>
 8004db6:	2340      	movs	r3, #64	; 0x40
 8004db8:	e031      	b.n	8004e1e <UART_SetConfig+0xffe>
 8004dba:	2320      	movs	r3, #32
 8004dbc:	e02f      	b.n	8004e1e <UART_SetConfig+0xffe>
 8004dbe:	2310      	movs	r3, #16
 8004dc0:	e02d      	b.n	8004e1e <UART_SetConfig+0xffe>
 8004dc2:	230c      	movs	r3, #12
 8004dc4:	e02b      	b.n	8004e1e <UART_SetConfig+0xffe>
 8004dc6:	230a      	movs	r3, #10
 8004dc8:	e029      	b.n	8004e1e <UART_SetConfig+0xffe>
 8004dca:	2308      	movs	r3, #8
 8004dcc:	e027      	b.n	8004e1e <UART_SetConfig+0xffe>
 8004dce:	2306      	movs	r3, #6
 8004dd0:	e025      	b.n	8004e1e <UART_SetConfig+0xffe>
 8004dd2:	2304      	movs	r3, #4
 8004dd4:	e023      	b.n	8004e1e <UART_SetConfig+0xffe>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e021      	b.n	8004e1e <UART_SetConfig+0xffe>
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	00001554 	.word	0x00001554
 8004de0:	00001998 	.word	0x00001998
 8004de4:	00002aaa 	.word	0x00002aaa
 8004de8:	0000ffff 	.word	0x0000ffff
 8004dec:	0000f424 	.word	0x0000f424
 8004df0:	00f42400 	.word	0x00f42400
 8004df4:	0001e848 	.word	0x0001e848
 8004df8:	0003d090 	.word	0x0003d090
 8004dfc:	0007a120 	.word	0x0007a120
 8004e00:	000f4240 	.word	0x000f4240
 8004e04:	00145855 	.word	0x00145855
 8004e08:	00186a00 	.word	0x00186a00
 8004e0c:	001e8480 	.word	0x001e8480
 8004e10:	0028b0aa 	.word	0x0028b0aa
 8004e14:	003d0900 	.word	0x003d0900
 8004e18:	007a1200 	.word	0x007a1200
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	0019      	movs	r1, r3
 8004e20:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004e22:	f7fb f96f 	bl	8000104 <__udivsi3>
 8004e26:	0003      	movs	r3, r0
 8004e28:	001a      	movs	r2, r3
 8004e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	085b      	lsrs	r3, r3, #1
 8004e30:	18d2      	adds	r2, r2, r3
 8004e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	0019      	movs	r1, r3
 8004e38:	0010      	movs	r0, r2
 8004e3a:	f7fb f963 	bl	8000104 <__udivsi3>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004e44:	e067      	b.n	8004f16 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d04b      	beq.n	8004ee6 <UART_SetConfig+0x10c6>
 8004e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d044      	beq.n	8004ee0 <UART_SetConfig+0x10c0>
 8004e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d03d      	beq.n	8004eda <UART_SetConfig+0x10ba>
 8004e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d037      	beq.n	8004ed6 <UART_SetConfig+0x10b6>
 8004e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d030      	beq.n	8004ed0 <UART_SetConfig+0x10b0>
 8004e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	2b05      	cmp	r3, #5
 8004e74:	d02a      	beq.n	8004ecc <UART_SetConfig+0x10ac>
 8004e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	2b06      	cmp	r3, #6
 8004e7c:	d024      	beq.n	8004ec8 <UART_SetConfig+0x10a8>
 8004e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	2b07      	cmp	r3, #7
 8004e84:	d01d      	beq.n	8004ec2 <UART_SetConfig+0x10a2>
 8004e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d016      	beq.n	8004ebc <UART_SetConfig+0x109c>
 8004e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	2b09      	cmp	r3, #9
 8004e94:	d00f      	beq.n	8004eb6 <UART_SetConfig+0x1096>
 8004e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	2b0a      	cmp	r3, #10
 8004e9c:	d008      	beq.n	8004eb0 <UART_SetConfig+0x1090>
 8004e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	2b0b      	cmp	r3, #11
 8004ea4:	d101      	bne.n	8004eaa <UART_SetConfig+0x108a>
 8004ea6:	2380      	movs	r3, #128	; 0x80
 8004ea8:	e01f      	b.n	8004eea <UART_SetConfig+0x10ca>
 8004eaa:	2380      	movs	r3, #128	; 0x80
 8004eac:	021b      	lsls	r3, r3, #8
 8004eae:	e01c      	b.n	8004eea <UART_SetConfig+0x10ca>
 8004eb0:	2380      	movs	r3, #128	; 0x80
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	e019      	b.n	8004eea <UART_SetConfig+0x10ca>
 8004eb6:	2380      	movs	r3, #128	; 0x80
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	e016      	b.n	8004eea <UART_SetConfig+0x10ca>
 8004ebc:	2380      	movs	r3, #128	; 0x80
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	e013      	b.n	8004eea <UART_SetConfig+0x10ca>
 8004ec2:	2380      	movs	r3, #128	; 0x80
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	e010      	b.n	8004eea <UART_SetConfig+0x10ca>
 8004ec8:	4b28      	ldr	r3, [pc, #160]	; (8004f6c <UART_SetConfig+0x114c>)
 8004eca:	e00e      	b.n	8004eea <UART_SetConfig+0x10ca>
 8004ecc:	4b28      	ldr	r3, [pc, #160]	; (8004f70 <UART_SetConfig+0x1150>)
 8004ece:	e00c      	b.n	8004eea <UART_SetConfig+0x10ca>
 8004ed0:	2380      	movs	r3, #128	; 0x80
 8004ed2:	015b      	lsls	r3, r3, #5
 8004ed4:	e009      	b.n	8004eea <UART_SetConfig+0x10ca>
 8004ed6:	4b27      	ldr	r3, [pc, #156]	; (8004f74 <UART_SetConfig+0x1154>)
 8004ed8:	e007      	b.n	8004eea <UART_SetConfig+0x10ca>
 8004eda:	2380      	movs	r3, #128	; 0x80
 8004edc:	019b      	lsls	r3, r3, #6
 8004ede:	e004      	b.n	8004eea <UART_SetConfig+0x10ca>
 8004ee0:	2380      	movs	r3, #128	; 0x80
 8004ee2:	01db      	lsls	r3, r3, #7
 8004ee4:	e001      	b.n	8004eea <UART_SetConfig+0x10ca>
 8004ee6:	2380      	movs	r3, #128	; 0x80
 8004ee8:	021b      	lsls	r3, r3, #8
 8004eea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004eec:	6852      	ldr	r2, [r2, #4]
 8004eee:	0852      	lsrs	r2, r2, #1
 8004ef0:	189a      	adds	r2, r3, r2
 8004ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	0019      	movs	r1, r3
 8004ef8:	0010      	movs	r0, r2
 8004efa:	f7fb f903 	bl	8000104 <__udivsi3>
 8004efe:	0003      	movs	r3, r0
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004f04:	e007      	b.n	8004f16 <UART_SetConfig+0x10f6>
      default:
        ret = HAL_ERROR;
 8004f06:	231b      	movs	r3, #27
 8004f08:	2258      	movs	r2, #88	; 0x58
 8004f0a:	4694      	mov	ip, r2
 8004f0c:	44bc      	add	ip, r7
 8004f0e:	4463      	add	r3, ip
 8004f10:	2201      	movs	r2, #1
 8004f12:	701a      	strb	r2, [r3, #0]
        break;
 8004f14:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f18:	2b0f      	cmp	r3, #15
 8004f1a:	d908      	bls.n	8004f2e <UART_SetConfig+0x110e>
 8004f1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f1e:	4a16      	ldr	r2, [pc, #88]	; (8004f78 <UART_SetConfig+0x1158>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d804      	bhi.n	8004f2e <UART_SetConfig+0x110e>
    {
      huart->Instance->BRR = usartdiv;
 8004f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f2a:	60da      	str	r2, [r3, #12]
 8004f2c:	e006      	b.n	8004f3c <UART_SetConfig+0x111c>
    }
    else
    {
      ret = HAL_ERROR;
 8004f2e:	231b      	movs	r3, #27
 8004f30:	2258      	movs	r2, #88	; 0x58
 8004f32:	4694      	mov	ip, r2
 8004f34:	44bc      	add	ip, r7
 8004f36:	4463      	add	r3, ip
 8004f38:	2201      	movs	r2, #1
 8004f3a:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f3e:	226a      	movs	r2, #106	; 0x6a
 8004f40:	2101      	movs	r1, #1
 8004f42:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f46:	2268      	movs	r2, #104	; 0x68
 8004f48:	2101      	movs	r1, #1
 8004f4a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f4e:	2200      	movs	r2, #0
 8004f50:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f54:	2200      	movs	r2, #0
 8004f56:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004f58:	231b      	movs	r3, #27
 8004f5a:	2258      	movs	r2, #88	; 0x58
 8004f5c:	4694      	mov	ip, r2
 8004f5e:	44bc      	add	ip, r7
 8004f60:	4463      	add	r3, ip
 8004f62:	781b      	ldrb	r3, [r3, #0]
}
 8004f64:	0018      	movs	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	b021      	add	sp, #132	; 0x84
 8004f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f6c:	00000aaa 	.word	0x00000aaa
 8004f70:	00000ccc 	.word	0x00000ccc
 8004f74:	00001555 	.word	0x00001555
 8004f78:	0000ffff 	.word	0x0000ffff

08004f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	2201      	movs	r2, #1
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	d00b      	beq.n	8004fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	4a4a      	ldr	r2, [pc, #296]	; (80050c0 <UART_AdvFeatureConfig+0x144>)
 8004f96:	4013      	ands	r3, r2
 8004f98:	0019      	movs	r1, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	2202      	movs	r2, #2
 8004fac:	4013      	ands	r3, r2
 8004fae:	d00b      	beq.n	8004fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	4a43      	ldr	r2, [pc, #268]	; (80050c4 <UART_AdvFeatureConfig+0x148>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	0019      	movs	r1, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	2204      	movs	r2, #4
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d00b      	beq.n	8004fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	4a3b      	ldr	r2, [pc, #236]	; (80050c8 <UART_AdvFeatureConfig+0x14c>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	0019      	movs	r1, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fee:	2208      	movs	r2, #8
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d00b      	beq.n	800500c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	4a34      	ldr	r2, [pc, #208]	; (80050cc <UART_AdvFeatureConfig+0x150>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	0019      	movs	r1, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005010:	2210      	movs	r2, #16
 8005012:	4013      	ands	r3, r2
 8005014:	d00b      	beq.n	800502e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4a2c      	ldr	r2, [pc, #176]	; (80050d0 <UART_AdvFeatureConfig+0x154>)
 800501e:	4013      	ands	r3, r2
 8005020:	0019      	movs	r1, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005032:	2220      	movs	r2, #32
 8005034:	4013      	ands	r3, r2
 8005036:	d00b      	beq.n	8005050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	4a25      	ldr	r2, [pc, #148]	; (80050d4 <UART_AdvFeatureConfig+0x158>)
 8005040:	4013      	ands	r3, r2
 8005042:	0019      	movs	r1, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	2240      	movs	r2, #64	; 0x40
 8005056:	4013      	ands	r3, r2
 8005058:	d01d      	beq.n	8005096 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	4a1d      	ldr	r2, [pc, #116]	; (80050d8 <UART_AdvFeatureConfig+0x15c>)
 8005062:	4013      	ands	r3, r2
 8005064:	0019      	movs	r1, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005076:	2380      	movs	r3, #128	; 0x80
 8005078:	035b      	lsls	r3, r3, #13
 800507a:	429a      	cmp	r2, r3
 800507c:	d10b      	bne.n	8005096 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	4a15      	ldr	r2, [pc, #84]	; (80050dc <UART_AdvFeatureConfig+0x160>)
 8005086:	4013      	ands	r3, r2
 8005088:	0019      	movs	r1, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509a:	2280      	movs	r2, #128	; 0x80
 800509c:	4013      	ands	r3, r2
 800509e:	d00b      	beq.n	80050b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	4a0e      	ldr	r2, [pc, #56]	; (80050e0 <UART_AdvFeatureConfig+0x164>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	0019      	movs	r1, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	605a      	str	r2, [r3, #4]
  }
}
 80050b8:	46c0      	nop			; (mov r8, r8)
 80050ba:	46bd      	mov	sp, r7
 80050bc:	b002      	add	sp, #8
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	fffdffff 	.word	0xfffdffff
 80050c4:	fffeffff 	.word	0xfffeffff
 80050c8:	fffbffff 	.word	0xfffbffff
 80050cc:	ffff7fff 	.word	0xffff7fff
 80050d0:	ffffefff 	.word	0xffffefff
 80050d4:	ffffdfff 	.word	0xffffdfff
 80050d8:	ffefffff 	.word	0xffefffff
 80050dc:	ff9fffff 	.word	0xff9fffff
 80050e0:	fff7ffff 	.word	0xfff7ffff

080050e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2288      	movs	r2, #136	; 0x88
 80050f0:	2100      	movs	r1, #0
 80050f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80050f4:	f7fc f89a 	bl	800122c <HAL_GetTick>
 80050f8:	0003      	movs	r3, r0
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2208      	movs	r2, #8
 8005104:	4013      	ands	r3, r2
 8005106:	2b08      	cmp	r3, #8
 8005108:	d10d      	bne.n	8005126 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	2380      	movs	r3, #128	; 0x80
 800510e:	0399      	lsls	r1, r3, #14
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	4b18      	ldr	r3, [pc, #96]	; (8005174 <UART_CheckIdleState+0x90>)
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	0013      	movs	r3, r2
 8005118:	2200      	movs	r2, #0
 800511a:	f000 f82d 	bl	8005178 <UART_WaitOnFlagUntilTimeout>
 800511e:	1e03      	subs	r3, r0, #0
 8005120:	d001      	beq.n	8005126 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e021      	b.n	800516a <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2204      	movs	r2, #4
 800512e:	4013      	ands	r3, r2
 8005130:	2b04      	cmp	r3, #4
 8005132:	d10d      	bne.n	8005150 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	2380      	movs	r3, #128	; 0x80
 8005138:	03d9      	lsls	r1, r3, #15
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <UART_CheckIdleState+0x90>)
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	0013      	movs	r3, r2
 8005142:	2200      	movs	r2, #0
 8005144:	f000 f818 	bl	8005178 <UART_WaitOnFlagUntilTimeout>
 8005148:	1e03      	subs	r3, r0, #0
 800514a:	d001      	beq.n	8005150 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e00c      	b.n	800516a <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2280      	movs	r2, #128	; 0x80
 8005154:	2120      	movs	r1, #32
 8005156:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2284      	movs	r2, #132	; 0x84
 800515c:	2120      	movs	r1, #32
 800515e:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	227c      	movs	r2, #124	; 0x7c
 8005164:	2100      	movs	r1, #0
 8005166:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	0018      	movs	r0, r3
 800516c:	46bd      	mov	sp, r7
 800516e:	b004      	add	sp, #16
 8005170:	bd80      	pop	{r7, pc}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	01ffffff 	.word	0x01ffffff

08005178 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	1dfb      	adds	r3, r7, #7
 8005186:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005188:	e02b      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	3301      	adds	r3, #1
 800518e:	d028      	beq.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005190:	f7fc f84c 	bl	800122c <HAL_GetTick>
 8005194:	0002      	movs	r2, r0
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	429a      	cmp	r2, r3
 800519e:	d302      	bcc.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d11d      	bne.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4916      	ldr	r1, [pc, #88]	; (800520c <UART_WaitOnFlagUntilTimeout+0x94>)
 80051b2:	400a      	ands	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2101      	movs	r1, #1
 80051c2:	438a      	bics	r2, r1
 80051c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2280      	movs	r2, #128	; 0x80
 80051ca:	2120      	movs	r1, #32
 80051cc:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2284      	movs	r2, #132	; 0x84
 80051d2:	2120      	movs	r1, #32
 80051d4:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	227c      	movs	r2, #124	; 0x7c
 80051da:	2100      	movs	r1, #0
 80051dc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e00f      	b.n	8005202 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	4013      	ands	r3, r2
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	425a      	negs	r2, r3
 80051f2:	4153      	adcs	r3, r2
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	001a      	movs	r2, r3
 80051f8:	1dfb      	adds	r3, r7, #7
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d0c4      	beq.n	800518a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	0018      	movs	r0, r3
 8005204:	46bd      	mov	sp, r7
 8005206:	b004      	add	sp, #16
 8005208:	bd80      	pop	{r7, pc}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	fffffe5f 	.word	0xfffffe5f

08005210 <__errno>:
 8005210:	4b01      	ldr	r3, [pc, #4]	; (8005218 <__errno+0x8>)
 8005212:	6818      	ldr	r0, [r3, #0]
 8005214:	4770      	bx	lr
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	20000010 	.word	0x20000010

0800521c <__libc_init_array>:
 800521c:	b570      	push	{r4, r5, r6, lr}
 800521e:	2600      	movs	r6, #0
 8005220:	4d0c      	ldr	r5, [pc, #48]	; (8005254 <__libc_init_array+0x38>)
 8005222:	4c0d      	ldr	r4, [pc, #52]	; (8005258 <__libc_init_array+0x3c>)
 8005224:	1b64      	subs	r4, r4, r5
 8005226:	10a4      	asrs	r4, r4, #2
 8005228:	42a6      	cmp	r6, r4
 800522a:	d109      	bne.n	8005240 <__libc_init_array+0x24>
 800522c:	2600      	movs	r6, #0
 800522e:	f000 fc29 	bl	8005a84 <_init>
 8005232:	4d0a      	ldr	r5, [pc, #40]	; (800525c <__libc_init_array+0x40>)
 8005234:	4c0a      	ldr	r4, [pc, #40]	; (8005260 <__libc_init_array+0x44>)
 8005236:	1b64      	subs	r4, r4, r5
 8005238:	10a4      	asrs	r4, r4, #2
 800523a:	42a6      	cmp	r6, r4
 800523c:	d105      	bne.n	800524a <__libc_init_array+0x2e>
 800523e:	bd70      	pop	{r4, r5, r6, pc}
 8005240:	00b3      	lsls	r3, r6, #2
 8005242:	58eb      	ldr	r3, [r5, r3]
 8005244:	4798      	blx	r3
 8005246:	3601      	adds	r6, #1
 8005248:	e7ee      	b.n	8005228 <__libc_init_array+0xc>
 800524a:	00b3      	lsls	r3, r6, #2
 800524c:	58eb      	ldr	r3, [r5, r3]
 800524e:	4798      	blx	r3
 8005250:	3601      	adds	r6, #1
 8005252:	e7f2      	b.n	800523a <__libc_init_array+0x1e>
 8005254:	08005b4c 	.word	0x08005b4c
 8005258:	08005b4c 	.word	0x08005b4c
 800525c:	08005b4c 	.word	0x08005b4c
 8005260:	08005b50 	.word	0x08005b50

08005264 <memcpy>:
 8005264:	2300      	movs	r3, #0
 8005266:	b510      	push	{r4, lr}
 8005268:	429a      	cmp	r2, r3
 800526a:	d100      	bne.n	800526e <memcpy+0xa>
 800526c:	bd10      	pop	{r4, pc}
 800526e:	5ccc      	ldrb	r4, [r1, r3]
 8005270:	54c4      	strb	r4, [r0, r3]
 8005272:	3301      	adds	r3, #1
 8005274:	e7f8      	b.n	8005268 <memcpy+0x4>

08005276 <memset>:
 8005276:	0003      	movs	r3, r0
 8005278:	1812      	adds	r2, r2, r0
 800527a:	4293      	cmp	r3, r2
 800527c:	d100      	bne.n	8005280 <memset+0xa>
 800527e:	4770      	bx	lr
 8005280:	7019      	strb	r1, [r3, #0]
 8005282:	3301      	adds	r3, #1
 8005284:	e7f9      	b.n	800527a <memset+0x4>
	...

08005288 <siprintf>:
 8005288:	b40e      	push	{r1, r2, r3}
 800528a:	b500      	push	{lr}
 800528c:	490b      	ldr	r1, [pc, #44]	; (80052bc <siprintf+0x34>)
 800528e:	b09c      	sub	sp, #112	; 0x70
 8005290:	ab1d      	add	r3, sp, #116	; 0x74
 8005292:	9002      	str	r0, [sp, #8]
 8005294:	9006      	str	r0, [sp, #24]
 8005296:	9107      	str	r1, [sp, #28]
 8005298:	9104      	str	r1, [sp, #16]
 800529a:	4809      	ldr	r0, [pc, #36]	; (80052c0 <siprintf+0x38>)
 800529c:	4909      	ldr	r1, [pc, #36]	; (80052c4 <siprintf+0x3c>)
 800529e:	cb04      	ldmia	r3!, {r2}
 80052a0:	9105      	str	r1, [sp, #20]
 80052a2:	6800      	ldr	r0, [r0, #0]
 80052a4:	a902      	add	r1, sp, #8
 80052a6:	9301      	str	r3, [sp, #4]
 80052a8:	f000 f870 	bl	800538c <_svfiprintf_r>
 80052ac:	2300      	movs	r3, #0
 80052ae:	9a02      	ldr	r2, [sp, #8]
 80052b0:	7013      	strb	r3, [r2, #0]
 80052b2:	b01c      	add	sp, #112	; 0x70
 80052b4:	bc08      	pop	{r3}
 80052b6:	b003      	add	sp, #12
 80052b8:	4718      	bx	r3
 80052ba:	46c0      	nop			; (mov r8, r8)
 80052bc:	7fffffff 	.word	0x7fffffff
 80052c0:	20000010 	.word	0x20000010
 80052c4:	ffff0208 	.word	0xffff0208

080052c8 <__ssputs_r>:
 80052c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ca:	688e      	ldr	r6, [r1, #8]
 80052cc:	b085      	sub	sp, #20
 80052ce:	0007      	movs	r7, r0
 80052d0:	000c      	movs	r4, r1
 80052d2:	9203      	str	r2, [sp, #12]
 80052d4:	9301      	str	r3, [sp, #4]
 80052d6:	429e      	cmp	r6, r3
 80052d8:	d83c      	bhi.n	8005354 <__ssputs_r+0x8c>
 80052da:	2390      	movs	r3, #144	; 0x90
 80052dc:	898a      	ldrh	r2, [r1, #12]
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	421a      	tst	r2, r3
 80052e2:	d034      	beq.n	800534e <__ssputs_r+0x86>
 80052e4:	2503      	movs	r5, #3
 80052e6:	6909      	ldr	r1, [r1, #16]
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	1a5b      	subs	r3, r3, r1
 80052ec:	9302      	str	r3, [sp, #8]
 80052ee:	6963      	ldr	r3, [r4, #20]
 80052f0:	9802      	ldr	r0, [sp, #8]
 80052f2:	435d      	muls	r5, r3
 80052f4:	0feb      	lsrs	r3, r5, #31
 80052f6:	195d      	adds	r5, r3, r5
 80052f8:	9b01      	ldr	r3, [sp, #4]
 80052fa:	106d      	asrs	r5, r5, #1
 80052fc:	3301      	adds	r3, #1
 80052fe:	181b      	adds	r3, r3, r0
 8005300:	42ab      	cmp	r3, r5
 8005302:	d900      	bls.n	8005306 <__ssputs_r+0x3e>
 8005304:	001d      	movs	r5, r3
 8005306:	0553      	lsls	r3, r2, #21
 8005308:	d532      	bpl.n	8005370 <__ssputs_r+0xa8>
 800530a:	0029      	movs	r1, r5
 800530c:	0038      	movs	r0, r7
 800530e:	f000 fb19 	bl	8005944 <_malloc_r>
 8005312:	1e06      	subs	r6, r0, #0
 8005314:	d109      	bne.n	800532a <__ssputs_r+0x62>
 8005316:	230c      	movs	r3, #12
 8005318:	603b      	str	r3, [r7, #0]
 800531a:	2340      	movs	r3, #64	; 0x40
 800531c:	2001      	movs	r0, #1
 800531e:	89a2      	ldrh	r2, [r4, #12]
 8005320:	4240      	negs	r0, r0
 8005322:	4313      	orrs	r3, r2
 8005324:	81a3      	strh	r3, [r4, #12]
 8005326:	b005      	add	sp, #20
 8005328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800532a:	9a02      	ldr	r2, [sp, #8]
 800532c:	6921      	ldr	r1, [r4, #16]
 800532e:	f7ff ff99 	bl	8005264 <memcpy>
 8005332:	89a3      	ldrh	r3, [r4, #12]
 8005334:	4a14      	ldr	r2, [pc, #80]	; (8005388 <__ssputs_r+0xc0>)
 8005336:	401a      	ands	r2, r3
 8005338:	2380      	movs	r3, #128	; 0x80
 800533a:	4313      	orrs	r3, r2
 800533c:	81a3      	strh	r3, [r4, #12]
 800533e:	9b02      	ldr	r3, [sp, #8]
 8005340:	6126      	str	r6, [r4, #16]
 8005342:	18f6      	adds	r6, r6, r3
 8005344:	6026      	str	r6, [r4, #0]
 8005346:	6165      	str	r5, [r4, #20]
 8005348:	9e01      	ldr	r6, [sp, #4]
 800534a:	1aed      	subs	r5, r5, r3
 800534c:	60a5      	str	r5, [r4, #8]
 800534e:	9b01      	ldr	r3, [sp, #4]
 8005350:	429e      	cmp	r6, r3
 8005352:	d900      	bls.n	8005356 <__ssputs_r+0x8e>
 8005354:	9e01      	ldr	r6, [sp, #4]
 8005356:	0032      	movs	r2, r6
 8005358:	9903      	ldr	r1, [sp, #12]
 800535a:	6820      	ldr	r0, [r4, #0]
 800535c:	f000 fa95 	bl	800588a <memmove>
 8005360:	68a3      	ldr	r3, [r4, #8]
 8005362:	2000      	movs	r0, #0
 8005364:	1b9b      	subs	r3, r3, r6
 8005366:	60a3      	str	r3, [r4, #8]
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	199e      	adds	r6, r3, r6
 800536c:	6026      	str	r6, [r4, #0]
 800536e:	e7da      	b.n	8005326 <__ssputs_r+0x5e>
 8005370:	002a      	movs	r2, r5
 8005372:	0038      	movs	r0, r7
 8005374:	f000 fb44 	bl	8005a00 <_realloc_r>
 8005378:	1e06      	subs	r6, r0, #0
 800537a:	d1e0      	bne.n	800533e <__ssputs_r+0x76>
 800537c:	6921      	ldr	r1, [r4, #16]
 800537e:	0038      	movs	r0, r7
 8005380:	f000 fa96 	bl	80058b0 <_free_r>
 8005384:	e7c7      	b.n	8005316 <__ssputs_r+0x4e>
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	fffffb7f 	.word	0xfffffb7f

0800538c <_svfiprintf_r>:
 800538c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800538e:	b0a1      	sub	sp, #132	; 0x84
 8005390:	9003      	str	r0, [sp, #12]
 8005392:	001d      	movs	r5, r3
 8005394:	898b      	ldrh	r3, [r1, #12]
 8005396:	000f      	movs	r7, r1
 8005398:	0016      	movs	r6, r2
 800539a:	061b      	lsls	r3, r3, #24
 800539c:	d511      	bpl.n	80053c2 <_svfiprintf_r+0x36>
 800539e:	690b      	ldr	r3, [r1, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10e      	bne.n	80053c2 <_svfiprintf_r+0x36>
 80053a4:	2140      	movs	r1, #64	; 0x40
 80053a6:	f000 facd 	bl	8005944 <_malloc_r>
 80053aa:	6038      	str	r0, [r7, #0]
 80053ac:	6138      	str	r0, [r7, #16]
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d105      	bne.n	80053be <_svfiprintf_r+0x32>
 80053b2:	230c      	movs	r3, #12
 80053b4:	9a03      	ldr	r2, [sp, #12]
 80053b6:	3801      	subs	r0, #1
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	b021      	add	sp, #132	; 0x84
 80053bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053be:	2340      	movs	r3, #64	; 0x40
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	2300      	movs	r3, #0
 80053c4:	ac08      	add	r4, sp, #32
 80053c6:	6163      	str	r3, [r4, #20]
 80053c8:	3320      	adds	r3, #32
 80053ca:	7663      	strb	r3, [r4, #25]
 80053cc:	3310      	adds	r3, #16
 80053ce:	76a3      	strb	r3, [r4, #26]
 80053d0:	9507      	str	r5, [sp, #28]
 80053d2:	0035      	movs	r5, r6
 80053d4:	782b      	ldrb	r3, [r5, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <_svfiprintf_r+0x52>
 80053da:	2b25      	cmp	r3, #37	; 0x25
 80053dc:	d146      	bne.n	800546c <_svfiprintf_r+0xe0>
 80053de:	1bab      	subs	r3, r5, r6
 80053e0:	9305      	str	r3, [sp, #20]
 80053e2:	d00c      	beq.n	80053fe <_svfiprintf_r+0x72>
 80053e4:	0032      	movs	r2, r6
 80053e6:	0039      	movs	r1, r7
 80053e8:	9803      	ldr	r0, [sp, #12]
 80053ea:	f7ff ff6d 	bl	80052c8 <__ssputs_r>
 80053ee:	1c43      	adds	r3, r0, #1
 80053f0:	d100      	bne.n	80053f4 <_svfiprintf_r+0x68>
 80053f2:	e0ae      	b.n	8005552 <_svfiprintf_r+0x1c6>
 80053f4:	6962      	ldr	r2, [r4, #20]
 80053f6:	9b05      	ldr	r3, [sp, #20]
 80053f8:	4694      	mov	ip, r2
 80053fa:	4463      	add	r3, ip
 80053fc:	6163      	str	r3, [r4, #20]
 80053fe:	782b      	ldrb	r3, [r5, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d100      	bne.n	8005406 <_svfiprintf_r+0x7a>
 8005404:	e0a5      	b.n	8005552 <_svfiprintf_r+0x1c6>
 8005406:	2201      	movs	r2, #1
 8005408:	2300      	movs	r3, #0
 800540a:	4252      	negs	r2, r2
 800540c:	6062      	str	r2, [r4, #4]
 800540e:	a904      	add	r1, sp, #16
 8005410:	3254      	adds	r2, #84	; 0x54
 8005412:	1852      	adds	r2, r2, r1
 8005414:	1c6e      	adds	r6, r5, #1
 8005416:	6023      	str	r3, [r4, #0]
 8005418:	60e3      	str	r3, [r4, #12]
 800541a:	60a3      	str	r3, [r4, #8]
 800541c:	7013      	strb	r3, [r2, #0]
 800541e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005420:	7831      	ldrb	r1, [r6, #0]
 8005422:	2205      	movs	r2, #5
 8005424:	4853      	ldr	r0, [pc, #332]	; (8005574 <_svfiprintf_r+0x1e8>)
 8005426:	f000 fa25 	bl	8005874 <memchr>
 800542a:	1c75      	adds	r5, r6, #1
 800542c:	2800      	cmp	r0, #0
 800542e:	d11f      	bne.n	8005470 <_svfiprintf_r+0xe4>
 8005430:	6822      	ldr	r2, [r4, #0]
 8005432:	06d3      	lsls	r3, r2, #27
 8005434:	d504      	bpl.n	8005440 <_svfiprintf_r+0xb4>
 8005436:	2353      	movs	r3, #83	; 0x53
 8005438:	a904      	add	r1, sp, #16
 800543a:	185b      	adds	r3, r3, r1
 800543c:	2120      	movs	r1, #32
 800543e:	7019      	strb	r1, [r3, #0]
 8005440:	0713      	lsls	r3, r2, #28
 8005442:	d504      	bpl.n	800544e <_svfiprintf_r+0xc2>
 8005444:	2353      	movs	r3, #83	; 0x53
 8005446:	a904      	add	r1, sp, #16
 8005448:	185b      	adds	r3, r3, r1
 800544a:	212b      	movs	r1, #43	; 0x2b
 800544c:	7019      	strb	r1, [r3, #0]
 800544e:	7833      	ldrb	r3, [r6, #0]
 8005450:	2b2a      	cmp	r3, #42	; 0x2a
 8005452:	d016      	beq.n	8005482 <_svfiprintf_r+0xf6>
 8005454:	0035      	movs	r5, r6
 8005456:	2100      	movs	r1, #0
 8005458:	200a      	movs	r0, #10
 800545a:	68e3      	ldr	r3, [r4, #12]
 800545c:	782a      	ldrb	r2, [r5, #0]
 800545e:	1c6e      	adds	r6, r5, #1
 8005460:	3a30      	subs	r2, #48	; 0x30
 8005462:	2a09      	cmp	r2, #9
 8005464:	d94e      	bls.n	8005504 <_svfiprintf_r+0x178>
 8005466:	2900      	cmp	r1, #0
 8005468:	d018      	beq.n	800549c <_svfiprintf_r+0x110>
 800546a:	e010      	b.n	800548e <_svfiprintf_r+0x102>
 800546c:	3501      	adds	r5, #1
 800546e:	e7b1      	b.n	80053d4 <_svfiprintf_r+0x48>
 8005470:	4b40      	ldr	r3, [pc, #256]	; (8005574 <_svfiprintf_r+0x1e8>)
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	1ac0      	subs	r0, r0, r3
 8005476:	2301      	movs	r3, #1
 8005478:	4083      	lsls	r3, r0
 800547a:	4313      	orrs	r3, r2
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	002e      	movs	r6, r5
 8005480:	e7ce      	b.n	8005420 <_svfiprintf_r+0x94>
 8005482:	9b07      	ldr	r3, [sp, #28]
 8005484:	1d19      	adds	r1, r3, #4
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	9107      	str	r1, [sp, #28]
 800548a:	2b00      	cmp	r3, #0
 800548c:	db01      	blt.n	8005492 <_svfiprintf_r+0x106>
 800548e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005490:	e004      	b.n	800549c <_svfiprintf_r+0x110>
 8005492:	425b      	negs	r3, r3
 8005494:	60e3      	str	r3, [r4, #12]
 8005496:	2302      	movs	r3, #2
 8005498:	4313      	orrs	r3, r2
 800549a:	6023      	str	r3, [r4, #0]
 800549c:	782b      	ldrb	r3, [r5, #0]
 800549e:	2b2e      	cmp	r3, #46	; 0x2e
 80054a0:	d10a      	bne.n	80054b8 <_svfiprintf_r+0x12c>
 80054a2:	786b      	ldrb	r3, [r5, #1]
 80054a4:	2b2a      	cmp	r3, #42	; 0x2a
 80054a6:	d135      	bne.n	8005514 <_svfiprintf_r+0x188>
 80054a8:	9b07      	ldr	r3, [sp, #28]
 80054aa:	3502      	adds	r5, #2
 80054ac:	1d1a      	adds	r2, r3, #4
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	9207      	str	r2, [sp, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	db2b      	blt.n	800550e <_svfiprintf_r+0x182>
 80054b6:	9309      	str	r3, [sp, #36]	; 0x24
 80054b8:	4e2f      	ldr	r6, [pc, #188]	; (8005578 <_svfiprintf_r+0x1ec>)
 80054ba:	7829      	ldrb	r1, [r5, #0]
 80054bc:	2203      	movs	r2, #3
 80054be:	0030      	movs	r0, r6
 80054c0:	f000 f9d8 	bl	8005874 <memchr>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d006      	beq.n	80054d6 <_svfiprintf_r+0x14a>
 80054c8:	2340      	movs	r3, #64	; 0x40
 80054ca:	1b80      	subs	r0, r0, r6
 80054cc:	4083      	lsls	r3, r0
 80054ce:	6822      	ldr	r2, [r4, #0]
 80054d0:	3501      	adds	r5, #1
 80054d2:	4313      	orrs	r3, r2
 80054d4:	6023      	str	r3, [r4, #0]
 80054d6:	7829      	ldrb	r1, [r5, #0]
 80054d8:	2206      	movs	r2, #6
 80054da:	4828      	ldr	r0, [pc, #160]	; (800557c <_svfiprintf_r+0x1f0>)
 80054dc:	1c6e      	adds	r6, r5, #1
 80054de:	7621      	strb	r1, [r4, #24]
 80054e0:	f000 f9c8 	bl	8005874 <memchr>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d03c      	beq.n	8005562 <_svfiprintf_r+0x1d6>
 80054e8:	4b25      	ldr	r3, [pc, #148]	; (8005580 <_svfiprintf_r+0x1f4>)
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d125      	bne.n	800553a <_svfiprintf_r+0x1ae>
 80054ee:	2207      	movs	r2, #7
 80054f0:	9b07      	ldr	r3, [sp, #28]
 80054f2:	3307      	adds	r3, #7
 80054f4:	4393      	bics	r3, r2
 80054f6:	3308      	adds	r3, #8
 80054f8:	9307      	str	r3, [sp, #28]
 80054fa:	6963      	ldr	r3, [r4, #20]
 80054fc:	9a04      	ldr	r2, [sp, #16]
 80054fe:	189b      	adds	r3, r3, r2
 8005500:	6163      	str	r3, [r4, #20]
 8005502:	e766      	b.n	80053d2 <_svfiprintf_r+0x46>
 8005504:	4343      	muls	r3, r0
 8005506:	2101      	movs	r1, #1
 8005508:	189b      	adds	r3, r3, r2
 800550a:	0035      	movs	r5, r6
 800550c:	e7a6      	b.n	800545c <_svfiprintf_r+0xd0>
 800550e:	2301      	movs	r3, #1
 8005510:	425b      	negs	r3, r3
 8005512:	e7d0      	b.n	80054b6 <_svfiprintf_r+0x12a>
 8005514:	2300      	movs	r3, #0
 8005516:	200a      	movs	r0, #10
 8005518:	001a      	movs	r2, r3
 800551a:	3501      	adds	r5, #1
 800551c:	6063      	str	r3, [r4, #4]
 800551e:	7829      	ldrb	r1, [r5, #0]
 8005520:	1c6e      	adds	r6, r5, #1
 8005522:	3930      	subs	r1, #48	; 0x30
 8005524:	2909      	cmp	r1, #9
 8005526:	d903      	bls.n	8005530 <_svfiprintf_r+0x1a4>
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0c5      	beq.n	80054b8 <_svfiprintf_r+0x12c>
 800552c:	9209      	str	r2, [sp, #36]	; 0x24
 800552e:	e7c3      	b.n	80054b8 <_svfiprintf_r+0x12c>
 8005530:	4342      	muls	r2, r0
 8005532:	2301      	movs	r3, #1
 8005534:	1852      	adds	r2, r2, r1
 8005536:	0035      	movs	r5, r6
 8005538:	e7f1      	b.n	800551e <_svfiprintf_r+0x192>
 800553a:	ab07      	add	r3, sp, #28
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	003a      	movs	r2, r7
 8005540:	4b10      	ldr	r3, [pc, #64]	; (8005584 <_svfiprintf_r+0x1f8>)
 8005542:	0021      	movs	r1, r4
 8005544:	9803      	ldr	r0, [sp, #12]
 8005546:	e000      	b.n	800554a <_svfiprintf_r+0x1be>
 8005548:	bf00      	nop
 800554a:	9004      	str	r0, [sp, #16]
 800554c:	9b04      	ldr	r3, [sp, #16]
 800554e:	3301      	adds	r3, #1
 8005550:	d1d3      	bne.n	80054fa <_svfiprintf_r+0x16e>
 8005552:	89bb      	ldrh	r3, [r7, #12]
 8005554:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005556:	065b      	lsls	r3, r3, #25
 8005558:	d400      	bmi.n	800555c <_svfiprintf_r+0x1d0>
 800555a:	e72e      	b.n	80053ba <_svfiprintf_r+0x2e>
 800555c:	2001      	movs	r0, #1
 800555e:	4240      	negs	r0, r0
 8005560:	e72b      	b.n	80053ba <_svfiprintf_r+0x2e>
 8005562:	ab07      	add	r3, sp, #28
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	003a      	movs	r2, r7
 8005568:	4b06      	ldr	r3, [pc, #24]	; (8005584 <_svfiprintf_r+0x1f8>)
 800556a:	0021      	movs	r1, r4
 800556c:	9803      	ldr	r0, [sp, #12]
 800556e:	f000 f879 	bl	8005664 <_printf_i>
 8005572:	e7ea      	b.n	800554a <_svfiprintf_r+0x1be>
 8005574:	08005b10 	.word	0x08005b10
 8005578:	08005b16 	.word	0x08005b16
 800557c:	08005b1a 	.word	0x08005b1a
 8005580:	00000000 	.word	0x00000000
 8005584:	080052c9 	.word	0x080052c9

08005588 <_printf_common>:
 8005588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800558a:	0015      	movs	r5, r2
 800558c:	9301      	str	r3, [sp, #4]
 800558e:	688a      	ldr	r2, [r1, #8]
 8005590:	690b      	ldr	r3, [r1, #16]
 8005592:	9000      	str	r0, [sp, #0]
 8005594:	000c      	movs	r4, r1
 8005596:	4293      	cmp	r3, r2
 8005598:	da00      	bge.n	800559c <_printf_common+0x14>
 800559a:	0013      	movs	r3, r2
 800559c:	0022      	movs	r2, r4
 800559e:	602b      	str	r3, [r5, #0]
 80055a0:	3243      	adds	r2, #67	; 0x43
 80055a2:	7812      	ldrb	r2, [r2, #0]
 80055a4:	2a00      	cmp	r2, #0
 80055a6:	d001      	beq.n	80055ac <_printf_common+0x24>
 80055a8:	3301      	adds	r3, #1
 80055aa:	602b      	str	r3, [r5, #0]
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	069b      	lsls	r3, r3, #26
 80055b0:	d502      	bpl.n	80055b8 <_printf_common+0x30>
 80055b2:	682b      	ldr	r3, [r5, #0]
 80055b4:	3302      	adds	r3, #2
 80055b6:	602b      	str	r3, [r5, #0]
 80055b8:	2706      	movs	r7, #6
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	401f      	ands	r7, r3
 80055be:	d027      	beq.n	8005610 <_printf_common+0x88>
 80055c0:	0023      	movs	r3, r4
 80055c2:	3343      	adds	r3, #67	; 0x43
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	1e5a      	subs	r2, r3, #1
 80055c8:	4193      	sbcs	r3, r2
 80055ca:	6822      	ldr	r2, [r4, #0]
 80055cc:	0692      	lsls	r2, r2, #26
 80055ce:	d430      	bmi.n	8005632 <_printf_common+0xaa>
 80055d0:	0022      	movs	r2, r4
 80055d2:	9901      	ldr	r1, [sp, #4]
 80055d4:	3243      	adds	r2, #67	; 0x43
 80055d6:	9800      	ldr	r0, [sp, #0]
 80055d8:	9e08      	ldr	r6, [sp, #32]
 80055da:	47b0      	blx	r6
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	d025      	beq.n	800562c <_printf_common+0xa4>
 80055e0:	2306      	movs	r3, #6
 80055e2:	6820      	ldr	r0, [r4, #0]
 80055e4:	682a      	ldr	r2, [r5, #0]
 80055e6:	68e1      	ldr	r1, [r4, #12]
 80055e8:	4003      	ands	r3, r0
 80055ea:	2500      	movs	r5, #0
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d103      	bne.n	80055f8 <_printf_common+0x70>
 80055f0:	1a8d      	subs	r5, r1, r2
 80055f2:	43eb      	mvns	r3, r5
 80055f4:	17db      	asrs	r3, r3, #31
 80055f6:	401d      	ands	r5, r3
 80055f8:	68a3      	ldr	r3, [r4, #8]
 80055fa:	6922      	ldr	r2, [r4, #16]
 80055fc:	4293      	cmp	r3, r2
 80055fe:	dd01      	ble.n	8005604 <_printf_common+0x7c>
 8005600:	1a9b      	subs	r3, r3, r2
 8005602:	18ed      	adds	r5, r5, r3
 8005604:	2700      	movs	r7, #0
 8005606:	42bd      	cmp	r5, r7
 8005608:	d120      	bne.n	800564c <_printf_common+0xc4>
 800560a:	2000      	movs	r0, #0
 800560c:	e010      	b.n	8005630 <_printf_common+0xa8>
 800560e:	3701      	adds	r7, #1
 8005610:	68e3      	ldr	r3, [r4, #12]
 8005612:	682a      	ldr	r2, [r5, #0]
 8005614:	1a9b      	subs	r3, r3, r2
 8005616:	42bb      	cmp	r3, r7
 8005618:	ddd2      	ble.n	80055c0 <_printf_common+0x38>
 800561a:	0022      	movs	r2, r4
 800561c:	2301      	movs	r3, #1
 800561e:	3219      	adds	r2, #25
 8005620:	9901      	ldr	r1, [sp, #4]
 8005622:	9800      	ldr	r0, [sp, #0]
 8005624:	9e08      	ldr	r6, [sp, #32]
 8005626:	47b0      	blx	r6
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d1f0      	bne.n	800560e <_printf_common+0x86>
 800562c:	2001      	movs	r0, #1
 800562e:	4240      	negs	r0, r0
 8005630:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005632:	2030      	movs	r0, #48	; 0x30
 8005634:	18e1      	adds	r1, r4, r3
 8005636:	3143      	adds	r1, #67	; 0x43
 8005638:	7008      	strb	r0, [r1, #0]
 800563a:	0021      	movs	r1, r4
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	3145      	adds	r1, #69	; 0x45
 8005640:	7809      	ldrb	r1, [r1, #0]
 8005642:	18a2      	adds	r2, r4, r2
 8005644:	3243      	adds	r2, #67	; 0x43
 8005646:	3302      	adds	r3, #2
 8005648:	7011      	strb	r1, [r2, #0]
 800564a:	e7c1      	b.n	80055d0 <_printf_common+0x48>
 800564c:	0022      	movs	r2, r4
 800564e:	2301      	movs	r3, #1
 8005650:	321a      	adds	r2, #26
 8005652:	9901      	ldr	r1, [sp, #4]
 8005654:	9800      	ldr	r0, [sp, #0]
 8005656:	9e08      	ldr	r6, [sp, #32]
 8005658:	47b0      	blx	r6
 800565a:	1c43      	adds	r3, r0, #1
 800565c:	d0e6      	beq.n	800562c <_printf_common+0xa4>
 800565e:	3701      	adds	r7, #1
 8005660:	e7d1      	b.n	8005606 <_printf_common+0x7e>
	...

08005664 <_printf_i>:
 8005664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005666:	b089      	sub	sp, #36	; 0x24
 8005668:	9204      	str	r2, [sp, #16]
 800566a:	000a      	movs	r2, r1
 800566c:	3243      	adds	r2, #67	; 0x43
 800566e:	9305      	str	r3, [sp, #20]
 8005670:	9003      	str	r0, [sp, #12]
 8005672:	9202      	str	r2, [sp, #8]
 8005674:	7e0a      	ldrb	r2, [r1, #24]
 8005676:	000c      	movs	r4, r1
 8005678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800567a:	2a6e      	cmp	r2, #110	; 0x6e
 800567c:	d100      	bne.n	8005680 <_printf_i+0x1c>
 800567e:	e086      	b.n	800578e <_printf_i+0x12a>
 8005680:	d81f      	bhi.n	80056c2 <_printf_i+0x5e>
 8005682:	2a63      	cmp	r2, #99	; 0x63
 8005684:	d033      	beq.n	80056ee <_printf_i+0x8a>
 8005686:	d808      	bhi.n	800569a <_printf_i+0x36>
 8005688:	2a00      	cmp	r2, #0
 800568a:	d100      	bne.n	800568e <_printf_i+0x2a>
 800568c:	e08c      	b.n	80057a8 <_printf_i+0x144>
 800568e:	2a58      	cmp	r2, #88	; 0x58
 8005690:	d04d      	beq.n	800572e <_printf_i+0xca>
 8005692:	0025      	movs	r5, r4
 8005694:	3542      	adds	r5, #66	; 0x42
 8005696:	702a      	strb	r2, [r5, #0]
 8005698:	e030      	b.n	80056fc <_printf_i+0x98>
 800569a:	2a64      	cmp	r2, #100	; 0x64
 800569c:	d001      	beq.n	80056a2 <_printf_i+0x3e>
 800569e:	2a69      	cmp	r2, #105	; 0x69
 80056a0:	d1f7      	bne.n	8005692 <_printf_i+0x2e>
 80056a2:	6819      	ldr	r1, [r3, #0]
 80056a4:	6825      	ldr	r5, [r4, #0]
 80056a6:	1d0a      	adds	r2, r1, #4
 80056a8:	0628      	lsls	r0, r5, #24
 80056aa:	d529      	bpl.n	8005700 <_printf_i+0x9c>
 80056ac:	6808      	ldr	r0, [r1, #0]
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	2800      	cmp	r0, #0
 80056b2:	da03      	bge.n	80056bc <_printf_i+0x58>
 80056b4:	232d      	movs	r3, #45	; 0x2d
 80056b6:	9a02      	ldr	r2, [sp, #8]
 80056b8:	4240      	negs	r0, r0
 80056ba:	7013      	strb	r3, [r2, #0]
 80056bc:	4e6b      	ldr	r6, [pc, #428]	; (800586c <_printf_i+0x208>)
 80056be:	270a      	movs	r7, #10
 80056c0:	e04f      	b.n	8005762 <_printf_i+0xfe>
 80056c2:	2a73      	cmp	r2, #115	; 0x73
 80056c4:	d074      	beq.n	80057b0 <_printf_i+0x14c>
 80056c6:	d808      	bhi.n	80056da <_printf_i+0x76>
 80056c8:	2a6f      	cmp	r2, #111	; 0x6f
 80056ca:	d01f      	beq.n	800570c <_printf_i+0xa8>
 80056cc:	2a70      	cmp	r2, #112	; 0x70
 80056ce:	d1e0      	bne.n	8005692 <_printf_i+0x2e>
 80056d0:	2220      	movs	r2, #32
 80056d2:	6809      	ldr	r1, [r1, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	6022      	str	r2, [r4, #0]
 80056d8:	e003      	b.n	80056e2 <_printf_i+0x7e>
 80056da:	2a75      	cmp	r2, #117	; 0x75
 80056dc:	d016      	beq.n	800570c <_printf_i+0xa8>
 80056de:	2a78      	cmp	r2, #120	; 0x78
 80056e0:	d1d7      	bne.n	8005692 <_printf_i+0x2e>
 80056e2:	0022      	movs	r2, r4
 80056e4:	2178      	movs	r1, #120	; 0x78
 80056e6:	3245      	adds	r2, #69	; 0x45
 80056e8:	7011      	strb	r1, [r2, #0]
 80056ea:	4e61      	ldr	r6, [pc, #388]	; (8005870 <_printf_i+0x20c>)
 80056ec:	e022      	b.n	8005734 <_printf_i+0xd0>
 80056ee:	0025      	movs	r5, r4
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	3542      	adds	r5, #66	; 0x42
 80056f4:	1d11      	adds	r1, r2, #4
 80056f6:	6019      	str	r1, [r3, #0]
 80056f8:	6813      	ldr	r3, [r2, #0]
 80056fa:	702b      	strb	r3, [r5, #0]
 80056fc:	2301      	movs	r3, #1
 80056fe:	e065      	b.n	80057cc <_printf_i+0x168>
 8005700:	6808      	ldr	r0, [r1, #0]
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	0669      	lsls	r1, r5, #25
 8005706:	d5d3      	bpl.n	80056b0 <_printf_i+0x4c>
 8005708:	b200      	sxth	r0, r0
 800570a:	e7d1      	b.n	80056b0 <_printf_i+0x4c>
 800570c:	6819      	ldr	r1, [r3, #0]
 800570e:	6825      	ldr	r5, [r4, #0]
 8005710:	1d08      	adds	r0, r1, #4
 8005712:	6018      	str	r0, [r3, #0]
 8005714:	6808      	ldr	r0, [r1, #0]
 8005716:	062e      	lsls	r6, r5, #24
 8005718:	d505      	bpl.n	8005726 <_printf_i+0xc2>
 800571a:	4e54      	ldr	r6, [pc, #336]	; (800586c <_printf_i+0x208>)
 800571c:	2708      	movs	r7, #8
 800571e:	2a6f      	cmp	r2, #111	; 0x6f
 8005720:	d01b      	beq.n	800575a <_printf_i+0xf6>
 8005722:	270a      	movs	r7, #10
 8005724:	e019      	b.n	800575a <_printf_i+0xf6>
 8005726:	066d      	lsls	r5, r5, #25
 8005728:	d5f7      	bpl.n	800571a <_printf_i+0xb6>
 800572a:	b280      	uxth	r0, r0
 800572c:	e7f5      	b.n	800571a <_printf_i+0xb6>
 800572e:	3145      	adds	r1, #69	; 0x45
 8005730:	4e4e      	ldr	r6, [pc, #312]	; (800586c <_printf_i+0x208>)
 8005732:	700a      	strb	r2, [r1, #0]
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	6822      	ldr	r2, [r4, #0]
 8005738:	1d01      	adds	r1, r0, #4
 800573a:	6800      	ldr	r0, [r0, #0]
 800573c:	6019      	str	r1, [r3, #0]
 800573e:	0615      	lsls	r5, r2, #24
 8005740:	d521      	bpl.n	8005786 <_printf_i+0x122>
 8005742:	07d3      	lsls	r3, r2, #31
 8005744:	d502      	bpl.n	800574c <_printf_i+0xe8>
 8005746:	2320      	movs	r3, #32
 8005748:	431a      	orrs	r2, r3
 800574a:	6022      	str	r2, [r4, #0]
 800574c:	2710      	movs	r7, #16
 800574e:	2800      	cmp	r0, #0
 8005750:	d103      	bne.n	800575a <_printf_i+0xf6>
 8005752:	2320      	movs	r3, #32
 8005754:	6822      	ldr	r2, [r4, #0]
 8005756:	439a      	bics	r2, r3
 8005758:	6022      	str	r2, [r4, #0]
 800575a:	0023      	movs	r3, r4
 800575c:	2200      	movs	r2, #0
 800575e:	3343      	adds	r3, #67	; 0x43
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	6863      	ldr	r3, [r4, #4]
 8005764:	60a3      	str	r3, [r4, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	db58      	blt.n	800581c <_printf_i+0x1b8>
 800576a:	2204      	movs	r2, #4
 800576c:	6821      	ldr	r1, [r4, #0]
 800576e:	4391      	bics	r1, r2
 8005770:	6021      	str	r1, [r4, #0]
 8005772:	2800      	cmp	r0, #0
 8005774:	d154      	bne.n	8005820 <_printf_i+0x1bc>
 8005776:	9d02      	ldr	r5, [sp, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d05a      	beq.n	8005832 <_printf_i+0x1ce>
 800577c:	0025      	movs	r5, r4
 800577e:	7833      	ldrb	r3, [r6, #0]
 8005780:	3542      	adds	r5, #66	; 0x42
 8005782:	702b      	strb	r3, [r5, #0]
 8005784:	e055      	b.n	8005832 <_printf_i+0x1ce>
 8005786:	0655      	lsls	r5, r2, #25
 8005788:	d5db      	bpl.n	8005742 <_printf_i+0xde>
 800578a:	b280      	uxth	r0, r0
 800578c:	e7d9      	b.n	8005742 <_printf_i+0xde>
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	680d      	ldr	r5, [r1, #0]
 8005792:	1d10      	adds	r0, r2, #4
 8005794:	6949      	ldr	r1, [r1, #20]
 8005796:	6018      	str	r0, [r3, #0]
 8005798:	6813      	ldr	r3, [r2, #0]
 800579a:	062e      	lsls	r6, r5, #24
 800579c:	d501      	bpl.n	80057a2 <_printf_i+0x13e>
 800579e:	6019      	str	r1, [r3, #0]
 80057a0:	e002      	b.n	80057a8 <_printf_i+0x144>
 80057a2:	066d      	lsls	r5, r5, #25
 80057a4:	d5fb      	bpl.n	800579e <_printf_i+0x13a>
 80057a6:	8019      	strh	r1, [r3, #0]
 80057a8:	2300      	movs	r3, #0
 80057aa:	9d02      	ldr	r5, [sp, #8]
 80057ac:	6123      	str	r3, [r4, #16]
 80057ae:	e04f      	b.n	8005850 <_printf_i+0x1ec>
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	1d11      	adds	r1, r2, #4
 80057b4:	6019      	str	r1, [r3, #0]
 80057b6:	6815      	ldr	r5, [r2, #0]
 80057b8:	2100      	movs	r1, #0
 80057ba:	6862      	ldr	r2, [r4, #4]
 80057bc:	0028      	movs	r0, r5
 80057be:	f000 f859 	bl	8005874 <memchr>
 80057c2:	2800      	cmp	r0, #0
 80057c4:	d001      	beq.n	80057ca <_printf_i+0x166>
 80057c6:	1b40      	subs	r0, r0, r5
 80057c8:	6060      	str	r0, [r4, #4]
 80057ca:	6863      	ldr	r3, [r4, #4]
 80057cc:	6123      	str	r3, [r4, #16]
 80057ce:	2300      	movs	r3, #0
 80057d0:	9a02      	ldr	r2, [sp, #8]
 80057d2:	7013      	strb	r3, [r2, #0]
 80057d4:	e03c      	b.n	8005850 <_printf_i+0x1ec>
 80057d6:	6923      	ldr	r3, [r4, #16]
 80057d8:	002a      	movs	r2, r5
 80057da:	9904      	ldr	r1, [sp, #16]
 80057dc:	9803      	ldr	r0, [sp, #12]
 80057de:	9d05      	ldr	r5, [sp, #20]
 80057e0:	47a8      	blx	r5
 80057e2:	1c43      	adds	r3, r0, #1
 80057e4:	d03e      	beq.n	8005864 <_printf_i+0x200>
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	079b      	lsls	r3, r3, #30
 80057ea:	d415      	bmi.n	8005818 <_printf_i+0x1b4>
 80057ec:	9b07      	ldr	r3, [sp, #28]
 80057ee:	68e0      	ldr	r0, [r4, #12]
 80057f0:	4298      	cmp	r0, r3
 80057f2:	da39      	bge.n	8005868 <_printf_i+0x204>
 80057f4:	0018      	movs	r0, r3
 80057f6:	e037      	b.n	8005868 <_printf_i+0x204>
 80057f8:	0022      	movs	r2, r4
 80057fa:	2301      	movs	r3, #1
 80057fc:	3219      	adds	r2, #25
 80057fe:	9904      	ldr	r1, [sp, #16]
 8005800:	9803      	ldr	r0, [sp, #12]
 8005802:	9e05      	ldr	r6, [sp, #20]
 8005804:	47b0      	blx	r6
 8005806:	1c43      	adds	r3, r0, #1
 8005808:	d02c      	beq.n	8005864 <_printf_i+0x200>
 800580a:	3501      	adds	r5, #1
 800580c:	68e3      	ldr	r3, [r4, #12]
 800580e:	9a07      	ldr	r2, [sp, #28]
 8005810:	1a9b      	subs	r3, r3, r2
 8005812:	42ab      	cmp	r3, r5
 8005814:	dcf0      	bgt.n	80057f8 <_printf_i+0x194>
 8005816:	e7e9      	b.n	80057ec <_printf_i+0x188>
 8005818:	2500      	movs	r5, #0
 800581a:	e7f7      	b.n	800580c <_printf_i+0x1a8>
 800581c:	2800      	cmp	r0, #0
 800581e:	d0ad      	beq.n	800577c <_printf_i+0x118>
 8005820:	9d02      	ldr	r5, [sp, #8]
 8005822:	0039      	movs	r1, r7
 8005824:	f7fa fcf4 	bl	8000210 <__aeabi_uidivmod>
 8005828:	5c73      	ldrb	r3, [r6, r1]
 800582a:	3d01      	subs	r5, #1
 800582c:	702b      	strb	r3, [r5, #0]
 800582e:	2800      	cmp	r0, #0
 8005830:	d1f7      	bne.n	8005822 <_printf_i+0x1be>
 8005832:	2f08      	cmp	r7, #8
 8005834:	d109      	bne.n	800584a <_printf_i+0x1e6>
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	07db      	lsls	r3, r3, #31
 800583a:	d506      	bpl.n	800584a <_printf_i+0x1e6>
 800583c:	6863      	ldr	r3, [r4, #4]
 800583e:	6922      	ldr	r2, [r4, #16]
 8005840:	4293      	cmp	r3, r2
 8005842:	dc02      	bgt.n	800584a <_printf_i+0x1e6>
 8005844:	2330      	movs	r3, #48	; 0x30
 8005846:	3d01      	subs	r5, #1
 8005848:	702b      	strb	r3, [r5, #0]
 800584a:	9b02      	ldr	r3, [sp, #8]
 800584c:	1b5b      	subs	r3, r3, r5
 800584e:	6123      	str	r3, [r4, #16]
 8005850:	9b05      	ldr	r3, [sp, #20]
 8005852:	aa07      	add	r2, sp, #28
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	0021      	movs	r1, r4
 8005858:	9b04      	ldr	r3, [sp, #16]
 800585a:	9803      	ldr	r0, [sp, #12]
 800585c:	f7ff fe94 	bl	8005588 <_printf_common>
 8005860:	1c43      	adds	r3, r0, #1
 8005862:	d1b8      	bne.n	80057d6 <_printf_i+0x172>
 8005864:	2001      	movs	r0, #1
 8005866:	4240      	negs	r0, r0
 8005868:	b009      	add	sp, #36	; 0x24
 800586a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800586c:	08005b21 	.word	0x08005b21
 8005870:	08005b32 	.word	0x08005b32

08005874 <memchr>:
 8005874:	b2c9      	uxtb	r1, r1
 8005876:	1882      	adds	r2, r0, r2
 8005878:	4290      	cmp	r0, r2
 800587a:	d101      	bne.n	8005880 <memchr+0xc>
 800587c:	2000      	movs	r0, #0
 800587e:	4770      	bx	lr
 8005880:	7803      	ldrb	r3, [r0, #0]
 8005882:	428b      	cmp	r3, r1
 8005884:	d0fb      	beq.n	800587e <memchr+0xa>
 8005886:	3001      	adds	r0, #1
 8005888:	e7f6      	b.n	8005878 <memchr+0x4>

0800588a <memmove>:
 800588a:	b510      	push	{r4, lr}
 800588c:	4288      	cmp	r0, r1
 800588e:	d902      	bls.n	8005896 <memmove+0xc>
 8005890:	188b      	adds	r3, r1, r2
 8005892:	4298      	cmp	r0, r3
 8005894:	d303      	bcc.n	800589e <memmove+0x14>
 8005896:	2300      	movs	r3, #0
 8005898:	e007      	b.n	80058aa <memmove+0x20>
 800589a:	5c8b      	ldrb	r3, [r1, r2]
 800589c:	5483      	strb	r3, [r0, r2]
 800589e:	3a01      	subs	r2, #1
 80058a0:	d2fb      	bcs.n	800589a <memmove+0x10>
 80058a2:	bd10      	pop	{r4, pc}
 80058a4:	5ccc      	ldrb	r4, [r1, r3]
 80058a6:	54c4      	strb	r4, [r0, r3]
 80058a8:	3301      	adds	r3, #1
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d1fa      	bne.n	80058a4 <memmove+0x1a>
 80058ae:	e7f8      	b.n	80058a2 <memmove+0x18>

080058b0 <_free_r>:
 80058b0:	b570      	push	{r4, r5, r6, lr}
 80058b2:	0005      	movs	r5, r0
 80058b4:	2900      	cmp	r1, #0
 80058b6:	d010      	beq.n	80058da <_free_r+0x2a>
 80058b8:	1f0c      	subs	r4, r1, #4
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	da00      	bge.n	80058c2 <_free_r+0x12>
 80058c0:	18e4      	adds	r4, r4, r3
 80058c2:	0028      	movs	r0, r5
 80058c4:	f000 f8d4 	bl	8005a70 <__malloc_lock>
 80058c8:	4a1d      	ldr	r2, [pc, #116]	; (8005940 <_free_r+0x90>)
 80058ca:	6813      	ldr	r3, [r2, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d105      	bne.n	80058dc <_free_r+0x2c>
 80058d0:	6063      	str	r3, [r4, #4]
 80058d2:	6014      	str	r4, [r2, #0]
 80058d4:	0028      	movs	r0, r5
 80058d6:	f000 f8cc 	bl	8005a72 <__malloc_unlock>
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	42a3      	cmp	r3, r4
 80058de:	d909      	bls.n	80058f4 <_free_r+0x44>
 80058e0:	6821      	ldr	r1, [r4, #0]
 80058e2:	1860      	adds	r0, r4, r1
 80058e4:	4283      	cmp	r3, r0
 80058e6:	d1f3      	bne.n	80058d0 <_free_r+0x20>
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	1841      	adds	r1, r0, r1
 80058ee:	6021      	str	r1, [r4, #0]
 80058f0:	e7ee      	b.n	80058d0 <_free_r+0x20>
 80058f2:	0013      	movs	r3, r2
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	2a00      	cmp	r2, #0
 80058f8:	d001      	beq.n	80058fe <_free_r+0x4e>
 80058fa:	42a2      	cmp	r2, r4
 80058fc:	d9f9      	bls.n	80058f2 <_free_r+0x42>
 80058fe:	6819      	ldr	r1, [r3, #0]
 8005900:	1858      	adds	r0, r3, r1
 8005902:	42a0      	cmp	r0, r4
 8005904:	d10b      	bne.n	800591e <_free_r+0x6e>
 8005906:	6820      	ldr	r0, [r4, #0]
 8005908:	1809      	adds	r1, r1, r0
 800590a:	1858      	adds	r0, r3, r1
 800590c:	6019      	str	r1, [r3, #0]
 800590e:	4282      	cmp	r2, r0
 8005910:	d1e0      	bne.n	80058d4 <_free_r+0x24>
 8005912:	6810      	ldr	r0, [r2, #0]
 8005914:	6852      	ldr	r2, [r2, #4]
 8005916:	1841      	adds	r1, r0, r1
 8005918:	6019      	str	r1, [r3, #0]
 800591a:	605a      	str	r2, [r3, #4]
 800591c:	e7da      	b.n	80058d4 <_free_r+0x24>
 800591e:	42a0      	cmp	r0, r4
 8005920:	d902      	bls.n	8005928 <_free_r+0x78>
 8005922:	230c      	movs	r3, #12
 8005924:	602b      	str	r3, [r5, #0]
 8005926:	e7d5      	b.n	80058d4 <_free_r+0x24>
 8005928:	6821      	ldr	r1, [r4, #0]
 800592a:	1860      	adds	r0, r4, r1
 800592c:	4282      	cmp	r2, r0
 800592e:	d103      	bne.n	8005938 <_free_r+0x88>
 8005930:	6810      	ldr	r0, [r2, #0]
 8005932:	6852      	ldr	r2, [r2, #4]
 8005934:	1841      	adds	r1, r0, r1
 8005936:	6021      	str	r1, [r4, #0]
 8005938:	6062      	str	r2, [r4, #4]
 800593a:	605c      	str	r4, [r3, #4]
 800593c:	e7ca      	b.n	80058d4 <_free_r+0x24>
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	200010a8 	.word	0x200010a8

08005944 <_malloc_r>:
 8005944:	2303      	movs	r3, #3
 8005946:	b570      	push	{r4, r5, r6, lr}
 8005948:	1ccd      	adds	r5, r1, #3
 800594a:	439d      	bics	r5, r3
 800594c:	3508      	adds	r5, #8
 800594e:	0006      	movs	r6, r0
 8005950:	2d0c      	cmp	r5, #12
 8005952:	d21e      	bcs.n	8005992 <_malloc_r+0x4e>
 8005954:	250c      	movs	r5, #12
 8005956:	42a9      	cmp	r1, r5
 8005958:	d81d      	bhi.n	8005996 <_malloc_r+0x52>
 800595a:	0030      	movs	r0, r6
 800595c:	f000 f888 	bl	8005a70 <__malloc_lock>
 8005960:	4a25      	ldr	r2, [pc, #148]	; (80059f8 <_malloc_r+0xb4>)
 8005962:	6814      	ldr	r4, [r2, #0]
 8005964:	0021      	movs	r1, r4
 8005966:	2900      	cmp	r1, #0
 8005968:	d119      	bne.n	800599e <_malloc_r+0x5a>
 800596a:	4c24      	ldr	r4, [pc, #144]	; (80059fc <_malloc_r+0xb8>)
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d103      	bne.n	800597a <_malloc_r+0x36>
 8005972:	0030      	movs	r0, r6
 8005974:	f000 f86a 	bl	8005a4c <_sbrk_r>
 8005978:	6020      	str	r0, [r4, #0]
 800597a:	0029      	movs	r1, r5
 800597c:	0030      	movs	r0, r6
 800597e:	f000 f865 	bl	8005a4c <_sbrk_r>
 8005982:	1c43      	adds	r3, r0, #1
 8005984:	d12b      	bne.n	80059de <_malloc_r+0x9a>
 8005986:	230c      	movs	r3, #12
 8005988:	0030      	movs	r0, r6
 800598a:	6033      	str	r3, [r6, #0]
 800598c:	f000 f871 	bl	8005a72 <__malloc_unlock>
 8005990:	e003      	b.n	800599a <_malloc_r+0x56>
 8005992:	2d00      	cmp	r5, #0
 8005994:	dadf      	bge.n	8005956 <_malloc_r+0x12>
 8005996:	230c      	movs	r3, #12
 8005998:	6033      	str	r3, [r6, #0]
 800599a:	2000      	movs	r0, #0
 800599c:	bd70      	pop	{r4, r5, r6, pc}
 800599e:	680b      	ldr	r3, [r1, #0]
 80059a0:	1b5b      	subs	r3, r3, r5
 80059a2:	d419      	bmi.n	80059d8 <_malloc_r+0x94>
 80059a4:	2b0b      	cmp	r3, #11
 80059a6:	d903      	bls.n	80059b0 <_malloc_r+0x6c>
 80059a8:	600b      	str	r3, [r1, #0]
 80059aa:	18cc      	adds	r4, r1, r3
 80059ac:	6025      	str	r5, [r4, #0]
 80059ae:	e003      	b.n	80059b8 <_malloc_r+0x74>
 80059b0:	684b      	ldr	r3, [r1, #4]
 80059b2:	428c      	cmp	r4, r1
 80059b4:	d10d      	bne.n	80059d2 <_malloc_r+0x8e>
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	0030      	movs	r0, r6
 80059ba:	f000 f85a 	bl	8005a72 <__malloc_unlock>
 80059be:	0020      	movs	r0, r4
 80059c0:	2207      	movs	r2, #7
 80059c2:	300b      	adds	r0, #11
 80059c4:	1d23      	adds	r3, r4, #4
 80059c6:	4390      	bics	r0, r2
 80059c8:	1ac3      	subs	r3, r0, r3
 80059ca:	d0e7      	beq.n	800599c <_malloc_r+0x58>
 80059cc:	425a      	negs	r2, r3
 80059ce:	50e2      	str	r2, [r4, r3]
 80059d0:	e7e4      	b.n	800599c <_malloc_r+0x58>
 80059d2:	6063      	str	r3, [r4, #4]
 80059d4:	000c      	movs	r4, r1
 80059d6:	e7ef      	b.n	80059b8 <_malloc_r+0x74>
 80059d8:	000c      	movs	r4, r1
 80059da:	6849      	ldr	r1, [r1, #4]
 80059dc:	e7c3      	b.n	8005966 <_malloc_r+0x22>
 80059de:	2303      	movs	r3, #3
 80059e0:	1cc4      	adds	r4, r0, #3
 80059e2:	439c      	bics	r4, r3
 80059e4:	42a0      	cmp	r0, r4
 80059e6:	d0e1      	beq.n	80059ac <_malloc_r+0x68>
 80059e8:	1a21      	subs	r1, r4, r0
 80059ea:	0030      	movs	r0, r6
 80059ec:	f000 f82e 	bl	8005a4c <_sbrk_r>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d1db      	bne.n	80059ac <_malloc_r+0x68>
 80059f4:	e7c7      	b.n	8005986 <_malloc_r+0x42>
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	200010a8 	.word	0x200010a8
 80059fc:	200010ac 	.word	0x200010ac

08005a00 <_realloc_r>:
 8005a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a02:	0007      	movs	r7, r0
 8005a04:	000d      	movs	r5, r1
 8005a06:	0016      	movs	r6, r2
 8005a08:	2900      	cmp	r1, #0
 8005a0a:	d105      	bne.n	8005a18 <_realloc_r+0x18>
 8005a0c:	0011      	movs	r1, r2
 8005a0e:	f7ff ff99 	bl	8005944 <_malloc_r>
 8005a12:	0004      	movs	r4, r0
 8005a14:	0020      	movs	r0, r4
 8005a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a18:	2a00      	cmp	r2, #0
 8005a1a:	d103      	bne.n	8005a24 <_realloc_r+0x24>
 8005a1c:	f7ff ff48 	bl	80058b0 <_free_r>
 8005a20:	0034      	movs	r4, r6
 8005a22:	e7f7      	b.n	8005a14 <_realloc_r+0x14>
 8005a24:	f000 f826 	bl	8005a74 <_malloc_usable_size_r>
 8005a28:	002c      	movs	r4, r5
 8005a2a:	42b0      	cmp	r0, r6
 8005a2c:	d2f2      	bcs.n	8005a14 <_realloc_r+0x14>
 8005a2e:	0031      	movs	r1, r6
 8005a30:	0038      	movs	r0, r7
 8005a32:	f7ff ff87 	bl	8005944 <_malloc_r>
 8005a36:	1e04      	subs	r4, r0, #0
 8005a38:	d0ec      	beq.n	8005a14 <_realloc_r+0x14>
 8005a3a:	0029      	movs	r1, r5
 8005a3c:	0032      	movs	r2, r6
 8005a3e:	f7ff fc11 	bl	8005264 <memcpy>
 8005a42:	0029      	movs	r1, r5
 8005a44:	0038      	movs	r0, r7
 8005a46:	f7ff ff33 	bl	80058b0 <_free_r>
 8005a4a:	e7e3      	b.n	8005a14 <_realloc_r+0x14>

08005a4c <_sbrk_r>:
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	b570      	push	{r4, r5, r6, lr}
 8005a50:	4c06      	ldr	r4, [pc, #24]	; (8005a6c <_sbrk_r+0x20>)
 8005a52:	0005      	movs	r5, r0
 8005a54:	0008      	movs	r0, r1
 8005a56:	6023      	str	r3, [r4, #0]
 8005a58:	f7fb fb02 	bl	8001060 <_sbrk>
 8005a5c:	1c43      	adds	r3, r0, #1
 8005a5e:	d103      	bne.n	8005a68 <_sbrk_r+0x1c>
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d000      	beq.n	8005a68 <_sbrk_r+0x1c>
 8005a66:	602b      	str	r3, [r5, #0]
 8005a68:	bd70      	pop	{r4, r5, r6, pc}
 8005a6a:	46c0      	nop			; (mov r8, r8)
 8005a6c:	20001244 	.word	0x20001244

08005a70 <__malloc_lock>:
 8005a70:	4770      	bx	lr

08005a72 <__malloc_unlock>:
 8005a72:	4770      	bx	lr

08005a74 <_malloc_usable_size_r>:
 8005a74:	1f0b      	subs	r3, r1, #4
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	1f18      	subs	r0, r3, #4
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	da01      	bge.n	8005a82 <_malloc_usable_size_r+0xe>
 8005a7e:	580b      	ldr	r3, [r1, r0]
 8005a80:	18c0      	adds	r0, r0, r3
 8005a82:	4770      	bx	lr

08005a84 <_init>:
 8005a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8a:	bc08      	pop	{r3}
 8005a8c:	469e      	mov	lr, r3
 8005a8e:	4770      	bx	lr

08005a90 <_fini>:
 8005a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a96:	bc08      	pop	{r3}
 8005a98:	469e      	mov	lr, r3
 8005a9a:	4770      	bx	lr
